# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module SimilarEnums
  extend FFI::Library
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:enum_a).</em>
  # 
  # === Options:
  # :enum_a_a ::
  #   
  # :enum_a_b ::
  #   
  # 
  # @method _enum_enum_a_
  # @return [Symbol]
  # @scope class
  enum :enum_a, [
    :enum_a_a, 0,  #0x0
    :enum_a_b, 1,  #0x1
  ]
  
  ENUM_A_A = 0  #0x0
  
  ENUM_A_B = 1  #0x1
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:enum_b).</em>
  # 
  # === Options:
  # :enum_b_default ::
  #   
  # :enum_b_a ::
  #   
  # :enum_b_b ::
  #   
  # 
  # @method _enum_enum_b_
  # @return [Symbol]
  # @scope class
  enum :enum_b, [
    :enum_b_default, 0,  #0x0
    :enum_b_a, 1,  #0x1
    :enum_b_b, 2,  #0x2
  ]
  
  ENUM_B_DEFAULT = 0  #0x0
  
  ENUM_B_A = 1  #0x1
  
  ENUM_B_B = 2  #0x2
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:).</em>
  # 
  # === Options:
  # :a ::
  #   
  # :b ::
  #   
  # 
  # @method _enum__
  # @return [Symbol]
  # @scope class
  enum  [
    :a, 0,  #0x0
    :b, 1,  #0x1
  ]
  
  A = 0  #0x0
  
  B = 1  #0x1
  
end
