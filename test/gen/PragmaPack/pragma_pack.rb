# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module PragmaPack
  extend FFI::Library
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class StructDefaultA < FFI::Struct
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct2A < FFI::Struct
    packed(2)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct4A < FFI::Struct
    packed(4)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct4B < FFI::Struct
    packed(4)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct2B < FFI::Struct
    packed(2)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct2C < FFI::Struct
    packed(2)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct8A < FFI::Struct
    packed(8)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct16A < FFI::Struct
    packed(16)
    layout :a, :char,
           :b, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :a ::
  #   (Integer) 
  # :b ::
  #   (Integer) 
  class Struct4C < FFI::Struct
    packed(4)
    layout :a, :char,
           :b, :int
  end
  
end
