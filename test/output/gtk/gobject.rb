# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module GObject
  extend FFI::Library
  ffi_lib 'libgobject-2.0-0'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  G_SIGNAL_FLAGS_MASK = 0x1ff
  
  G_SIGNAL_MATCH_MASK = 0x3f
  
  # (Not documented)
  module GTypePluginWrappers
    # @return [nil] 
    def use()
      GObject.g_type_plugin_use(self)
    end
    
    # @return [nil] 
    def unuse()
      GObject.g_type_plugin_unuse(self)
    end
    
    # @param [Integer] g_type 
    # @param [FFI::Pointer(*GTypeInfo)] info 
    # @param [FFI::Pointer(*GTypeValueTable)] value_table 
    # @return [nil] 
    def complete_type_info(g_type, info, value_table)
      GObject.g_type_plugin_complete_type_info(self, g_type, info, value_table)
    end
    
    # @param [Integer] instance_type 
    # @param [Integer] interface_type 
    # @param [FFI::Pointer(*GInterfaceInfo)] info 
    # @return [nil] 
    def complete_interface_info(instance_type, interface_type, info)
      GObject.g_type_plugin_complete_interface_info(self, instance_type, interface_type, info)
    end
  end
  
  class GTypePlugin < FFI::Struct
    include GTypePluginWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type ::
  #   (Integer) < private >
  module GTypeClassWrappers
    # @param [Integer] private_type 
    # @return [FFI::Pointer(Gpointer)] 
    def get_private(private_type)
      GObject.g_type_class_get_private(self, private_type)
    end
  end
  
  class GTypeClass < FFI::Struct
    include GTypeClassWrappers
    layout :g_type, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_class ::
  #   (GTypeClass) < private >
  module GTypeInstanceWrappers
    # @param [Integer] private_type 
    # @return [FFI::Pointer(Gpointer)] 
    def get_private(private_type)
      GObject.g_type_instance_get_private(self, private_type)
    end
  end
  
  class GTypeInstance < FFI::Struct
    include GTypeInstanceWrappers
    layout :g_class, GTypeClass
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type ::
  #   (Integer) iface type
  # :g_instance_type ::
  #   (Integer) 
  class GTypeInterface < FFI::Struct
    layout :g_type, :uint,
           :g_instance_type, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :type ::
  #   (Integer) 
  # :type_name ::
  #   (String) 
  # :class_size ::
  #   (Integer) 
  # :instance_size ::
  #   (Integer) 
  class GTypeQuery < FFI::Struct
    layout :type, :uint,
           :type_name, :string,
           :class_size, :uint,
           :instance_size, :uint
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_type_debug_flags).</em>
  # 
  # === Options:
  # :none ::
  #   < skip >
  # :objects ::
  #   
  # :signals ::
  #   
  # :mask ::
  #   
  # 
  # @method _enum_g_type_debug_flags_
  # @return [Symbol]
  # @scope class
  enum :g_type_debug_flags, [
    :none, 0,
    :objects, 1,
    :signals, 2,
    :mask, 3
  ]
  
  # (Not documented)
  # 
  # @method g_type_init()
  # @return [nil] 
  # @scope class
  attach_function :g_type_init, :g_type_init, [], :void
  
  # (Not documented)
  # 
  # @method g_type_init_with_debug_flags(debug_flags)
  # @param [Symbol from _enum_g_type_debug_flags_] debug_flags 
  # @return [nil] 
  # @scope class
  attach_function :g_type_init_with_debug_flags, :g_type_init_with_debug_flags, [:g_type_debug_flags], :void
  
  # (Not documented)
  # 
  # @method g_type_name(type)
  # @param [Integer] type 
  # @return [String] 
  # @scope class
  attach_function :g_type_name, :g_type_name, [:uint], :string
  
  # (Not documented)
  # 
  # @method g_type_qname(type)
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_qname, :g_type_qname, [:uint], :uint
  
  # (Not documented)
  # 
  # @method g_type_from_name(name)
  # @param [String] name 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_from_name, :g_type_from_name, [:string], :uint
  
  # (Not documented)
  # 
  # @method g_type_parent(type)
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_parent, :g_type_parent, [:uint], :uint
  
  # (Not documented)
  # 
  # @method g_type_depth(type)
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_depth, :g_type_depth, [:uint], :uint
  
  # (Not documented)
  # 
  # @method g_type_next_base(leaf_type, root_type)
  # @param [Integer] leaf_type 
  # @param [Integer] root_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_next_base, :g_type_next_base, [:uint, :uint], :uint
  
  # (Not documented)
  # 
  # @method g_type_is_a(type, is_a_type)
  # @param [Integer] type 
  # @param [Integer] is_a_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_is_a, :g_type_is_a, [:uint, :uint], :int
  
  # (Not documented)
  # 
  # @method g_type_class_ref(type)
  # @param [Integer] type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_class_ref, :g_type_class_ref, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_class_peek(type)
  # @param [Integer] type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_class_peek, :g_type_class_peek, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_class_peek_static(type)
  # @param [Integer] type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_class_peek_static, :g_type_class_peek_static, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_class_unref(g_class)
  # @param [FFI::Pointer(Gpointer)] g_class 
  # @return [nil] 
  # @scope class
  attach_function :g_type_class_unref, :g_type_class_unref, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_type_class_peek_parent(g_class)
  # @param [FFI::Pointer(Gpointer)] g_class 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_class_peek_parent, :g_type_class_peek_parent, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_type_interface_peek(instance_class, iface_type)
  # @param [FFI::Pointer(Gpointer)] instance_class 
  # @param [Integer] iface_type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_interface_peek, :g_type_interface_peek, [:pointer, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_interface_peek_parent(g_iface)
  # @param [FFI::Pointer(Gpointer)] g_iface 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_interface_peek_parent, :g_type_interface_peek_parent, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_type_default_interface_ref(g_type)
  # @param [Integer] g_type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_default_interface_ref, :g_type_default_interface_ref, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_default_interface_peek(g_type)
  # @param [Integer] g_type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_default_interface_peek, :g_type_default_interface_peek, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_default_interface_unref(g_iface)
  # @param [FFI::Pointer(Gpointer)] g_iface 
  # @return [nil] 
  # @scope class
  attach_function :g_type_default_interface_unref, :g_type_default_interface_unref, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_type_children(type, n_children)
  # @param [Integer] type 
  # @param [FFI::Pointer(*Guint)] n_children 
  # @return [FFI::Pointer(*GType)] 
  # @scope class
  attach_function :g_type_children, :g_type_children, [:uint, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_type_interfaces(type, n_interfaces)
  # @param [Integer] type 
  # @param [FFI::Pointer(*Guint)] n_interfaces 
  # @return [FFI::Pointer(*GType)] 
  # @scope class
  attach_function :g_type_interfaces, :g_type_interfaces, [:uint, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_type_set_qdata(type, quark, data)
  # @param [Integer] type 
  # @param [Integer] quark 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_type_set_qdata, :g_type_set_qdata, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_type_get_qdata(type, quark)
  # @param [Integer] type 
  # @param [Integer] quark 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_get_qdata, :g_type_get_qdata, [:uint, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_query(type, query)
  # @param [Integer] type 
  # @param [GTypeQuery] query 
  # @return [nil] 
  # @scope class
  attach_function :g_type_query, :g_type_query, [:uint, GTypeQuery], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_class_init_func_(class_data)
  # @param [FFI::Pointer(Gpointer)] class_data 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_class_init_func, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_class_finalize_func_(class_data)
  # @param [FFI::Pointer(Gpointer)] class_data 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_class_finalize_func, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_instance_init_func_(g_class)
  # @param [FFI::Pointer(Gpointer)] g_class 
  # @return [GTypeInstance] 
  # @scope class
  callback :g_instance_init_func, [:pointer], GTypeInstance
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_interface_init_func_(iface_data)
  # @param [FFI::Pointer(Gpointer)] iface_data 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_interface_init_func, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_interface_finalize_func_(iface_data)
  # @param [FFI::Pointer(Gpointer)] iface_data 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_interface_finalize_func, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_type_class_cache_func_(cache_data, g_class)
  # @param [FFI::Pointer(Gpointer)] cache_data 
  # @param [GTypeClass] g_class 
  # @return [Integer] 
  # @scope class
  callback :g_type_class_cache_func, [:pointer, GTypeClass], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_type_interface_check_func_(g_iface)
  # @param [FFI::Pointer(Gpointer)] g_iface 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_type_interface_check_func, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_type_fundamental_flags).</em>
  # 
  # === Options:
  # :flag_classed ::
  #   < skip >
  # :flag_instantiatable ::
  #   
  # :flag_derivable ::
  #   
  # :flag_deep_derivable ::
  #   
  # 
  # @method _enum_g_type_fundamental_flags_
  # @return [Symbol]
  # @scope class
  enum :g_type_fundamental_flags, [
    :flag_classed, 1,
    :flag_instantiatable, 2,
    :flag_derivable, 4,
    :flag_deep_derivable, 8
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_type_flags).</em>
  # 
  # === Options:
  # :flag_abstract ::
  #   < skip >
  # :flag_value_abstract ::
  #   
  # 
  # @method _enum_g_type_flags_
  # @return [Symbol]
  # @scope class
  enum :g_type_flags, [
    :flag_abstract, 16,
    :flag_value_abstract, 32
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :class_size ::
  #   (Integer) interface types, classed types, instantiated types
  # :base_init ::
  #   (FFI::Pointer(GBaseInitFunc)) 
  # :base_finalize ::
  #   (FFI::Pointer(GBaseFinalizeFunc)) 
  # :class_init ::
  #   (Proc(_callback_g_class_init_func_)) interface types, classed types, instantiated types
  # :class_finalize ::
  #   (Proc(_callback_g_class_finalize_func_)) 
  # :class_data ::
  #   (FFI::Pointer(Gconstpointer)) 
  # :instance_size ::
  #   (Integer) instantiated types
  # :n_preallocs ::
  #   (Integer) 
  # :instance_init ::
  #   (Proc(_callback_g_instance_init_func_)) 
  # :value_table ::
  #   (FFI::Pointer(*GTypeValueTable)) value handling
  class GTypeInfo < FFI::Struct
    layout :class_size, :ushort,
           :base_init, :pointer,
           :base_finalize, :pointer,
           :class_init, :g_class_init_func,
           :class_finalize, :g_class_finalize_func,
           :class_data, :pointer,
           :instance_size, :ushort,
           :n_preallocs, :ushort,
           :instance_init, :g_instance_init_func,
           :value_table, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :type_flags ::
  #   (Symbol from _enum_g_type_fundamental_flags_) 
  class GTypeFundamentalInfo < FFI::Struct
    layout :type_flags, :g_type_fundamental_flags
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :interface_init ::
  #   (Proc(_callback_g_interface_init_func_)) 
  # :interface_finalize ::
  #   (Proc(_callback_g_interface_finalize_func_)) 
  # :interface_data ::
  #   (FFI::Pointer(Gpointer)) 
  class GInterfaceInfo < FFI::Struct
    layout :interface_init, :g_interface_init_func,
           :interface_finalize, :g_interface_finalize_func,
           :interface_data, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :value_init ::
  #   (FFI::Pointer(*)) 
  # :value_free ::
  #   (FFI::Pointer(*)) 
  # :value_copy ::
  #   (FFI::Pointer(*)) 
  # :value_peek_pointer ::
  #   (FFI::Pointer(*)) varargs functionality (optional)
  # :collect_format ::
  #   (String) 
  # :collect_value ::
  #   (FFI::Pointer(*)) 
  # :lcopy_format ::
  #   (String) 
  # :lcopy_value ::
  #   (FFI::Pointer(*)) 
  class GTypeValueTable < FFI::Struct
    layout :value_init, :pointer,
           :value_free, :pointer,
           :value_copy, :pointer,
           :value_peek_pointer, :pointer,
           :collect_format, :string,
           :collect_value, :pointer,
           :lcopy_format, :string,
           :lcopy_value, :pointer
  end
  
  # (Not documented)
  # 
  # @method g_type_register_static(parent_type, type_name, info, flags)
  # @param [Integer] parent_type 
  # @param [String] type_name 
  # @param [GTypeInfo] info 
  # @param [Symbol from _enum_g_type_flags_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_register_static, :g_type_register_static, [:uint, :string, GTypeInfo, :g_type_flags], :uint
  
  # (Not documented)
  # 
  # @method g_type_register_static_simple(parent_type, type_name, class_size, class_init, instance_size, instance_init, flags)
  # @param [Integer] parent_type 
  # @param [String] type_name 
  # @param [Integer] class_size 
  # @param [Proc(_callback_g_class_init_func_)] class_init 
  # @param [Integer] instance_size 
  # @param [Proc(_callback_g_instance_init_func_)] instance_init 
  # @param [Symbol from _enum_g_type_flags_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_register_static_simple, :g_type_register_static_simple, [:uint, :string, :uint, :g_class_init_func, :uint, :g_instance_init_func, :g_type_flags], :uint
  
  # (Not documented)
  # 
  # @method g_type_register_dynamic(parent_type, type_name, plugin, flags)
  # @param [Integer] parent_type 
  # @param [String] type_name 
  # @param [GTypePlugin] plugin 
  # @param [Symbol from _enum_g_type_flags_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_register_dynamic, :g_type_register_dynamic, [:uint, :string, GTypePlugin, :g_type_flags], :uint
  
  # (Not documented)
  # 
  # @method g_type_register_fundamental(type_id, type_name, info, finfo, flags)
  # @param [Integer] type_id 
  # @param [String] type_name 
  # @param [GTypeInfo] info 
  # @param [GTypeFundamentalInfo] finfo 
  # @param [Symbol from _enum_g_type_flags_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_register_fundamental, :g_type_register_fundamental, [:uint, :string, GTypeInfo, GTypeFundamentalInfo, :g_type_flags], :uint
  
  # (Not documented)
  # 
  # @method g_type_add_interface_static(instance_type, interface_type, info)
  # @param [Integer] instance_type 
  # @param [Integer] interface_type 
  # @param [GInterfaceInfo] info 
  # @return [nil] 
  # @scope class
  attach_function :g_type_add_interface_static, :g_type_add_interface_static, [:uint, :uint, GInterfaceInfo], :void
  
  # (Not documented)
  # 
  # @method g_type_add_interface_dynamic(instance_type, interface_type, plugin)
  # @param [Integer] instance_type 
  # @param [Integer] interface_type 
  # @param [GTypePlugin] plugin 
  # @return [nil] 
  # @scope class
  attach_function :g_type_add_interface_dynamic, :g_type_add_interface_dynamic, [:uint, :uint, GTypePlugin], :void
  
  # (Not documented)
  # 
  # @method g_type_interface_add_prerequisite(interface_type, prerequisite_type)
  # @param [Integer] interface_type 
  # @param [Integer] prerequisite_type 
  # @return [nil] 
  # @scope class
  attach_function :g_type_interface_add_prerequisite, :g_type_interface_add_prerequisite, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method g_type_interface_prerequisites(interface_type, n_prerequisites)
  # @param [Integer] interface_type 
  # @param [FFI::Pointer(*Guint)] n_prerequisites 
  # @return [FFI::Pointer(*GType)] 
  # @scope class
  attach_function :g_type_interface_prerequisites, :g_type_interface_prerequisites, [:uint, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_type_class_add_private(g_class, private_size)
  # @param [FFI::Pointer(Gpointer)] g_class 
  # @param [Integer] private_size 
  # @return [nil] 
  # @scope class
  attach_function :g_type_class_add_private, :g_type_class_add_private, [:pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method g_type_instance_get_private(instance, private_type)
  # @param [GTypeInstance] instance 
  # @param [Integer] private_type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_instance_get_private, :g_type_instance_get_private, [GTypeInstance, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_add_class_private(class_type, private_size)
  # @param [Integer] class_type 
  # @param [Integer] private_size 
  # @return [nil] 
  # @scope class
  attach_function :g_type_add_class_private, :g_type_add_class_private, [:uint, :uint], :void
  
  # (Not documented)
  # 
  # @method g_type_class_get_private(klass, private_type)
  # @param [GTypeClass] klass 
  # @param [Integer] private_type 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_type_class_get_private, :g_type_class_get_private, [GTypeClass, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_type_ensure(type)
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :g_type_ensure, :g_type_ensure, [:uint], :void
  
  # (Not documented)
  # 
  # @method g_type_get_plugin(type)
  # @param [Integer] type 
  # @return [GTypePlugin] 
  # @scope class
  attach_function :g_type_get_plugin, :g_type_get_plugin, [:uint], GTypePlugin
  
  # (Not documented)
  # 
  # @method g_type_interface_get_plugin(instance_type, interface_type)
  # @param [Integer] instance_type 
  # @param [Integer] interface_type 
  # @return [GTypePlugin] 
  # @scope class
  attach_function :g_type_interface_get_plugin, :g_type_interface_get_plugin, [:uint, :uint], GTypePlugin
  
  # (Not documented)
  # 
  # @method g_type_fundamental_next()
  # @return [Integer] 
  # @scope class
  attach_function :g_type_fundamental_next, :g_type_fundamental_next, [], :uint
  
  # (Not documented)
  # 
  # @method g_type_fundamental(type_id)
  # @param [Integer] type_id 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_fundamental, :g_type_fundamental, [:uint], :uint
  
  # (Not documented)
  # 
  # @method g_type_create_instance(type)
  # @param [Integer] type 
  # @return [GTypeInstance] 
  # @scope class
  attach_function :g_type_create_instance, :g_type_create_instance, [:uint], GTypeInstance
  
  # (Not documented)
  # 
  # @method g_type_free_instance(instance)
  # @param [GTypeInstance] instance 
  # @return [nil] 
  # @scope class
  attach_function :g_type_free_instance, :g_type_free_instance, [GTypeInstance], :void
  
  # (Not documented)
  # 
  # @method g_type_add_class_cache_func(cache_data, cache_func)
  # @param [FFI::Pointer(Gpointer)] cache_data 
  # @param [Proc(_callback_g_type_class_cache_func_)] cache_func 
  # @return [nil] 
  # @scope class
  attach_function :g_type_add_class_cache_func, :g_type_add_class_cache_func, [:pointer, :g_type_class_cache_func], :void
  
  # (Not documented)
  # 
  # @method g_type_remove_class_cache_func(cache_data, cache_func)
  # @param [FFI::Pointer(Gpointer)] cache_data 
  # @param [Proc(_callback_g_type_class_cache_func_)] cache_func 
  # @return [nil] 
  # @scope class
  attach_function :g_type_remove_class_cache_func, :g_type_remove_class_cache_func, [:pointer, :g_type_class_cache_func], :void
  
  # (Not documented)
  # 
  # @method g_type_class_unref_uncached(g_class)
  # @param [FFI::Pointer(Gpointer)] g_class 
  # @return [nil] 
  # @scope class
  attach_function :g_type_class_unref_uncached, :g_type_class_unref_uncached, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_type_add_interface_check(check_data, check_func)
  # @param [FFI::Pointer(Gpointer)] check_data 
  # @param [Proc(_callback_g_type_interface_check_func_)] check_func 
  # @return [nil] 
  # @scope class
  attach_function :g_type_add_interface_check, :g_type_add_interface_check, [:pointer, :g_type_interface_check_func], :void
  
  # (Not documented)
  # 
  # @method g_type_remove_interface_check(check_data, check_func)
  # @param [FFI::Pointer(Gpointer)] check_data 
  # @param [Proc(_callback_g_type_interface_check_func_)] check_func 
  # @return [nil] 
  # @scope class
  attach_function :g_type_remove_interface_check, :g_type_remove_interface_check, [:pointer, :g_type_interface_check_func], :void
  
  # (Not documented)
  # 
  # @method g_type_value_table_peek(type)
  # @param [Integer] type 
  # @return [GTypeValueTable] 
  # @scope class
  attach_function :g_type_value_table_peek, :g_type_value_table_peek, [:uint], GTypeValueTable
  
  # (Not documented)
  # 
  # @method g_type_check_instance(instance)
  # @param [GTypeInstance] instance 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_check_instance, :g_type_check_instance, [GTypeInstance], :int
  
  # (Not documented)
  # 
  # @method g_type_check_instance_cast(instance, iface_type)
  # @param [GTypeInstance] instance 
  # @param [Integer] iface_type 
  # @return [GTypeInstance] 
  # @scope class
  attach_function :g_type_check_instance_cast, :g_type_check_instance_cast, [GTypeInstance, :uint], GTypeInstance
  
  # (Not documented)
  # 
  # @method g_type_check_instance_is_a(instance, iface_type)
  # @param [GTypeInstance] instance 
  # @param [Integer] iface_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_check_instance_is_a, :g_type_check_instance_is_a, [GTypeInstance, :uint], :int
  
  # (Not documented)
  # 
  # @method g_type_check_class_cast(g_class, is_a_type)
  # @param [GTypeClass] g_class 
  # @param [Integer] is_a_type 
  # @return [GTypeClass] 
  # @scope class
  attach_function :g_type_check_class_cast, :g_type_check_class_cast, [GTypeClass, :uint], GTypeClass
  
  # (Not documented)
  # 
  # @method g_type_check_class_is_a(g_class, is_a_type)
  # @param [GTypeClass] g_class 
  # @param [Integer] is_a_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_check_class_is_a, :g_type_check_class_is_a, [GTypeClass, :uint], :int
  
  # (Not documented)
  # 
  # @method g_type_check_is_value_type(type)
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_check_is_value_type, :g_type_check_is_value_type, [:uint], :int
  
  # (Not documented)
  # 
  # @method g_type_check_value(value)
  # @param [FFI::Pointer(*GValue)] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_check_value, :g_type_check_value, [:pointer], :int
  
  # (Not documented)
  # 
  # @method g_type_check_value_holds(value, type)
  # @param [FFI::Pointer(*GValue)] value 
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_check_value_holds, :g_type_check_value_holds, [:pointer, :uint], :int
  
  # (Not documented)
  # 
  # @method g_type_test_flags(type, flags)
  # @param [Integer] type 
  # @param [Integer] flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_test_flags, :g_type_test_flags, [:uint, :uint], :int
  
  # (Not documented)
  # 
  # @method g_type_name_from_instance(instance)
  # @param [GTypeInstance] instance 
  # @return [String] 
  # @scope class
  attach_function :g_type_name_from_instance, :g_type_name_from_instance, [GTypeInstance], :string
  
  # (Not documented)
  # 
  # @method g_type_name_from_class(g_class)
  # @param [GTypeClass] g_class 
  # @return [String] 
  # @scope class
  attach_function :g_type_name_from_class, :g_type_name_from_class, [GTypeClass], :string
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_value_transform_(dest_value)
  # @param [FFI::Pointer(*GValue)] dest_value 
  # @return [FFI::Pointer(*GValue)] 
  # @scope class
  callback :g_value_transform, [:pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :v_int ::
  #   (Integer) 
  # :v_uint ::
  #   (Integer) 
  # :v_long ::
  #   (Integer) 
  # :v_ulong ::
  #   (Integer) 
  # :v_int64 ::
  #   (Integer) 
  # :v_uint64 ::
  #   (Integer) 
  # :v_float ::
  #   (Float) 
  # :v_double ::
  #   (Float) 
  # :v_pointer ::
  #   (FFI::Pointer(Gpointer)) 
  class GValueData < FFI::Union
    layout :v_int, :int,
           :v_uint, :uint,
           :v_long, :long,
           :v_ulong, :ulong,
           :v_int64, :long_long,
           :v_uint64, :ulong_long,
           :v_float, :float,
           :v_double, :double,
           :v_pointer, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type ::
  #   (Integer) < private >
  # :data ::
  #   (Array<GValueData>) public for GTypeValueTable methods
  module GValueWrappers
    # @param [Integer] g_type 
    # @return [GValue] 
    def init(g_type)
      GValue.new GObject.g_value_init(self, g_type)
    end
    
    # @param [FFI::Pointer(*GValue)] dest_value 
    # @return [nil] 
    def copy(dest_value)
      GObject.g_value_copy(self, dest_value)
    end
    
    # @return [GValue] 
    def reset()
      GValue.new GObject.g_value_reset(self)
    end
    
    # @return [nil] 
    def unset()
      GObject.g_value_unset(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] instance 
    # @return [nil] 
    def set_instance(instance)
      GObject.g_value_set_instance(self, instance)
    end
    
    # @return [Integer] 
    def fits_pointer()
      GObject.g_value_fits_pointer(self)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def peek_pointer()
      GObject.g_value_peek_pointer(self)
    end
    
    # @param [FFI::Pointer(*GValue)] dest_value 
    # @return [Integer] 
    def transform(dest_value)
      GObject.g_value_transform(self, dest_value)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] param 
    # @return [nil] 
    def set_param(param)
      GObject.g_value_set_param(self, param)
    end
    
    # @return [GParamSpec] 
    def get_param()
      GParamSpec.new GObject.g_value_get_param(self)
    end
    
    # @return [GParamSpec] 
    def dup_param()
      GParamSpec.new GObject.g_value_dup_param(self)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] param 
    # @return [nil] 
    def take_param(param)
      GObject.g_value_take_param(self, param)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] param 
    # @return [nil] 
    def set_param_take_ownership(param)
      GObject.g_value_set_param_take_ownership(self, param)
    end
    
    # @param [FFI::Pointer(Gconstpointer)] v_boxed 
    # @return [nil] 
    def set_boxed(v_boxed)
      GObject.g_value_set_boxed(self, v_boxed)
    end
    
    # @param [FFI::Pointer(Gconstpointer)] v_boxed 
    # @return [nil] 
    def set_static_boxed(v_boxed)
      GObject.g_value_set_static_boxed(self, v_boxed)
    end
    
    # @param [FFI::Pointer(Gconstpointer)] v_boxed 
    # @return [nil] 
    def take_boxed(v_boxed)
      GObject.g_value_take_boxed(self, v_boxed)
    end
    
    # @param [FFI::Pointer(Gconstpointer)] v_boxed 
    # @return [nil] 
    def set_boxed_take_ownership(v_boxed)
      GObject.g_value_set_boxed_take_ownership(self, v_boxed)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def get_boxed()
      GObject.g_value_get_boxed(self)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def dup_boxed()
      GObject.g_value_dup_boxed(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] v_object 
    # @return [nil] 
    def set_object(v_object)
      GObject.g_value_set_object(self, v_object)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def get_object()
      GObject.g_value_get_object(self)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def dup_object()
      GObject.g_value_dup_object(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] v_object 
    # @return [nil] 
    def take_object(v_object)
      GObject.g_value_take_object(self, v_object)
    end
    
    # @param [FFI::Pointer(Gpointer)] v_object 
    # @return [nil] 
    def set_object_take_ownership(v_object)
      GObject.g_value_set_object_take_ownership(self, v_object)
    end
    
    # @param [Integer] v_enum 
    # @return [nil] 
    def set_enum(v_enum)
      GObject.g_value_set_enum(self, v_enum)
    end
    
    # @return [Integer] 
    def get_enum()
      GObject.g_value_get_enum(self)
    end
    
    # @param [Integer] v_flags 
    # @return [nil] 
    def set_flags(v_flags)
      GObject.g_value_set_flags(self, v_flags)
    end
    
    # @return [Integer] 
    def get_flags()
      GObject.g_value_get_flags(self)
    end
    
    # @param [Integer] v_char 
    # @return [nil] 
    def set_char(v_char)
      GObject.g_value_set_char(self, v_char)
    end
    
    # @return [Integer] 
    def get_char()
      GObject.g_value_get_char(self)
    end
    
    # @param [Integer] v_char 
    # @return [nil] 
    def set_schar(v_char)
      GObject.g_value_set_schar(self, v_char)
    end
    
    # @return [Integer] 
    def get_schar()
      GObject.g_value_get_schar(self)
    end
    
    # @param [Integer] v_uchar 
    # @return [nil] 
    def set_uchar(v_uchar)
      GObject.g_value_set_uchar(self, v_uchar)
    end
    
    # @return [Integer] 
    def get_uchar()
      GObject.g_value_get_uchar(self)
    end
    
    # @param [Integer] v_boolean 
    # @return [nil] 
    def set_boolean(v_boolean)
      GObject.g_value_set_boolean(self, v_boolean)
    end
    
    # @return [Integer] 
    def get_boolean()
      GObject.g_value_get_boolean(self)
    end
    
    # @param [Integer] v_int 
    # @return [nil] 
    def set_int(v_int)
      GObject.g_value_set_int(self, v_int)
    end
    
    # @return [Integer] 
    def get_int()
      GObject.g_value_get_int(self)
    end
    
    # @param [Integer] v_uint 
    # @return [nil] 
    def set_uint(v_uint)
      GObject.g_value_set_uint(self, v_uint)
    end
    
    # @return [Integer] 
    def get_uint()
      GObject.g_value_get_uint(self)
    end
    
    # @param [Integer] v_long 
    # @return [nil] 
    def set_long(v_long)
      GObject.g_value_set_long(self, v_long)
    end
    
    # @return [Integer] 
    def get_long()
      GObject.g_value_get_long(self)
    end
    
    # @param [Integer] v_ulong 
    # @return [nil] 
    def set_ulong(v_ulong)
      GObject.g_value_set_ulong(self, v_ulong)
    end
    
    # @return [Integer] 
    def get_ulong()
      GObject.g_value_get_ulong(self)
    end
    
    # @param [Integer] v_int64 
    # @return [nil] 
    def set_int64(v_int64)
      GObject.g_value_set_int64(self, v_int64)
    end
    
    # @return [Integer] 
    def get_int64()
      GObject.g_value_get_int64(self)
    end
    
    # @param [Integer] v_uint64 
    # @return [nil] 
    def set_uint64(v_uint64)
      GObject.g_value_set_uint64(self, v_uint64)
    end
    
    # @return [Integer] 
    def get_uint64()
      GObject.g_value_get_uint64(self)
    end
    
    # @param [Float] v_float 
    # @return [nil] 
    def set_float(v_float)
      GObject.g_value_set_float(self, v_float)
    end
    
    # @return [Float] 
    def get_float()
      GObject.g_value_get_float(self)
    end
    
    # @param [Float] v_double 
    # @return [nil] 
    def set_double(v_double)
      GObject.g_value_set_double(self, v_double)
    end
    
    # @return [Float] 
    def get_double()
      GObject.g_value_get_double(self)
    end
    
    # @param [String] v_string 
    # @return [nil] 
    def set_string(v_string)
      GObject.g_value_set_string(self, v_string)
    end
    
    # @param [String] v_string 
    # @return [nil] 
    def set_static_string(v_string)
      GObject.g_value_set_static_string(self, v_string)
    end
    
    # @return [String] 
    def get_string()
      GObject.g_value_get_string(self)
    end
    
    # @return [String] 
    def dup_string()
      GObject.g_value_dup_string(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] v_pointer 
    # @return [nil] 
    def set_pointer(v_pointer)
      GObject.g_value_set_pointer(self, v_pointer)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def get_pointer()
      GObject.g_value_get_pointer(self)
    end
    
    # @param [Integer] v_gtype 
    # @return [nil] 
    def set_gtype(v_gtype)
      GObject.g_value_set_gtype(self, v_gtype)
    end
    
    # @return [Integer] 
    def get_gtype()
      GObject.g_value_get_gtype(self)
    end
    
    # @param [FFI::Pointer(*GVariant)] variant 
    # @return [nil] 
    def set_variant(variant)
      GObject.g_value_set_variant(self, variant)
    end
    
    # @param [FFI::Pointer(*GVariant)] variant 
    # @return [nil] 
    def take_variant(variant)
      GObject.g_value_take_variant(self, variant)
    end
    
    # @return [FFI::Pointer(*GVariant)] 
    def get_variant()
      GObject.g_value_get_variant(self)
    end
    
    # @return [FFI::Pointer(*GVariant)] 
    def dup_variant()
      GObject.g_value_dup_variant(self)
    end
    
    # @param [String] v_string 
    # @return [nil] 
    def take_string(v_string)
      GObject.g_value_take_string(self, v_string)
    end
    
    # @param [String] v_string 
    # @return [nil] 
    def set_string_take_ownership(v_string)
      GObject.g_value_set_string_take_ownership(self, v_string)
    end
  end
  
  class GValue < FFI::Struct
    include GValueWrappers
    layout :g_type, :uint,
           :data, [GValueData.by_value, 2]
  end
  
  # (Not documented)
  # 
  # @method g_value_init(value, g_type)
  # @param [GValue] value 
  # @param [Integer] g_type 
  # @return [GValue] 
  # @scope class
  attach_function :g_value_init, :g_value_init, [GValue, :uint], GValue
  
  # (Not documented)
  # 
  # @method g_value_copy(src_value, dest_value)
  # @param [GValue] src_value 
  # @param [GValue] dest_value 
  # @return [nil] 
  # @scope class
  attach_function :g_value_copy, :g_value_copy, [GValue, GValue], :void
  
  # (Not documented)
  # 
  # @method g_value_reset(value)
  # @param [GValue] value 
  # @return [GValue] 
  # @scope class
  attach_function :g_value_reset, :g_value_reset, [GValue], GValue
  
  # (Not documented)
  # 
  # @method g_value_unset(value)
  # @param [GValue] value 
  # @return [nil] 
  # @scope class
  attach_function :g_value_unset, :g_value_unset, [GValue], :void
  
  # (Not documented)
  # 
  # @method g_value_set_instance(value, instance)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_instance, :g_value_set_instance, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_fits_pointer(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_fits_pointer, :g_value_fits_pointer, [GValue], :int
  
  # (Not documented)
  # 
  # @method g_value_peek_pointer(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_value_peek_pointer, :g_value_peek_pointer, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_value_type_compatible(src_type, dest_type)
  # @param [Integer] src_type 
  # @param [Integer] dest_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_type_compatible, :g_value_type_compatible, [:uint, :uint], :int
  
  # (Not documented)
  # 
  # @method g_value_type_transformable(src_type, dest_type)
  # @param [Integer] src_type 
  # @param [Integer] dest_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_type_transformable, :g_value_type_transformable, [:uint, :uint], :int
  
  # (Not documented)
  # 
  # @method g_value_transform(src_value, dest_value)
  # @param [GValue] src_value 
  # @param [GValue] dest_value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_transform, :g_value_transform, [GValue, GValue], :int
  
  # (Not documented)
  # 
  # @method g_value_register_transform_func(src_type, dest_type, transform_func)
  # @param [Integer] src_type 
  # @param [Integer] dest_type 
  # @param [Proc(_callback_g_value_transform_)] transform_func 
  # @return [nil] 
  # @scope class
  attach_function :g_value_register_transform_func, :g_value_register_transform_func, [:uint, :uint, :g_value_transform], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_param_flags).</em>
  # 
  # === Options:
  # :readable ::
  #   
  # :writable ::
  #   
  # :construct ::
  #   
  # :construct_only ::
  #   
  # :lax_validation ::
  #   
  # :static_name ::
  #   
  # :static_nick ::
  #   
  # :static_blurb ::
  #   
  # :deprecated ::
  #   User defined flags go up to 30
  # 
  # @method _enum_g_param_flags_
  # @return [Symbol]
  # @scope class
  enum :g_param_flags, [
    :readable, 1,
    :writable, 2,
    :construct, 4,
    :construct_only, 8,
    :lax_validation, 16,
    :static_name, 32,
    :static_nick, 64,
    :static_blurb, 128,
    :deprecated, 2147483648
  ]
  
  # (Not documented)
  module GParamSpecPoolWrappers
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @param [Integer] owner_type 
    # @return [nil] 
    def insert(pspec, owner_type)
      GObject.g_param_spec_pool_insert(self, pspec, owner_type)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @return [nil] 
    def remove(pspec)
      GObject.g_param_spec_pool_remove(self, pspec)
    end
    
    # @param [String] param_name 
    # @param [Integer] owner_type 
    # @param [Integer] walk_ancestors 
    # @return [GParamSpec] 
    def lookup(param_name, owner_type, walk_ancestors)
      GParamSpec.new GObject.g_param_spec_pool_lookup(self, param_name, owner_type, walk_ancestors)
    end
    
    # @param [Integer] owner_type 
    # @return [FFI::Pointer(*GList)] 
    def list_owned(owner_type)
      GObject.g_param_spec_pool_list_owned(self, owner_type)
    end
    
    # @param [Integer] owner_type 
    # @param [FFI::Pointer(*Guint)] n_pspecs_p 
    # @return [FFI::Pointer(**GParamSpec)] 
    def list(owner_type, n_pspecs_p)
      GObject.g_param_spec_pool_list(self, owner_type, n_pspecs_p)
    end
  end
  
  class GParamSpecPool < FFI::Struct
    include GParamSpecPoolWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type_instance ::
  #   (GTypeInstance) 
  # :name ::
  #   (String) interned string
  # :flags ::
  #   (Symbol from _enum_g_param_flags_) 
  # :value_type ::
  #   (Integer) 
  # :owner_type ::
  #   (Integer) class or interface using this property
  # :nick ::
  #   (String) < private >
  # :blurb ::
  #   (String) 
  # :qdata ::
  #   (FFI::Pointer(*GData)) 
  # :ref_count ::
  #   (Integer) 
  # :param_id ::
  #   (Integer) sort-criteria
  module GParamSpecWrappers
    # @return [GParamSpec] 
    def ref()
      GParamSpec.new GObject.g_param_spec_ref(self)
    end
    
    # @return [nil] 
    def unref()
      GObject.g_param_spec_unref(self)
    end
    
    # @return [nil] 
    def sink()
      GObject.g_param_spec_sink(self)
    end
    
    # @return [GParamSpec] 
    def ref_sink()
      GParamSpec.new GObject.g_param_spec_ref_sink(self)
    end
    
    # @param [Integer] quark 
    # @return [FFI::Pointer(Gpointer)] 
    def get_qdata(quark)
      GObject.g_param_spec_get_qdata(self, quark)
    end
    
    # @param [Integer] quark 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def set_qdata(quark, data)
      GObject.g_param_spec_set_qdata(self, quark, data)
    end
    
    # @param [Integer] quark 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_qdata_full(quark, data, destroy)
      GObject.g_param_spec_set_qdata_full(self, quark, data, destroy)
    end
    
    # @param [Integer] quark 
    # @return [FFI::Pointer(Gpointer)] 
    def steal_qdata(quark)
      GObject.g_param_spec_steal_qdata(self, quark)
    end
    
    # @return [GParamSpec] 
    def get_redirect_target()
      GParamSpec.new GObject.g_param_spec_get_redirect_target(self)
    end
    
    # @return [String] 
    def get_name()
      GObject.g_param_spec_get_name(self)
    end
    
    # @return [String] 
    def get_nick()
      GObject.g_param_spec_get_nick(self)
    end
    
    # @return [String] 
    def get_blurb()
      GObject.g_param_spec_get_blurb(self)
    end
  end
  
  class GParamSpec < FFI::Struct
    include GParamSpecWrappers
    layout :g_type_instance, GTypeInstance.by_value,
           :name, :string,
           :flags, :g_param_flags,
           :value_type, :uint,
           :owner_type, :uint,
           :nick, :string,
           :blurb, :string,
           :qdata, :pointer,
           :ref_count, :uint,
           :param_id, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type_class ::
  #   (GTypeClass) 
  # :value_type ::
  #   (Integer) 
  # :finalize ::
  #   (FFI::Pointer(*)) 
  # :value_set_default ::
  #   (FFI::Pointer(*)) GParam methods
  # :value_validate ::
  #   (FFI::Pointer(*)) 
  # :values_cmp ::
  #   (FFI::Pointer(*)) 
  # :dummy ::
  #   (Array<FFI::Pointer(*Void)>) < private >
  class GParamSpecClass < FFI::Struct
    layout :g_type_class, GTypeClass.by_value,
           :value_type, :uint,
           :finalize, :pointer,
           :value_set_default, :pointer,
           :value_validate, :pointer,
           :values_cmp, :pointer,
           :dummy, [:pointer, 4]
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) auxiliary structure for _setv() variants
  # :value ::
  #   (GValue) 
  class GParameter < FFI::Struct
    layout :name, :string,
           :value, GValue.by_value
  end
  
  # (Not documented)
  # 
  # @method g_param_spec_ref(pspec)
  # @param [GParamSpec] pspec 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_ref, :g_param_spec_ref, [GParamSpec], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_unref(pspec)
  # @param [GParamSpec] pspec 
  # @return [nil] 
  # @scope class
  attach_function :g_param_spec_unref, :g_param_spec_unref, [GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_param_spec_sink(pspec)
  # @param [GParamSpec] pspec 
  # @return [nil] 
  # @scope class
  attach_function :g_param_spec_sink, :g_param_spec_sink, [GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_param_spec_ref_sink(pspec)
  # @param [GParamSpec] pspec 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_ref_sink, :g_param_spec_ref_sink, [GParamSpec], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_get_qdata(pspec, quark)
  # @param [GParamSpec] pspec 
  # @param [Integer] quark 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_param_spec_get_qdata, :g_param_spec_get_qdata, [GParamSpec, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_param_spec_set_qdata(pspec, quark, data)
  # @param [GParamSpec] pspec 
  # @param [Integer] quark 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_param_spec_set_qdata, :g_param_spec_set_qdata, [GParamSpec, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_param_spec_set_qdata_full(pspec, quark, data, destroy)
  # @param [GParamSpec] pspec 
  # @param [Integer] quark 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :g_param_spec_set_qdata_full, :g_param_spec_set_qdata_full, [GParamSpec, :uint, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_param_spec_steal_qdata(pspec, quark)
  # @param [GParamSpec] pspec 
  # @param [Integer] quark 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_param_spec_steal_qdata, :g_param_spec_steal_qdata, [GParamSpec, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_param_spec_get_redirect_target(pspec)
  # @param [GParamSpec] pspec 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_get_redirect_target, :g_param_spec_get_redirect_target, [GParamSpec], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_value_set_default(pspec, value)
  # @param [GParamSpec] pspec 
  # @param [GValue] value 
  # @return [nil] 
  # @scope class
  attach_function :g_param_value_set_default, :g_param_value_set_default, [GParamSpec, GValue], :void
  
  # (Not documented)
  # 
  # @method g_param_value_defaults(pspec, value)
  # @param [GParamSpec] pspec 
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_param_value_defaults, :g_param_value_defaults, [GParamSpec, GValue], :int
  
  # (Not documented)
  # 
  # @method g_param_value_validate(pspec, value)
  # @param [GParamSpec] pspec 
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_param_value_validate, :g_param_value_validate, [GParamSpec, GValue], :int
  
  # (Not documented)
  # 
  # @method g_param_value_convert(pspec, src_value, dest_value, strict_validation)
  # @param [GParamSpec] pspec 
  # @param [GValue] src_value 
  # @param [GValue] dest_value 
  # @param [Integer] strict_validation 
  # @return [Integer] 
  # @scope class
  attach_function :g_param_value_convert, :g_param_value_convert, [GParamSpec, GValue, GValue, :int], :int
  
  # (Not documented)
  # 
  # @method g_param_values_cmp(pspec, value1, value2)
  # @param [GParamSpec] pspec 
  # @param [GValue] value1 
  # @param [GValue] value2 
  # @return [Integer] 
  # @scope class
  attach_function :g_param_values_cmp, :g_param_values_cmp, [GParamSpec, GValue, GValue], :int
  
  # (Not documented)
  # 
  # @method g_param_spec_get_name(pspec)
  # @param [GParamSpec] pspec 
  # @return [String] 
  # @scope class
  attach_function :g_param_spec_get_name, :g_param_spec_get_name, [GParamSpec], :string
  
  # (Not documented)
  # 
  # @method g_param_spec_get_nick(pspec)
  # @param [GParamSpec] pspec 
  # @return [String] 
  # @scope class
  attach_function :g_param_spec_get_nick, :g_param_spec_get_nick, [GParamSpec], :string
  
  # (Not documented)
  # 
  # @method g_param_spec_get_blurb(pspec)
  # @param [GParamSpec] pspec 
  # @return [String] 
  # @scope class
  attach_function :g_param_spec_get_blurb, :g_param_spec_get_blurb, [GParamSpec], :string
  
  # (Not documented)
  # 
  # @method g_value_set_param(value, param)
  # @param [GValue] value 
  # @param [GParamSpec] param 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_param, :g_value_set_param, [GValue, GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_value_get_param(value)
  # @param [GValue] value 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_value_get_param, :g_value_get_param, [GValue], GParamSpec
  
  # (Not documented)
  # 
  # @method g_value_dup_param(value)
  # @param [GValue] value 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_value_dup_param, :g_value_dup_param, [GValue], GParamSpec
  
  # (Not documented)
  # 
  # @method g_value_take_param(value, param)
  # @param [GValue] value 
  # @param [GParamSpec] param 
  # @return [nil] 
  # @scope class
  attach_function :g_value_take_param, :g_value_take_param, [GValue, GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_value_set_param_take_ownership(value, param)
  # @param [GValue] value 
  # @param [GParamSpec] param 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_param_take_ownership, :g_value_set_param_take_ownership, [GValue, GParamSpec], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :instance_size ::
  #   (Integer) obligatory
  # :n_preallocs ::
  #   (Integer) optional
  # :instance_init ::
  #   (FFI::Pointer(*)) optional
  # :value_type ::
  #   (Integer) obligatory
  # :finalize ::
  #   (FFI::Pointer(*)) optional
  # :value_set_default ::
  #   (FFI::Pointer(*)) 
  # :value_validate ::
  #   (FFI::Pointer(*)) 
  # :values_cmp ::
  #   (FFI::Pointer(*)) 
  class GParamSpecTypeInfo < FFI::Struct
    layout :instance_size, :ushort,
           :n_preallocs, :ushort,
           :instance_init, :pointer,
           :value_type, :uint,
           :finalize, :pointer,
           :value_set_default, :pointer,
           :value_validate, :pointer,
           :values_cmp, :pointer
  end
  
  # (Not documented)
  # 
  # @method g_param_type_register_static(name, pspec_info)
  # @param [String] name 
  # @param [GParamSpecTypeInfo] pspec_info 
  # @return [Integer] 
  # @scope class
  attach_function :g_param_type_register_static, :g_param_type_register_static, [:string, GParamSpecTypeInfo], :uint
  
  # (Not documented)
  # 
  # @method g_param_type_register_static_constant(name, pspec_info, opt_type)
  # @param [String] name 
  # @param [GParamSpecTypeInfo] pspec_info 
  # @param [Integer] opt_type 
  # @return [Integer] 
  # @scope class
  attach_function :g_param_type_register_static_constant, :_g_param_type_register_static_constant, [:string, GParamSpecTypeInfo, :uint], :uint
  
  # (Not documented)
  # 
  # @method g_param_spec_internal(param_type, name, nick, blurb, flags)
  # @param [Integer] param_type 
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_param_spec_internal, :g_param_spec_internal, [:uint, :string, :string, :string, :g_param_flags], :pointer
  
  # (Not documented)
  # 
  # @method g_param_spec_pool_new(type_prefixing)
  # @param [Integer] type_prefixing 
  # @return [GParamSpecPool] 
  # @scope class
  attach_function :g_param_spec_pool_new, :g_param_spec_pool_new, [:int], GParamSpecPool
  
  # (Not documented)
  # 
  # @method g_param_spec_pool_insert(pool, pspec, owner_type)
  # @param [GParamSpecPool] pool 
  # @param [GParamSpec] pspec 
  # @param [Integer] owner_type 
  # @return [nil] 
  # @scope class
  attach_function :g_param_spec_pool_insert, :g_param_spec_pool_insert, [GParamSpecPool, GParamSpec, :uint], :void
  
  # (Not documented)
  # 
  # @method g_param_spec_pool_remove(pool, pspec)
  # @param [GParamSpecPool] pool 
  # @param [GParamSpec] pspec 
  # @return [nil] 
  # @scope class
  attach_function :g_param_spec_pool_remove, :g_param_spec_pool_remove, [GParamSpecPool, GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_param_spec_pool_lookup(pool, param_name, owner_type, walk_ancestors)
  # @param [GParamSpecPool] pool 
  # @param [String] param_name 
  # @param [Integer] owner_type 
  # @param [Integer] walk_ancestors 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_pool_lookup, :g_param_spec_pool_lookup, [GParamSpecPool, :string, :uint, :int], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_pool_list_owned(pool, owner_type)
  # @param [GParamSpecPool] pool 
  # @param [Integer] owner_type 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :g_param_spec_pool_list_owned, :g_param_spec_pool_list_owned, [GParamSpecPool, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_param_spec_pool_list(pool, owner_type, n_pspecs_p)
  # @param [GParamSpecPool] pool 
  # @param [Integer] owner_type 
  # @param [FFI::Pointer(*Guint)] n_pspecs_p 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :g_param_spec_pool_list, :g_param_spec_pool_list, [GParamSpecPool, :uint, :pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_closure_notify_(closure)
  # @param [FFI::Pointer(*GClosure)] closure 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_closure_notify, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_closure_marshal_(return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [FFI::Pointer(*GClosure)] 
  # @scope class
  callback :g_closure_marshal, [GValue, :uint, GValue, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_va_closure_marshal_(return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [FFI::Pointer(*GClosure)] 
  # @scope class
  callback :g_va_closure_marshal, [GValue, :pointer, :string, :pointer, :int, :pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :data ::
  #   (FFI::Pointer(Gpointer)) 
  # :notify ::
  #   (Proc(_callback_g_closure_notify_)) 
  class GClosureNotifyData < FFI::Struct
    layout :data, :pointer,
           :notify, :g_closure_notify
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :ref_count ::
  #   (Integer) < private >
  # :meta_marshal_nouse ::
  #   (Integer) meta_marshal is not used anymore but must be zero for historical reasons
  #        as it was exposed in the G_CLOSURE_N_NOTIFIERS macro
  # :n_guards ::
  #   (Integer) 
  # :n_fnotifiers ::
  #   (Integer) finalization notifiers
  # :n_inotifiers ::
  #   (Integer) invalidation notifiers
  # :in_inotify ::
  #   (Integer) 
  # :floating ::
  #   (Integer) 
  # :derivative_flag ::
  #   (Integer) < protected >
  # :in_marshal ::
  #   (Integer) < public >
  # :is_invalid ::
  #   (Integer) 
  # :marshal ::
  #   (FFI::Pointer(*)) < private >
  # :data ::
  #   (FFI::Pointer(Gpointer)) < protected >
  # :notifiers ::
  #   (GClosureNotifyData) < private >
  module GClosureWrappers
    # @return [GClosure] 
    def ref()
      GClosure.new GObject.g_closure_ref(self)
    end
    
    # @return [nil] 
    def sink()
      GObject.g_closure_sink(self)
    end
    
    # @return [nil] 
    def unref()
      GObject.g_closure_unref(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] notify_data 
    # @param [Proc(_callback_g_closure_notify_)] notify_func 
    # @return [nil] 
    def add_finalize_notifier(notify_data, notify_func)
      GObject.g_closure_add_finalize_notifier(self, notify_data, notify_func)
    end
    
    # @param [FFI::Pointer(Gpointer)] notify_data 
    # @param [Proc(_callback_g_closure_notify_)] notify_func 
    # @return [nil] 
    def remove_finalize_notifier(notify_data, notify_func)
      GObject.g_closure_remove_finalize_notifier(self, notify_data, notify_func)
    end
    
    # @param [FFI::Pointer(Gpointer)] notify_data 
    # @param [Proc(_callback_g_closure_notify_)] notify_func 
    # @return [nil] 
    def add_invalidate_notifier(notify_data, notify_func)
      GObject.g_closure_add_invalidate_notifier(self, notify_data, notify_func)
    end
    
    # @param [FFI::Pointer(Gpointer)] notify_data 
    # @param [Proc(_callback_g_closure_notify_)] notify_func 
    # @return [nil] 
    def remove_invalidate_notifier(notify_data, notify_func)
      GObject.g_closure_remove_invalidate_notifier(self, notify_data, notify_func)
    end
    
    # @param [FFI::Pointer(Gpointer)] pre_marshal_data 
    # @param [Proc(_callback_g_closure_notify_)] pre_marshal_notify 
    # @param [FFI::Pointer(Gpointer)] post_marshal_data 
    # @param [Proc(_callback_g_closure_notify_)] post_marshal_notify 
    # @return [nil] 
    def add_marshal_guards(pre_marshal_data, pre_marshal_notify, post_marshal_data, post_marshal_notify)
      GObject.g_closure_add_marshal_guards(self, pre_marshal_data, pre_marshal_notify, post_marshal_data, post_marshal_notify)
    end
    
    # @param [Proc(_callback_g_closure_marshal_)] marshal 
    # @return [nil] 
    def set_marshal(marshal)
      GObject.g_closure_set_marshal(self, marshal)
    end
    
    # @param [FFI::Pointer(Gpointer)] marshal_data 
    # @param [Proc(_callback_g_closure_marshal_)] meta_marshal 
    # @return [nil] 
    def set_meta_marshal(marshal_data, meta_marshal)
      GObject.g_closure_set_meta_marshal(self, marshal_data, meta_marshal)
    end
    
    # @return [nil] 
    def invalidate()
      GObject.g_closure_invalidate(self)
    end
    
    # @param [GValue] return_value 
    # @param [Integer] n_param_values 
    # @param [GValue] param_values 
    # @param [FFI::Pointer(Gpointer)] invocation_hint 
    # @return [nil] 
    def invoke(return_value, n_param_values, param_values, invocation_hint)
      GObject.g_closure_invoke(self, return_value, n_param_values, param_values, invocation_hint)
    end
  end
  
  class GClosure < FFI::Struct
    include GClosureWrappers
    layout :ref_count, :uint,
           :meta_marshal_nouse, :uint,
           :n_guards, :uint,
           :n_fnotifiers, :uint,
           :n_inotifiers, :uint,
           :in_inotify, :uint,
           :floating, :uint,
           :derivative_flag, :uint,
           :in_marshal, :uint,
           :is_invalid, :uint,
           :marshal, :pointer,
           :data, :pointer,
           :notifiers, GClosureNotifyData
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :closure ::
  #   (GClosure) 
  # :callback ::
  #   (FFI::Pointer(Gpointer)) 
  class GCClosure < FFI::Struct
    layout :closure, GClosure.by_value,
           :callback, :pointer
  end
  
  # (Not documented)
  # 
  # @method g_cclosure_new(callback_func, user_data, destroy_data)
  # @param [FFI::Pointer(GCallback)] callback_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [Proc(_callback_g_closure_notify_)] destroy_data 
  # @return [GClosure] 
  # @scope class
  attach_function :g_cclosure_new, :g_cclosure_new, [:pointer, :pointer, :g_closure_notify], GClosure
  
  # (Not documented)
  # 
  # @method g_cclosure_new_swap(callback_func, user_data, destroy_data)
  # @param [FFI::Pointer(GCallback)] callback_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [Proc(_callback_g_closure_notify_)] destroy_data 
  # @return [GClosure] 
  # @scope class
  attach_function :g_cclosure_new_swap, :g_cclosure_new_swap, [:pointer, :pointer, :g_closure_notify], GClosure
  
  # (Not documented)
  # 
  # @method g_signal_type_cclosure_new(itype, struct_offset)
  # @param [Integer] itype 
  # @param [Integer] struct_offset 
  # @return [GClosure] 
  # @scope class
  attach_function :g_signal_type_cclosure_new, :g_signal_type_cclosure_new, [:uint, :uint], GClosure
  
  # (Not documented)
  # 
  # @method g_closure_ref(closure)
  # @param [GClosure] closure 
  # @return [GClosure] 
  # @scope class
  attach_function :g_closure_ref, :g_closure_ref, [GClosure], GClosure
  
  # (Not documented)
  # 
  # @method g_closure_sink(closure)
  # @param [GClosure] closure 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_sink, :g_closure_sink, [GClosure], :void
  
  # (Not documented)
  # 
  # @method g_closure_unref(closure)
  # @param [GClosure] closure 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_unref, :g_closure_unref, [GClosure], :void
  
  # (Not documented)
  # 
  # @method g_closure_new_simple(sizeof_closure, data)
  # @param [Integer] sizeof_closure 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GClosure] 
  # @scope class
  attach_function :g_closure_new_simple, :g_closure_new_simple, [:uint, :pointer], GClosure
  
  # (Not documented)
  # 
  # @method g_closure_add_finalize_notifier(closure, notify_data, notify_func)
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] notify_data 
  # @param [Proc(_callback_g_closure_notify_)] notify_func 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_add_finalize_notifier, :g_closure_add_finalize_notifier, [GClosure, :pointer, :g_closure_notify], :void
  
  # (Not documented)
  # 
  # @method g_closure_remove_finalize_notifier(closure, notify_data, notify_func)
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] notify_data 
  # @param [Proc(_callback_g_closure_notify_)] notify_func 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_remove_finalize_notifier, :g_closure_remove_finalize_notifier, [GClosure, :pointer, :g_closure_notify], :void
  
  # (Not documented)
  # 
  # @method g_closure_add_invalidate_notifier(closure, notify_data, notify_func)
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] notify_data 
  # @param [Proc(_callback_g_closure_notify_)] notify_func 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_add_invalidate_notifier, :g_closure_add_invalidate_notifier, [GClosure, :pointer, :g_closure_notify], :void
  
  # (Not documented)
  # 
  # @method g_closure_remove_invalidate_notifier(closure, notify_data, notify_func)
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] notify_data 
  # @param [Proc(_callback_g_closure_notify_)] notify_func 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_remove_invalidate_notifier, :g_closure_remove_invalidate_notifier, [GClosure, :pointer, :g_closure_notify], :void
  
  # (Not documented)
  # 
  # @method g_closure_add_marshal_guards(closure, pre_marshal_data, pre_marshal_notify, post_marshal_data, post_marshal_notify)
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] pre_marshal_data 
  # @param [Proc(_callback_g_closure_notify_)] pre_marshal_notify 
  # @param [FFI::Pointer(Gpointer)] post_marshal_data 
  # @param [Proc(_callback_g_closure_notify_)] post_marshal_notify 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_add_marshal_guards, :g_closure_add_marshal_guards, [GClosure, :pointer, :g_closure_notify, :pointer, :g_closure_notify], :void
  
  # (Not documented)
  # 
  # @method g_closure_set_marshal(closure, marshal)
  # @param [GClosure] closure 
  # @param [Proc(_callback_g_closure_marshal_)] marshal 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_set_marshal, :g_closure_set_marshal, [GClosure, :g_closure_marshal], :void
  
  # (Not documented)
  # 
  # @method g_closure_set_meta_marshal(closure, marshal_data, meta_marshal)
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Proc(_callback_g_closure_marshal_)] meta_marshal 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_set_meta_marshal, :g_closure_set_meta_marshal, [GClosure, :pointer, :g_closure_marshal], :void
  
  # (Not documented)
  # 
  # @method g_closure_invalidate(closure)
  # @param [GClosure] closure 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_invalidate, :g_closure_invalidate, [GClosure], :void
  
  # (Not documented)
  # 
  # @method g_closure_invoke(closure, return_value, n_param_values, param_values, invocation_hint)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @return [nil] 
  # @scope class
  attach_function :g_closure_invoke, :g_closure_invoke, [GClosure, GValue, :uint, GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_generic(closure, return_gvalue, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_gvalue 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_generic, :g_cclosure_marshal_generic, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_generic_va(closure, return_value, instance, args_list, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args_list 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_generic_va, :g_cclosure_marshal_generic_va, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # VOID:VOID (./gmarshal.list:6)
  # 
  # @method g_cclosure_marshal_void_void(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_void, :g_cclosure_marshal_VOID__VOID, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_voi_dv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_voi_dv, :g_cclosure_marshal_VOID__VOIDv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_boolean(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_boolean, :g_cclosure_marshal_VOID__BOOLEAN, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_boolea_nv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_boolea_nv, :g_cclosure_marshal_VOID__BOOLEANv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_char(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_char, :g_cclosure_marshal_VOID__CHAR, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_cha_rv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_cha_rv, :g_cclosure_marshal_VOID__CHARv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_uchar(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_uchar, :g_cclosure_marshal_VOID__UCHAR, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_ucha_rv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_ucha_rv, :g_cclosure_marshal_VOID__UCHARv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_int(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_int, :g_cclosure_marshal_VOID__INT, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_in_tv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_in_tv, :g_cclosure_marshal_VOID__INTv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_uint(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_uint, :g_cclosure_marshal_VOID__UINT, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_uin_tv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_uin_tv, :g_cclosure_marshal_VOID__UINTv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_long(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_long, :g_cclosure_marshal_VOID__LONG, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_lon_gv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_lon_gv, :g_cclosure_marshal_VOID__LONGv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_ulong(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_ulong, :g_cclosure_marshal_VOID__ULONG, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_ulon_gv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_ulon_gv, :g_cclosure_marshal_VOID__ULONGv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_enum(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_enum, :g_cclosure_marshal_VOID__ENUM, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_enu_mv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_enu_mv, :g_cclosure_marshal_VOID__ENUMv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_flags(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_flags, :g_cclosure_marshal_VOID__FLAGS, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_flag_sv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_flag_sv, :g_cclosure_marshal_VOID__FLAGSv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_float(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_float, :g_cclosure_marshal_VOID__FLOAT, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_floa_tv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_floa_tv, :g_cclosure_marshal_VOID__FLOATv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_double(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_double, :g_cclosure_marshal_VOID__DOUBLE, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_doubl_ev(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_doubl_ev, :g_cclosure_marshal_VOID__DOUBLEv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_string(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_string, :g_cclosure_marshal_VOID__STRING, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_strin_gv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_strin_gv, :g_cclosure_marshal_VOID__STRINGv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_param(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_param, :g_cclosure_marshal_VOID__PARAM, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_para_mv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_para_mv, :g_cclosure_marshal_VOID__PARAMv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_boxed(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_boxed, :g_cclosure_marshal_VOID__BOXED, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_boxe_dv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_boxe_dv, :g_cclosure_marshal_VOID__BOXEDv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_pointer(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_pointer, :g_cclosure_marshal_VOID__POINTER, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_pointe_rv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_pointe_rv, :g_cclosure_marshal_VOID__POINTERv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_object(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_object, :g_cclosure_marshal_VOID__OBJECT, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_objec_tv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_objec_tv, :g_cclosure_marshal_VOID__OBJECTv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_variant(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_variant, :g_cclosure_marshal_VOID__VARIANT, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_varian_tv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_varian_tv, :g_cclosure_marshal_VOID__VARIANTv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_uint_pointer(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_uint_pointer, :g_cclosure_marshal_VOID__UINT_POINTER, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_void_uint_pointe_rv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_void_uint_pointe_rv, :g_cclosure_marshal_VOID__UINT_POINTERv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_boolean_flags(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_boolean_flags, :g_cclosure_marshal_BOOLEAN__FLAGS, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_boolean_flag_sv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_boolean_flag_sv, :g_cclosure_marshal_BOOLEAN__FLAGSv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_string_object_pointer(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_string_object_pointer, :g_cclosure_marshal_STRING__OBJECT_POINTER, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_string_object_pointe_rv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_string_object_pointe_rv, :g_cclosure_marshal_STRING__OBJECT_POINTERv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_boolean_boxed_boxed(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] invocation_hint 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_boolean_boxed_boxed, :g_cclosure_marshal_BOOLEAN__BOXED_BOXED, [GClosure, GValue, :uint, GValue, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_marshal_boolean_boxed_boxe_dv(closure, return_value, instance, args, marshal_data, n_params, param_types)
  # @param [GClosure] closure 
  # @param [GValue] return_value 
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] args 
  # @param [FFI::Pointer(Gpointer)] marshal_data 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [nil] 
  # @scope class
  attach_function :g_cclosure_marshal_boolean_boxed_boxe_dv, :g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv, [GClosure, GValue, :pointer, :string, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_signal_emission_hook_(ihint, n_param_values, param_values, data)
  # @param [FFI::Pointer(*GSignalInvocationHint)] ihint 
  # @param [Integer] n_param_values 
  # @param [GValue] param_values 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :g_signal_emission_hook, [:pointer, :uint, GValue, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_signal_accumulator_(ihint, return_accu, handler_return, data)
  # @param [FFI::Pointer(*GSignalInvocationHint)] ihint 
  # @param [GValue] return_accu 
  # @param [GValue] handler_return 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :g_signal_accumulator, [:pointer, GValue, GValue, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_signal_flags).</em>
  # 
  # === Options:
  # :run_first ::
  #   
  # :run_last ::
  #   
  # :run_cleanup ::
  #   
  # :no_recurse ::
  #   
  # :detailed ::
  #   
  # :action ::
  #   
  # :no_hooks ::
  #   
  # :must_collect ::
  #   
  # :deprecated ::
  #   
  # 
  # @method _enum_g_signal_flags_
  # @return [Symbol]
  # @scope class
  enum :g_signal_flags, [
    :run_first, 1,
    :run_last, 2,
    :run_cleanup, 4,
    :no_recurse, 8,
    :detailed, 16,
    :action, 32,
    :no_hooks, 64,
    :must_collect, 128,
    :deprecated, 256
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_connect_flags).</em>
  # 
  # === Options:
  # :after ::
  #   
  # :swapped ::
  #   
  # 
  # @method _enum_g_connect_flags_
  # @return [Symbol]
  # @scope class
  enum :g_connect_flags, [
    :after, 1,
    :swapped, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_signal_match_type).</em>
  # 
  # === Options:
  # :id ::
  #   
  # :detail ::
  #   
  # :closure ::
  #   
  # :func ::
  #   
  # :data ::
  #   
  # :unblocked ::
  #   
  # 
  # @method _enum_g_signal_match_type_
  # @return [Symbol]
  # @scope class
  enum :g_signal_match_type, [
    :id, 1,
    :detail, 2,
    :closure, 4,
    :func, 8,
    :data, 16,
    :unblocked, 32
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :signal_id ::
  #   (Integer) 
  # :detail ::
  #   (Integer) 
  # :run_type ::
  #   (Symbol from _enum_g_signal_flags_) 
  class GSignalInvocationHint < FFI::Struct
    layout :signal_id, :uint,
           :detail, :uint,
           :run_type, :g_signal_flags
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :signal_id ::
  #   (Integer) 
  # :signal_name ::
  #   (String) 
  # :itype ::
  #   (Integer) 
  # :signal_flags ::
  #   (Symbol from _enum_g_signal_flags_) 
  # :return_type ::
  #   (Integer) mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag
  # :n_params ::
  #   (Integer) 
  # :param_types ::
  #   (FFI::Pointer(*GType)) mangled with G_SIGNAL_TYPE_STATIC_SCOPE flag
  class GSignalQuery < FFI::Struct
    layout :signal_id, :uint,
           :signal_name, :string,
           :itype, :uint,
           :signal_flags, :g_signal_flags,
           :return_type, :uint,
           :n_params, :uint,
           :param_types, :pointer
  end
  
  # (Not documented)
  # 
  # @method g_signal_newv(signal_name, itype, signal_flags, class_closure, accumulator, accu_data, c_marshaller, return_type, n_params, param_types)
  # @param [String] signal_name 
  # @param [Integer] itype 
  # @param [Symbol from _enum_g_signal_flags_] signal_flags 
  # @param [GClosure] class_closure 
  # @param [Proc(_callback_g_signal_accumulator_)] accumulator 
  # @param [FFI::Pointer(Gpointer)] accu_data 
  # @param [FFI::Pointer(GSignalCMarshaller)] c_marshaller 
  # @param [Integer] return_type 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*GType)] param_types 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_newv, :g_signal_newv, [:string, :uint, :g_signal_flags, GClosure, :g_signal_accumulator, :pointer, :pointer, :uint, :uint, :pointer], :uint
  
  # (Not documented)
  # 
  # @method g_signal_new_valist(signal_name, itype, signal_flags, class_closure, accumulator, accu_data, c_marshaller, return_type, n_params, args)
  # @param [String] signal_name 
  # @param [Integer] itype 
  # @param [Symbol from _enum_g_signal_flags_] signal_flags 
  # @param [GClosure] class_closure 
  # @param [Proc(_callback_g_signal_accumulator_)] accumulator 
  # @param [FFI::Pointer(Gpointer)] accu_data 
  # @param [FFI::Pointer(GSignalCMarshaller)] c_marshaller 
  # @param [Integer] return_type 
  # @param [Integer] n_params 
  # @param [String] args 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_new_valist, :g_signal_new_valist, [:string, :uint, :g_signal_flags, GClosure, :g_signal_accumulator, :pointer, :pointer, :uint, :uint, :string], :uint
  
  # (Not documented)
  # 
  # @method g_signal_new(signal_name, itype, signal_flags, class_offset, accumulator, accu_data, c_marshaller, return_type, n_params)
  # @param [String] signal_name 
  # @param [Integer] itype 
  # @param [Symbol from _enum_g_signal_flags_] signal_flags 
  # @param [Integer] class_offset 
  # @param [Proc(_callback_g_signal_accumulator_)] accumulator 
  # @param [FFI::Pointer(Gpointer)] accu_data 
  # @param [FFI::Pointer(GSignalCMarshaller)] c_marshaller 
  # @param [Integer] return_type 
  # @param [Integer] n_params 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_new, :g_signal_new, [:string, :uint, :g_signal_flags, :uint, :g_signal_accumulator, :pointer, :pointer, :uint, :uint], :uint
  
  # (Not documented)
  # 
  # @method g_signal_new_class_handler(signal_name, itype, signal_flags, class_handler, accumulator, accu_data, c_marshaller, return_type, n_params)
  # @param [String] signal_name 
  # @param [Integer] itype 
  # @param [Symbol from _enum_g_signal_flags_] signal_flags 
  # @param [FFI::Pointer(GCallback)] class_handler 
  # @param [Proc(_callback_g_signal_accumulator_)] accumulator 
  # @param [FFI::Pointer(Gpointer)] accu_data 
  # @param [FFI::Pointer(GSignalCMarshaller)] c_marshaller 
  # @param [Integer] return_type 
  # @param [Integer] n_params 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_new_class_handler, :g_signal_new_class_handler, [:string, :uint, :g_signal_flags, :pointer, :g_signal_accumulator, :pointer, :pointer, :uint, :uint], :uint
  
  # (Not documented)
  # 
  # @method g_signal_set_va_marshaller(signal_id, instance_type, va_marshaller)
  # @param [Integer] signal_id 
  # @param [Integer] instance_type 
  # @param [FFI::Pointer(GSignalCVaMarshaller)] va_marshaller 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_set_va_marshaller, :g_signal_set_va_marshaller, [:uint, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_signal_emitv(instance_and_params, signal_id, detail, return_value)
  # @param [GValue] instance_and_params 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [GValue] return_value 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_emitv, :g_signal_emitv, [GValue, :uint, :uint, GValue], :void
  
  # (Not documented)
  # 
  # @method g_signal_emit_valist(instance, signal_id, detail, var_args)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_emit_valist, :g_signal_emit_valist, [:pointer, :uint, :uint, :string], :void
  
  # (Not documented)
  # 
  # @method g_signal_emit(instance, signal_id, detail)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_emit, :g_signal_emit, [:pointer, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method g_signal_emit_by_name(instance, detailed_signal)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] detailed_signal 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_emit_by_name, :g_signal_emit_by_name, [:pointer, :string], :void
  
  # (Not documented)
  # 
  # @method g_signal_lookup(name, itype)
  # @param [String] name 
  # @param [Integer] itype 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_lookup, :g_signal_lookup, [:string, :uint], :uint
  
  # (Not documented)
  # 
  # @method g_signal_name(signal_id)
  # @param [Integer] signal_id 
  # @return [String] 
  # @scope class
  attach_function :g_signal_name, :g_signal_name, [:uint], :string
  
  # (Not documented)
  # 
  # @method g_signal_query(signal_id, query)
  # @param [Integer] signal_id 
  # @param [GSignalQuery] query 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_query, :g_signal_query, [:uint, GSignalQuery], :void
  
  # (Not documented)
  # 
  # @method g_signal_list_ids(itype, n_ids)
  # @param [Integer] itype 
  # @param [FFI::Pointer(*Guint)] n_ids 
  # @return [FFI::Pointer(*Guint)] 
  # @scope class
  attach_function :g_signal_list_ids, :g_signal_list_ids, [:uint, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_signal_parse_name(detailed_signal, itype, signal_id_p, detail_p, force_detail_quark)
  # @param [String] detailed_signal 
  # @param [Integer] itype 
  # @param [FFI::Pointer(*Guint)] signal_id_p 
  # @param [FFI::Pointer(*GQuark)] detail_p 
  # @param [Integer] force_detail_quark 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_parse_name, :g_signal_parse_name, [:string, :uint, :pointer, :pointer, :int], :int
  
  # (Not documented)
  # 
  # @method g_signal_get_invocation_hint(instance)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @return [GSignalInvocationHint] 
  # @scope class
  attach_function :g_signal_get_invocation_hint, :g_signal_get_invocation_hint, [:pointer], GSignalInvocationHint
  
  # (Not documented)
  # 
  # @method g_signal_stop_emission(instance, signal_id, detail)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_stop_emission, :g_signal_stop_emission, [:pointer, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method g_signal_stop_emission_by_name(instance, detailed_signal)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] detailed_signal 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_stop_emission_by_name, :g_signal_stop_emission_by_name, [:pointer, :string], :void
  
  # (Not documented)
  # 
  # @method g_signal_add_emission_hook(signal_id, detail, hook_func, hook_data, data_destroy)
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [Proc(_callback_g_signal_emission_hook_)] hook_func 
  # @param [FFI::Pointer(Gpointer)] hook_data 
  # @param [FFI::Pointer(GDestroyNotify)] data_destroy 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_add_emission_hook, :g_signal_add_emission_hook, [:uint, :uint, :g_signal_emission_hook, :pointer, :pointer], :ulong
  
  # (Not documented)
  # 
  # @method g_signal_remove_emission_hook(signal_id, hook_id)
  # @param [Integer] signal_id 
  # @param [Integer] hook_id 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_remove_emission_hook, :g_signal_remove_emission_hook, [:uint, :ulong], :void
  
  # (Not documented)
  # 
  # @method g_signal_has_handler_pending(instance, signal_id, detail, may_be_blocked)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [Integer] may_be_blocked 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_has_handler_pending, :g_signal_has_handler_pending, [:pointer, :uint, :uint, :int], :int
  
  # (Not documented)
  # 
  # @method g_signal_connect_closure_by_id(instance, signal_id, detail, closure, after)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [GClosure] closure 
  # @param [Integer] after 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_connect_closure_by_id, :g_signal_connect_closure_by_id, [:pointer, :uint, :uint, GClosure, :int], :ulong
  
  # (Not documented)
  # 
  # @method g_signal_connect_closure(instance, detailed_signal, closure, after)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] detailed_signal 
  # @param [GClosure] closure 
  # @param [Integer] after 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_connect_closure, :g_signal_connect_closure, [:pointer, :string, GClosure, :int], :ulong
  
  # (Not documented)
  # 
  # @method g_signal_connect_data(instance, detailed_signal, c_handler, data, destroy_data, connect_flags)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] detailed_signal 
  # @param [FFI::Pointer(GCallback)] c_handler 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [Proc(_callback_g_closure_notify_)] destroy_data 
  # @param [Symbol from _enum_g_connect_flags_] connect_flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_connect_data, :g_signal_connect_data, [:pointer, :string, :pointer, :pointer, :g_closure_notify, :g_connect_flags], :ulong
  
  # (Not documented)
  # 
  # @method g_signal_handler_block(instance, handler_id)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] handler_id 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_handler_block, :g_signal_handler_block, [:pointer, :ulong], :void
  
  # (Not documented)
  # 
  # @method g_signal_handler_unblock(instance, handler_id)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] handler_id 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_handler_unblock, :g_signal_handler_unblock, [:pointer, :ulong], :void
  
  # (Not documented)
  # 
  # @method g_signal_handler_disconnect(instance, handler_id)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] handler_id 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_handler_disconnect, :g_signal_handler_disconnect, [:pointer, :ulong], :void
  
  # (Not documented)
  # 
  # @method g_signal_handler_is_connected(instance, handler_id)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Integer] handler_id 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_handler_is_connected, :g_signal_handler_is_connected, [:pointer, :ulong], :int
  
  # (Not documented)
  # 
  # @method g_signal_handler_find(instance, mask, signal_id, detail, closure, func, data)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Symbol from _enum_g_signal_match_type_] mask 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_handler_find, :g_signal_handler_find, [:pointer, :g_signal_match_type, :uint, :uint, GClosure, :pointer, :pointer], :ulong
  
  # (Not documented)
  # 
  # @method g_signal_handlers_block_matched(instance, mask, signal_id, detail, closure, func, data)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Symbol from _enum_g_signal_match_type_] mask 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_handlers_block_matched, :g_signal_handlers_block_matched, [:pointer, :g_signal_match_type, :uint, :uint, GClosure, :pointer, :pointer], :uint
  
  # (Not documented)
  # 
  # @method g_signal_handlers_unblock_matched(instance, mask, signal_id, detail, closure, func, data)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Symbol from _enum_g_signal_match_type_] mask 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_handlers_unblock_matched, :g_signal_handlers_unblock_matched, [:pointer, :g_signal_match_type, :uint, :uint, GClosure, :pointer, :pointer], :uint
  
  # (Not documented)
  # 
  # @method g_signal_handlers_disconnect_matched(instance, mask, signal_id, detail, closure, func, data)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [Symbol from _enum_g_signal_match_type_] mask 
  # @param [Integer] signal_id 
  # @param [Integer] detail 
  # @param [GClosure] closure 
  # @param [FFI::Pointer(Gpointer)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_handlers_disconnect_matched, :g_signal_handlers_disconnect_matched, [:pointer, :g_signal_match_type, :uint, :uint, GClosure, :pointer, :pointer], :uint
  
  # (Not documented)
  # 
  # @method g_signal_override_class_closure(signal_id, instance_type, class_closure)
  # @param [Integer] signal_id 
  # @param [Integer] instance_type 
  # @param [GClosure] class_closure 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_override_class_closure, :g_signal_override_class_closure, [:uint, :uint, GClosure], :void
  
  # (Not documented)
  # 
  # @method g_signal_override_class_handler(signal_name, instance_type, class_handler)
  # @param [String] signal_name 
  # @param [Integer] instance_type 
  # @param [FFI::Pointer(GCallback)] class_handler 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_override_class_handler, :g_signal_override_class_handler, [:string, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_signal_chain_from_overridden(instance_and_params, return_value)
  # @param [GValue] instance_and_params 
  # @param [GValue] return_value 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_chain_from_overridden, :g_signal_chain_from_overridden, [GValue, GValue], :void
  
  # (Not documented)
  # 
  # @method g_signal_chain_from_overridden_handler(instance)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_chain_from_overridden_handler, :g_signal_chain_from_overridden_handler, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_signal_accumulator_true_handled(ihint, return_accu, handler_return, dummy)
  # @param [GSignalInvocationHint] ihint 
  # @param [GValue] return_accu 
  # @param [GValue] handler_return 
  # @param [FFI::Pointer(Gpointer)] dummy 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_accumulator_true_handled, :g_signal_accumulator_true_handled, [GSignalInvocationHint, GValue, GValue, :pointer], :int
  
  # (Not documented)
  # 
  # @method g_signal_accumulator_first_wins(ihint, return_accu, handler_return, dummy)
  # @param [GSignalInvocationHint] ihint 
  # @param [GValue] return_accu 
  # @param [GValue] handler_return 
  # @param [FFI::Pointer(Gpointer)] dummy 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_accumulator_first_wins, :g_signal_accumulator_first_wins, [GSignalInvocationHint, GValue, GValue, :pointer], :int
  
  # (Not documented)
  # 
  # @method g_signal_handlers_destroy(instance)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @return [nil] 
  # @scope class
  attach_function :g_signal_handlers_destroy, :g_signal_handlers_destroy, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_signals_destroy(itype)
  # @param [Integer] itype 
  # @return [nil] 
  # @scope class
  attach_function :g_signals_destroy, :_g_signals_destroy, [:uint], :void
  
  # (Not documented)
  # 
  # @method g_date_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_date_get_type, :g_date_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_strv_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_strv_get_type, :g_strv_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_gstring_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_gstring_get_type, :g_gstring_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_hash_table_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_hash_table_get_type, :g_hash_table_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_array_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_array_get_type, :g_array_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_byte_array_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_byte_array_get_type, :g_byte_array_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_ptr_array_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_ptr_array_get_type, :g_ptr_array_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_bytes_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_bytes_get_type, :g_bytes_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_variant_type_get_gtype()
  # @return [Integer] 
  # @scope class
  attach_function :g_variant_type_get_gtype, :g_variant_type_get_gtype, [], :uint
  
  # (Not documented)
  # 
  # @method g_regex_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_regex_get_type, :g_regex_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_match_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_match_info_get_type, :g_match_info_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_error_get_type, :g_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_date_time_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_date_time_get_type, :g_date_time_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_time_zone_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_time_zone_get_type, :g_time_zone_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_io_channel_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_io_channel_get_type, :g_io_channel_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_io_condition_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_io_condition_get_type, :g_io_condition_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_variant_builder_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_variant_builder_get_type, :g_variant_builder_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_key_file_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_key_file_get_type, :g_key_file_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_main_loop_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_main_loop_get_type, :g_main_loop_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_main_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_main_context_get_type, :g_main_context_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_source_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_source_get_type, :g_source_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_variant_get_gtype()
  # @return [Integer] 
  # @scope class
  attach_function :g_variant_get_gtype, :g_variant_get_gtype, [], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_boxed_copy_func_(boxed)
  # @param [FFI::Pointer(Gpointer)] boxed 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_boxed_copy_func, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_boxed_copy(boxed_type, src_boxed)
  # @param [Integer] boxed_type 
  # @param [FFI::Pointer(Gconstpointer)] src_boxed 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_boxed_copy, :g_boxed_copy, [:uint, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_boxed_free(boxed_type, boxed)
  # @param [Integer] boxed_type 
  # @param [FFI::Pointer(Gpointer)] boxed 
  # @return [nil] 
  # @scope class
  attach_function :g_boxed_free, :g_boxed_free, [:uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_set_boxed(value, v_boxed)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gconstpointer)] v_boxed 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_boxed, :g_value_set_boxed, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_set_static_boxed(value, v_boxed)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gconstpointer)] v_boxed 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_static_boxed, :g_value_set_static_boxed, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_take_boxed(value, v_boxed)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gconstpointer)] v_boxed 
  # @return [nil] 
  # @scope class
  attach_function :g_value_take_boxed, :g_value_take_boxed, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_set_boxed_take_ownership(value, v_boxed)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gconstpointer)] v_boxed 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_boxed_take_ownership, :g_value_set_boxed_take_ownership, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_get_boxed(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_value_get_boxed, :g_value_get_boxed, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_value_dup_boxed(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_value_dup_boxed, :g_value_dup_boxed, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_boxed_type_register_static(name, boxed_copy, boxed_free)
  # @param [String] name 
  # @param [Proc(_callback_g_boxed_copy_func_)] boxed_copy 
  # @param [FFI::Pointer(GBoxedFreeFunc)] boxed_free 
  # @return [Integer] 
  # @scope class
  attach_function :g_boxed_type_register_static, :g_boxed_type_register_static, [:string, :g_boxed_copy_func, :pointer], :uint
  
  # (Not documented)
  # 
  # @method g_closure_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_closure_get_type, :g_closure_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_value_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_type, :g_value_get_type, [], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_object_get_property_func_(property_id, value, pspec)
  # @param [Integer] property_id 
  # @param [GValue] value 
  # @param [GParamSpec] pspec 
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  callback :g_object_get_property_func, [:uint, GValue, GParamSpec], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_object_set_property_func_(property_id, value, pspec)
  # @param [Integer] property_id 
  # @param [GValue] value 
  # @param [GParamSpec] pspec 
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  callback :g_object_set_property_func, [:uint, GValue, GParamSpec], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_weak_notify_(where_the_object_was)
  # @param [FFI::Pointer(*GObject)] where_the_object_was 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_weak_notify, [:pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type_instance ::
  #   (GTypeInstance) 
  # :ref_count ::
  #   (Integer) < private >
  # :qdata ::
  #   (FFI::Pointer(*GData)) 
  module GObjectWrappers
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def set_valist(first_property_name, var_args)
      GObject.g_object_set_valist(self, first_property_name, var_args)
    end
    
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def get_valist(first_property_name, var_args)
      GObject.g_object_get_valist(self, first_property_name, var_args)
    end
    
    # @param [String] property_name 
    # @param [GValue] value 
    # @return [nil] 
    def set_property(property_name, value)
      GObject.g_object_set_property(self, property_name, value)
    end
    
    # @param [String] property_name 
    # @param [GValue] value 
    # @return [nil] 
    def get_property(property_name, value)
      GObject.g_object_get_property(self, property_name, value)
    end
    
    # @return [nil] 
    def freeze_notify()
      GObject.g_object_freeze_notify(self)
    end
    
    # @param [String] property_name 
    # @return [nil] 
    def notify(property_name)
      GObject.g_object_notify(self, property_name)
    end
    
    # @param [GParamSpec] pspec 
    # @return [nil] 
    def notify_by_pspec(pspec)
      GObject.g_object_notify_by_pspec(self, pspec)
    end
    
    # @return [nil] 
    def thaw_notify()
      GObject.g_object_thaw_notify(self)
    end
    
    # @param [Proc(_callback_g_weak_notify_)] notify 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def weak_ref(notify, data)
      GObject.g_object_weak_ref(self, notify, data)
    end
    
    # @param [Proc(_callback_g_weak_notify_)] notify 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def weak_unref(notify, data)
      GObject.g_object_weak_unref(self, notify, data)
    end
    
    # @param [FFI::Pointer(*Gpointer)] weak_pointer_location 
    # @return [nil] 
    def add_weak_pointer(weak_pointer_location)
      GObject.g_object_add_weak_pointer(self, weak_pointer_location)
    end
    
    # @param [FFI::Pointer(*Gpointer)] weak_pointer_location 
    # @return [nil] 
    def remove_weak_pointer(weak_pointer_location)
      GObject.g_object_remove_weak_pointer(self, weak_pointer_location)
    end
    
    # @param [Proc(_callback_g_toggle_notify_)] notify 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def add_toggle_ref(notify, data)
      GObject.g_object_add_toggle_ref(self, notify, data)
    end
    
    # @param [Proc(_callback_g_toggle_notify_)] notify 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def remove_toggle_ref(notify, data)
      GObject.g_object_remove_toggle_ref(self, notify, data)
    end
    
    # @param [Integer] quark 
    # @return [FFI::Pointer(Gpointer)] 
    def get_qdata(quark)
      GObject.g_object_get_qdata(self, quark)
    end
    
    # @param [Integer] quark 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def set_qdata(quark, data)
      GObject.g_object_set_qdata(self, quark, data)
    end
    
    # @param [Integer] quark 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_qdata_full(quark, data, destroy)
      GObject.g_object_set_qdata_full(self, quark, data, destroy)
    end
    
    # @param [Integer] quark 
    # @return [FFI::Pointer(Gpointer)] 
    def steal_qdata(quark)
      GObject.g_object_steal_qdata(self, quark)
    end
    
    # @param [Integer] quark 
    # @param [FFI::Pointer(GDuplicateFunc)] dup_func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [FFI::Pointer(Gpointer)] 
    def dup_qdata(quark, dup_func, user_data)
      GObject.g_object_dup_qdata(self, quark, dup_func, user_data)
    end
    
    # @param [Integer] quark 
    # @param [FFI::Pointer(Gpointer)] oldval 
    # @param [FFI::Pointer(Gpointer)] newval 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @param [FFI::Pointer(*GDestroyNotify)] old_destroy 
    # @return [Integer] 
    def replace_qdata(quark, oldval, newval, destroy, old_destroy)
      GObject.g_object_replace_qdata(self, quark, oldval, newval, destroy, old_destroy)
    end
    
    # @param [String] key 
    # @return [FFI::Pointer(Gpointer)] 
    def get_data(key)
      GObject.g_object_get_data(self, key)
    end
    
    # @param [String] key 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def set_data(key, data)
      GObject.g_object_set_data(self, key, data)
    end
    
    # @param [String] key 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_data_full(key, data, destroy)
      GObject.g_object_set_data_full(self, key, data, destroy)
    end
    
    # @param [String] key 
    # @return [FFI::Pointer(Gpointer)] 
    def steal_data(key)
      GObject.g_object_steal_data(self, key)
    end
    
    # @param [String] key 
    # @param [FFI::Pointer(GDuplicateFunc)] dup_func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [FFI::Pointer(Gpointer)] 
    def dup_data(key, dup_func, user_data)
      GObject.g_object_dup_data(self, key, dup_func, user_data)
    end
    
    # @param [String] key 
    # @param [FFI::Pointer(Gpointer)] oldval 
    # @param [FFI::Pointer(Gpointer)] newval 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @param [FFI::Pointer(*GDestroyNotify)] old_destroy 
    # @return [Integer] 
    def replace_data(key, oldval, newval, destroy, old_destroy)
      GObject.g_object_replace_data(self, key, oldval, newval, destroy, old_destroy)
    end
    
    # @param [GClosure] closure 
    # @return [nil] 
    def watch_closure(closure)
      GObject.g_object_watch_closure(self, closure)
    end
    
    # @return [nil] 
    def force_floating()
      GObject.g_object_force_floating(self)
    end
    
    # @return [nil] 
    def run_dispose()
      GObject.g_object_run_dispose(self)
    end
  end
  
  class GObject < FFI::Struct
    include GObjectWrappers
    layout :g_type_instance, GTypeInstance.by_value,
           :ref_count, :uint,
           :qdata, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type_class ::
  #   (GTypeClass) 
  # :construct_properties ::
  #   (FFI::Pointer(*GSList)) < private >
  # :constructor ::
  #   (FFI::Pointer(*)) seldom overidden
  # :set_property ::
  #   (FFI::Pointer(*)) overridable methods
  # :get_property ::
  #   (FFI::Pointer(*)) 
  # :dispose ::
  #   (FFI::Pointer(*)) 
  # :finalize ::
  #   (FFI::Pointer(*)) 
  # :dispatch_properties_changed ::
  #   (FFI::Pointer(*)) seldom overidden
  # :notify ::
  #   (FFI::Pointer(*)) signals
  # :constructed ::
  #   (FFI::Pointer(*)) called when done constructing
  # :flags ::
  #   (Integer) < private >
  # :pdummy ::
  #   (Array<FFI::Pointer(*Void)>) padding
  module GObjectClassWrappers
    # @param [Integer] property_id 
    # @param [GParamSpec] pspec 
    # @return [nil] 
    def install_property(property_id, pspec)
      GObject.g_object_class_install_property(self, property_id, pspec)
    end
    
    # @param [String] property_name 
    # @return [GParamSpec] 
    def find_property(property_name)
      GParamSpec.new GObject.g_object_class_find_property(self, property_name)
    end
    
    # @param [FFI::Pointer(*Guint)] n_properties 
    # @return [FFI::Pointer(**GParamSpec)] 
    def list_properties(n_properties)
      GObject.g_object_class_list_properties(self, n_properties)
    end
    
    # @param [Integer] property_id 
    # @param [String] name 
    # @return [nil] 
    def override_property(property_id, name)
      GObject.g_object_class_override_property(self, property_id, name)
    end
    
    # @param [Integer] n_pspecs 
    # @param [FFI::Pointer(**GParamSpec)] pspecs 
    # @return [nil] 
    def install_properties(n_pspecs, pspecs)
      GObject.g_object_class_install_properties(self, n_pspecs, pspecs)
    end
  end
  
  class GObjectClass < FFI::Struct
    include GObjectClassWrappers
    layout :g_type_class, GTypeClass.by_value,
           :construct_properties, :pointer,
           :constructor, :pointer,
           :set_property, :pointer,
           :get_property, :pointer,
           :dispose, :pointer,
           :finalize, :pointer,
           :dispatch_properties_changed, :pointer,
           :notify, :pointer,
           :constructed, :pointer,
           :flags, :uint,
           :pdummy, [:pointer, 6]
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :pspec ::
  #   (GParamSpec) 
  # :value ::
  #   (GValue) 
  class GObjectConstructParam < FFI::Struct
    layout :pspec, GParamSpec,
           :value, GValue
  end
  
  # (Not documented)
  # 
  # @method g_initially_unowned_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_initially_unowned_get_type, :g_initially_unowned_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_object_class_install_property(oclass, property_id, pspec)
  # @param [GObjectClass] oclass 
  # @param [Integer] property_id 
  # @param [GParamSpec] pspec 
  # @return [nil] 
  # @scope class
  attach_function :g_object_class_install_property, :g_object_class_install_property, [GObjectClass, :uint, GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_object_class_find_property(oclass, property_name)
  # @param [GObjectClass] oclass 
  # @param [String] property_name 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_object_class_find_property, :g_object_class_find_property, [GObjectClass, :string], GParamSpec
  
  # (Not documented)
  # 
  # @method g_object_class_list_properties(oclass, n_properties)
  # @param [GObjectClass] oclass 
  # @param [FFI::Pointer(*Guint)] n_properties 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :g_object_class_list_properties, :g_object_class_list_properties, [GObjectClass, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_object_class_override_property(oclass, property_id, name)
  # @param [GObjectClass] oclass 
  # @param [Integer] property_id 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :g_object_class_override_property, :g_object_class_override_property, [GObjectClass, :uint, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_class_install_properties(oclass, n_pspecs, pspecs)
  # @param [GObjectClass] oclass 
  # @param [Integer] n_pspecs 
  # @param [FFI::Pointer(**GParamSpec)] pspecs 
  # @return [nil] 
  # @scope class
  attach_function :g_object_class_install_properties, :g_object_class_install_properties, [GObjectClass, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_interface_install_property(g_iface, pspec)
  # @param [FFI::Pointer(Gpointer)] g_iface 
  # @param [GParamSpec] pspec 
  # @return [nil] 
  # @scope class
  attach_function :g_object_interface_install_property, :g_object_interface_install_property, [:pointer, GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_object_interface_find_property(g_iface, property_name)
  # @param [FFI::Pointer(Gpointer)] g_iface 
  # @param [String] property_name 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_object_interface_find_property, :g_object_interface_find_property, [:pointer, :string], GParamSpec
  
  # (Not documented)
  # 
  # @method g_object_interface_list_properties(g_iface, n_properties_p)
  # @param [FFI::Pointer(Gpointer)] g_iface 
  # @param [FFI::Pointer(*Guint)] n_properties_p 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :g_object_interface_list_properties, :g_object_interface_list_properties, [:pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_object_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_object_get_type, :g_object_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_object_new(object_type, first_property_name)
  # @param [Integer] object_type 
  # @param [String] first_property_name 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_new, :g_object_new, [:uint, :string], :pointer
  
  # (Not documented)
  # 
  # @method g_object_newv(object_type, n_parameters, parameters)
  # @param [Integer] object_type 
  # @param [Integer] n_parameters 
  # @param [GParameter] parameters 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_newv, :g_object_newv, [:uint, :uint, GParameter], :pointer
  
  # (Not documented)
  # 
  # @method g_object_new_valist(object_type, first_property_name, var_args)
  # @param [Integer] object_type 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [GObject] 
  # @scope class
  attach_function :g_object_new_valist, :g_object_new_valist, [:uint, :string, :string], GObject
  
  # (Not documented)
  # 
  # @method g_object_set(object, first_property_name)
  # @param [FFI::Pointer(Gpointer)] object 
  # @param [String] first_property_name 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set, :g_object_set, [:pointer, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_get(object, first_property_name)
  # @param [FFI::Pointer(Gpointer)] object 
  # @param [String] first_property_name 
  # @return [nil] 
  # @scope class
  attach_function :g_object_get, :g_object_get, [:pointer, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_connect(object, signal_spec)
  # @param [FFI::Pointer(Gpointer)] object 
  # @param [String] signal_spec 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_connect, :g_object_connect, [:pointer, :string], :pointer
  
  # (Not documented)
  # 
  # @method g_object_disconnect(object, signal_spec)
  # @param [FFI::Pointer(Gpointer)] object 
  # @param [String] signal_spec 
  # @return [nil] 
  # @scope class
  attach_function :g_object_disconnect, :g_object_disconnect, [:pointer, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_set_valist(object, first_property_name, var_args)
  # @param [GObject] object 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set_valist, :g_object_set_valist, [GObject, :string, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_get_valist(object, first_property_name, var_args)
  # @param [GObject] object 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :g_object_get_valist, :g_object_get_valist, [GObject, :string, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_set_property(object, property_name, value)
  # @param [GObject] object 
  # @param [String] property_name 
  # @param [GValue] value 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set_property, :g_object_set_property, [GObject, :string, GValue], :void
  
  # (Not documented)
  # 
  # @method g_object_get_property(object, property_name, value)
  # @param [GObject] object 
  # @param [String] property_name 
  # @param [GValue] value 
  # @return [nil] 
  # @scope class
  attach_function :g_object_get_property, :g_object_get_property, [GObject, :string, GValue], :void
  
  # (Not documented)
  # 
  # @method g_object_freeze_notify(object)
  # @param [GObject] object 
  # @return [nil] 
  # @scope class
  attach_function :g_object_freeze_notify, :g_object_freeze_notify, [GObject], :void
  
  # (Not documented)
  # 
  # @method g_object_notify(object, property_name)
  # @param [GObject] object 
  # @param [String] property_name 
  # @return [nil] 
  # @scope class
  attach_function :g_object_notify, :g_object_notify, [GObject, :string], :void
  
  # (Not documented)
  # 
  # @method g_object_notify_by_pspec(object, pspec)
  # @param [GObject] object 
  # @param [GParamSpec] pspec 
  # @return [nil] 
  # @scope class
  attach_function :g_object_notify_by_pspec, :g_object_notify_by_pspec, [GObject, GParamSpec], :void
  
  # (Not documented)
  # 
  # @method g_object_thaw_notify(object)
  # @param [GObject] object 
  # @return [nil] 
  # @scope class
  attach_function :g_object_thaw_notify, :g_object_thaw_notify, [GObject], :void
  
  # (Not documented)
  # 
  # @method g_object_is_floating(object)
  # @param [FFI::Pointer(Gpointer)] object 
  # @return [Integer] 
  # @scope class
  attach_function :g_object_is_floating, :g_object_is_floating, [:pointer], :int
  
  # (Not documented)
  # 
  # @method g_object_ref_sink(object)
  # @param [FFI::Pointer(Gpointer)] object 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_ref_sink, :g_object_ref_sink, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_object_ref(object)
  # @param [FFI::Pointer(Gpointer)] object 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_ref, :g_object_ref, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_object_unref(object)
  # @param [FFI::Pointer(Gpointer)] object 
  # @return [nil] 
  # @scope class
  attach_function :g_object_unref, :g_object_unref, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_weak_ref(object, notify, data)
  # @param [GObject] object 
  # @param [Proc(_callback_g_weak_notify_)] notify 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_object_weak_ref, :g_object_weak_ref, [GObject, :g_weak_notify, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_weak_unref(object, notify, data)
  # @param [GObject] object 
  # @param [Proc(_callback_g_weak_notify_)] notify 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_object_weak_unref, :g_object_weak_unref, [GObject, :g_weak_notify, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_add_weak_pointer(object, weak_pointer_location)
  # @param [GObject] object 
  # @param [FFI::Pointer(*Gpointer)] weak_pointer_location 
  # @return [nil] 
  # @scope class
  attach_function :g_object_add_weak_pointer, :g_object_add_weak_pointer, [GObject, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_remove_weak_pointer(object, weak_pointer_location)
  # @param [GObject] object 
  # @param [FFI::Pointer(*Gpointer)] weak_pointer_location 
  # @return [nil] 
  # @scope class
  attach_function :g_object_remove_weak_pointer, :g_object_remove_weak_pointer, [GObject, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_toggle_notify_(object, is_last_ref)
  # @param [GObject] object 
  # @param [Integer] is_last_ref 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :g_toggle_notify, [GObject, :int], :pointer
  
  # (Not documented)
  # 
  # @method g_object_add_toggle_ref(object, notify, data)
  # @param [GObject] object 
  # @param [Proc(_callback_g_toggle_notify_)] notify 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_object_add_toggle_ref, :g_object_add_toggle_ref, [GObject, :g_toggle_notify, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_remove_toggle_ref(object, notify, data)
  # @param [GObject] object 
  # @param [Proc(_callback_g_toggle_notify_)] notify 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_object_remove_toggle_ref, :g_object_remove_toggle_ref, [GObject, :g_toggle_notify, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_get_qdata(object, quark)
  # @param [GObject] object 
  # @param [Integer] quark 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_get_qdata, :g_object_get_qdata, [GObject, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_object_set_qdata(object, quark, data)
  # @param [GObject] object 
  # @param [Integer] quark 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set_qdata, :g_object_set_qdata, [GObject, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_set_qdata_full(object, quark, data, destroy)
  # @param [GObject] object 
  # @param [Integer] quark 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set_qdata_full, :g_object_set_qdata_full, [GObject, :uint, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_steal_qdata(object, quark)
  # @param [GObject] object 
  # @param [Integer] quark 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_steal_qdata, :g_object_steal_qdata, [GObject, :uint], :pointer
  
  # (Not documented)
  # 
  # @method g_object_dup_qdata(object, quark, dup_func, user_data)
  # @param [GObject] object 
  # @param [Integer] quark 
  # @param [FFI::Pointer(GDuplicateFunc)] dup_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_dup_qdata, :g_object_dup_qdata, [GObject, :uint, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_object_replace_qdata(object, quark, oldval, newval, destroy, old_destroy)
  # @param [GObject] object 
  # @param [Integer] quark 
  # @param [FFI::Pointer(Gpointer)] oldval 
  # @param [FFI::Pointer(Gpointer)] newval 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @param [FFI::Pointer(*GDestroyNotify)] old_destroy 
  # @return [Integer] 
  # @scope class
  attach_function :g_object_replace_qdata, :g_object_replace_qdata, [GObject, :uint, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method g_object_get_data(object, key)
  # @param [GObject] object 
  # @param [String] key 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_get_data, :g_object_get_data, [GObject, :string], :pointer
  
  # (Not documented)
  # 
  # @method g_object_set_data(object, key, data)
  # @param [GObject] object 
  # @param [String] key 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set_data, :g_object_set_data, [GObject, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_set_data_full(object, key, data, destroy)
  # @param [GObject] object 
  # @param [String] key 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :g_object_set_data_full, :g_object_set_data_full, [GObject, :string, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_steal_data(object, key)
  # @param [GObject] object 
  # @param [String] key 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_steal_data, :g_object_steal_data, [GObject, :string], :pointer
  
  # (Not documented)
  # 
  # @method g_object_dup_data(object, key, dup_func, user_data)
  # @param [GObject] object 
  # @param [String] key 
  # @param [FFI::Pointer(GDuplicateFunc)] dup_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_object_dup_data, :g_object_dup_data, [GObject, :string, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_object_replace_data(object, key, oldval, newval, destroy, old_destroy)
  # @param [GObject] object 
  # @param [String] key 
  # @param [FFI::Pointer(Gpointer)] oldval 
  # @param [FFI::Pointer(Gpointer)] newval 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @param [FFI::Pointer(*GDestroyNotify)] old_destroy 
  # @return [Integer] 
  # @scope class
  attach_function :g_object_replace_data, :g_object_replace_data, [GObject, :string, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method g_object_watch_closure(object, closure)
  # @param [GObject] object 
  # @param [GClosure] closure 
  # @return [nil] 
  # @scope class
  attach_function :g_object_watch_closure, :g_object_watch_closure, [GObject, GClosure], :void
  
  # (Not documented)
  # 
  # @method g_cclosure_new_object(callback_func, object)
  # @param [FFI::Pointer(GCallback)] callback_func 
  # @param [GObject] object 
  # @return [GClosure] 
  # @scope class
  attach_function :g_cclosure_new_object, :g_cclosure_new_object, [:pointer, GObject], GClosure
  
  # (Not documented)
  # 
  # @method g_cclosure_new_object_swap(callback_func, object)
  # @param [FFI::Pointer(GCallback)] callback_func 
  # @param [GObject] object 
  # @return [GClosure] 
  # @scope class
  attach_function :g_cclosure_new_object_swap, :g_cclosure_new_object_swap, [:pointer, GObject], GClosure
  
  # (Not documented)
  # 
  # @method g_closure_new_object(sizeof_closure, object)
  # @param [Integer] sizeof_closure 
  # @param [GObject] object 
  # @return [GClosure] 
  # @scope class
  attach_function :g_closure_new_object, :g_closure_new_object, [:uint, GObject], GClosure
  
  # (Not documented)
  # 
  # @method g_value_set_object(value, v_object)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gpointer)] v_object 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_object, :g_value_set_object, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_get_object(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_value_get_object, :g_value_get_object, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_value_dup_object(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_value_dup_object, :g_value_dup_object, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_signal_connect_object(instance, detailed_signal, c_handler, gobject, connect_flags)
  # @param [FFI::Pointer(Gpointer)] instance 
  # @param [String] detailed_signal 
  # @param [FFI::Pointer(GCallback)] c_handler 
  # @param [FFI::Pointer(Gpointer)] gobject 
  # @param [Symbol from _enum_g_connect_flags_] connect_flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_signal_connect_object, :g_signal_connect_object, [:pointer, :string, :pointer, :pointer, :g_connect_flags], :ulong
  
  # (Not documented)
  # 
  # @method g_object_force_floating(object)
  # @param [GObject] object 
  # @return [nil] 
  # @scope class
  attach_function :g_object_force_floating, :g_object_force_floating, [GObject], :void
  
  # (Not documented)
  # 
  # @method g_object_run_dispose(object)
  # @param [GObject] object 
  # @return [nil] 
  # @scope class
  attach_function :g_object_run_dispose, :g_object_run_dispose, [GObject], :void
  
  # (Not documented)
  # 
  # @method g_value_take_object(value, v_object)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gpointer)] v_object 
  # @return [nil] 
  # @scope class
  attach_function :g_value_take_object, :g_value_take_object, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_set_object_take_ownership(value, v_object)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gpointer)] v_object 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_object_take_ownership, :g_value_set_object_take_ownership, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_object_compat_control(what, data)
  # @param [Integer] what 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :g_object_compat_control, :g_object_compat_control, [:uint, :pointer], :uint
  
  # (Not documented)
  # 
  # @method g_clear_object(object_ptr)
  # @param [FFI::Pointer(**GObject)] object_ptr 
  # @return [nil] 
  # @scope class
  attach_function :g_clear_object, :g_clear_object, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_weak_ref_init(weak_ref, object)
  # @param [FFI::Pointer(*GWeakRef)] weak_ref 
  # @param [FFI::Pointer(Gpointer)] object 
  # @return [nil] 
  # @scope class
  attach_function :g_weak_ref_init, :g_weak_ref_init, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_weak_ref_clear(weak_ref)
  # @param [FFI::Pointer(*GWeakRef)] weak_ref 
  # @return [nil] 
  # @scope class
  attach_function :g_weak_ref_clear, :g_weak_ref_clear, [:pointer], :void
  
  # (Not documented)
  # 
  # @method g_weak_ref_get(weak_ref)
  # @param [FFI::Pointer(*GWeakRef)] weak_ref 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_weak_ref_get, :g_weak_ref_get, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method g_weak_ref_set(weak_ref, object)
  # @param [FFI::Pointer(*GWeakRef)] weak_ref 
  # @param [FFI::Pointer(Gpointer)] object 
  # @return [nil] 
  # @scope class
  attach_function :g_weak_ref_set, :g_weak_ref_set, [:pointer, :pointer], :void
  
  # (Not documented)
  module GBindingWrappers
    # @return [Symbol from _enum_g_binding_flags_] 
    def get_flags()
      GObject.g_binding_get_flags(self)
    end
    
    # @return [GObject] 
    def get_source()
      GObject.new GObject.g_binding_get_source(self)
    end
    
    # @return [GObject] 
    def get_target()
      GObject.new GObject.g_binding_get_target(self)
    end
    
    # @return [String] 
    def get_source_property()
      GObject.g_binding_get_source_property(self)
    end
    
    # @return [String] 
    def get_target_property()
      GObject.g_binding_get_target_property(self)
    end
  end
  
  class GBinding < FFI::Struct
    include GBindingWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_binding_transform_func_(binding, source_value, target_value, user_data)
  # @param [GBinding] binding 
  # @param [GValue] source_value 
  # @param [GValue] target_value 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :g_binding_transform_func, [GBinding, GValue, GValue, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:g_binding_flags).</em>
  # 
  # === Options:
  # :default ::
  #   < prefix=G_BINDING >
  # :bidirectional ::
  #   
  # :sync_create ::
  #   
  # :invert_boolean ::
  #   
  # 
  # @method _enum_g_binding_flags_
  # @return [Symbol]
  # @scope class
  enum :g_binding_flags, [
    :default, 0,
    :bidirectional, 1,
    :sync_create, 2,
    :invert_boolean, 4
  ]
  
  # (Not documented)
  # 
  # @method g_binding_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_binding_flags_get_type, :g_binding_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_binding_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_binding_get_type, :g_binding_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_binding_get_flags(binding)
  # @param [GBinding] binding 
  # @return [Symbol from _enum_g_binding_flags_] 
  # @scope class
  attach_function :g_binding_get_flags, :g_binding_get_flags, [GBinding], :g_binding_flags
  
  # (Not documented)
  # 
  # @method g_binding_get_source(binding)
  # @param [GBinding] binding 
  # @return [GObject] 
  # @scope class
  attach_function :g_binding_get_source, :g_binding_get_source, [GBinding], GObject
  
  # (Not documented)
  # 
  # @method g_binding_get_target(binding)
  # @param [GBinding] binding 
  # @return [GObject] 
  # @scope class
  attach_function :g_binding_get_target, :g_binding_get_target, [GBinding], GObject
  
  # (Not documented)
  # 
  # @method g_binding_get_source_property(binding)
  # @param [GBinding] binding 
  # @return [String] 
  # @scope class
  attach_function :g_binding_get_source_property, :g_binding_get_source_property, [GBinding], :string
  
  # (Not documented)
  # 
  # @method g_binding_get_target_property(binding)
  # @param [GBinding] binding 
  # @return [String] 
  # @scope class
  attach_function :g_binding_get_target_property, :g_binding_get_target_property, [GBinding], :string
  
  # (Not documented)
  # 
  # @method g_object_bind_property(source, source_property, target, target_property, flags)
  # @param [FFI::Pointer(Gpointer)] source 
  # @param [String] source_property 
  # @param [FFI::Pointer(Gpointer)] target 
  # @param [String] target_property 
  # @param [Symbol from _enum_g_binding_flags_] flags 
  # @return [GBinding] 
  # @scope class
  attach_function :g_object_bind_property, :g_object_bind_property, [:pointer, :string, :pointer, :string, :g_binding_flags], GBinding
  
  # (Not documented)
  # 
  # @method g_object_bind_property_full(source, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify)
  # @param [FFI::Pointer(Gpointer)] source 
  # @param [String] source_property 
  # @param [FFI::Pointer(Gpointer)] target 
  # @param [String] target_property 
  # @param [Symbol from _enum_g_binding_flags_] flags 
  # @param [Proc(_callback_g_binding_transform_func_)] transform_to 
  # @param [Proc(_callback_g_binding_transform_func_)] transform_from 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] notify 
  # @return [GBinding] 
  # @scope class
  attach_function :g_object_bind_property_full, :g_object_bind_property_full, [:pointer, :string, :pointer, :string, :g_binding_flags, :g_binding_transform_func, :g_binding_transform_func, :pointer, :pointer], GBinding
  
  # (Not documented)
  # 
  # @method g_object_bind_property_with_closures(source, source_property, target, target_property, flags, transform_to, transform_from)
  # @param [FFI::Pointer(Gpointer)] source 
  # @param [String] source_property 
  # @param [FFI::Pointer(Gpointer)] target 
  # @param [String] target_property 
  # @param [Symbol from _enum_g_binding_flags_] flags 
  # @param [GClosure] transform_to 
  # @param [GClosure] transform_from 
  # @return [GBinding] 
  # @scope class
  attach_function :g_object_bind_property_with_closures, :g_object_bind_property_with_closures, [:pointer, :string, :pointer, :string, :g_binding_flags, GClosure, GClosure], GBinding
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type_class ::
  #   (GTypeClass) 
  # :minimum ::
  #   (Integer) < public >
  # :maximum ::
  #   (Integer) 
  # :n_values ::
  #   (Integer) 
  # :values ::
  #   (FFI::Pointer(*GEnumValue)) 
  class GEnumClass < FFI::Struct
    layout :g_type_class, GTypeClass.by_value,
           :minimum, :int,
           :maximum, :int,
           :n_values, :uint,
           :values, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_type_class ::
  #   (GTypeClass) 
  # :mask ::
  #   (Integer) < public >
  # :n_values ::
  #   (Integer) 
  # :values ::
  #   (FFI::Pointer(*GFlagsValue)) 
  class GFlagsClass < FFI::Struct
    layout :g_type_class, GTypeClass.by_value,
           :mask, :uint,
           :n_values, :uint,
           :values, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :value ::
  #   (Integer) 
  # :value_name ::
  #   (String) 
  # :value_nick ::
  #   (String) 
  class GEnumValue < FFI::Struct
    layout :value, :int,
           :value_name, :string,
           :value_nick, :string
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :value ::
  #   (Integer) 
  # :value_name ::
  #   (String) 
  # :value_nick ::
  #   (String) 
  class GFlagsValue < FFI::Struct
    layout :value, :uint,
           :value_name, :string,
           :value_nick, :string
  end
  
  # (Not documented)
  # 
  # @method g_enum_get_value(enum_class, value)
  # @param [GEnumClass] enum_class 
  # @param [Integer] value 
  # @return [GEnumValue] 
  # @scope class
  attach_function :g_enum_get_value, :g_enum_get_value, [GEnumClass, :int], GEnumValue
  
  # (Not documented)
  # 
  # @method g_enum_get_value_by_name(enum_class, name)
  # @param [GEnumClass] enum_class 
  # @param [String] name 
  # @return [GEnumValue] 
  # @scope class
  attach_function :g_enum_get_value_by_name, :g_enum_get_value_by_name, [GEnumClass, :string], GEnumValue
  
  # (Not documented)
  # 
  # @method g_enum_get_value_by_nick(enum_class, nick)
  # @param [GEnumClass] enum_class 
  # @param [String] nick 
  # @return [GEnumValue] 
  # @scope class
  attach_function :g_enum_get_value_by_nick, :g_enum_get_value_by_nick, [GEnumClass, :string], GEnumValue
  
  # (Not documented)
  # 
  # @method g_flags_get_first_value(flags_class, value)
  # @param [GFlagsClass] flags_class 
  # @param [Integer] value 
  # @return [GFlagsValue] 
  # @scope class
  attach_function :g_flags_get_first_value, :g_flags_get_first_value, [GFlagsClass, :uint], GFlagsValue
  
  # (Not documented)
  # 
  # @method g_flags_get_value_by_name(flags_class, name)
  # @param [GFlagsClass] flags_class 
  # @param [String] name 
  # @return [GFlagsValue] 
  # @scope class
  attach_function :g_flags_get_value_by_name, :g_flags_get_value_by_name, [GFlagsClass, :string], GFlagsValue
  
  # (Not documented)
  # 
  # @method g_flags_get_value_by_nick(flags_class, nick)
  # @param [GFlagsClass] flags_class 
  # @param [String] nick 
  # @return [GFlagsValue] 
  # @scope class
  attach_function :g_flags_get_value_by_nick, :g_flags_get_value_by_nick, [GFlagsClass, :string], GFlagsValue
  
  # (Not documented)
  # 
  # @method g_value_set_enum(value, v_enum)
  # @param [GValue] value 
  # @param [Integer] v_enum 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_enum, :g_value_set_enum, [GValue, :int], :void
  
  # (Not documented)
  # 
  # @method g_value_get_enum(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_enum, :g_value_get_enum, [GValue], :int
  
  # (Not documented)
  # 
  # @method g_value_set_flags(value, v_flags)
  # @param [GValue] value 
  # @param [Integer] v_flags 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_flags, :g_value_set_flags, [GValue, :uint], :void
  
  # (Not documented)
  # 
  # @method g_value_get_flags(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_flags, :g_value_get_flags, [GValue], :uint
  
  # (Not documented)
  # 
  # @method g_enum_register_static(name, const_static_values)
  # @param [String] name 
  # @param [GEnumValue] const_static_values 
  # @return [Integer] 
  # @scope class
  attach_function :g_enum_register_static, :g_enum_register_static, [:string, GEnumValue], :uint
  
  # (Not documented)
  # 
  # @method g_flags_register_static(name, const_static_values)
  # @param [String] name 
  # @param [GFlagsValue] const_static_values 
  # @return [Integer] 
  # @scope class
  attach_function :g_flags_register_static, :g_flags_register_static, [:string, GFlagsValue], :uint
  
  # (Not documented)
  # 
  # @method g_enum_complete_type_info(g_enum_type, info, const_values)
  # @param [Integer] g_enum_type 
  # @param [GTypeInfo] info 
  # @param [GEnumValue] const_values 
  # @return [nil] 
  # @scope class
  attach_function :g_enum_complete_type_info, :g_enum_complete_type_info, [:uint, GTypeInfo, GEnumValue], :void
  
  # (Not documented)
  # 
  # @method g_flags_complete_type_info(g_flags_type, info, const_values)
  # @param [Integer] g_flags_type 
  # @param [GTypeInfo] info 
  # @param [GFlagsValue] const_values 
  # @return [nil] 
  # @scope class
  attach_function :g_flags_complete_type_info, :g_flags_complete_type_info, [:uint, GTypeInfo, GFlagsValue], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecChar < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :char,
           :maximum, :char,
           :default_value, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecUChar < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :uchar,
           :maximum, :uchar,
           :default_value, :uchar
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecBoolean < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :default_value, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecInt < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :int,
           :maximum, :int,
           :default_value, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecUInt < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :uint,
           :maximum, :uint,
           :default_value, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecLong < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :long,
           :maximum, :long,
           :default_value, :long
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecULong < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :ulong,
           :maximum, :ulong,
           :default_value, :ulong
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecInt64 < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :long_long,
           :maximum, :long_long,
           :default_value, :long_long
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Integer) 
  # :maximum ::
  #   (Integer) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecUInt64 < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :ulong_long,
           :maximum, :ulong_long,
           :default_value, :ulong_long
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecUnichar < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :default_value, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :enum_class ::
  #   (GEnumClass) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecEnum < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :enum_class, GEnumClass,
           :default_value, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :flags_class ::
  #   (GFlagsClass) 
  # :default_value ::
  #   (Integer) 
  class GParamSpecFlags < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :flags_class, GFlagsClass,
           :default_value, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Float) 
  # :maximum ::
  #   (Float) 
  # :default_value ::
  #   (Float) 
  # :epsilon ::
  #   (Float) 
  class GParamSpecFloat < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :float,
           :maximum, :float,
           :default_value, :float,
           :epsilon, :float
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :minimum ::
  #   (Float) 
  # :maximum ::
  #   (Float) 
  # :default_value ::
  #   (Float) 
  # :epsilon ::
  #   (Float) 
  class GParamSpecDouble < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :minimum, :double,
           :maximum, :double,
           :default_value, :double,
           :epsilon, :double
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :default_value ::
  #   (String) 
  # :cset_first ::
  #   (String) 
  # :cset_nth ::
  #   (String) 
  # :substitutor ::
  #   (Integer) 
  # :null_fold_if_empty ::
  #   (Integer) 
  # :ensure_non_null ::
  #   (Integer) 
  class GParamSpecString < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :default_value, :string,
           :cset_first, :string,
           :cset_nth, :string,
           :substitutor, :char,
           :null_fold_if_empty, :uint,
           :ensure_non_null, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  class GParamSpecParam < FFI::Struct
    layout :parent_instance, GParamSpec.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  class GParamSpecBoxed < FFI::Struct
    layout :parent_instance, GParamSpec.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  class GParamSpecPointer < FFI::Struct
    layout :parent_instance, GParamSpec.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :element_spec ::
  #   (GParamSpec) 
  # :fixed_n_elements ::
  #   (Integer) 
  class GParamSpecValueArray < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :element_spec, GParamSpec,
           :fixed_n_elements, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  class GParamSpecObject < FFI::Struct
    layout :parent_instance, GParamSpec.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) < private >
  # :overridden ::
  #   (GParamSpec) 
  class GParamSpecOverride < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :overridden, GParamSpec
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :is_a_type ::
  #   (Integer) 
  class GParamSpecGType < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :is_a_type, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GParamSpec) 
  # :type ::
  #   (FFI::Pointer(*GVariantType)) 
  # :default_value ::
  #   (FFI::Pointer(*GVariant)) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) < private >
  class GParamSpecVariant < FFI::Struct
    layout :parent_instance, GParamSpec.by_value,
           :type, :pointer,
           :default_value, :pointer,
           :padding, [:pointer, 4]
  end
  
  # (Not documented)
  # 
  # @method g_param_spec_char(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_char, :g_param_spec_char, [:string, :string, :string, :char, :char, :char, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_uchar(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_uchar, :g_param_spec_uchar, [:string, :string, :string, :uchar, :uchar, :uchar, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_boolean(name, nick, blurb, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_boolean, :g_param_spec_boolean, [:string, :string, :string, :int, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_int(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_int, :g_param_spec_int, [:string, :string, :string, :int, :int, :int, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_uint(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_uint, :g_param_spec_uint, [:string, :string, :string, :uint, :uint, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_long(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_long, :g_param_spec_long, [:string, :string, :string, :long, :long, :long, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_ulong(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_ulong, :g_param_spec_ulong, [:string, :string, :string, :ulong, :ulong, :ulong, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_int64(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_int64, :g_param_spec_int64, [:string, :string, :string, :long_long, :long_long, :long_long, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_uint64(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] minimum 
  # @param [Integer] maximum 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_uint64, :g_param_spec_uint64, [:string, :string, :string, :ulong_long, :ulong_long, :ulong_long, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_unichar(name, nick, blurb, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_unichar, :g_param_spec_unichar, [:string, :string, :string, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_enum(name, nick, blurb, enum_type, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] enum_type 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_enum, :g_param_spec_enum, [:string, :string, :string, :uint, :int, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_flags(name, nick, blurb, flags_type, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] flags_type 
  # @param [Integer] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_flags, :g_param_spec_flags, [:string, :string, :string, :uint, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_float(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Float] minimum 
  # @param [Float] maximum 
  # @param [Float] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_float, :g_param_spec_float, [:string, :string, :string, :float, :float, :float, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_double(name, nick, blurb, minimum, maximum, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Float] minimum 
  # @param [Float] maximum 
  # @param [Float] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_double, :g_param_spec_double, [:string, :string, :string, :double, :double, :double, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_string(name, nick, blurb, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [String] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_string, :g_param_spec_string, [:string, :string, :string, :string, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_param(name, nick, blurb, param_type, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] param_type 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_param, :g_param_spec_param, [:string, :string, :string, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_boxed(name, nick, blurb, boxed_type, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] boxed_type 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_boxed, :g_param_spec_boxed, [:string, :string, :string, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_pointer(name, nick, blurb, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_pointer, :g_param_spec_pointer, [:string, :string, :string, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_value_array(name, nick, blurb, element_spec, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [GParamSpec] element_spec 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_value_array, :g_param_spec_value_array, [:string, :string, :string, GParamSpec, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_object(name, nick, blurb, object_type, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] object_type 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_object, :g_param_spec_object, [:string, :string, :string, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_override(name, overridden)
  # @param [String] name 
  # @param [GParamSpec] overridden 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_override, :g_param_spec_override, [:string, GParamSpec], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_gtype(name, nick, blurb, is_a_type, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [Integer] is_a_type 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_gtype, :g_param_spec_gtype, [:string, :string, :string, :uint, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_param_spec_variant(name, nick, blurb, type, default_value, flags)
  # @param [String] name 
  # @param [String] nick 
  # @param [String] blurb 
  # @param [FFI::Pointer(*GVariantType)] type 
  # @param [FFI::Pointer(*GVariant)] default_value 
  # @param [Symbol from _enum_g_param_flags_] flags 
  # @return [GParamSpec] 
  # @scope class
  attach_function :g_param_spec_variant, :g_param_spec_variant, [:string, :string, :string, :pointer, :pointer, :g_param_flags], GParamSpec
  
  # (Not documented)
  # 
  # @method g_source_set_closure(source, closure)
  # @param [FFI::Pointer(*GSource)] source 
  # @param [GClosure] closure 
  # @return [nil] 
  # @scope class
  attach_function :g_source_set_closure, :g_source_set_closure, [:pointer, GClosure], :void
  
  # (Not documented)
  # 
  # @method g_source_set_dummy_callback(source)
  # @param [FFI::Pointer(*GSource)] source 
  # @return [nil] 
  # @scope class
  attach_function :g_source_set_dummy_callback, :g_source_set_dummy_callback, [:pointer], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GObject) 
  # :use_count ::
  #   (Integer) 
  # :type_infos ::
  #   (FFI::Pointer(*GSList)) 
  # :interface_infos ::
  #   (FFI::Pointer(*GSList)) 
  # :name ::
  #   (String) < public >
  module GTypeModuleWrappers
    # @return [Integer] 
    def use()
      GObject.g_type_module_use(self)
    end
    
    # @return [nil] 
    def unuse()
      GObject.g_type_module_unuse(self)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      GObject.g_type_module_set_name(self, name)
    end
    
    # @param [Integer] parent_type 
    # @param [String] type_name 
    # @param [GTypeInfo] type_info 
    # @param [Symbol from _enum_g_type_flags_] flags 
    # @return [Integer] 
    def register_type(parent_type, type_name, type_info, flags)
      GObject.g_type_module_register_type(self, parent_type, type_name, type_info, flags)
    end
    
    # @param [Integer] instance_type 
    # @param [Integer] interface_type 
    # @param [GInterfaceInfo] interface_info 
    # @return [nil] 
    def add_interface(instance_type, interface_type, interface_info)
      GObject.g_type_module_add_interface(self, instance_type, interface_type, interface_info)
    end
    
    # @param [String] name 
    # @param [GEnumValue] const_static_values 
    # @return [Integer] 
    def register_enum(name, const_static_values)
      GObject.g_type_module_register_enum(self, name, const_static_values)
    end
    
    # @param [String] name 
    # @param [GFlagsValue] const_static_values 
    # @return [Integer] 
    def register_flags(name, const_static_values)
      GObject.g_type_module_register_flags(self, name, const_static_values)
    end
  end
  
  class GTypeModule < FFI::Struct
    include GTypeModuleWrappers
    layout :parent_instance, GObject.by_value,
           :use_count, :uint,
           :type_infos, :pointer,
           :interface_infos, :pointer,
           :name, :string
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GObjectClass) 
  # :load ::
  #   (FFI::Pointer(*)) < public >
  # :unload ::
  #   (FFI::Pointer(*)) 
  # :reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :reserved2 ::
  #   (FFI::Pointer(*)) 
  # :reserved3 ::
  #   (FFI::Pointer(*)) 
  # :reserved4 ::
  #   (FFI::Pointer(*)) 
  class GTypeModuleClass < FFI::Struct
    layout :parent_class, GObjectClass.by_value,
           :load, :pointer,
           :unload, :pointer,
           :reserved1, :pointer,
           :reserved2, :pointer,
           :reserved3, :pointer,
           :reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method g_type_module_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_type_module_get_type, :g_type_module_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_type_module_use(module_)
  # @param [GTypeModule] module_ 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_module_use, :g_type_module_use, [GTypeModule], :int
  
  # (Not documented)
  # 
  # @method g_type_module_unuse(module_)
  # @param [GTypeModule] module_ 
  # @return [nil] 
  # @scope class
  attach_function :g_type_module_unuse, :g_type_module_unuse, [GTypeModule], :void
  
  # (Not documented)
  # 
  # @method g_type_module_set_name(module_, name)
  # @param [GTypeModule] module_ 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :g_type_module_set_name, :g_type_module_set_name, [GTypeModule, :string], :void
  
  # (Not documented)
  # 
  # @method g_type_module_register_type(module_, parent_type, type_name, type_info, flags)
  # @param [GTypeModule] module_ 
  # @param [Integer] parent_type 
  # @param [String] type_name 
  # @param [GTypeInfo] type_info 
  # @param [Symbol from _enum_g_type_flags_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_module_register_type, :g_type_module_register_type, [GTypeModule, :uint, :string, GTypeInfo, :g_type_flags], :uint
  
  # (Not documented)
  # 
  # @method g_type_module_add_interface(module_, instance_type, interface_type, interface_info)
  # @param [GTypeModule] module_ 
  # @param [Integer] instance_type 
  # @param [Integer] interface_type 
  # @param [GInterfaceInfo] interface_info 
  # @return [nil] 
  # @scope class
  attach_function :g_type_module_add_interface, :g_type_module_add_interface, [GTypeModule, :uint, :uint, GInterfaceInfo], :void
  
  # (Not documented)
  # 
  # @method g_type_module_register_enum(module_, name, const_static_values)
  # @param [GTypeModule] module_ 
  # @param [String] name 
  # @param [GEnumValue] const_static_values 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_module_register_enum, :g_type_module_register_enum, [GTypeModule, :string, GEnumValue], :uint
  
  # (Not documented)
  # 
  # @method g_type_module_register_flags(module_, name, const_static_values)
  # @param [GTypeModule] module_ 
  # @param [String] name 
  # @param [GFlagsValue] const_static_values 
  # @return [Integer] 
  # @scope class
  attach_function :g_type_module_register_flags, :g_type_module_register_flags, [GTypeModule, :string, GFlagsValue], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_type_plugin_complete_type_info_(g_type, info, value_table)
  # @param [Integer] g_type 
  # @param [GTypeInfo] info 
  # @param [GTypeValueTable] value_table 
  # @return [GTypePlugin] 
  # @scope class
  callback :g_type_plugin_complete_type_info, [:uint, GTypeInfo, GTypeValueTable], GTypePlugin
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_g_type_plugin_complete_interface_info_(instance_type, interface_type, info)
  # @param [Integer] instance_type 
  # @param [Integer] interface_type 
  # @param [GInterfaceInfo] info 
  # @return [GTypePlugin] 
  # @scope class
  callback :g_type_plugin_complete_interface_info, [:uint, :uint, GInterfaceInfo], GTypePlugin
  
  # (Not documented)
  # 
  # = Fields:
  # :base_iface ::
  #   (GTypeInterface) < private >
  # :use_plugin ::
  #   (FFI::Pointer(GTypePluginUse)) < public >
  # :unuse_plugin ::
  #   (FFI::Pointer(GTypePluginUnuse)) 
  # :complete_type_info ::
  #   (Proc(_callback_g_type_plugin_complete_type_info_)) 
  # :complete_interface_info ::
  #   (Proc(_callback_g_type_plugin_complete_interface_info_)) 
  class GTypePluginClass < FFI::Struct
    layout :base_iface, GTypeInterface.by_value,
           :use_plugin, :pointer,
           :unuse_plugin, :pointer,
           :complete_type_info, :g_type_plugin_complete_type_info,
           :complete_interface_info, :g_type_plugin_complete_interface_info
  end
  
  # (Not documented)
  # 
  # @method g_type_plugin_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_type_plugin_get_type, :g_type_plugin_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_type_plugin_use(plugin)
  # @param [GTypePlugin] plugin 
  # @return [nil] 
  # @scope class
  attach_function :g_type_plugin_use, :g_type_plugin_use, [GTypePlugin], :void
  
  # (Not documented)
  # 
  # @method g_type_plugin_unuse(plugin)
  # @param [GTypePlugin] plugin 
  # @return [nil] 
  # @scope class
  attach_function :g_type_plugin_unuse, :g_type_plugin_unuse, [GTypePlugin], :void
  
  # (Not documented)
  # 
  # @method g_type_plugin_complete_type_info(plugin, g_type, info, value_table)
  # @param [GTypePlugin] plugin 
  # @param [Integer] g_type 
  # @param [GTypeInfo] info 
  # @param [GTypeValueTable] value_table 
  # @return [nil] 
  # @scope class
  attach_function :g_type_plugin_complete_type_info, :g_type_plugin_complete_type_info, [GTypePlugin, :uint, GTypeInfo, GTypeValueTable], :void
  
  # (Not documented)
  # 
  # @method g_type_plugin_complete_interface_info(plugin, instance_type, interface_type, info)
  # @param [GTypePlugin] plugin 
  # @param [Integer] instance_type 
  # @param [Integer] interface_type 
  # @param [GInterfaceInfo] info 
  # @return [nil] 
  # @scope class
  attach_function :g_type_plugin_complete_interface_info, :g_type_plugin_complete_interface_info, [GTypePlugin, :uint, :uint, GInterfaceInfo], :void
  
  # GValueArray:
  # @n_values: number of values contained in the array
  # @values: array of values
  # 
  # A #GValueArray contains an array of #GValue elements.
  # 
  # = Fields:
  # :n_values ::
  #   (Integer) 
  # :values ::
  #   (GValue) 
  # :n_prealloced ::
  #   (Integer) < private >
  module GValueArrayWrappers
    # @param [Integer] index 
    # @return [GValue] 
    def get_nth(index)
      GValue.new GObject.g_value_array_get_nth(self, index)
    end
    
    # @return [nil] 
    def free()
      GObject.g_value_array_free(self)
    end
    
    # @return [GValueArray] 
    def copy()
      GValueArray.new GObject.g_value_array_copy(self)
    end
    
    # @param [GValue] value 
    # @return [GValueArray] 
    def prepend(value)
      GValueArray.new GObject.g_value_array_prepend(self, value)
    end
    
    # @param [GValue] value 
    # @return [GValueArray] 
    def append(value)
      GValueArray.new GObject.g_value_array_append(self, value)
    end
    
    # @param [Integer] index 
    # @param [GValue] value 
    # @return [GValueArray] 
    def insert(index, value)
      GValueArray.new GObject.g_value_array_insert(self, index, value)
    end
    
    # @param [Integer] index 
    # @return [GValueArray] 
    def remove(index)
      GValueArray.new GObject.g_value_array_remove(self, index)
    end
    
    # @param [FFI::Pointer(GCompareFunc)] compare_func 
    # @return [GValueArray] 
    def sort(compare_func)
      GValueArray.new GObject.g_value_array_sort(self, compare_func)
    end
    
    # @param [FFI::Pointer(GCompareDataFunc)] compare_func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [GValueArray] 
    def sort_with_data(compare_func, user_data)
      GValueArray.new GObject.g_value_array_sort_with_data(self, compare_func, user_data)
    end
  end
  
  class GValueArray < FFI::Struct
    include GValueArrayWrappers
    layout :n_values, :uint,
           :values, GValue,
           :n_prealloced, :uint
  end
  
  # (Not documented)
  # 
  # @method g_value_array_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_value_array_get_type, :g_value_array_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_value_array_get_nth(value_array, index)
  # @param [GValueArray] value_array 
  # @param [Integer] index 
  # @return [GValue] 
  # @scope class
  attach_function :g_value_array_get_nth, :g_value_array_get_nth, [GValueArray, :uint], GValue
  
  # (Not documented)
  # 
  # @method g_value_array_new(n_prealloced)
  # @param [Integer] n_prealloced 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_new, :g_value_array_new, [:uint], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_free(value_array)
  # @param [GValueArray] value_array 
  # @return [nil] 
  # @scope class
  attach_function :g_value_array_free, :g_value_array_free, [GValueArray], :void
  
  # (Not documented)
  # 
  # @method g_value_array_copy(value_array)
  # @param [GValueArray] value_array 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_copy, :g_value_array_copy, [GValueArray], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_prepend(value_array, value)
  # @param [GValueArray] value_array 
  # @param [GValue] value 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_prepend, :g_value_array_prepend, [GValueArray, GValue], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_append(value_array, value)
  # @param [GValueArray] value_array 
  # @param [GValue] value 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_append, :g_value_array_append, [GValueArray, GValue], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_insert(value_array, index, value)
  # @param [GValueArray] value_array 
  # @param [Integer] index 
  # @param [GValue] value 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_insert, :g_value_array_insert, [GValueArray, :uint, GValue], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_remove(value_array, index)
  # @param [GValueArray] value_array 
  # @param [Integer] index 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_remove, :g_value_array_remove, [GValueArray, :uint], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_sort(value_array, compare_func)
  # @param [GValueArray] value_array 
  # @param [FFI::Pointer(GCompareFunc)] compare_func 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_sort, :g_value_array_sort, [GValueArray, :pointer], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_array_sort_with_data(value_array, compare_func, user_data)
  # @param [GValueArray] value_array 
  # @param [FFI::Pointer(GCompareDataFunc)] compare_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [GValueArray] 
  # @scope class
  attach_function :g_value_array_sort_with_data, :g_value_array_sort_with_data, [GValueArray, :pointer, :pointer], GValueArray
  
  # (Not documented)
  # 
  # @method g_value_set_char(value, v_char)
  # @param [GValue] value 
  # @param [Integer] v_char 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_char, :g_value_set_char, [GValue, :char], :void
  
  # (Not documented)
  # 
  # @method g_value_get_char(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_char, :g_value_get_char, [GValue], :char
  
  # (Not documented)
  # 
  # @method g_value_set_schar(value, v_char)
  # @param [GValue] value 
  # @param [Integer] v_char 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_schar, :g_value_set_schar, [GValue, :char], :void
  
  # (Not documented)
  # 
  # @method g_value_get_schar(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_schar, :g_value_get_schar, [GValue], :char
  
  # (Not documented)
  # 
  # @method g_value_set_uchar(value, v_uchar)
  # @param [GValue] value 
  # @param [Integer] v_uchar 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_uchar, :g_value_set_uchar, [GValue, :uchar], :void
  
  # (Not documented)
  # 
  # @method g_value_get_uchar(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_uchar, :g_value_get_uchar, [GValue], :uchar
  
  # (Not documented)
  # 
  # @method g_value_set_boolean(value, v_boolean)
  # @param [GValue] value 
  # @param [Integer] v_boolean 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_boolean, :g_value_set_boolean, [GValue, :int], :void
  
  # (Not documented)
  # 
  # @method g_value_get_boolean(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_boolean, :g_value_get_boolean, [GValue], :int
  
  # (Not documented)
  # 
  # @method g_value_set_int(value, v_int)
  # @param [GValue] value 
  # @param [Integer] v_int 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_int, :g_value_set_int, [GValue, :int], :void
  
  # (Not documented)
  # 
  # @method g_value_get_int(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_int, :g_value_get_int, [GValue], :int
  
  # (Not documented)
  # 
  # @method g_value_set_uint(value, v_uint)
  # @param [GValue] value 
  # @param [Integer] v_uint 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_uint, :g_value_set_uint, [GValue, :uint], :void
  
  # (Not documented)
  # 
  # @method g_value_get_uint(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_uint, :g_value_get_uint, [GValue], :uint
  
  # (Not documented)
  # 
  # @method g_value_set_long(value, v_long)
  # @param [GValue] value 
  # @param [Integer] v_long 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_long, :g_value_set_long, [GValue, :long], :void
  
  # (Not documented)
  # 
  # @method g_value_get_long(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_long, :g_value_get_long, [GValue], :long
  
  # (Not documented)
  # 
  # @method g_value_set_ulong(value, v_ulong)
  # @param [GValue] value 
  # @param [Integer] v_ulong 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_ulong, :g_value_set_ulong, [GValue, :ulong], :void
  
  # (Not documented)
  # 
  # @method g_value_get_ulong(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_ulong, :g_value_get_ulong, [GValue], :ulong
  
  # (Not documented)
  # 
  # @method g_value_set_int64(value, v_int64)
  # @param [GValue] value 
  # @param [Integer] v_int64 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_int64, :g_value_set_int64, [GValue, :long_long], :void
  
  # (Not documented)
  # 
  # @method g_value_get_int64(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_int64, :g_value_get_int64, [GValue], :long_long
  
  # (Not documented)
  # 
  # @method g_value_set_uint64(value, v_uint64)
  # @param [GValue] value 
  # @param [Integer] v_uint64 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_uint64, :g_value_set_uint64, [GValue, :ulong_long], :void
  
  # (Not documented)
  # 
  # @method g_value_get_uint64(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_uint64, :g_value_get_uint64, [GValue], :ulong_long
  
  # (Not documented)
  # 
  # @method g_value_set_float(value, v_float)
  # @param [GValue] value 
  # @param [Float] v_float 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_float, :g_value_set_float, [GValue, :float], :void
  
  # (Not documented)
  # 
  # @method g_value_get_float(value)
  # @param [GValue] value 
  # @return [Float] 
  # @scope class
  attach_function :g_value_get_float, :g_value_get_float, [GValue], :float
  
  # (Not documented)
  # 
  # @method g_value_set_double(value, v_double)
  # @param [GValue] value 
  # @param [Float] v_double 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_double, :g_value_set_double, [GValue, :double], :void
  
  # (Not documented)
  # 
  # @method g_value_get_double(value)
  # @param [GValue] value 
  # @return [Float] 
  # @scope class
  attach_function :g_value_get_double, :g_value_get_double, [GValue], :double
  
  # (Not documented)
  # 
  # @method g_value_set_string(value, v_string)
  # @param [GValue] value 
  # @param [String] v_string 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_string, :g_value_set_string, [GValue, :string], :void
  
  # (Not documented)
  # 
  # @method g_value_set_static_string(value, v_string)
  # @param [GValue] value 
  # @param [String] v_string 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_static_string, :g_value_set_static_string, [GValue, :string], :void
  
  # (Not documented)
  # 
  # @method g_value_get_string(value)
  # @param [GValue] value 
  # @return [String] 
  # @scope class
  attach_function :g_value_get_string, :g_value_get_string, [GValue], :string
  
  # (Not documented)
  # 
  # @method g_value_dup_string(value)
  # @param [GValue] value 
  # @return [String] 
  # @scope class
  attach_function :g_value_dup_string, :g_value_dup_string, [GValue], :string
  
  # (Not documented)
  # 
  # @method g_value_set_pointer(value, v_pointer)
  # @param [GValue] value 
  # @param [FFI::Pointer(Gpointer)] v_pointer 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_pointer, :g_value_set_pointer, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_get_pointer(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :g_value_get_pointer, :g_value_get_pointer, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_gtype_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :g_gtype_get_type, :g_gtype_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method g_value_set_gtype(value, v_gtype)
  # @param [GValue] value 
  # @param [Integer] v_gtype 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_gtype, :g_value_set_gtype, [GValue, :uint], :void
  
  # (Not documented)
  # 
  # @method g_value_get_gtype(value)
  # @param [GValue] value 
  # @return [Integer] 
  # @scope class
  attach_function :g_value_get_gtype, :g_value_get_gtype, [GValue], :uint
  
  # (Not documented)
  # 
  # @method g_value_set_variant(value, variant)
  # @param [GValue] value 
  # @param [FFI::Pointer(*GVariant)] variant 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_variant, :g_value_set_variant, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_take_variant(value, variant)
  # @param [GValue] value 
  # @param [FFI::Pointer(*GVariant)] variant 
  # @return [nil] 
  # @scope class
  attach_function :g_value_take_variant, :g_value_take_variant, [GValue, :pointer], :void
  
  # (Not documented)
  # 
  # @method g_value_get_variant(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(*GVariant)] 
  # @scope class
  attach_function :g_value_get_variant, :g_value_get_variant, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_value_dup_variant(value)
  # @param [GValue] value 
  # @return [FFI::Pointer(*GVariant)] 
  # @scope class
  attach_function :g_value_dup_variant, :g_value_dup_variant, [GValue], :pointer
  
  # (Not documented)
  # 
  # @method g_pointer_type_register_static(name)
  # @param [String] name 
  # @return [Integer] 
  # @scope class
  attach_function :g_pointer_type_register_static, :g_pointer_type_register_static, [:string], :uint
  
  # (Not documented)
  # 
  # @method g_strdup_value_contents(value)
  # @param [GValue] value 
  # @return [String] 
  # @scope class
  attach_function :g_strdup_value_contents, :g_strdup_value_contents, [GValue], :string
  
  # (Not documented)
  # 
  # @method g_value_take_string(value, v_string)
  # @param [GValue] value 
  # @param [String] v_string 
  # @return [nil] 
  # @scope class
  attach_function :g_value_take_string, :g_value_take_string, [GValue, :string], :void
  
  # (Not documented)
  # 
  # @method g_value_set_string_take_ownership(value, v_string)
  # @param [GValue] value 
  # @param [String] v_string 
  # @return [nil] 
  # @scope class
  attach_function :g_value_set_string_take_ownership, :g_value_set_string_take_ownership, [GValue, :string], :void
  
  # GTypeCValue:
  # @v_int: the field for holding integer values
  # @v_long: the field for holding long integer values
  # @v_int64: the field for holding 64 bit integer values
  # @v_double: the field for holding floating point values
  # @v_pointer: the field for holding pointers
  # 
  # A union holding one collected value.
  # 
  # = Fields:
  # :v_int ::
  #   (Integer) 
  # :v_long ::
  #   (Integer) 
  # :v_int64 ::
  #   (Integer) 
  # :v_double ::
  #   (Float) 
  # :v_pointer ::
  #   (FFI::Pointer(Gpointer)) 
  class GTypeCValue < FFI::Union
    layout :v_int, :int,
           :v_long, :long,
           :v_int64, :long_long,
           :v_double, :double,
           :v_pointer, :pointer
  end
  
end
