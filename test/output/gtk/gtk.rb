# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Gtk
  extend FFI::Library
  ffi_lib 'libgtk-3-0'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  GTK_PATH_PRIO_MASK = 0x0f
  
  GTK_STOCK_ABOUT = "gtk-about"
  
  GTK_STOCK_ADD = "gtk-add"
  
  GTK_STOCK_APPLY = "gtk-apply"
  
  GTK_STOCK_BOLD = "gtk-bold"
  
  GTK_STOCK_CANCEL = "gtk-cancel"
  
  GTK_STOCK_CAPS_LOCK_WARNING = "gtk-caps-lock-warning"
  
  GTK_STOCK_CDROM = "gtk-cdrom"
  
  GTK_STOCK_CLEAR = "gtk-clear"
  
  GTK_STOCK_CLOSE = "gtk-close"
  
  GTK_STOCK_COLOR_PICKER = "gtk-color-picker"
  
  GTK_STOCK_CONNECT = "gtk-connect"
  
  GTK_STOCK_CONVERT = "gtk-convert"
  
  GTK_STOCK_COPY = "gtk-copy"
  
  GTK_STOCK_CUT = "gtk-cut"
  
  GTK_STOCK_DELETE = "gtk-delete"
  
  GTK_STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication"
  
  GTK_STOCK_DIALOG_INFO = "gtk-dialog-info"
  
  GTK_STOCK_DIALOG_WARNING = "gtk-dialog-warning"
  
  GTK_STOCK_DIALOG_ERROR = "gtk-dialog-error"
  
  GTK_STOCK_DIALOG_QUESTION = "gtk-dialog-question"
  
  GTK_STOCK_DIRECTORY = "gtk-directory"
  
  GTK_STOCK_DISCARD = "gtk-discard"
  
  GTK_STOCK_DISCONNECT = "gtk-disconnect"
  
  GTK_STOCK_DND = "gtk-dnd"
  
  GTK_STOCK_DND_MULTIPLE = "gtk-dnd-multiple"
  
  GTK_STOCK_EDIT = "gtk-edit"
  
  GTK_STOCK_EXECUTE = "gtk-execute"
  
  GTK_STOCK_FILE = "gtk-file"
  
  GTK_STOCK_FIND = "gtk-find"
  
  GTK_STOCK_FIND_AND_REPLACE = "gtk-find-and-replace"
  
  GTK_STOCK_FLOPPY = "gtk-floppy"
  
  GTK_STOCK_FULLSCREEN = "gtk-fullscreen"
  
  GTK_STOCK_GOTO_BOTTOM = "gtk-goto-bottom"
  
  GTK_STOCK_GOTO_FIRST = "gtk-goto-first"
  
  GTK_STOCK_GOTO_LAST = "gtk-goto-last"
  
  GTK_STOCK_GOTO_TOP = "gtk-goto-top"
  
  GTK_STOCK_GO_BACK = "gtk-go-back"
  
  GTK_STOCK_GO_DOWN = "gtk-go-down"
  
  GTK_STOCK_GO_FORWARD = "gtk-go-forward"
  
  GTK_STOCK_GO_UP = "gtk-go-up"
  
  GTK_STOCK_HARDDISK = "gtk-harddisk"
  
  GTK_STOCK_HELP = "gtk-help"
  
  GTK_STOCK_HOME = "gtk-home"
  
  GTK_STOCK_INDEX = "gtk-index"
  
  GTK_STOCK_INDENT = "gtk-indent"
  
  GTK_STOCK_INFO = "gtk-info"
  
  GTK_STOCK_ITALIC = "gtk-italic"
  
  GTK_STOCK_JUMP_TO = "gtk-jump-to"
  
  GTK_STOCK_JUSTIFY_CENTER = "gtk-justify-center"
  
  GTK_STOCK_JUSTIFY_FILL = "gtk-justify-fill"
  
  GTK_STOCK_JUSTIFY_LEFT = "gtk-justify-left"
  
  GTK_STOCK_JUSTIFY_RIGHT = "gtk-justify-right"
  
  GTK_STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen"
  
  GTK_STOCK_MISSING_IMAGE = "gtk-missing-image"
  
  GTK_STOCK_MEDIA_FORWARD = "gtk-media-forward"
  
  GTK_STOCK_MEDIA_NEXT = "gtk-media-next"
  
  GTK_STOCK_MEDIA_PAUSE = "gtk-media-pause"
  
  GTK_STOCK_MEDIA_PLAY = "gtk-media-play"
  
  GTK_STOCK_MEDIA_PREVIOUS = "gtk-media-previous"
  
  GTK_STOCK_MEDIA_RECORD = "gtk-media-record"
  
  GTK_STOCK_MEDIA_REWIND = "gtk-media-rewind"
  
  GTK_STOCK_MEDIA_STOP = "gtk-media-stop"
  
  GTK_STOCK_NETWORK = "gtk-network"
  
  GTK_STOCK_NEW = "gtk-new"
  
  GTK_STOCK_NO = "gtk-no"
  
  GTK_STOCK_OK = "gtk-ok"
  
  GTK_STOCK_OPEN = "gtk-open"
  
  GTK_STOCK_ORIENTATION_PORTRAIT = "gtk-orientation-portrait"
  
  GTK_STOCK_ORIENTATION_LANDSCAPE = "gtk-orientation-landscape"
  
  GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE = "gtk-orientation-reverse-landscape"
  
  GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT = "gtk-orientation-reverse-portrait"
  
  GTK_STOCK_PAGE_SETUP = "gtk-page-setup"
  
  GTK_STOCK_PASTE = "gtk-paste"
  
  GTK_STOCK_PREFERENCES = "gtk-preferences"
  
  GTK_STOCK_PRINT = "gtk-print"
  
  GTK_STOCK_PRINT_ERROR = "gtk-print-error"
  
  GTK_STOCK_PRINT_PAUSED = "gtk-print-paused"
  
  GTK_STOCK_PRINT_PREVIEW = "gtk-print-preview"
  
  GTK_STOCK_PRINT_REPORT = "gtk-print-report"
  
  GTK_STOCK_PRINT_WARNING = "gtk-print-warning"
  
  GTK_STOCK_PROPERTIES = "gtk-properties"
  
  GTK_STOCK_QUIT = "gtk-quit"
  
  GTK_STOCK_REDO = "gtk-redo"
  
  GTK_STOCK_REFRESH = "gtk-refresh"
  
  GTK_STOCK_REMOVE = "gtk-remove"
  
  GTK_STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved"
  
  GTK_STOCK_SAVE = "gtk-save"
  
  GTK_STOCK_SAVE_AS = "gtk-save-as"
  
  GTK_STOCK_SELECT_ALL = "gtk-select-all"
  
  GTK_STOCK_SELECT_COLOR = "gtk-select-color"
  
  GTK_STOCK_SELECT_FONT = "gtk-select-font"
  
  GTK_STOCK_SORT_ASCENDING = "gtk-sort-ascending"
  
  GTK_STOCK_SORT_DESCENDING = "gtk-sort-descending"
  
  GTK_STOCK_SPELL_CHECK = "gtk-spell-check"
  
  GTK_STOCK_STOP = "gtk-stop"
  
  GTK_STOCK_STRIKETHROUGH = "gtk-strikethrough"
  
  GTK_STOCK_UNDELETE = "gtk-undelete"
  
  GTK_STOCK_UNDERLINE = "gtk-underline"
  
  GTK_STOCK_UNDO = "gtk-undo"
  
  GTK_STOCK_UNINDENT = "gtk-unindent"
  
  GTK_STOCK_YES = "gtk-yes"
  
  GTK_STOCK_ZOOM_100 = "gtk-zoom-100"
  
  GTK_STOCK_ZOOM_FIT = "gtk-zoom-fit"
  
  GTK_STOCK_ZOOM_IN = "gtk-zoom-in"
  
  GTK_STOCK_ZOOM_OUT = "gtk-zoom-out"
  
  GTK_STYLE_PROVIDER_PRIORITY_FALLBACK = 1
  
  GTK_STYLE_PROVIDER_PRIORITY_THEME = 200
  
  GTK_STYLE_PROVIDER_PRIORITY_SETTINGS = 400
  
  GTK_STYLE_PROVIDER_PRIORITY_APPLICATION = 600
  
  GTK_STYLE_PROVIDER_PRIORITY_USER = 800
  
  GTK_STYLE_PROPERTY_BACKGROUND_COLOR = "background-color"
  
  GTK_STYLE_PROPERTY_COLOR = "color"
  
  GTK_STYLE_PROPERTY_FONT = "font"
  
  GTK_STYLE_PROPERTY_PADDING = "padding"
  
  GTK_STYLE_PROPERTY_BORDER_WIDTH = "border-width"
  
  GTK_STYLE_PROPERTY_MARGIN = "margin"
  
  GTK_STYLE_PROPERTY_BORDER_RADIUS = "border-radius"
  
  GTK_STYLE_PROPERTY_BORDER_STYLE = "border-style"
  
  GTK_STYLE_PROPERTY_BORDER_COLOR = "border-color"
  
  GTK_STYLE_PROPERTY_BACKGROUND_IMAGE = "background-image"
  
  GTK_STYLE_CLASS_CELL = "cell"
  
  GTK_STYLE_CLASS_DIM_LABEL = "dim-label"
  
  GTK_STYLE_CLASS_ENTRY = "entry"
  
  GTK_STYLE_CLASS_COMBOBOX_ENTRY = "combobox-entry"
  
  GTK_STYLE_CLASS_BUTTON = "button"
  
  GTK_STYLE_CLASS_CALENDAR = "calendar"
  
  GTK_STYLE_CLASS_SLIDER = "slider"
  
  GTK_STYLE_CLASS_BACKGROUND = "background"
  
  GTK_STYLE_CLASS_RUBBERBAND = "rubberband"
  
  GTK_STYLE_CLASS_TOOLTIP = "tooltip"
  
  GTK_STYLE_CLASS_MENU = "menu"
  
  GTK_STYLE_CLASS_MENUBAR = "menubar"
  
  GTK_STYLE_CLASS_MENUITEM = "menuitem"
  
  GTK_STYLE_CLASS_TOOLBAR = "toolbar"
  
  GTK_STYLE_CLASS_PRIMARY_TOOLBAR = "primary-toolbar"
  
  GTK_STYLE_CLASS_INLINE_TOOLBAR = "inline-toolbar"
  
  GTK_STYLE_CLASS_RADIO = "radio"
  
  GTK_STYLE_CLASS_CHECK = "check"
  
  GTK_STYLE_CLASS_DEFAULT = "default"
  
  GTK_STYLE_CLASS_TROUGH = "trough"
  
  GTK_STYLE_CLASS_SCROLLBAR = "scrollbar"
  
  GTK_STYLE_CLASS_SCROLLBARS_JUNCTION = "scrollbars-junction"
  
  GTK_STYLE_CLASS_SCALE = "scale"
  
  GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = "scale-has-marks-above"
  
  GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW = "scale-has-marks-below"
  
  GTK_STYLE_CLASS_HEADER = "header"
  
  GTK_STYLE_CLASS_ACCELERATOR = "accelerator"
  
  GTK_STYLE_CLASS_RAISED = "raised"
  
  GTK_STYLE_CLASS_LINKED = "linked"
  
  GTK_STYLE_CLASS_GRIP = "grip"
  
  GTK_STYLE_CLASS_DOCK = "dock"
  
  GTK_STYLE_CLASS_PROGRESSBAR = "progressbar"
  
  GTK_STYLE_CLASS_SPINNER = "spinner"
  
  GTK_STYLE_CLASS_MARK = "mark"
  
  GTK_STYLE_CLASS_EXPANDER = "expander"
  
  GTK_STYLE_CLASS_SPINBUTTON = "spinbutton"
  
  GTK_STYLE_CLASS_NOTEBOOK = "notebook"
  
  GTK_STYLE_CLASS_VIEW = "view"
  
  GTK_STYLE_CLASS_SIDEBAR = "sidebar"
  
  GTK_STYLE_CLASS_IMAGE = "image"
  
  GTK_STYLE_CLASS_HIGHLIGHT = "highlight"
  
  GTK_STYLE_CLASS_FRAME = "frame"
  
  GTK_STYLE_CLASS_DND = "dnd"
  
  GTK_STYLE_CLASS_PANE_SEPARATOR = "pane-separator"
  
  GTK_STYLE_CLASS_SEPARATOR = "separator"
  
  GTK_STYLE_CLASS_INFO = "info"
  
  GTK_STYLE_CLASS_WARNING = "warning"
  
  GTK_STYLE_CLASS_QUESTION = "question"
  
  GTK_STYLE_CLASS_ERROR = "error"
  
  GTK_STYLE_CLASS_HORIZONTAL = "horizontal"
  
  GTK_STYLE_CLASS_VERTICAL = "vertical"
  
  GTK_STYLE_CLASS_TOP = "top"
  
  GTK_STYLE_CLASS_BOTTOM = "bottom"
  
  GTK_STYLE_CLASS_LEFT = "left"
  
  GTK_STYLE_CLASS_RIGHT = "right"
  
  GTK_STYLE_CLASS_PULSE = "pulse"
  
  GTK_STYLE_CLASS_ARROW = "arrow"
  
  GTK_STYLE_CLASS_OSD = "osd"
  
  GTK_STYLE_CLASS_LEVEL_BAR = "level-bar"
  
  GTK_STYLE_CLASS_CURSOR_HANDLE = "cursor-handle"
  
  GTK_STYLE_REGION_ROW = "row"
  
  GTK_STYLE_REGION_COLUMN = "column"
  
  GTK_STYLE_REGION_COLUMN_HEADER = "column-header"
  
  GTK_STYLE_REGION_TAB = "tab"
  
  GTK_MAX_COMPOSE_LEN = 7
  
  GTK_LEVEL_BAR_OFFSET_LOW = "low"
  
  GTK_LEVEL_BAR_OFFSET_HIGH = "high"
  
  GTK_PAPER_NAME_A3 = "iso_a3"
  
  GTK_PAPER_NAME_A4 = "iso_a4"
  
  GTK_PAPER_NAME_A5 = "iso_a5"
  
  GTK_PAPER_NAME_B5 = "iso_b5"
  
  GTK_PAPER_NAME_LETTER = "na_letter"
  
  GTK_PAPER_NAME_EXECUTIVE = "na_executive"
  
  GTK_PAPER_NAME_LEGAL = "na_legal"
  
  GTK_PRINT_SETTINGS_PRINTER = "printer"
  
  GTK_PRINT_SETTINGS_ORIENTATION = "orientation"
  
  GTK_PRINT_SETTINGS_PAPER_FORMAT = "paper-format"
  
  GTK_PRINT_SETTINGS_PAPER_WIDTH = "paper-width"
  
  GTK_PRINT_SETTINGS_PAPER_HEIGHT = "paper-height"
  
  GTK_PRINT_SETTINGS_N_COPIES = "n-copies"
  
  GTK_PRINT_SETTINGS_DEFAULT_SOURCE = "default-source"
  
  GTK_PRINT_SETTINGS_QUALITY = "quality"
  
  GTK_PRINT_SETTINGS_RESOLUTION = "resolution"
  
  GTK_PRINT_SETTINGS_USE_COLOR = "use-color"
  
  GTK_PRINT_SETTINGS_DUPLEX = "duplex"
  
  GTK_PRINT_SETTINGS_COLLATE = "collate"
  
  GTK_PRINT_SETTINGS_REVERSE = "reverse"
  
  GTK_PRINT_SETTINGS_MEDIA_TYPE = "media-type"
  
  GTK_PRINT_SETTINGS_DITHER = "dither"
  
  GTK_PRINT_SETTINGS_SCALE = "scale"
  
  GTK_PRINT_SETTINGS_PRINT_PAGES = "print-pages"
  
  GTK_PRINT_SETTINGS_PAGE_RANGES = "page-ranges"
  
  GTK_PRINT_SETTINGS_PAGE_SET = "page-set"
  
  GTK_PRINT_SETTINGS_FINISHINGS = "finishings"
  
  GTK_PRINT_SETTINGS_NUMBER_UP = "number-up"
  
  GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT = "number-up-layout"
  
  GTK_PRINT_SETTINGS_OUTPUT_BIN = "output-bin"
  
  GTK_PRINT_SETTINGS_RESOLUTION_X = "resolution-x"
  
  GTK_PRINT_SETTINGS_RESOLUTION_Y = "resolution-y"
  
  GTK_PRINT_SETTINGS_PRINTER_LPI = "printer-lpi"
  
  GTK_PRINT_SETTINGS_OUTPUT_DIR = "output-dir"
  
  GTK_PRINT_SETTINGS_OUTPUT_BASENAME = "output-basename"
  
  GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT = "output-file-format"
  
  GTK_PRINT_SETTINGS_OUTPUT_URI = "output-uri"
  
  GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION = "win32-driver-version"
  
  GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA = "win32-driver-extra"
  
  GTK_INPUT_ERROR = -1
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_align).</em>
  # 
  # === Options:
  # :fill ::
  #   
  # :start ::
  #   
  # :end_ ::
  #   
  # :center ::
  #   
  # 
  # @method _enum_gtk_align_
  # @return [Symbol]
  # @scope class
  enum :gtk_align, [
    :fill, 0,
    :start, 1,
    :end_, 2,
    :center, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_arrow_placement).</em>
  # 
  # === Options:
  # :arrows_both ::
  #   
  # :arrows_start ::
  #   
  # :arrows_end ::
  #   
  # 
  # @method _enum_gtk_arrow_placement_
  # @return [Symbol]
  # @scope class
  enum :gtk_arrow_placement, [
    :arrows_both, 0,
    :arrows_start, 1,
    :arrows_end, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_arrow_type).</em>
  # 
  # === Options:
  # :up ::
  #   
  # :down ::
  #   
  # :left ::
  #   
  # :right ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_arrow_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_arrow_type, [
    :up, 0,
    :down, 1,
    :left, 2,
    :right, 3,
    :none, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_attach_options).</em>
  # 
  # === Options:
  # :expand ::
  #   
  # :shrink ::
  #   
  # :fill ::
  #   
  # 
  # @method _enum_gtk_attach_options_
  # @return [Symbol]
  # @scope class
  enum :gtk_attach_options, [
    :expand, 1,
    :shrink, 2,
    :fill, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_button_box_style).</em>
  # 
  # === Options:
  # :buttonbox_spread ::
  #   
  # :buttonbox_edge ::
  #   
  # :buttonbox_start ::
  #   
  # :buttonbox_end ::
  #   
  # :buttonbox_center ::
  #   
  # 
  # @method _enum_gtk_button_box_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_button_box_style, [
    :buttonbox_spread, 1,
    :buttonbox_edge, 2,
    :buttonbox_start, 3,
    :buttonbox_end, 4,
    :buttonbox_center, 5
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_delete_type).</em>
  # 
  # === Options:
  # :chars ::
  #   
  # :word_ends ::
  #   
  # :words ::
  #   delete only the portion of the word to the
  #   left/right of cursor if we're in the middle
  #   of a word
  # :display_lines ::
  #   
  # :display_line_ends ::
  #   
  # :paragraph_ends ::
  #   
  # :paragraphs ::
  #   like C-k in Emacs (or its reverse)
  # :whitespace ::
  #   C-k in pico, kill whole line
  # 
  # @method _enum_gtk_delete_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_delete_type, [
    :chars, 0,
    :word_ends, 1,
    :words, 2,
    :display_lines, 3,
    :display_line_ends, 4,
    :paragraph_ends, 5,
    :paragraphs, 6,
    :whitespace, 7
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_direction_type).</em>
  # 
  # === Options:
  # :dir_tab_forward ::
  #   
  # :dir_tab_backward ::
  #   
  # :dir_up ::
  #   
  # :dir_down ::
  #   
  # :dir_left ::
  #   
  # :dir_right ::
  #   
  # 
  # @method _enum_gtk_direction_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_direction_type, [
    :dir_tab_forward, 0,
    :dir_tab_backward, 1,
    :dir_up, 2,
    :dir_down, 3,
    :dir_left, 4,
    :dir_right, 5
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_expander_style).</em>
  # 
  # === Options:
  # :collapsed ::
  #   
  # :semi_collapsed ::
  #   
  # :semi_expanded ::
  #   
  # :expanded ::
  #   
  # 
  # @method _enum_gtk_expander_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_expander_style, [
    :collapsed, 0,
    :semi_collapsed, 1,
    :semi_expanded, 2,
    :expanded, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_icon_size).</em>
  # 
  # === Options:
  # :invalid ::
  #   
  # :menu ::
  #   
  # :small_toolbar ::
  #   
  # :large_toolbar ::
  #   
  # :button ::
  #   
  # :dnd ::
  #   
  # :dialog ::
  #   
  # 
  # @method _enum_gtk_icon_size_
  # @return [Symbol]
  # @scope class
  enum :gtk_icon_size, [
    :invalid, 0,
    :menu, 1,
    :small_toolbar, 2,
    :large_toolbar, 3,
    :button, 4,
    :dnd, 5,
    :dialog, 6
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_sensitivity_type).</em>
  # 
  # === Options:
  # :auto ::
  #   
  # :on ::
  #   
  # :off ::
  #   
  # 
  # @method _enum_gtk_sensitivity_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_sensitivity_type, [
    :auto, 0,
    :on, 1,
    :off, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_text_direction).</em>
  # 
  # === Options:
  # :dir_none ::
  #   
  # :dir_ltr ::
  #   
  # :dir_rtl ::
  #   
  # 
  # @method _enum_gtk_text_direction_
  # @return [Symbol]
  # @scope class
  enum :gtk_text_direction, [
    :dir_none, 0,
    :dir_ltr, 1,
    :dir_rtl, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_justification).</em>
  # 
  # === Options:
  # :justify_left ::
  #   
  # :justify_right ::
  #   
  # :justify_center ::
  #   
  # :justify_fill ::
  #   
  # 
  # @method _enum_gtk_justification_
  # @return [Symbol]
  # @scope class
  enum :gtk_justification, [
    :justify_left, 0,
    :justify_right, 1,
    :justify_center, 2,
    :justify_fill, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_menu_direction_type).</em>
  # 
  # === Options:
  # :dir_parent ::
  #   
  # :dir_child ::
  #   
  # :dir_next ::
  #   
  # :dir_prev ::
  #   
  # 
  # @method _enum_gtk_menu_direction_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_menu_direction_type, [
    :dir_parent, 0,
    :dir_child, 1,
    :dir_next, 2,
    :dir_prev, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_message_type).</em>
  # 
  # === Options:
  # :info ::
  #   
  # :warning ::
  #   
  # :question ::
  #   
  # :error ::
  #   
  # :other ::
  #   
  # 
  # @method _enum_gtk_message_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_message_type, [
    :info, 0,
    :warning, 1,
    :question, 2,
    :error, 3,
    :other, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_movement_step).</em>
  # 
  # === Options:
  # :logical_positions ::
  #   
  # :visual_positions ::
  #   
  # :words ::
  #   
  # :display_lines ::
  #   
  # :display_line_ends ::
  #   
  # :paragraphs ::
  #   
  # :paragraph_ends ::
  #   
  # :pages ::
  #   
  # :buffer_ends ::
  #   
  # :horizontal_pages ::
  #   
  # 
  # @method _enum_gtk_movement_step_
  # @return [Symbol]
  # @scope class
  enum :gtk_movement_step, [
    :logical_positions, 0,
    :visual_positions, 1,
    :words, 2,
    :display_lines, 3,
    :display_line_ends, 4,
    :paragraphs, 5,
    :paragraph_ends, 6,
    :pages, 7,
    :buffer_ends, 8,
    :horizontal_pages, 9
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_scroll_step).</em>
  # 
  # === Options:
  # :steps ::
  #   
  # :pages ::
  #   
  # :ends ::
  #   
  # :horizontal_steps ::
  #   
  # :horizontal_pages ::
  #   
  # :horizontal_ends ::
  #   
  # 
  # @method _enum_gtk_scroll_step_
  # @return [Symbol]
  # @scope class
  enum :gtk_scroll_step, [
    :steps, 0,
    :pages, 1,
    :ends, 2,
    :horizontal_steps, 3,
    :horizontal_pages, 4,
    :horizontal_ends, 5
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_orientation).</em>
  # 
  # === Options:
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # 
  # @method _enum_gtk_orientation_
  # @return [Symbol]
  # @scope class
  enum :gtk_orientation, [
    :horizontal, 0,
    :vertical, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_corner_type).</em>
  # 
  # === Options:
  # :top_left ::
  #   
  # :bottom_left ::
  #   
  # :top_right ::
  #   
  # :bottom_right ::
  #   
  # 
  # @method _enum_gtk_corner_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_corner_type, [
    :top_left, 0,
    :bottom_left, 1,
    :top_right, 2,
    :bottom_right, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_pack_type).</em>
  # 
  # === Options:
  # :start ::
  #   
  # :end_ ::
  #   
  # 
  # @method _enum_gtk_pack_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_pack_type, [
    :start, 0,
    :end_, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_path_priority_type).</em>
  # 
  # === Options:
  # :prio_lowest ::
  #   
  # :prio_gtk ::
  #   
  # :prio_application ::
  #   
  # :prio_theme ::
  #   
  # :prio_rc ::
  #   
  # :prio_highest ::
  #   
  # 
  # @method _enum_gtk_path_priority_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_path_priority_type, [
    :prio_lowest, 0,
    :prio_gtk, 4,
    :prio_application, 8,
    :prio_theme, 10,
    :prio_rc, 12,
    :prio_highest, 15
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_path_type).</em>
  # 
  # === Options:
  # :widget ::
  #   
  # :widget_class ::
  #   
  # :class_ ::
  #   
  # 
  # @method _enum_gtk_path_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_path_type, [
    :widget, 0,
    :widget_class, 1,
    :class_, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_policy_type).</em>
  # 
  # === Options:
  # :always ::
  #   
  # :automatic ::
  #   
  # :never ::
  #   
  # 
  # @method _enum_gtk_policy_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_policy_type, [
    :always, 0,
    :automatic, 1,
    :never, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_position_type).</em>
  # 
  # === Options:
  # :pos_left ::
  #   
  # :pos_right ::
  #   
  # :pos_top ::
  #   
  # :pos_bottom ::
  #   
  # 
  # @method _enum_gtk_position_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_position_type, [
    :pos_left, 0,
    :pos_right, 1,
    :pos_top, 2,
    :pos_bottom, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_relief_style).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :half ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_relief_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_relief_style, [
    :normal, 0,
    :half, 1,
    :none, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_resize_mode).</em>
  # 
  # === Options:
  # :parent ::
  #   
  # :queue ::
  #   
  # :immediate ::
  #   
  # 
  # @method _enum_gtk_resize_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_resize_mode, [
    :parent, 0,
    :queue, 1,
    :immediate, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_scroll_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :jump ::
  #   
  # :step_backward ::
  #   
  # :step_forward ::
  #   
  # :page_backward ::
  #   
  # :page_forward ::
  #   
  # :step_up ::
  #   
  # :step_down ::
  #   
  # :page_up ::
  #   
  # :page_down ::
  #   
  # :step_left ::
  #   
  # :step_right ::
  #   
  # :page_left ::
  #   
  # :page_right ::
  #   
  # :start ::
  #   
  # :end_ ::
  #   
  # 
  # @method _enum_gtk_scroll_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_scroll_type, [
    :none, 0,
    :jump, 1,
    :step_backward, 2,
    :step_forward, 3,
    :page_backward, 4,
    :page_forward, 5,
    :step_up, 6,
    :step_down, 7,
    :page_up, 8,
    :page_down, 9,
    :step_left, 10,
    :step_right, 11,
    :page_left, 12,
    :page_right, 13,
    :start, 14,
    :end_, 15
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_selection_mode).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :single ::
  #   
  # :browse ::
  #   
  # :multiple ::
  #   
  # 
  # @method _enum_gtk_selection_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_selection_mode, [
    :none, 0,
    :single, 1,
    :browse, 2,
    :multiple, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_shadow_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :in_ ::
  #   
  # :out ::
  #   
  # :etched_in ::
  #   
  # :etched_out ::
  #   
  # 
  # @method _enum_gtk_shadow_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_shadow_type, [
    :none, 0,
    :in_, 1,
    :out, 2,
    :etched_in, 3,
    :etched_out, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_state_type).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :active ::
  #   
  # :prelight ::
  #   
  # :selected ::
  #   
  # :insensitive ::
  #   
  # :inconsistent ::
  #   
  # :focused ::
  #   
  # 
  # @method _enum_gtk_state_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_state_type, [
    :normal, 0,
    :active, 1,
    :prelight, 2,
    :selected, 3,
    :insensitive, 4,
    :inconsistent, 5,
    :focused, 6
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_toolbar_style).</em>
  # 
  # === Options:
  # :icons ::
  #   
  # :text ::
  #   
  # :both ::
  #   
  # :both_horiz ::
  #   
  # 
  # @method _enum_gtk_toolbar_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_toolbar_style, [
    :icons, 0,
    :text, 1,
    :both, 2,
    :both_horiz, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_window_position).</em>
  # 
  # === Options:
  # :win_pos_none ::
  #   
  # :win_pos_center ::
  #   
  # :win_pos_mouse ::
  #   
  # :win_pos_center_always ::
  #   
  # :win_pos_center_on_parent ::
  #   
  # 
  # @method _enum_gtk_window_position_
  # @return [Symbol]
  # @scope class
  enum :gtk_window_position, [
    :win_pos_none, 0,
    :win_pos_center, 1,
    :win_pos_mouse, 2,
    :win_pos_center_always, 3,
    :win_pos_center_on_parent, 4
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_window_type).</em>
  # 
  # === Options:
  # :toplevel ::
  #   
  # :popup ::
  #   
  # 
  # @method _enum_gtk_window_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_window_type, [
    :toplevel, 0,
    :popup, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_wrap_mode).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :char ::
  #   
  # :word ::
  #   
  # :word_char ::
  #   
  # 
  # @method _enum_gtk_wrap_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_wrap_mode, [
    :none, 0,
    :char, 1,
    :word, 2,
    :word_char, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_sort_type).</em>
  # 
  # === Options:
  # :ascending ::
  #   
  # :descending ::
  #   
  # 
  # @method _enum_gtk_sort_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_sort_type, [
    :ascending, 0,
    :descending, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_im_preedit_style).</em>
  # 
  # === Options:
  # :nothing ::
  #   
  # :callback ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_im_preedit_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_im_preedit_style, [
    :nothing, 0,
    :callback, 1,
    :none, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_im_status_style).</em>
  # 
  # === Options:
  # :nothing ::
  #   
  # :callback ::
  #   
  # :none ::
  #   
  # 
  # @method _enum_gtk_im_status_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_im_status_style, [
    :nothing, 0,
    :callback, 1,
    :none, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_pack_direction).</em>
  # 
  # === Options:
  # :ltr ::
  #   
  # :rtl ::
  #   
  # :ttb ::
  #   
  # :btt ::
  #   
  # 
  # @method _enum_gtk_pack_direction_
  # @return [Symbol]
  # @scope class
  enum :gtk_pack_direction, [
    :ltr, 0,
    :rtl, 1,
    :ttb, 2,
    :btt, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_pages).</em>
  # 
  # === Options:
  # :all ::
  #   
  # :current ::
  #   
  # :ranges ::
  #   
  # :selection ::
  #   
  # 
  # @method _enum_gtk_print_pages_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_pages, [
    :all, 0,
    :current, 1,
    :ranges, 2,
    :selection, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_page_set).</em>
  # 
  # === Options:
  # :all ::
  #   
  # :even ::
  #   
  # :odd ::
  #   
  # 
  # @method _enum_gtk_page_set_
  # @return [Symbol]
  # @scope class
  enum :gtk_page_set, [
    :all, 0,
    :even, 1,
    :odd, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_number_up_layout).</em>
  # 
  # === Options:
  # :left_to_right_top_to_bottom ::
  #   
  # :left_to_right_bottom_to_top ::
  #   < nick=lrtb >
  # :right_to_left_top_to_bottom ::
  #   < nick=lrbt >
  # :right_to_left_bottom_to_top ::
  #   < nick=rltb >
  # :top_to_bottom_left_to_right ::
  #   < nick=rlbt >
  # :top_to_bottom_right_to_left ::
  #   < nick=tblr >
  # :bottom_to_top_left_to_right ::
  #   < nick=tbrl >
  # :bottom_to_top_right_to_left ::
  #   < nick=btlr >
  # 
  # @method _enum_gtk_number_up_layout_
  # @return [Symbol]
  # @scope class
  enum :gtk_number_up_layout, [
    :left_to_right_top_to_bottom, 0,
    :left_to_right_bottom_to_top, 1,
    :right_to_left_top_to_bottom, 2,
    :right_to_left_bottom_to_top, 3,
    :top_to_bottom_left_to_right, 4,
    :top_to_bottom_right_to_left, 5,
    :bottom_to_top_left_to_right, 6,
    :bottom_to_top_right_to_left, 7
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_page_orientation).</em>
  # 
  # === Options:
  # :portrait ::
  #   
  # :landscape ::
  #   
  # :reverse_portrait ::
  #   
  # :reverse_landscape ::
  #   
  # 
  # @method _enum_gtk_page_orientation_
  # @return [Symbol]
  # @scope class
  enum :gtk_page_orientation, [
    :portrait, 0,
    :landscape, 1,
    :reverse_portrait, 2,
    :reverse_landscape, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_quality).</em>
  # 
  # === Options:
  # :low ::
  #   
  # :normal ::
  #   
  # :high ::
  #   
  # :draft ::
  #   
  # 
  # @method _enum_gtk_print_quality_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_quality, [
    :low, 0,
    :normal, 1,
    :high, 2,
    :draft, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_duplex).</em>
  # 
  # === Options:
  # :simplex ::
  #   
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # 
  # @method _enum_gtk_print_duplex_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_duplex, [
    :simplex, 0,
    :horizontal, 1,
    :vertical, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_unit).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :points ::
  #   
  # :inch ::
  #   
  # :mm ::
  #   
  # 
  # @method _enum_gtk_unit_
  # @return [Symbol]
  # @scope class
  enum :gtk_unit, [
    :none, 0,
    :points, 1,
    :inch, 2,
    :mm, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_tree_view_grid_lines).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # :both ::
  #   
  # 
  # @method _enum_gtk_tree_view_grid_lines_
  # @return [Symbol]
  # @scope class
  enum :gtk_tree_view_grid_lines, [
    :none, 0,
    :horizontal, 1,
    :vertical, 2,
    :both, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_drag_result).</em>
  # 
  # === Options:
  # :success ::
  #   
  # :no_target ::
  #   
  # :user_cancelled ::
  #   
  # :timeout_expired ::
  #   
  # :grab_broken ::
  #   
  # :error ::
  #   
  # 
  # @method _enum_gtk_drag_result_
  # @return [Symbol]
  # @scope class
  enum :gtk_drag_result, [
    :success, 0,
    :no_target, 1,
    :user_cancelled, 2,
    :timeout_expired, 3,
    :grab_broken, 4,
    :error, 5
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_size_request_mode).</em>
  # 
  # === Options:
  # :height_for_width ::
  #   
  # :width_for_height ::
  #   
  # :constant_size ::
  #   
  # 
  # @method _enum_gtk_size_request_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_size_request_mode, [
    :height_for_width, 0,
    :width_for_height, 1,
    :constant_size, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_scrollable_policy).</em>
  # 
  # === Options:
  # :scroll_minimum ::
  #   
  # :scroll_natural ::
  #   
  # 
  # @method _enum_gtk_scrollable_policy_
  # @return [Symbol]
  # @scope class
  enum :gtk_scrollable_policy, [
    :scroll_minimum, 0,
    :scroll_natural, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_state_flags).</em>
  # 
  # === Options:
  # :flag_normal ::
  #   
  # :flag_active ::
  #   
  # :flag_prelight ::
  #   
  # :flag_selected ::
  #   
  # :flag_insensitive ::
  #   
  # :flag_inconsistent ::
  #   
  # :flag_focused ::
  #   
  # :flag_backdrop ::
  #   
  # 
  # @method _enum_gtk_state_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_state_flags, [
    :flag_normal, 0,
    :flag_active, 1,
    :flag_prelight, 2,
    :flag_selected, 4,
    :flag_insensitive, 8,
    :flag_inconsistent, 16,
    :flag_focused, 32,
    :flag_backdrop, 64
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_region_flags).</em>
  # 
  # === Options:
  # :even ::
  #   
  # :odd ::
  #   
  # :first ::
  #   
  # :last ::
  #   
  # :only ::
  #   
  # :sorted ::
  #   
  # 
  # @method _enum_gtk_region_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_region_flags, [
    :even, 1,
    :odd, 2,
    :first, 4,
    :last, 8,
    :only, 16,
    :sorted, 32
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_junction_sides).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :corner_topleft ::
  #   
  # :corner_topright ::
  #   
  # :corner_bottomleft ::
  #   
  # :corner_bottomright ::
  #   
  # 
  # @method _enum_gtk_junction_sides_
  # @return [Symbol]
  # @scope class
  enum :gtk_junction_sides, [
    :none, 0,
    :corner_topleft, 1,
    :corner_topright, 2,
    :corner_bottomleft, 4,
    :corner_bottomright, 8
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_border_style).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :solid ::
  #   
  # :inset ::
  #   
  # :outset ::
  #   
  # :hidden ::
  #   
  # :dotted ::
  #   
  # :dashed ::
  #   
  # :double ::
  #   
  # :groove ::
  #   
  # :ridge ::
  #   
  # 
  # @method _enum_gtk_border_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_border_style, [
    :none, 0,
    :solid, 1,
    :inset, 2,
    :outset, 3,
    :hidden, 4,
    :dotted, 5,
    :dashed, 6,
    :double, 7,
    :groove, 8,
    :ridge, 9
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_level_bar_mode).</em>
  # 
  # === Options:
  # :continuous ::
  #   
  # :discrete ::
  #   
  # 
  # @method _enum_gtk_level_bar_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_level_bar_mode, [
    :continuous, 0,
    :discrete, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_input_purpose).</em>
  # 
  # === Options:
  # :free_form ::
  #   
  # :alpha ::
  #   
  # :digits ::
  #   
  # :number ::
  #   
  # :phone ::
  #   
  # :url ::
  #   
  # :email ::
  #   
  # :name ::
  #   
  # :password ::
  #   
  # :pin ::
  #   
  # 
  # @method _enum_gtk_input_purpose_
  # @return [Symbol]
  # @scope class
  enum :gtk_input_purpose, [
    :free_form, 0,
    :alpha, 1,
    :digits, 2,
    :number, 3,
    :phone, 4,
    :url, 5,
    :email, 6,
    :name, 7,
    :password, 8,
    :pin, 9
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_input_hints).</em>
  # 
  # === Options:
  # :hint_none ::
  #   
  # :hint_spellcheck ::
  #   
  # :hint_no_spellcheck ::
  #   
  # :hint_word_completion ::
  #   
  # :hint_lowercase ::
  #   
  # :hint_uppercase_chars ::
  #   
  # :hint_uppercase_words ::
  #   
  # :hint_uppercase_sentences ::
  #   
  # :hint_inhibit_osk ::
  #   
  # 
  # @method _enum_gtk_input_hints_
  # @return [Symbol]
  # @scope class
  enum :gtk_input_hints, [
    :hint_none, 0,
    :hint_spellcheck, 1,
    :hint_no_spellcheck, 2,
    :hint_word_completion, 4,
    :hint_lowercase, 8,
    :hint_uppercase_chars, 16,
    :hint_uppercase_words, 32,
    :hint_uppercase_sentences, 64,
    :hint_inhibit_osk, 128
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_accel_flags).</em>
  # 
  # === Options:
  # :visible ::
  #   
  # :locked ::
  #   display in GtkAccelLabel?
  # :mask ::
  #   is it removable?
  # 
  # @method _enum_gtk_accel_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_accel_flags, [
    :visible, 1,
    :locked, 2,
    :mask, 7
  ]
  
  # (Not documented)
  class GtkAccelGroupPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_accel_group_activate_(accel_group, acceleratable, keyval, modifier)
  # @param [FFI::Pointer(*GtkAccelGroup)] accel_group 
  # @param [FFI::Pointer(*GObject)] acceleratable 
  # @param [Integer] keyval 
  # @param [unknown] modifier 
  # @return [Integer] 
  # @scope class
  callback :gtk_accel_group_activate, [:pointer, :pointer, :uint, :char], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_accel_group_find_func_(key, closure, data)
  # @param [FFI::Pointer(*GtkAccelKey)] key 
  # @param [FFI::Pointer(*GClosure)] closure 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_accel_group_find_func, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkAccelGroupPrivate) 
  module GtkAccelGroupWrappers
    # @return [Integer] 
    def get_is_locked()
      Gtk.gtk_accel_group_get_is_locked(self)
    end
    
    # @return [unknown] 
    def get_modifier_mask()
      Gtk.gtk_accel_group_get_modifier_mask(self)
    end
    
    # @return [nil] 
    def lock()
      Gtk.gtk_accel_group_lock(self)
    end
    
    # @return [nil] 
    def unlock()
      Gtk.gtk_accel_group_unlock(self)
    end
    
    # @param [Integer] accel_key 
    # @param [unknown] accel_mods 
    # @param [Symbol from _enum_gtk_accel_flags_] accel_flags 
    # @param [FFI::Pointer(*GClosure)] closure 
    # @return [nil] 
    def connect(accel_key, accel_mods, accel_flags, closure)
      Gtk.gtk_accel_group_connect(self, accel_key, accel_mods, accel_flags, closure)
    end
    
    # @param [String] accel_path 
    # @param [FFI::Pointer(*GClosure)] closure 
    # @return [nil] 
    def connect_by_path(accel_path, closure)
      Gtk.gtk_accel_group_connect_by_path(self, accel_path, closure)
    end
    
    # @param [FFI::Pointer(*GClosure)] closure 
    # @return [Integer] 
    def disconnect(closure)
      Gtk.gtk_accel_group_disconnect(self, closure)
    end
    
    # @param [Integer] accel_key 
    # @param [unknown] accel_mods 
    # @return [Integer] 
    def disconnect_key(accel_key, accel_mods)
      Gtk.gtk_accel_group_disconnect_key(self, accel_key, accel_mods)
    end
    
    # @param [Integer] accel_quark 
    # @param [FFI::Pointer(*GObject)] acceleratable 
    # @param [Integer] accel_key 
    # @param [unknown] accel_mods 
    # @return [Integer] 
    def activate(accel_quark, acceleratable, accel_key, accel_mods)
      Gtk.gtk_accel_group_activate(self, accel_quark, acceleratable, accel_key, accel_mods)
    end
    
    # @param [FFI::Pointer(*GObject)] object 
    # @return [nil] 
    def attach(object)
      Gtk.gtk_accel_group_attach(self, object)
    end
    
    # @param [FFI::Pointer(*GObject)] object 
    # @return [nil] 
    def detach(object)
      Gtk.gtk_accel_group_detach(self, object)
    end
    
    # @param [Proc(_callback_gtk_accel_group_find_func_)] find_func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [GtkAccelKey] 
    def find(find_func, data)
      GtkAccelKey.new Gtk.gtk_accel_group_find(self, find_func, data)
    end
    
    # @param [Integer] accel_key 
    # @param [unknown] accel_mods 
    # @param [FFI::Pointer(*Guint)] n_entries 
    # @return [GtkAccelGroupEntry] 
    def query(accel_key, accel_mods, n_entries)
      GtkAccelGroupEntry.new Gtk.gtk_accel_group_query(self, accel_key, accel_mods, n_entries)
    end
    
    # @param [Integer] accel_path_quark 
    # @return [nil] 
    def reconnect(accel_path_quark)
      Gtk.gtk_accel_group_reconnect(self, accel_path_quark)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_accelerables()
      Gtk.gtk_accel_group_get_accelerables(self)
    end
  end
  
  class GtkAccelGroup < FFI::Struct
    include GtkAccelGroupWrappers
    layout :parent, :char,
           :priv, GtkAccelGroupPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :accel_changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkAccelGroupClass < FFI::Struct
    layout :parent_class, :char,
           :accel_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :accel_key ::
  #   (Integer) 
  # :accel_mods ::
  #   (unknown) 
  # :accel_flags ::
  #   (Integer) 
  class GtkAccelKey < FFI::Struct
    layout :accel_key, :uint,
           :accel_mods, :char,
           :accel_flags, :uint
  end
  
  # (Not documented)
  # 
  # @method gtk_accel_group_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_group_get_type, :gtk_accel_group_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_accel_group_new()
  # @return [GtkAccelGroup] 
  # @scope class
  attach_function :gtk_accel_group_new, :gtk_accel_group_new, [], GtkAccelGroup
  
  # (Not documented)
  # 
  # @method gtk_accel_group_get_is_locked(accel_group)
  # @param [GtkAccelGroup] accel_group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_group_get_is_locked, :gtk_accel_group_get_is_locked, [GtkAccelGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_group_get_modifier_mask(accel_group)
  # @param [GtkAccelGroup] accel_group 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_accel_group_get_modifier_mask, :gtk_accel_group_get_modifier_mask, [GtkAccelGroup], :char
  
  # (Not documented)
  # 
  # @method gtk_accel_group_lock(accel_group)
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_lock, :gtk_accel_group_lock, [GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_group_unlock(accel_group)
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_unlock, :gtk_accel_group_unlock, [GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_group_connect(accel_group, accel_key, accel_mods, accel_flags, closure)
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @param [Symbol from _enum_gtk_accel_flags_] accel_flags 
  # @param [FFI::Pointer(*GClosure)] closure 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_connect, :gtk_accel_group_connect, [GtkAccelGroup, :uint, :char, :gtk_accel_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_group_connect_by_path(accel_group, accel_path, closure)
  # @param [GtkAccelGroup] accel_group 
  # @param [String] accel_path 
  # @param [FFI::Pointer(*GClosure)] closure 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_connect_by_path, :gtk_accel_group_connect_by_path, [GtkAccelGroup, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_group_disconnect(accel_group, closure)
  # @param [GtkAccelGroup] accel_group 
  # @param [FFI::Pointer(*GClosure)] closure 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_group_disconnect, :gtk_accel_group_disconnect, [GtkAccelGroup, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_group_disconnect_key(accel_group, accel_key, accel_mods)
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_group_disconnect_key, :gtk_accel_group_disconnect_key, [GtkAccelGroup, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_group_activate(accel_group, accel_quark, acceleratable, accel_key, accel_mods)
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_quark 
  # @param [FFI::Pointer(*GObject)] acceleratable 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_group_activate, :gtk_accel_group_activate, [GtkAccelGroup, :uint, :pointer, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_group_attach(accel_group, object)
  # @param [GtkAccelGroup] accel_group 
  # @param [FFI::Pointer(*GObject)] object 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_attach, :_gtk_accel_group_attach, [GtkAccelGroup, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_group_detach(accel_group, object)
  # @param [GtkAccelGroup] accel_group 
  # @param [FFI::Pointer(*GObject)] object 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_detach, :_gtk_accel_group_detach, [GtkAccelGroup, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_groups_activate(object, accel_key, accel_mods)
  # @param [FFI::Pointer(*GObject)] object 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_groups_activate, :gtk_accel_groups_activate, [:pointer, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_groups_from_object(object)
  # @param [FFI::Pointer(*GObject)] object 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_accel_groups_from_object, :gtk_accel_groups_from_object, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_accel_group_find(accel_group, find_func, data)
  # @param [GtkAccelGroup] accel_group 
  # @param [Proc(_callback_gtk_accel_group_find_func_)] find_func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkAccelKey] 
  # @scope class
  attach_function :gtk_accel_group_find, :gtk_accel_group_find, [GtkAccelGroup, :gtk_accel_group_find_func, :pointer], GtkAccelKey
  
  # (Not documented)
  # 
  # @method gtk_accel_group_from_accel_closure(closure)
  # @param [FFI::Pointer(*GClosure)] closure 
  # @return [GtkAccelGroup] 
  # @scope class
  attach_function :gtk_accel_group_from_accel_closure, :gtk_accel_group_from_accel_closure, [:pointer], GtkAccelGroup
  
  # (Not documented)
  # 
  # @method gtk_accelerator_valid(keyval, modifiers)
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accelerator_valid, :gtk_accelerator_valid, [:uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_accelerator_parse(accelerator, accelerator_key, accelerator_mods)
  # @param [String] accelerator 
  # @param [FFI::Pointer(*Guint)] accelerator_key 
  # @param [FFI::Pointer(*GdkModifierType)] accelerator_mods 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accelerator_parse, :gtk_accelerator_parse, [:string, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accelerator_parse_with_keycode(accelerator, accelerator_key, accelerator_codes, accelerator_mods)
  # @param [String] accelerator 
  # @param [FFI::Pointer(*Guint)] accelerator_key 
  # @param [FFI::Pointer(**Guint)] accelerator_codes 
  # @param [FFI::Pointer(*GdkModifierType)] accelerator_mods 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accelerator_parse_with_keycode, :gtk_accelerator_parse_with_keycode, [:string, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accelerator_name(accelerator_key, accelerator_mods)
  # @param [Integer] accelerator_key 
  # @param [unknown] accelerator_mods 
  # @return [String] 
  # @scope class
  attach_function :gtk_accelerator_name, :gtk_accelerator_name, [:uint, :char], :string
  
  # (Not documented)
  # 
  # @method gtk_accelerator_name_with_keycode(display, accelerator_key, keycode, accelerator_mods)
  # @param [FFI::Pointer(*GdkDisplay)] display 
  # @param [Integer] accelerator_key 
  # @param [Integer] keycode 
  # @param [unknown] accelerator_mods 
  # @return [String] 
  # @scope class
  attach_function :gtk_accelerator_name_with_keycode, :gtk_accelerator_name_with_keycode, [:pointer, :uint, :uint, :char], :string
  
  # (Not documented)
  # 
  # @method gtk_accelerator_get_label(accelerator_key, accelerator_mods)
  # @param [Integer] accelerator_key 
  # @param [unknown] accelerator_mods 
  # @return [String] 
  # @scope class
  attach_function :gtk_accelerator_get_label, :gtk_accelerator_get_label, [:uint, :char], :string
  
  # (Not documented)
  # 
  # @method gtk_accelerator_get_label_with_keycode(display, accelerator_key, keycode, accelerator_mods)
  # @param [FFI::Pointer(*GdkDisplay)] display 
  # @param [Integer] accelerator_key 
  # @param [Integer] keycode 
  # @param [unknown] accelerator_mods 
  # @return [String] 
  # @scope class
  attach_function :gtk_accelerator_get_label_with_keycode, :gtk_accelerator_get_label_with_keycode, [:pointer, :uint, :uint, :char], :string
  
  # (Not documented)
  # 
  # @method gtk_accelerator_set_default_mod_mask(default_mod_mask)
  # @param [unknown] default_mod_mask 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accelerator_set_default_mod_mask, :gtk_accelerator_set_default_mod_mask, [:char], :void
  
  # (Not documented)
  # 
  # @method gtk_accelerator_get_default_mod_mask()
  # @return [unknown] 
  # @scope class
  attach_function :gtk_accelerator_get_default_mod_mask, :gtk_accelerator_get_default_mod_mask, [], :char
  
  # (Not documented)
  # 
  # @method gtk_accel_group_query(accel_group, accel_key, accel_mods, n_entries)
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @param [FFI::Pointer(*Guint)] n_entries 
  # @return [FFI::Pointer(*GtkAccelGroupEntry)] 
  # @scope class
  attach_function :gtk_accel_group_query, :gtk_accel_group_query, [GtkAccelGroup, :uint, :char, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_accel_group_reconnect(accel_group, accel_path_quark)
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_path_quark 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_group_reconnect, :_gtk_accel_group_reconnect, [GtkAccelGroup, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_group_get_accelerables(accel_group)
  # @param [GtkAccelGroup] accel_group 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_accel_group_get_accelerables, :_gtk_accel_group_get_accelerables, [GtkAccelGroup], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :key ::
  #   (GtkAccelKey) 
  # :closure ::
  #   (FFI::Pointer(*GClosure)) 
  # :accel_path_quark ::
  #   (Integer) 
  class GtkAccelGroupEntry < FFI::Struct
    layout :key, GtkAccelKey.by_value,
           :closure, :pointer,
           :accel_path_quark, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :left ::
  #   (Integer) 
  # :right ::
  #   (Integer) 
  # :top ::
  #   (Integer) 
  # :bottom ::
  #   (Integer) 
  module GtkBorderWrappers
    # @return [GtkBorder] 
    def copy()
      GtkBorder.new Gtk.gtk_border_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_border_free(self)
    end
  end
  
  class GtkBorder < FFI::Struct
    include GtkBorderWrappers
    layout :left, :short,
           :right, :short,
           :top, :short,
           :bottom, :short
  end
  
  # (Not documented)
  # 
  # @method gtk_border_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_border_get_type, :gtk_border_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_border_new()
  # @return [GtkBorder] 
  # @scope class
  attach_function :gtk_border_new, :gtk_border_new, [], GtkBorder
  
  # (Not documented)
  # 
  # @method gtk_border_copy(border)
  # @param [GtkBorder] border 
  # @return [GtkBorder] 
  # @scope class
  attach_function :gtk_border_copy, :gtk_border_copy, [GtkBorder], GtkBorder
  
  # (Not documented)
  # 
  # @method gtk_border_free(border)
  # @param [GtkBorder] border 
  # @return [nil] 
  # @scope class
  attach_function :gtk_border_free, :gtk_border_free, [GtkBorder], :void
  
  # (Not documented)
  module GtkClipboardWrappers
    # @return [FFI::Pointer(*GdkDisplay)] 
    def get_display()
      Gtk.gtk_clipboard_get_display(self)
    end
    
    # @param [FFI::Pointer(*GtkTargetEntry)] targets 
    # @param [Integer] n_targets 
    # @param [Proc(_callback_gtk_clipboard_get_func_)] get_func 
    # @param [Proc(_callback_gtk_clipboard_clear_func_)] clear_func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [Integer] 
    def set_with_data(targets, n_targets, get_func, clear_func, user_data)
      Gtk.gtk_clipboard_set_with_data(self, targets, n_targets, get_func, clear_func, user_data)
    end
    
    # @param [FFI::Pointer(*GtkTargetEntry)] targets 
    # @param [Integer] n_targets 
    # @param [Proc(_callback_gtk_clipboard_get_func_)] get_func 
    # @param [Proc(_callback_gtk_clipboard_clear_func_)] clear_func 
    # @param [FFI::Pointer(*GObject)] owner 
    # @return [Integer] 
    def set_with_owner(targets, n_targets, get_func, clear_func, owner)
      Gtk.gtk_clipboard_set_with_owner(self, targets, n_targets, get_func, clear_func, owner)
    end
    
    # @return [FFI::Pointer(*GObject)] 
    def get_owner()
      Gtk.gtk_clipboard_get_owner(self)
    end
    
    # @return [nil] 
    def clear()
      Gtk.gtk_clipboard_clear(self)
    end
    
    # @param [String] text 
    # @param [Integer] len 
    # @return [nil] 
    def set_text(text, len)
      Gtk.gtk_clipboard_set_text(self, text, len)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_image(pixbuf)
      Gtk.gtk_clipboard_set_image(self, pixbuf)
    end
    
    # @param [FFI::Pointer(GdkAtom)] target 
    # @param [Proc(_callback_gtk_clipboard_received_func_)] callback 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def request_contents(target, callback, user_data)
      Gtk.gtk_clipboard_request_contents(self, target, callback, user_data)
    end
    
    # @param [Proc(_callback_gtk_clipboard_text_received_func_)] callback 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def request_text(callback, user_data)
      Gtk.gtk_clipboard_request_text(self, callback, user_data)
    end
    
    # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
    # @param [Proc(_callback_gtk_clipboard_rich_text_received_func_)] callback 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def request_rich_text(buffer, callback, user_data)
      Gtk.gtk_clipboard_request_rich_text(self, buffer, callback, user_data)
    end
    
    # @param [Proc(_callback_gtk_clipboard_image_received_func_)] callback 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def request_image(callback, user_data)
      Gtk.gtk_clipboard_request_image(self, callback, user_data)
    end
    
    # @param [Proc(_callback_gtk_clipboard_uri_received_func_)] callback 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def request_uris(callback, user_data)
      Gtk.gtk_clipboard_request_uris(self, callback, user_data)
    end
    
    # @param [Proc(_callback_gtk_clipboard_targets_received_func_)] callback 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def request_targets(callback, user_data)
      Gtk.gtk_clipboard_request_targets(self, callback, user_data)
    end
    
    # @param [FFI::Pointer(GdkAtom)] target 
    # @return [GtkSelectionData] 
    def wait_for_contents(target)
      GtkSelectionData.new Gtk.gtk_clipboard_wait_for_contents(self, target)
    end
    
    # @return [String] 
    def wait_for_text()
      Gtk.gtk_clipboard_wait_for_text(self)
    end
    
    # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
    # @param [FFI::Pointer(*GdkAtom)] format 
    # @param [FFI::Pointer(*Gsize)] length 
    # @return [FFI::Pointer(*Guint8)] 
    def wait_for_rich_text(buffer, format, length)
      Gtk.gtk_clipboard_wait_for_rich_text(self, buffer, format, length)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def wait_for_image()
      Gtk.gtk_clipboard_wait_for_image(self)
    end
    
    # @return [FFI::Pointer(**Gchar)] 
    def wait_for_uris()
      Gtk.gtk_clipboard_wait_for_uris(self)
    end
    
    # @param [FFI::Pointer(**GdkAtom)] targets 
    # @param [FFI::Pointer(*Gint)] n_targets 
    # @return [Integer] 
    def wait_for_targets(targets, n_targets)
      Gtk.gtk_clipboard_wait_for_targets(self, targets, n_targets)
    end
    
    # @return [Integer] 
    def wait_is_text_available()
      Gtk.gtk_clipboard_wait_is_text_available(self)
    end
    
    # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
    # @return [Integer] 
    def wait_is_rich_text_available(buffer)
      Gtk.gtk_clipboard_wait_is_rich_text_available(self, buffer)
    end
    
    # @return [Integer] 
    def wait_is_image_available()
      Gtk.gtk_clipboard_wait_is_image_available(self)
    end
    
    # @return [Integer] 
    def wait_is_uris_available()
      Gtk.gtk_clipboard_wait_is_uris_available(self)
    end
    
    # @param [FFI::Pointer(GdkAtom)] target 
    # @return [Integer] 
    def wait_is_target_available(target)
      Gtk.gtk_clipboard_wait_is_target_available(self, target)
    end
    
    # @param [FFI::Pointer(*GtkTargetEntry)] targets 
    # @param [Integer] n_targets 
    # @return [nil] 
    def set_can_store(targets, n_targets)
      Gtk.gtk_clipboard_set_can_store(self, targets, n_targets)
    end
    
    # @return [nil] 
    def store()
      Gtk.gtk_clipboard_store(self)
    end
  end
  
  class GtkClipboard < FFI::Struct
    include GtkClipboardWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkIconSetWrappers
    # @return [GtkIconSet] 
    def ref()
      GtkIconSet.new Gtk.gtk_icon_set_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_icon_set_unref(self)
    end
    
    # @return [GtkIconSet] 
    def copy()
      GtkIconSet.new Gtk.gtk_icon_set_copy(self)
    end
    
    # @param [FFI::Pointer(*GtkStyle)] style 
    # @param [Symbol from _enum_gtk_text_direction_] direction 
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @param [FFI::Pointer(*GtkWidget)] widget 
    # @param [String] detail 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def render_icon(style, direction, state, size, widget, detail)
      Gtk.gtk_icon_set_render_icon(self, style, direction, state, size, widget, detail)
    end
    
    # @param [FFI::Pointer(*GtkIconSource)] source 
    # @return [nil] 
    def add_source(source)
      Gtk.gtk_icon_set_add_source(self, source)
    end
    
    # @param [FFI::Pointer(**GtkIconSize)] sizes 
    # @param [FFI::Pointer(*Gint)] n_sizes 
    # @return [nil] 
    def get_sizes(sizes, n_sizes)
      Gtk.gtk_icon_set_get_sizes(self, sizes, n_sizes)
    end
    
    # @param [FFI::Pointer(*GtkStyleContext)] context 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def render_icon_pixbuf(context, size)
      Gtk.gtk_icon_set_render_icon_pixbuf(self, context, size)
    end
  end
  
  class GtkIconSet < FFI::Struct
    include GtkIconSetWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkIconSourceWrappers
    # @return [GtkIconSource] 
    def copy()
      GtkIconSource.new Gtk.gtk_icon_source_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_icon_source_free(self)
    end
    
    # @param [String] filename 
    # @return [nil] 
    def set_filename(filename)
      Gtk.gtk_icon_source_set_filename(self, filename)
    end
    
    # @param [String] icon_name 
    # @return [nil] 
    def set_icon_name(icon_name)
      Gtk.gtk_icon_source_set_icon_name(self, icon_name)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_pixbuf(pixbuf)
      Gtk.gtk_icon_source_set_pixbuf(self, pixbuf)
    end
    
    # @return [String] 
    def get_filename()
      Gtk.gtk_icon_source_get_filename(self)
    end
    
    # @return [String] 
    def get_icon_name()
      Gtk.gtk_icon_source_get_icon_name(self)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_pixbuf()
      Gtk.gtk_icon_source_get_pixbuf(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_direction_wildcarded(setting)
      Gtk.gtk_icon_source_set_direction_wildcarded(self, setting)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_state_wildcarded(setting)
      Gtk.gtk_icon_source_set_state_wildcarded(self, setting)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_size_wildcarded(setting)
      Gtk.gtk_icon_source_set_size_wildcarded(self, setting)
    end
    
    # @return [Integer] 
    def get_size_wildcarded()
      Gtk.gtk_icon_source_get_size_wildcarded(self)
    end
    
    # @return [Integer] 
    def get_state_wildcarded()
      Gtk.gtk_icon_source_get_state_wildcarded(self)
    end
    
    # @return [Integer] 
    def get_direction_wildcarded()
      Gtk.gtk_icon_source_get_direction_wildcarded(self)
    end
    
    # @param [Symbol from _enum_gtk_text_direction_] direction 
    # @return [nil] 
    def set_direction(direction)
      Gtk.gtk_icon_source_set_direction(self, direction)
    end
    
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @return [nil] 
    def set_state(state)
      Gtk.gtk_icon_source_set_state(self, state)
    end
    
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_size(size)
      Gtk.gtk_icon_source_set_size(self, size)
    end
    
    # @return [Symbol from _enum_gtk_text_direction_] 
    def get_direction()
      Gtk.gtk_icon_source_get_direction(self)
    end
    
    # @return [Symbol from _enum_gtk_state_type_] 
    def get_state()
      Gtk.gtk_icon_source_get_state(self)
    end
    
    # @return [Symbol from _enum_gtk_icon_size_] 
    def get_size()
      Gtk.gtk_icon_source_get_size(self)
    end
  end
  
  class GtkIconSource < FFI::Struct
    include GtkIconSourceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkRcStyle < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkSelectionDataWrappers
    # @return [FFI::Pointer(GdkAtom)] 
    def get_selection()
      Gtk.gtk_selection_data_get_selection(self)
    end
    
    # @return [FFI::Pointer(GdkAtom)] 
    def get_target()
      Gtk.gtk_selection_data_get_target(self)
    end
    
    # @return [FFI::Pointer(GdkAtom)] 
    def get_data_type()
      Gtk.gtk_selection_data_get_data_type(self)
    end
    
    # @return [Integer] 
    def get_format()
      Gtk.gtk_selection_data_get_format(self)
    end
    
    # @return [FFI::Pointer(*Guchar)] 
    def get_data()
      Gtk.gtk_selection_data_get_data(self)
    end
    
    # @return [Integer] 
    def get_length()
      Gtk.gtk_selection_data_get_length(self)
    end
    
    # @param [FFI::Pointer(*Gint)] length 
    # @return [FFI::Pointer(*Guchar)] 
    def get_data_with_length(length)
      Gtk.gtk_selection_data_get_data_with_length(self, length)
    end
    
    # @return [FFI::Pointer(*GdkDisplay)] 
    def get_display()
      Gtk.gtk_selection_data_get_display(self)
    end
    
    # @param [FFI::Pointer(GdkAtom)] type 
    # @param [Integer] format 
    # @param [FFI::Pointer(*Guchar)] data 
    # @param [Integer] length 
    # @return [nil] 
    def set(type, format, data, length)
      Gtk.gtk_selection_data_set(self, type, format, data, length)
    end
    
    # @param [String] str 
    # @param [Integer] len 
    # @return [Integer] 
    def set_text(str, len)
      Gtk.gtk_selection_data_set_text(self, str, len)
    end
    
    # @return [FFI::Pointer(*Guchar)] 
    def get_text()
      Gtk.gtk_selection_data_get_text(self)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [Integer] 
    def set_pixbuf(pixbuf)
      Gtk.gtk_selection_data_set_pixbuf(self, pixbuf)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_pixbuf()
      Gtk.gtk_selection_data_get_pixbuf(self)
    end
    
    # @param [FFI::Pointer(**Gchar)] uris 
    # @return [Integer] 
    def set_uris(uris)
      Gtk.gtk_selection_data_set_uris(self, uris)
    end
    
    # @return [FFI::Pointer(**Gchar)] 
    def get_uris()
      Gtk.gtk_selection_data_get_uris(self)
    end
    
    # @param [FFI::Pointer(**GdkAtom)] targets 
    # @param [FFI::Pointer(*Gint)] n_atoms 
    # @return [Integer] 
    def get_targets(targets, n_atoms)
      Gtk.gtk_selection_data_get_targets(self, targets, n_atoms)
    end
    
    # @return [Integer] 
    def targets_include_text()
      Gtk.gtk_selection_data_targets_include_text(self)
    end
    
    # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
    # @return [Integer] 
    def targets_include_rich_text(buffer)
      Gtk.gtk_selection_data_targets_include_rich_text(self, buffer)
    end
    
    # @param [Integer] writable 
    # @return [Integer] 
    def targets_include_image(writable)
      Gtk.gtk_selection_data_targets_include_image(self, writable)
    end
    
    # @return [Integer] 
    def targets_include_uri()
      Gtk.gtk_selection_data_targets_include_uri(self)
    end
    
    # @return [GtkSelectionData] 
    def copy()
      GtkSelectionData.new Gtk.gtk_selection_data_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_selection_data_free(self)
    end
  end
  
  class GtkSelectionData < FFI::Struct
    include GtkSelectionDataWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkStyle < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkTooltipWrappers
    # @param [String] markup 
    # @return [nil] 
    def set_markup(markup)
      Gtk.gtk_tooltip_set_markup(self, markup)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_text(text)
      Gtk.gtk_tooltip_set_text(self, text)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_icon(pixbuf)
      Gtk.gtk_tooltip_set_icon(self, pixbuf)
    end
    
    # @param [String] stock_id 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_icon_from_stock(stock_id, size)
      Gtk.gtk_tooltip_set_icon_from_stock(self, stock_id, size)
    end
    
    # @param [String] icon_name 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_icon_from_icon_name(icon_name, size)
      Gtk.gtk_tooltip_set_icon_from_icon_name(self, icon_name, size)
    end
    
    # @param [FFI::Pointer(*GIcon)] gicon 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_icon_from_gicon(gicon, size)
      Gtk.gtk_tooltip_set_icon_from_gicon(self, gicon, size)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] custom_widget 
    # @return [nil] 
    def set_custom(custom_widget)
      Gtk.gtk_tooltip_set_custom(self, custom_widget)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] rect 
    # @return [nil] 
    def set_tip_area(rect)
      Gtk.gtk_tooltip_set_tip_area(self, rect)
    end
  end
  
  class GtkTooltip < FFI::Struct
    include GtkTooltipWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkWidgetPathWrappers
    # @return [GtkWidgetPath] 
    def copy()
      GtkWidgetPath.new Gtk.gtk_widget_path_copy(self)
    end
    
    # @return [GtkWidgetPath] 
    def ref()
      GtkWidgetPath.new Gtk.gtk_widget_path_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_widget_path_unref(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_widget_path_free(self)
    end
    
    # @return [String] 
    def to_string()
      Gtk.gtk_widget_path_to_string(self)
    end
    
    # @return [Integer] 
    def length()
      Gtk.gtk_widget_path_length(self)
    end
    
    # @param [Integer] type 
    # @return [Integer] 
    def append_type(type)
      Gtk.gtk_widget_path_append_type(self, type)
    end
    
    # @param [Integer] type 
    # @return [nil] 
    def prepend_type(type)
      Gtk.gtk_widget_path_prepend_type(self, type)
    end
    
    # @param [FFI::Pointer(*GtkWidgetPath)] siblings 
    # @param [Integer] sibling_index 
    # @return [Integer] 
    def append_with_siblings(siblings, sibling_index)
      Gtk.gtk_widget_path_append_with_siblings(self, siblings, sibling_index)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] widget 
    # @return [Integer] 
    def append_for_widget(widget)
      Gtk.gtk_widget_path_append_for_widget(self, widget)
    end
    
    # @param [Integer] pos 
    # @return [Integer] 
    def iter_get_object_type(pos)
      Gtk.gtk_widget_path_iter_get_object_type(self, pos)
    end
    
    # @param [Integer] pos 
    # @param [Integer] type 
    # @return [nil] 
    def iter_set_object_type(pos, type)
      Gtk.gtk_widget_path_iter_set_object_type(self, pos, type)
    end
    
    # @param [Integer] pos 
    # @return [GtkWidgetPath] 
    def iter_get_siblings(pos)
      GtkWidgetPath.new Gtk.gtk_widget_path_iter_get_siblings(self, pos)
    end
    
    # @param [Integer] pos 
    # @return [Integer] 
    def iter_get_sibling_index(pos)
      Gtk.gtk_widget_path_iter_get_sibling_index(self, pos)
    end
    
    # @param [Integer] pos 
    # @return [String] 
    def iter_get_name(pos)
      Gtk.gtk_widget_path_iter_get_name(self, pos)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @return [nil] 
    def iter_set_name(pos, name)
      Gtk.gtk_widget_path_iter_set_name(self, pos, name)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @return [Integer] 
    def iter_has_name(pos, name)
      Gtk.gtk_widget_path_iter_has_name(self, pos, name)
    end
    
    # @param [Integer] pos 
    # @param [Integer] qname 
    # @return [Integer] 
    def iter_has_qname(pos, qname)
      Gtk.gtk_widget_path_iter_has_qname(self, pos, qname)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @return [nil] 
    def iter_add_class(pos, name)
      Gtk.gtk_widget_path_iter_add_class(self, pos, name)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @return [nil] 
    def iter_remove_class(pos, name)
      Gtk.gtk_widget_path_iter_remove_class(self, pos, name)
    end
    
    # @param [Integer] pos 
    # @return [nil] 
    def iter_clear_classes(pos)
      Gtk.gtk_widget_path_iter_clear_classes(self, pos)
    end
    
    # @param [Integer] pos 
    # @return [FFI::Pointer(*GSList)] 
    def iter_list_classes(pos)
      Gtk.gtk_widget_path_iter_list_classes(self, pos)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @return [Integer] 
    def iter_has_class(pos, name)
      Gtk.gtk_widget_path_iter_has_class(self, pos, name)
    end
    
    # @param [Integer] pos 
    # @param [Integer] qname 
    # @return [Integer] 
    def iter_has_qclass(pos, qname)
      Gtk.gtk_widget_path_iter_has_qclass(self, pos, qname)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @param [Symbol from _enum_gtk_region_flags_] flags 
    # @return [nil] 
    def iter_add_region(pos, name, flags)
      Gtk.gtk_widget_path_iter_add_region(self, pos, name, flags)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @return [nil] 
    def iter_remove_region(pos, name)
      Gtk.gtk_widget_path_iter_remove_region(self, pos, name)
    end
    
    # @param [Integer] pos 
    # @return [nil] 
    def iter_clear_regions(pos)
      Gtk.gtk_widget_path_iter_clear_regions(self, pos)
    end
    
    # @param [Integer] pos 
    # @return [FFI::Pointer(*GSList)] 
    def iter_list_regions(pos)
      Gtk.gtk_widget_path_iter_list_regions(self, pos)
    end
    
    # @param [Integer] pos 
    # @param [String] name 
    # @param [FFI::Pointer(*GtkRegionFlags)] flags 
    # @return [Integer] 
    def iter_has_region(pos, name, flags)
      Gtk.gtk_widget_path_iter_has_region(self, pos, name, flags)
    end
    
    # @param [Integer] pos 
    # @param [Integer] qname 
    # @param [FFI::Pointer(*GtkRegionFlags)] flags 
    # @return [Integer] 
    def iter_has_qregion(pos, qname, flags)
      Gtk.gtk_widget_path_iter_has_qregion(self, pos, qname, flags)
    end
    
    # @return [Integer] 
    def get_object_type()
      Gtk.gtk_widget_path_get_object_type(self)
    end
    
    # @param [Integer] type 
    # @return [Integer] 
    def is_type(type)
      Gtk.gtk_widget_path_is_type(self, type)
    end
    
    # @param [Integer] type 
    # @return [Integer] 
    def has_parent(type)
      Gtk.gtk_widget_path_has_parent(self, type)
    end
  end
  
  class GtkWidgetPath < FFI::Struct
    include GtkWidgetPathWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_rc_property_parser_(pspec, rc_string, property_value)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GString)] rc_string 
  # @param [FFI::Pointer(*GValue)] property_value 
  # @return [Integer] 
  # @scope class
  callback :gtk_rc_property_parser, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_widget_help_type).</em>
  # 
  # === Options:
  # :tooltip ::
  #   
  # :whats_this ::
  #   
  # 
  # @method _enum_gtk_widget_help_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_widget_help_type, [
    :tooltip, 0,
    :whats_this, 1
  ]
  
  # (Not documented)
  class GtkWidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkWidgetClassPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_callback_(data)
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [FFI::Pointer(*GtkWidget)] 
  # @scope class
  callback :gtk_callback, [:pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  module GtkRequisitionWrappers
    # @return [GtkRequisition] 
    def copy()
      GtkRequisition.new Gtk.gtk_requisition_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_requisition_free(self)
    end
  end
  
  class GtkRequisition < FFI::Struct
    include GtkRequisitionWrappers
    layout :width, :int,
           :height, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkWidgetPrivate) 
  module GtkWidgetWrappers
    # @return [nil] 
    def destroy()
      Gtk.gtk_widget_destroy(self)
    end
    
    # @param [FFI::Pointer(**GtkWidget)] widget_pointer 
    # @return [nil] 
    def destroyed(widget_pointer)
      Gtk.gtk_widget_destroyed(self, widget_pointer)
    end
    
    # @return [nil] 
    def unparent()
      Gtk.gtk_widget_unparent(self)
    end
    
    # @return [nil] 
    def show()
      Gtk.gtk_widget_show(self)
    end
    
    # @return [nil] 
    def hide()
      Gtk.gtk_widget_hide(self)
    end
    
    # @return [nil] 
    def show_now()
      Gtk.gtk_widget_show_now(self)
    end
    
    # @return [nil] 
    def show_all()
      Gtk.gtk_widget_show_all(self)
    end
    
    # @param [Integer] no_show_all 
    # @return [nil] 
    def set_no_show_all(no_show_all)
      Gtk.gtk_widget_set_no_show_all(self, no_show_all)
    end
    
    # @return [Integer] 
    def get_no_show_all()
      Gtk.gtk_widget_get_no_show_all(self)
    end
    
    # @return [nil] 
    def map()
      Gtk.gtk_widget_map(self)
    end
    
    # @return [nil] 
    def unmap()
      Gtk.gtk_widget_unmap(self)
    end
    
    # @return [nil] 
    def realize()
      Gtk.gtk_widget_realize(self)
    end
    
    # @return [nil] 
    def unrealize()
      Gtk.gtk_widget_unrealize(self)
    end
    
    # @param [FFI::Pointer(*CairoT)] cr 
    # @return [nil] 
    def draw(cr)
      Gtk.gtk_widget_draw(self, cr)
    end
    
    # @return [nil] 
    def queue_draw()
      Gtk.gtk_widget_queue_draw(self)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def queue_draw_area(x, y, width, height)
      Gtk.gtk_widget_queue_draw_area(self, x, y, width, height)
    end
    
    # @param [FFI::Pointer(*CairoRegionT)] region 
    # @return [nil] 
    def queue_draw_region(region)
      Gtk.gtk_widget_queue_draw_region(self, region)
    end
    
    # @return [nil] 
    def queue_resize()
      Gtk.gtk_widget_queue_resize(self)
    end
    
    # @return [nil] 
    def queue_resize_no_redraw()
      Gtk.gtk_widget_queue_resize_no_redraw(self)
    end
    
    # @param [GtkRequisition] requisition 
    # @return [nil] 
    def size_request(requisition)
      Gtk.gtk_widget_size_request(self, requisition)
    end
    
    # @param [FFI::Pointer(*GtkAllocation)] allocation 
    # @return [nil] 
    def size_allocate(allocation)
      Gtk.gtk_widget_size_allocate(self, allocation)
    end
    
    # @return [Symbol from _enum_gtk_size_request_mode_] 
    def get_request_mode()
      Gtk.gtk_widget_get_request_mode(self)
    end
    
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width(minimum_width, natural_width)
      Gtk.gtk_widget_get_preferred_width(self, minimum_width, natural_width)
    end
    
    # @param [Integer] width 
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height_for_width(width, minimum_height, natural_height)
      Gtk.gtk_widget_get_preferred_height_for_width(self, width, minimum_height, natural_height)
    end
    
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height(minimum_height, natural_height)
      Gtk.gtk_widget_get_preferred_height(self, minimum_height, natural_height)
    end
    
    # @param [Integer] height 
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width_for_height(height, minimum_width, natural_width)
      Gtk.gtk_widget_get_preferred_width_for_height(self, height, minimum_width, natural_width)
    end
    
    # @param [GtkRequisition] minimum_size 
    # @param [GtkRequisition] natural_size 
    # @return [nil] 
    def get_preferred_size(minimum_size, natural_size)
      Gtk.gtk_widget_get_preferred_size(self, minimum_size, natural_size)
    end
    
    # @param [GtkRequisition] requisition 
    # @return [nil] 
    def get_child_requisition(requisition)
      Gtk.gtk_widget_get_child_requisition(self, requisition)
    end
    
    # @param [String] accel_signal 
    # @param [GtkAccelGroup] accel_group 
    # @param [Integer] accel_key 
    # @param [unknown] accel_mods 
    # @param [Symbol from _enum_gtk_accel_flags_] accel_flags 
    # @return [nil] 
    def add_accelerator(accel_signal, accel_group, accel_key, accel_mods, accel_flags)
      Gtk.gtk_widget_add_accelerator(self, accel_signal, accel_group, accel_key, accel_mods, accel_flags)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @param [Integer] accel_key 
    # @param [unknown] accel_mods 
    # @return [Integer] 
    def remove_accelerator(accel_group, accel_key, accel_mods)
      Gtk.gtk_widget_remove_accelerator(self, accel_group, accel_key, accel_mods)
    end
    
    # @param [String] accel_path 
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def set_accel_path(accel_path, accel_group)
      Gtk.gtk_widget_set_accel_path(self, accel_path, accel_group)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_accel_closures()
      Gtk.gtk_widget_list_accel_closures(self)
    end
    
    # @param [Integer] signal_id 
    # @return [Integer] 
    def can_activate_accel(signal_id)
      Gtk.gtk_widget_can_activate_accel(self, signal_id)
    end
    
    # @param [Integer] group_cycling 
    # @return [Integer] 
    def mnemonic_activate(group_cycling)
      Gtk.gtk_widget_mnemonic_activate(self, group_cycling)
    end
    
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @return [Integer] 
    def event(event)
      Gtk.gtk_widget_event(self, event)
    end
    
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @return [Integer] 
    def send_expose(event)
      Gtk.gtk_widget_send_expose(self, event)
    end
    
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @return [Integer] 
    def send_focus_change(event)
      Gtk.gtk_widget_send_focus_change(self, event)
    end
    
    # @return [Integer] 
    def activate()
      Gtk.gtk_widget_activate(self)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] new_parent 
    # @return [nil] 
    def reparent(new_parent)
      Gtk.gtk_widget_reparent(self, new_parent)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] area 
    # @param [FFI::Pointer(*GdkRectangle)] intersection 
    # @return [Integer] 
    def intersect(area, intersection)
      Gtk.gtk_widget_intersect(self, area, intersection)
    end
    
    # @param [FFI::Pointer(*CairoRegionT)] region 
    # @return [FFI::Pointer(*CairoRegionT)] 
    def region_intersect(region)
      Gtk.gtk_widget_region_intersect(self, region)
    end
    
    # @return [nil] 
    def freeze_child_notify()
      Gtk.gtk_widget_freeze_child_notify(self)
    end
    
    # @param [String] child_property 
    # @return [nil] 
    def child_notify(child_property)
      Gtk.gtk_widget_child_notify(self, child_property)
    end
    
    # @return [nil] 
    def thaw_child_notify()
      Gtk.gtk_widget_thaw_child_notify(self)
    end
    
    # @param [Integer] can_focus 
    # @return [nil] 
    def set_can_focus(can_focus)
      Gtk.gtk_widget_set_can_focus(self, can_focus)
    end
    
    # @return [Integer] 
    def get_can_focus()
      Gtk.gtk_widget_get_can_focus(self)
    end
    
    # @return [Integer] 
    def has_focus()
      Gtk.gtk_widget_has_focus(self)
    end
    
    # @return [Integer] 
    def is_focus()
      Gtk.gtk_widget_is_focus(self)
    end
    
    # @return [Integer] 
    def has_visible_focus()
      Gtk.gtk_widget_has_visible_focus(self)
    end
    
    # @return [nil] 
    def grab_focus()
      Gtk.gtk_widget_grab_focus(self)
    end
    
    # @param [Integer] can_default 
    # @return [nil] 
    def set_can_default(can_default)
      Gtk.gtk_widget_set_can_default(self, can_default)
    end
    
    # @return [Integer] 
    def get_can_default()
      Gtk.gtk_widget_get_can_default(self)
    end
    
    # @return [Integer] 
    def has_default()
      Gtk.gtk_widget_has_default(self)
    end
    
    # @return [nil] 
    def grab_default()
      Gtk.gtk_widget_grab_default(self)
    end
    
    # @param [Integer] receives_default 
    # @return [nil] 
    def set_receives_default(receives_default)
      Gtk.gtk_widget_set_receives_default(self, receives_default)
    end
    
    # @return [Integer] 
    def get_receives_default()
      Gtk.gtk_widget_get_receives_default(self)
    end
    
    # @return [Integer] 
    def has_grab()
      Gtk.gtk_widget_has_grab(self)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @return [Integer] 
    def device_is_shadowed(device)
      Gtk.gtk_widget_device_is_shadowed(self, device)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Gtk.gtk_widget_set_name(self, name)
    end
    
    # @return [String] 
    def get_name()
      Gtk.gtk_widget_get_name(self)
    end
    
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @return [nil] 
    def set_state(state)
      Gtk.gtk_widget_set_state(self, state)
    end
    
    # @return [Symbol from _enum_gtk_state_type_] 
    def get_state()
      Gtk.gtk_widget_get_state(self)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] flags 
    # @param [Integer] clear 
    # @return [nil] 
    def set_state_flags(flags, clear)
      Gtk.gtk_widget_set_state_flags(self, flags, clear)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] flags 
    # @return [nil] 
    def unset_state_flags(flags)
      Gtk.gtk_widget_unset_state_flags(self, flags)
    end
    
    # @return [Symbol from _enum_gtk_state_flags_] 
    def get_state_flags()
      Gtk.gtk_widget_get_state_flags(self)
    end
    
    # @param [Integer] sensitive 
    # @return [nil] 
    def set_sensitive(sensitive)
      Gtk.gtk_widget_set_sensitive(self, sensitive)
    end
    
    # @return [Integer] 
    def get_sensitive()
      Gtk.gtk_widget_get_sensitive(self)
    end
    
    # @return [Integer] 
    def is_sensitive()
      Gtk.gtk_widget_is_sensitive(self)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visible(visible)
      Gtk.gtk_widget_set_visible(self, visible)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_widget_get_visible(self)
    end
    
    # @param [Integer] has_window 
    # @return [nil] 
    def set_has_window(has_window)
      Gtk.gtk_widget_set_has_window(self, has_window)
    end
    
    # @return [Integer] 
    def get_has_window()
      Gtk.gtk_widget_get_has_window(self)
    end
    
    # @return [Integer] 
    def is_toplevel()
      Gtk.gtk_widget_is_toplevel(self)
    end
    
    # @return [Integer] 
    def is_drawable()
      Gtk.gtk_widget_is_drawable(self)
    end
    
    # @param [Integer] realized 
    # @return [nil] 
    def set_realized(realized)
      Gtk.gtk_widget_set_realized(self, realized)
    end
    
    # @return [Integer] 
    def get_realized()
      Gtk.gtk_widget_get_realized(self)
    end
    
    # @param [Integer] mapped 
    # @return [nil] 
    def set_mapped(mapped)
      Gtk.gtk_widget_set_mapped(self, mapped)
    end
    
    # @return [Integer] 
    def get_mapped()
      Gtk.gtk_widget_get_mapped(self)
    end
    
    # @param [Integer] app_paintable 
    # @return [nil] 
    def set_app_paintable(app_paintable)
      Gtk.gtk_widget_set_app_paintable(self, app_paintable)
    end
    
    # @return [Integer] 
    def get_app_paintable()
      Gtk.gtk_widget_get_app_paintable(self)
    end
    
    # @param [Integer] double_buffered 
    # @return [nil] 
    def set_double_buffered(double_buffered)
      Gtk.gtk_widget_set_double_buffered(self, double_buffered)
    end
    
    # @return [Integer] 
    def get_double_buffered()
      Gtk.gtk_widget_get_double_buffered(self)
    end
    
    # @param [Integer] redraw_on_allocate 
    # @return [nil] 
    def set_redraw_on_allocate(redraw_on_allocate)
      Gtk.gtk_widget_set_redraw_on_allocate(self, redraw_on_allocate)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] parent 
    # @return [nil] 
    def set_parent(parent)
      Gtk.gtk_widget_set_parent(self, parent)
    end
    
    # @return [GtkWidget] 
    def get_parent()
      GtkWidget.new Gtk.gtk_widget_get_parent(self)
    end
    
    # @param [FFI::Pointer(*GdkWindow)] parent_window 
    # @return [nil] 
    def set_parent_window(parent_window)
      Gtk.gtk_widget_set_parent_window(self, parent_window)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_parent_window()
      Gtk.gtk_widget_get_parent_window(self)
    end
    
    # @param [Integer] is_visible 
    # @return [nil] 
    def set_child_visible(is_visible)
      Gtk.gtk_widget_set_child_visible(self, is_visible)
    end
    
    # @return [Integer] 
    def get_child_visible()
      Gtk.gtk_widget_get_child_visible(self)
    end
    
    # @param [FFI::Pointer(*GdkWindow)] window 
    # @return [nil] 
    def set_window(window)
      Gtk.gtk_widget_set_window(self, window)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_window()
      Gtk.gtk_widget_get_window(self)
    end
    
    # @return [Integer] 
    def get_allocated_width()
      Gtk.gtk_widget_get_allocated_width(self)
    end
    
    # @return [Integer] 
    def get_allocated_height()
      Gtk.gtk_widget_get_allocated_height(self)
    end
    
    # @param [FFI::Pointer(*GtkAllocation)] allocation 
    # @return [nil] 
    def get_allocation(allocation)
      Gtk.gtk_widget_get_allocation(self, allocation)
    end
    
    # @param [FFI::Pointer(*GtkAllocation)] allocation 
    # @return [nil] 
    def set_allocation(allocation)
      Gtk.gtk_widget_set_allocation(self, allocation)
    end
    
    # @param [GtkRequisition] requisition 
    # @return [nil] 
    def get_requisition(requisition)
      Gtk.gtk_widget_get_requisition(self, requisition)
    end
    
    # @param [Symbol from _enum_gtk_direction_type_] direction 
    # @return [Integer] 
    def child_focus(direction)
      Gtk.gtk_widget_child_focus(self, direction)
    end
    
    # @param [Symbol from _enum_gtk_direction_type_] direction 
    # @return [Integer] 
    def keynav_failed(direction)
      Gtk.gtk_widget_keynav_failed(self, direction)
    end
    
    # @return [nil] 
    def error_bell()
      Gtk.gtk_widget_error_bell(self)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def set_size_request(width, height)
      Gtk.gtk_widget_set_size_request(self, width, height)
    end
    
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_size_request(width, height)
      Gtk.gtk_widget_get_size_request(self, width, height)
    end
    
    # @param [Integer] events 
    # @return [nil] 
    def set_events(events)
      Gtk.gtk_widget_set_events(self, events)
    end
    
    # @param [Integer] events 
    # @return [nil] 
    def add_events(events)
      Gtk.gtk_widget_add_events(self, events)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @param [unknown] events 
    # @return [nil] 
    def set_device_events(device, events)
      Gtk.gtk_widget_set_device_events(self, device, events)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @param [unknown] events 
    # @return [nil] 
    def add_device_events(device, events)
      Gtk.gtk_widget_add_device_events(self, device, events)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @param [Integer] enabled 
    # @return [nil] 
    def set_device_enabled(device, enabled)
      Gtk.gtk_widget_set_device_enabled(self, device, enabled)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @return [Integer] 
    def get_device_enabled(device)
      Gtk.gtk_widget_get_device_enabled(self, device)
    end
    
    # @return [GtkWidget] 
    def get_toplevel()
      GtkWidget.new Gtk.gtk_widget_get_toplevel(self)
    end
    
    # @param [Integer] widget_type 
    # @return [GtkWidget] 
    def get_ancestor(widget_type)
      GtkWidget.new Gtk.gtk_widget_get_ancestor(self, widget_type)
    end
    
    # @return [FFI::Pointer(*GdkVisual)] 
    def get_visual()
      Gtk.gtk_widget_get_visual(self)
    end
    
    # @param [FFI::Pointer(*GdkVisual)] visual 
    # @return [nil] 
    def set_visual(visual)
      Gtk.gtk_widget_set_visual(self, visual)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_widget_get_screen(self)
    end
    
    # @return [Integer] 
    def has_screen()
      Gtk.gtk_widget_has_screen(self)
    end
    
    # @return [FFI::Pointer(*GdkDisplay)] 
    def get_display()
      Gtk.gtk_widget_get_display(self)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_root_window()
      Gtk.gtk_widget_get_root_window(self)
    end
    
    # @return [GtkSettings] 
    def get_settings()
      GtkSettings.new Gtk.gtk_widget_get_settings(self)
    end
    
    # @param [FFI::Pointer(GdkAtom)] selection 
    # @return [GtkClipboard] 
    def get_clipboard(selection)
      GtkClipboard.new Gtk.gtk_widget_get_clipboard(self, selection)
    end
    
    # @return [Integer] 
    def get_hexpand()
      Gtk.gtk_widget_get_hexpand(self)
    end
    
    # @param [Integer] expand 
    # @return [nil] 
    def set_hexpand(expand)
      Gtk.gtk_widget_set_hexpand(self, expand)
    end
    
    # @return [Integer] 
    def get_hexpand_set()
      Gtk.gtk_widget_get_hexpand_set(self)
    end
    
    # @param [Integer] set 
    # @return [nil] 
    def set_hexpand_set(set)
      Gtk.gtk_widget_set_hexpand_set(self, set)
    end
    
    # @return [Integer] 
    def get_vexpand()
      Gtk.gtk_widget_get_vexpand(self)
    end
    
    # @param [Integer] expand 
    # @return [nil] 
    def set_vexpand(expand)
      Gtk.gtk_widget_set_vexpand(self, expand)
    end
    
    # @return [Integer] 
    def get_vexpand_set()
      Gtk.gtk_widget_get_vexpand_set(self)
    end
    
    # @param [Integer] set 
    # @return [nil] 
    def set_vexpand_set(set)
      Gtk.gtk_widget_set_vexpand_set(self, set)
    end
    
    # @return [nil] 
    def queue_compute_expand()
      Gtk.gtk_widget_queue_compute_expand(self)
    end
    
    # @param [Symbol from _enum_gtk_orientation_] orientation 
    # @return [Integer] 
    def compute_expand(orientation)
      Gtk.gtk_widget_compute_expand(self, orientation)
    end
    
    # @return [Integer] 
    def get_support_multidevice()
      Gtk.gtk_widget_get_support_multidevice(self)
    end
    
    # @param [Integer] support_multidevice 
    # @return [nil] 
    def set_support_multidevice(support_multidevice)
      Gtk.gtk_widget_set_support_multidevice(self, support_multidevice)
    end
    
    # @return [FFI::Pointer(*AtkObject)] 
    def get_accessible()
      Gtk.gtk_widget_get_accessible(self)
    end
    
    # @return [Symbol from _enum_gtk_align_] 
    def get_halign()
      Gtk.gtk_widget_get_halign(self)
    end
    
    # @param [Symbol from _enum_gtk_align_] align 
    # @return [nil] 
    def set_halign(align)
      Gtk.gtk_widget_set_halign(self, align)
    end
    
    # @return [Symbol from _enum_gtk_align_] 
    def get_valign()
      Gtk.gtk_widget_get_valign(self)
    end
    
    # @param [Symbol from _enum_gtk_align_] align 
    # @return [nil] 
    def set_valign(align)
      Gtk.gtk_widget_set_valign(self, align)
    end
    
    # @return [Integer] 
    def get_margin_left()
      Gtk.gtk_widget_get_margin_left(self)
    end
    
    # @param [Integer] margin 
    # @return [nil] 
    def set_margin_left(margin)
      Gtk.gtk_widget_set_margin_left(self, margin)
    end
    
    # @return [Integer] 
    def get_margin_right()
      Gtk.gtk_widget_get_margin_right(self)
    end
    
    # @param [Integer] margin 
    # @return [nil] 
    def set_margin_right(margin)
      Gtk.gtk_widget_set_margin_right(self, margin)
    end
    
    # @return [Integer] 
    def get_margin_top()
      Gtk.gtk_widget_get_margin_top(self)
    end
    
    # @param [Integer] margin 
    # @return [nil] 
    def set_margin_top(margin)
      Gtk.gtk_widget_set_margin_top(self, margin)
    end
    
    # @return [Integer] 
    def get_margin_bottom()
      Gtk.gtk_widget_get_margin_bottom(self)
    end
    
    # @param [Integer] margin 
    # @return [nil] 
    def set_margin_bottom(margin)
      Gtk.gtk_widget_set_margin_bottom(self, margin)
    end
    
    # @return [Integer] 
    def get_events()
      Gtk.gtk_widget_get_events(self)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @return [unknown] 
    def get_device_events(device)
      Gtk.gtk_widget_get_device_events(self, device)
    end
    
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] y 
    # @return [nil] 
    def get_pointer(x, y)
      Gtk.gtk_widget_get_pointer(self, x, y)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] ancestor 
    # @return [Integer] 
    def is_ancestor(ancestor)
      Gtk.gtk_widget_is_ancestor(self, ancestor)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] dest_widget 
    # @param [Integer] src_x 
    # @param [Integer] src_y 
    # @param [FFI::Pointer(*Gint)] dest_x 
    # @param [FFI::Pointer(*Gint)] dest_y 
    # @return [Integer] 
    def translate_coordinates(dest_widget, src_x, src_y, dest_x, dest_y)
      Gtk.gtk_widget_translate_coordinates(self, dest_widget, src_x, src_y, dest_x, dest_y)
    end
    
    # @return [Integer] 
    def hide_on_delete()
      Gtk.gtk_widget_hide_on_delete(self)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def override_color(state, color)
      Gtk.gtk_widget_override_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def override_background_color(state, color)
      Gtk.gtk_widget_override_background_color(self, state, color)
    end
    
    # @param [FFI::Pointer(*PangoFontDescription)] font_desc 
    # @return [nil] 
    def override_font(font_desc)
      Gtk.gtk_widget_override_font(self, font_desc)
    end
    
    # @param [String] name 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def override_symbolic_color(name, color)
      Gtk.gtk_widget_override_symbolic_color(self, name, color)
    end
    
    # @param [FFI::Pointer(*GdkRGBA)] cursor 
    # @param [FFI::Pointer(*GdkRGBA)] secondary_cursor 
    # @return [nil] 
    def override_cursor(cursor, secondary_cursor)
      Gtk.gtk_widget_override_cursor(self, cursor, secondary_cursor)
    end
    
    # @return [nil] 
    def reset_style()
      Gtk.gtk_widget_reset_style(self)
    end
    
    # @return [FFI::Pointer(*PangoContext)] 
    def create_pango_context()
      Gtk.gtk_widget_create_pango_context(self)
    end
    
    # @return [FFI::Pointer(*PangoContext)] 
    def get_pango_context()
      Gtk.gtk_widget_get_pango_context(self)
    end
    
    # @param [String] text 
    # @return [FFI::Pointer(*PangoLayout)] 
    def create_pango_layout(text)
      Gtk.gtk_widget_create_pango_layout(self, text)
    end
    
    # @param [String] stock_id 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def render_icon_pixbuf(stock_id, size)
      Gtk.gtk_widget_render_icon_pixbuf(self, stock_id, size)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_composite_name(name)
      Gtk.gtk_widget_set_composite_name(self, name)
    end
    
    # @return [String] 
    def get_composite_name()
      Gtk.gtk_widget_get_composite_name(self)
    end
    
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def style_get_property(property_name, value)
      Gtk.gtk_widget_style_get_property(self, property_name, value)
    end
    
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def style_get_valist(first_property_name, var_args)
      Gtk.gtk_widget_style_get_valist(self, first_property_name, var_args)
    end
    
    # @param [String] first_property_name 
    # @return [nil] 
    def style_get(first_property_name)
      Gtk.gtk_widget_style_get(self, first_property_name)
    end
    
    # @param [Symbol from _enum_gtk_text_direction_] dir 
    # @return [nil] 
    def set_direction(dir)
      Gtk.gtk_widget_set_direction(self, dir)
    end
    
    # @return [Symbol from _enum_gtk_text_direction_] 
    def get_direction()
      Gtk.gtk_widget_get_direction(self)
    end
    
    # @return [Integer] 
    def is_composited()
      Gtk.gtk_widget_is_composited(self)
    end
    
    # @param [FFI::Pointer(*CairoRegionT)] region 
    # @return [nil] 
    def shape_combine_region(region)
      Gtk.gtk_widget_shape_combine_region(self, region)
    end
    
    # @param [FFI::Pointer(*CairoRegionT)] region 
    # @return [nil] 
    def input_shape_combine_region(region)
      Gtk.gtk_widget_input_shape_combine_region(self, region)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_mnemonic_labels()
      Gtk.gtk_widget_list_mnemonic_labels(self)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] label 
    # @return [nil] 
    def add_mnemonic_label(label)
      Gtk.gtk_widget_add_mnemonic_label(self, label)
    end
    
    # @param [FFI::Pointer(*GtkWidget)] label 
    # @return [nil] 
    def remove_mnemonic_label(label)
      Gtk.gtk_widget_remove_mnemonic_label(self, label)
    end
    
    # @param [FFI::Pointer(*GtkWindow)] custom_window 
    # @return [nil] 
    def set_tooltip_window(custom_window)
      Gtk.gtk_widget_set_tooltip_window(self, custom_window)
    end
    
    # @return [GtkWindow] 
    def get_tooltip_window()
      GtkWindow.new Gtk.gtk_widget_get_tooltip_window(self)
    end
    
    # @return [nil] 
    def trigger_tooltip_query()
      Gtk.gtk_widget_trigger_tooltip_query(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_tooltip_text(text)
      Gtk.gtk_widget_set_tooltip_text(self, text)
    end
    
    # @return [String] 
    def get_tooltip_text()
      Gtk.gtk_widget_get_tooltip_text(self)
    end
    
    # @param [String] markup 
    # @return [nil] 
    def set_tooltip_markup(markup)
      Gtk.gtk_widget_set_tooltip_markup(self, markup)
    end
    
    # @return [String] 
    def get_tooltip_markup()
      Gtk.gtk_widget_get_tooltip_markup(self)
    end
    
    # @param [Integer] has_tooltip 
    # @return [nil] 
    def set_has_tooltip(has_tooltip)
      Gtk.gtk_widget_set_has_tooltip(self, has_tooltip)
    end
    
    # @return [Integer] 
    def get_has_tooltip()
      Gtk.gtk_widget_get_has_tooltip(self)
    end
    
    # @return [Integer] 
    def in_destruction()
      Gtk.gtk_widget_in_destruction(self)
    end
    
    # @return [GtkStyleContext] 
    def get_style_context()
      GtkStyleContext.new Gtk.gtk_widget_get_style_context(self)
    end
    
    # @return [GtkWidgetPath] 
    def get_path()
      GtkWidgetPath.new Gtk.gtk_widget_get_path(self)
    end
    
    # @param [unknown] intent 
    # @return [unknown] 
    def get_modifier_mask(intent)
      Gtk.gtk_widget_get_modifier_mask(self, intent)
    end
    
    # @param [String] name 
    # @param [FFI::Pointer(*GActionGroup)] group 
    # @return [nil] 
    def insert_action_group(name, group)
      Gtk.gtk_widget_insert_action_group(self, name, group)
    end
  end
  
  class GtkWidget < FFI::Struct
    include GtkWidgetWrappers
    layout :parent_instance, :char,
           :priv, GtkWidgetPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :activate_signal ::
  #   (Integer) < public >
  # :dispatch_child_properties_changed ::
  #   (FFI::Pointer(*)) seldomly overidden
  # :destroy ::
  #   (FFI::Pointer(*)) basics
  # :show ::
  #   (FFI::Pointer(*)) 
  # :show_all ::
  #   (FFI::Pointer(*)) 
  # :hide ::
  #   (FFI::Pointer(*)) 
  # :map ::
  #   (FFI::Pointer(*)) 
  # :unmap ::
  #   (FFI::Pointer(*)) 
  # :realize ::
  #   (FFI::Pointer(*)) 
  # :unrealize ::
  #   (FFI::Pointer(*)) 
  # :size_allocate ::
  #   (FFI::Pointer(*)) 
  # :state_changed ::
  #   (FFI::Pointer(*)) 
  # :state_flags_changed ::
  #   (FFI::Pointer(*)) 
  # :parent_set ::
  #   (FFI::Pointer(*)) 
  # :hierarchy_changed ::
  #   (FFI::Pointer(*)) 
  # :style_set ::
  #   (FFI::Pointer(*)) 
  # :direction_changed ::
  #   (FFI::Pointer(*)) 
  # :grab_notify ::
  #   (FFI::Pointer(*)) 
  # :child_notify ::
  #   (FFI::Pointer(*)) 
  # :draw ::
  #   (FFI::Pointer(*)) 
  # :get_request_mode ::
  #   (FFI::Pointer(*)) size requests
  # :get_preferred_height ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width_for_height ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height_for_width ::
  #   (FFI::Pointer(*)) 
  # :mnemonic_activate ::
  #   (FFI::Pointer(*)) Mnemonics
  # :grab_focus ::
  #   (FFI::Pointer(*)) explicit focus
  # :focus ::
  #   (FFI::Pointer(*)) 
  # :move_focus ::
  #   (FFI::Pointer(*)) keyboard navigation
  # :keynav_failed ::
  #   (FFI::Pointer(*)) 
  # :event ::
  #   (FFI::Pointer(*)) events
  # :button_press_event ::
  #   (FFI::Pointer(*)) 
  # :button_release_event ::
  #   (FFI::Pointer(*)) 
  # :scroll_event ::
  #   (FFI::Pointer(*)) 
  # :motion_notify_event ::
  #   (FFI::Pointer(*)) 
  # :delete_event ::
  #   (FFI::Pointer(*)) 
  # :destroy_event ::
  #   (FFI::Pointer(*)) 
  # :key_press_event ::
  #   (FFI::Pointer(*)) 
  # :key_release_event ::
  #   (FFI::Pointer(*)) 
  # :enter_notify_event ::
  #   (FFI::Pointer(*)) 
  # :leave_notify_event ::
  #   (FFI::Pointer(*)) 
  # :configure_event ::
  #   (FFI::Pointer(*)) 
  # :focus_in_event ::
  #   (FFI::Pointer(*)) 
  # :focus_out_event ::
  #   (FFI::Pointer(*)) 
  # :map_event ::
  #   (FFI::Pointer(*)) 
  # :unmap_event ::
  #   (FFI::Pointer(*)) 
  # :property_notify_event ::
  #   (FFI::Pointer(*)) 
  # :selection_clear_event ::
  #   (FFI::Pointer(*)) 
  # :selection_request_event ::
  #   (FFI::Pointer(*)) 
  # :selection_notify_event ::
  #   (FFI::Pointer(*)) 
  # :proximity_in_event ::
  #   (FFI::Pointer(*)) 
  # :proximity_out_event ::
  #   (FFI::Pointer(*)) 
  # :visibility_notify_event ::
  #   (FFI::Pointer(*)) 
  # :window_state_event ::
  #   (FFI::Pointer(*)) 
  # :damage_event ::
  #   (FFI::Pointer(*)) 
  # :grab_broken_event ::
  #   (FFI::Pointer(*)) 
  # :selection_get ::
  #   (FFI::Pointer(*)) selection
  # :selection_received ::
  #   (FFI::Pointer(*)) 
  # :drag_begin ::
  #   (FFI::Pointer(*)) Source side drag signals
  # :drag_end ::
  #   (FFI::Pointer(*)) 
  # :drag_data_get ::
  #   (FFI::Pointer(*)) 
  # :drag_data_delete ::
  #   (FFI::Pointer(*)) 
  # :drag_leave ::
  #   (FFI::Pointer(*)) Target side drag signals
  # :drag_motion ::
  #   (FFI::Pointer(*)) 
  # :drag_drop ::
  #   (FFI::Pointer(*)) 
  # :drag_data_received ::
  #   (FFI::Pointer(*)) 
  # :drag_failed ::
  #   (FFI::Pointer(*)) 
  # :popup_menu ::
  #   (FFI::Pointer(*)) Signals used only for keybindings
  # :show_help ::
  #   (FFI::Pointer(*)) If a widget has multiple tooltips/whatsthis, it should show the
  #   one for the current focus location, or if that doesn't make
  #   sense, should cycle through them showing each tip alongside
  #   whatever piece of the widget it applies to.
  # :get_accessible ::
  #   (FFI::Pointer(*)) accessibility support
  # :screen_changed ::
  #   (FFI::Pointer(*)) 
  # :can_activate_accel ::
  #   (FFI::Pointer(*)) 
  # :composited_changed ::
  #   (FFI::Pointer(*)) 
  # :query_tooltip ::
  #   (FFI::Pointer(*)) 
  # :compute_expand ::
  #   (FFI::Pointer(*)) 
  # :adjust_size_request ::
  #   (FFI::Pointer(*)) 
  # :adjust_size_allocation ::
  #   (FFI::Pointer(*)) 
  # :style_updated ::
  #   (FFI::Pointer(*)) 
  # :touch_event ::
  #   (FFI::Pointer(*)) 
  # :priv ::
  #   (GtkWidgetClassPrivate) < private >
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  module GtkWidgetClassWrappers
    # @param [Integer] type 
    # @return [nil] 
    def set_accessible_type(type)
      Gtk.gtk_widget_class_set_accessible_type(self, type)
    end
    
    # @param [unknown] role 
    # @return [nil] 
    def set_accessible_role(role)
      Gtk.gtk_widget_class_set_accessible_role(self, role)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @return [nil] 
    def install_style_property(pspec)
      Gtk.gtk_widget_class_install_style_property(self, pspec)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @param [Proc(_callback_gtk_rc_property_parser_)] parser 
    # @return [nil] 
    def install_style_property_parser(pspec, parser)
      Gtk.gtk_widget_class_install_style_property_parser(self, pspec, parser)
    end
    
    # @param [String] property_name 
    # @return [FFI::Pointer(*GParamSpec)] 
    def find_style_property(property_name)
      Gtk.gtk_widget_class_find_style_property(self, property_name)
    end
    
    # @param [FFI::Pointer(*Guint)] n_properties 
    # @return [FFI::Pointer(**GParamSpec)] 
    def list_style_properties(n_properties)
      Gtk.gtk_widget_class_list_style_properties(self, n_properties)
    end
  end
  
  class GtkWidgetClass < FFI::Struct
    include GtkWidgetClassWrappers
    layout :parent_class, :char,
           :activate_signal, :uint,
           :dispatch_child_properties_changed, :pointer,
           :destroy, :pointer,
           :show, :pointer,
           :show_all, :pointer,
           :hide, :pointer,
           :map, :pointer,
           :unmap, :pointer,
           :realize, :pointer,
           :unrealize, :pointer,
           :size_allocate, :pointer,
           :state_changed, :pointer,
           :state_flags_changed, :pointer,
           :parent_set, :pointer,
           :hierarchy_changed, :pointer,
           :style_set, :pointer,
           :direction_changed, :pointer,
           :grab_notify, :pointer,
           :child_notify, :pointer,
           :draw, :pointer,
           :get_request_mode, :pointer,
           :get_preferred_height, :pointer,
           :get_preferred_width_for_height, :pointer,
           :get_preferred_width, :pointer,
           :get_preferred_height_for_width, :pointer,
           :mnemonic_activate, :pointer,
           :grab_focus, :pointer,
           :focus, :pointer,
           :move_focus, :pointer,
           :keynav_failed, :pointer,
           :event, :pointer,
           :button_press_event, :pointer,
           :button_release_event, :pointer,
           :scroll_event, :pointer,
           :motion_notify_event, :pointer,
           :delete_event, :pointer,
           :destroy_event, :pointer,
           :key_press_event, :pointer,
           :key_release_event, :pointer,
           :enter_notify_event, :pointer,
           :leave_notify_event, :pointer,
           :configure_event, :pointer,
           :focus_in_event, :pointer,
           :focus_out_event, :pointer,
           :map_event, :pointer,
           :unmap_event, :pointer,
           :property_notify_event, :pointer,
           :selection_clear_event, :pointer,
           :selection_request_event, :pointer,
           :selection_notify_event, :pointer,
           :proximity_in_event, :pointer,
           :proximity_out_event, :pointer,
           :visibility_notify_event, :pointer,
           :window_state_event, :pointer,
           :damage_event, :pointer,
           :grab_broken_event, :pointer,
           :selection_get, :pointer,
           :selection_received, :pointer,
           :drag_begin, :pointer,
           :drag_end, :pointer,
           :drag_data_get, :pointer,
           :drag_data_delete, :pointer,
           :drag_leave, :pointer,
           :drag_motion, :pointer,
           :drag_drop, :pointer,
           :drag_data_received, :pointer,
           :drag_failed, :pointer,
           :popup_menu, :pointer,
           :show_help, :pointer,
           :get_accessible, :pointer,
           :screen_changed, :pointer,
           :can_activate_accel, :pointer,
           :composited_changed, :pointer,
           :query_tooltip, :pointer,
           :compute_expand, :pointer,
           :adjust_size_request, :pointer,
           :adjust_size_allocation, :pointer,
           :style_updated, :pointer,
           :touch_event, :pointer,
           :priv, GtkWidgetClassPrivate,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  # :halign ::
  #   (Integer) 
  # :valign ::
  #   (Integer) 
  # :margin ::
  #   (GtkBorder) 
  class GtkWidgetAuxInfo < FFI::Struct
    layout :width, :int,
           :height, :int,
           :halign, :uint,
           :valign, :uint,
           :margin, GtkBorder.by_value
  end
  
  # (Not documented)
  # 
  # @method gtk_widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_type, :gtk_widget_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_widget_new(type, first_property_name)
  # @param [Integer] type 
  # @param [String] first_property_name 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_widget_new, :gtk_widget_new, [:uint, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_widget_destroy(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_destroy, :gtk_widget_destroy, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_destroyed(widget, widget_pointer)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(**GtkWidget)] widget_pointer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_destroyed, :gtk_widget_destroyed, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_unparent(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_unparent, :gtk_widget_unparent, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_show(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_show, :gtk_widget_show, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_hide(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_hide, :gtk_widget_hide, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_show_now(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_show_now, :gtk_widget_show_now, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_show_all(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_show_all, :gtk_widget_show_all, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_no_show_all(widget, no_show_all)
  # @param [GtkWidget] widget 
  # @param [Integer] no_show_all 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_no_show_all, :gtk_widget_set_no_show_all, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_no_show_all(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_no_show_all, :gtk_widget_get_no_show_all, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_map(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_map, :gtk_widget_map, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_unmap(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_unmap, :gtk_widget_unmap, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_realize(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_realize, :gtk_widget_realize, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_unrealize(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_unrealize, :gtk_widget_unrealize, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_draw(widget, cr)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_draw, :gtk_widget_draw, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_queue_draw(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_queue_draw, :gtk_widget_queue_draw, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_queue_draw_area(widget, x, y, width, height)
  # @param [GtkWidget] widget 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_queue_draw_area, :gtk_widget_queue_draw_area, [GtkWidget, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_queue_draw_region(widget, region)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_queue_draw_region, :gtk_widget_queue_draw_region, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_queue_resize(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_queue_resize, :gtk_widget_queue_resize, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_queue_resize_no_redraw(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_queue_resize_no_redraw, :gtk_widget_queue_resize_no_redraw, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_size_request(widget, requisition)
  # @param [GtkWidget] widget 
  # @param [GtkRequisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_size_request, :gtk_widget_size_request, [GtkWidget, GtkRequisition], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_size_allocate(widget, allocation)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GtkAllocation)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_size_allocate, :gtk_widget_size_allocate, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_request_mode(widget)
  # @param [GtkWidget] widget 
  # @return [Symbol from _enum_gtk_size_request_mode_] 
  # @scope class
  attach_function :gtk_widget_get_request_mode, :gtk_widget_get_request_mode, [GtkWidget], :gtk_size_request_mode
  
  # (Not documented)
  # 
  # @method gtk_widget_get_preferred_width(widget, minimum_width, natural_width)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_preferred_width, :gtk_widget_get_preferred_width, [GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_preferred_height_for_width(widget, width, minimum_height, natural_height)
  # @param [GtkWidget] widget 
  # @param [Integer] width 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_preferred_height_for_width, :gtk_widget_get_preferred_height_for_width, [GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_preferred_height(widget, minimum_height, natural_height)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_preferred_height, :gtk_widget_get_preferred_height, [GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_preferred_width_for_height(widget, height, minimum_width, natural_width)
  # @param [GtkWidget] widget 
  # @param [Integer] height 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_preferred_width_for_height, :gtk_widget_get_preferred_width_for_height, [GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_preferred_size(widget, minimum_size, natural_size)
  # @param [GtkWidget] widget 
  # @param [GtkRequisition] minimum_size 
  # @param [GtkRequisition] natural_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_preferred_size, :gtk_widget_get_preferred_size, [GtkWidget, GtkRequisition, GtkRequisition], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_child_requisition(widget, requisition)
  # @param [GtkWidget] widget 
  # @param [GtkRequisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_child_requisition, :gtk_widget_get_child_requisition, [GtkWidget, GtkRequisition], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_add_accelerator(widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags)
  # @param [GtkWidget] widget 
  # @param [String] accel_signal 
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @param [Symbol from _enum_gtk_accel_flags_] accel_flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_add_accelerator, :gtk_widget_add_accelerator, [GtkWidget, :string, GtkAccelGroup, :uint, :char, :gtk_accel_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_remove_accelerator(widget, accel_group, accel_key, accel_mods)
  # @param [GtkWidget] widget 
  # @param [GtkAccelGroup] accel_group 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_remove_accelerator, :gtk_widget_remove_accelerator, [GtkWidget, GtkAccelGroup, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_accel_path(widget, accel_path, accel_group)
  # @param [GtkWidget] widget 
  # @param [String] accel_path 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_accel_path, :gtk_widget_set_accel_path, [GtkWidget, :string, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_list_accel_closures(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_widget_list_accel_closures, :gtk_widget_list_accel_closures, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_can_activate_accel(widget, signal_id)
  # @param [GtkWidget] widget 
  # @param [Integer] signal_id 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_can_activate_accel, :gtk_widget_can_activate_accel, [GtkWidget, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_mnemonic_activate(widget, group_cycling)
  # @param [GtkWidget] widget 
  # @param [Integer] group_cycling 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_mnemonic_activate, :gtk_widget_mnemonic_activate, [GtkWidget, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_event(widget, event)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_event, :gtk_widget_event, [GtkWidget, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_send_expose(widget, event)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_send_expose, :gtk_widget_send_expose, [GtkWidget, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_send_focus_change(widget, event)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_send_focus_change, :gtk_widget_send_focus_change, [GtkWidget, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_activate(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_activate, :gtk_widget_activate, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_reparent(widget, new_parent)
  # @param [GtkWidget] widget 
  # @param [GtkWidget] new_parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_reparent, :gtk_widget_reparent, [GtkWidget, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_intersect(widget, area, intersection)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] area 
  # @param [FFI::Pointer(*GdkRectangle)] intersection 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_intersect, :gtk_widget_intersect, [GtkWidget, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_region_intersect(widget, region)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [FFI::Pointer(*CairoRegionT)] 
  # @scope class
  attach_function :gtk_widget_region_intersect, :gtk_widget_region_intersect, [GtkWidget, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_freeze_child_notify(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_freeze_child_notify, :gtk_widget_freeze_child_notify, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_child_notify(widget, child_property)
  # @param [GtkWidget] widget 
  # @param [String] child_property 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_child_notify, :gtk_widget_child_notify, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_thaw_child_notify(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_thaw_child_notify, :gtk_widget_thaw_child_notify, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_can_focus(widget, can_focus)
  # @param [GtkWidget] widget 
  # @param [Integer] can_focus 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_can_focus, :gtk_widget_set_can_focus, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_can_focus(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_can_focus, :gtk_widget_get_can_focus, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_has_focus(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_has_focus, :gtk_widget_has_focus, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_is_focus(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_is_focus, :gtk_widget_is_focus, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_has_visible_focus(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_has_visible_focus, :gtk_widget_has_visible_focus, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_grab_focus(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_grab_focus, :gtk_widget_grab_focus, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_can_default(widget, can_default)
  # @param [GtkWidget] widget 
  # @param [Integer] can_default 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_can_default, :gtk_widget_set_can_default, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_can_default(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_can_default, :gtk_widget_get_can_default, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_has_default(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_has_default, :gtk_widget_has_default, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_grab_default(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_grab_default, :gtk_widget_grab_default, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_receives_default(widget, receives_default)
  # @param [GtkWidget] widget 
  # @param [Integer] receives_default 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_receives_default, :gtk_widget_set_receives_default, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_receives_default(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_receives_default, :gtk_widget_get_receives_default, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_has_grab(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_has_grab, :gtk_widget_has_grab, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_device_is_shadowed(widget, device)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_device_is_shadowed, :gtk_widget_device_is_shadowed, [GtkWidget, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_name(widget, name)
  # @param [GtkWidget] widget 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_name, :gtk_widget_set_name, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_name(widget)
  # @param [GtkWidget] widget 
  # @return [String] 
  # @scope class
  attach_function :gtk_widget_get_name, :gtk_widget_get_name, [GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_widget_set_state(widget, state)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_state, :gtk_widget_set_state, [GtkWidget, :gtk_state_type], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_state(widget)
  # @param [GtkWidget] widget 
  # @return [Symbol from _enum_gtk_state_type_] 
  # @scope class
  attach_function :gtk_widget_get_state, :gtk_widget_get_state, [GtkWidget], :gtk_state_type
  
  # (Not documented)
  # 
  # @method gtk_widget_set_state_flags(widget, flags, clear)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] flags 
  # @param [Integer] clear 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_state_flags, :gtk_widget_set_state_flags, [GtkWidget, :gtk_state_flags, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_unset_state_flags(widget, flags)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_unset_state_flags, :gtk_widget_unset_state_flags, [GtkWidget, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_state_flags(widget)
  # @param [GtkWidget] widget 
  # @return [Symbol from _enum_gtk_state_flags_] 
  # @scope class
  attach_function :gtk_widget_get_state_flags, :gtk_widget_get_state_flags, [GtkWidget], :gtk_state_flags
  
  # (Not documented)
  # 
  # @method gtk_widget_set_sensitive(widget, sensitive)
  # @param [GtkWidget] widget 
  # @param [Integer] sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_sensitive, :gtk_widget_set_sensitive, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_sensitive(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_sensitive, :gtk_widget_get_sensitive, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_is_sensitive(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_is_sensitive, :gtk_widget_is_sensitive, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_visible(widget, visible)
  # @param [GtkWidget] widget 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_visible, :gtk_widget_set_visible, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_visible(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_visible, :gtk_widget_get_visible, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_has_window(widget, has_window)
  # @param [GtkWidget] widget 
  # @param [Integer] has_window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_has_window, :gtk_widget_set_has_window, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_has_window(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_has_window, :gtk_widget_get_has_window, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_is_toplevel(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_is_toplevel, :gtk_widget_is_toplevel, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_is_drawable(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_is_drawable, :gtk_widget_is_drawable, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_realized(widget, realized)
  # @param [GtkWidget] widget 
  # @param [Integer] realized 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_realized, :gtk_widget_set_realized, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_realized(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_realized, :gtk_widget_get_realized, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_mapped(widget, mapped)
  # @param [GtkWidget] widget 
  # @param [Integer] mapped 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_mapped, :gtk_widget_set_mapped, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_mapped(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_mapped, :gtk_widget_get_mapped, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_app_paintable(widget, app_paintable)
  # @param [GtkWidget] widget 
  # @param [Integer] app_paintable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_app_paintable, :gtk_widget_set_app_paintable, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_app_paintable(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_app_paintable, :gtk_widget_get_app_paintable, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_double_buffered(widget, double_buffered)
  # @param [GtkWidget] widget 
  # @param [Integer] double_buffered 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_double_buffered, :gtk_widget_set_double_buffered, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_double_buffered(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_double_buffered, :gtk_widget_get_double_buffered, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_redraw_on_allocate(widget, redraw_on_allocate)
  # @param [GtkWidget] widget 
  # @param [Integer] redraw_on_allocate 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_redraw_on_allocate, :gtk_widget_set_redraw_on_allocate, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_parent(widget, parent)
  # @param [GtkWidget] widget 
  # @param [GtkWidget] parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_parent, :gtk_widget_set_parent, [GtkWidget, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_parent(widget)
  # @param [GtkWidget] widget 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_widget_get_parent, :gtk_widget_get_parent, [GtkWidget], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_widget_set_parent_window(widget, parent_window)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkWindow)] parent_window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_parent_window, :gtk_widget_set_parent_window, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_parent_window(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_widget_get_parent_window, :gtk_widget_get_parent_window, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_set_child_visible(widget, is_visible)
  # @param [GtkWidget] widget 
  # @param [Integer] is_visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_child_visible, :gtk_widget_set_child_visible, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_child_visible(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_child_visible, :gtk_widget_get_child_visible, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_window(widget, window)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_window, :gtk_widget_set_window, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_window(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_widget_get_window, :gtk_widget_get_window, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_allocated_width(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_allocated_width, :gtk_widget_get_allocated_width, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_allocated_height(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_allocated_height, :gtk_widget_get_allocated_height, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_allocation(widget, allocation)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GtkAllocation)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_allocation, :gtk_widget_get_allocation, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_allocation(widget, allocation)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GtkAllocation)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_allocation, :gtk_widget_set_allocation, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_requisition(widget, requisition)
  # @param [GtkWidget] widget 
  # @param [GtkRequisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_requisition, :gtk_widget_get_requisition, [GtkWidget, GtkRequisition], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_child_focus(widget, direction)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_direction_type_] direction 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_child_focus, :gtk_widget_child_focus, [GtkWidget, :gtk_direction_type], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_keynav_failed(widget, direction)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_direction_type_] direction 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_keynav_failed, :gtk_widget_keynav_failed, [GtkWidget, :gtk_direction_type], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_error_bell(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_error_bell, :gtk_widget_error_bell, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_size_request(widget, width, height)
  # @param [GtkWidget] widget 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_size_request, :gtk_widget_set_size_request, [GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_size_request(widget, width, height)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_size_request, :gtk_widget_get_size_request, [GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_events(widget, events)
  # @param [GtkWidget] widget 
  # @param [Integer] events 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_events, :gtk_widget_set_events, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_add_events(widget, events)
  # @param [GtkWidget] widget 
  # @param [Integer] events 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_add_events, :gtk_widget_add_events, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_device_events(widget, device, events)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [unknown] events 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_device_events, :gtk_widget_set_device_events, [GtkWidget, :pointer, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_add_device_events(widget, device, events)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [unknown] events 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_add_device_events, :gtk_widget_add_device_events, [GtkWidget, :pointer, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_device_enabled(widget, device, enabled)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [Integer] enabled 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_device_enabled, :gtk_widget_set_device_enabled, [GtkWidget, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_device_enabled(widget, device)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_device_enabled, :gtk_widget_get_device_enabled, [GtkWidget, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_toplevel(widget)
  # @param [GtkWidget] widget 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_widget_get_toplevel, :gtk_widget_get_toplevel, [GtkWidget], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_widget_get_ancestor(widget, widget_type)
  # @param [GtkWidget] widget 
  # @param [Integer] widget_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_widget_get_ancestor, :gtk_widget_get_ancestor, [GtkWidget, :uint], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_widget_get_visual(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GdkVisual)] 
  # @scope class
  attach_function :gtk_widget_get_visual, :gtk_widget_get_visual, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_set_visual(widget, visual)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkVisual)] visual 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_visual, :gtk_widget_set_visual, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_screen(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_widget_get_screen, :gtk_widget_get_screen, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_has_screen(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_has_screen, :gtk_widget_has_screen, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_display(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GdkDisplay)] 
  # @scope class
  attach_function :gtk_widget_get_display, :gtk_widget_get_display, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_root_window(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_widget_get_root_window, :gtk_widget_get_root_window, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_settings(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GtkSettings)] 
  # @scope class
  attach_function :gtk_widget_get_settings, :gtk_widget_get_settings, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_clipboard(widget, selection)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @return [GtkClipboard] 
  # @scope class
  attach_function :gtk_widget_get_clipboard, :gtk_widget_get_clipboard, [GtkWidget, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # @method gtk_widget_get_hexpand(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_hexpand, :gtk_widget_get_hexpand, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_hexpand(widget, expand)
  # @param [GtkWidget] widget 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_hexpand, :gtk_widget_set_hexpand, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_hexpand_set(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_hexpand_set, :gtk_widget_get_hexpand_set, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_hexpand_set(widget, set)
  # @param [GtkWidget] widget 
  # @param [Integer] set 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_hexpand_set, :gtk_widget_set_hexpand_set, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_vexpand(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_vexpand, :gtk_widget_get_vexpand, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_vexpand(widget, expand)
  # @param [GtkWidget] widget 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_vexpand, :gtk_widget_set_vexpand, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_vexpand_set(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_vexpand_set, :gtk_widget_get_vexpand_set, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_vexpand_set(widget, set)
  # @param [GtkWidget] widget 
  # @param [Integer] set 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_vexpand_set, :gtk_widget_set_vexpand_set, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_queue_compute_expand(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_queue_compute_expand, :gtk_widget_queue_compute_expand, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_compute_expand(widget, orientation)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_compute_expand, :gtk_widget_compute_expand, [GtkWidget, :gtk_orientation], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_support_multidevice(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_support_multidevice, :gtk_widget_get_support_multidevice, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_support_multidevice(widget, support_multidevice)
  # @param [GtkWidget] widget 
  # @param [Integer] support_multidevice 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_support_multidevice, :gtk_widget_set_support_multidevice, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_class_set_accessible_type(widget_class, type)
  # @param [GtkWidgetClass] widget_class 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_class_set_accessible_type, :gtk_widget_class_set_accessible_type, [GtkWidgetClass, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_class_set_accessible_role(widget_class, role)
  # @param [GtkWidgetClass] widget_class 
  # @param [unknown] role 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_class_set_accessible_role, :gtk_widget_class_set_accessible_role, [GtkWidgetClass, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_accessible(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*AtkObject)] 
  # @scope class
  attach_function :gtk_widget_get_accessible, :gtk_widget_get_accessible, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_halign(widget)
  # @param [GtkWidget] widget 
  # @return [Symbol from _enum_gtk_align_] 
  # @scope class
  attach_function :gtk_widget_get_halign, :gtk_widget_get_halign, [GtkWidget], :gtk_align
  
  # (Not documented)
  # 
  # @method gtk_widget_set_halign(widget, align)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_align_] align 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_halign, :gtk_widget_set_halign, [GtkWidget, :gtk_align], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_valign(widget)
  # @param [GtkWidget] widget 
  # @return [Symbol from _enum_gtk_align_] 
  # @scope class
  attach_function :gtk_widget_get_valign, :gtk_widget_get_valign, [GtkWidget], :gtk_align
  
  # (Not documented)
  # 
  # @method gtk_widget_set_valign(widget, align)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_align_] align 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_valign, :gtk_widget_set_valign, [GtkWidget, :gtk_align], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_margin_left(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_margin_left, :gtk_widget_get_margin_left, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_margin_left(widget, margin)
  # @param [GtkWidget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_margin_left, :gtk_widget_set_margin_left, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_margin_right(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_margin_right, :gtk_widget_get_margin_right, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_margin_right(widget, margin)
  # @param [GtkWidget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_margin_right, :gtk_widget_set_margin_right, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_margin_top(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_margin_top, :gtk_widget_get_margin_top, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_margin_top(widget, margin)
  # @param [GtkWidget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_margin_top, :gtk_widget_set_margin_top, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_margin_bottom(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_margin_bottom, :gtk_widget_get_margin_bottom, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_set_margin_bottom(widget, margin)
  # @param [GtkWidget] widget 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_margin_bottom, :gtk_widget_set_margin_bottom, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_events(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_events, :gtk_widget_get_events, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_device_events(widget, device)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_widget_get_device_events, :gtk_widget_get_device_events, [GtkWidget, :pointer], :char
  
  # (Not documented)
  # 
  # @method gtk_widget_get_pointer(widget, x, y)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_get_pointer, :gtk_widget_get_pointer, [GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_is_ancestor(widget, ancestor)
  # @param [GtkWidget] widget 
  # @param [GtkWidget] ancestor 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_is_ancestor, :gtk_widget_is_ancestor, [GtkWidget, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_translate_coordinates(src_widget, dest_widget, src_x, src_y, dest_x, dest_y)
  # @param [GtkWidget] src_widget 
  # @param [GtkWidget] dest_widget 
  # @param [Integer] src_x 
  # @param [Integer] src_y 
  # @param [FFI::Pointer(*Gint)] dest_x 
  # @param [FFI::Pointer(*Gint)] dest_y 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_translate_coordinates, :gtk_widget_translate_coordinates, [GtkWidget, GtkWidget, :int, :int, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_hide_on_delete(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_hide_on_delete, :gtk_widget_hide_on_delete, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_override_color(widget, state, color)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_override_color, :gtk_widget_override_color, [GtkWidget, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_override_background_color(widget, state, color)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_override_background_color, :gtk_widget_override_background_color, [GtkWidget, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_override_font(widget, font_desc)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*PangoFontDescription)] font_desc 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_override_font, :gtk_widget_override_font, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_override_symbolic_color(widget, name, color)
  # @param [GtkWidget] widget 
  # @param [String] name 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_override_symbolic_color, :gtk_widget_override_symbolic_color, [GtkWidget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_override_cursor(widget, cursor, secondary_cursor)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRGBA)] cursor 
  # @param [FFI::Pointer(*GdkRGBA)] secondary_cursor 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_override_cursor, :gtk_widget_override_cursor, [GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_reset_style(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_reset_style, :gtk_widget_reset_style, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_create_pango_context(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*PangoContext)] 
  # @scope class
  attach_function :gtk_widget_create_pango_context, :gtk_widget_create_pango_context, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_pango_context(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*PangoContext)] 
  # @scope class
  attach_function :gtk_widget_get_pango_context, :gtk_widget_get_pango_context, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_create_pango_layout(widget, text)
  # @param [GtkWidget] widget 
  # @param [String] text 
  # @return [FFI::Pointer(*PangoLayout)] 
  # @scope class
  attach_function :gtk_widget_create_pango_layout, :gtk_widget_create_pango_layout, [GtkWidget, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_render_icon_pixbuf(widget, stock_id, size)
  # @param [GtkWidget] widget 
  # @param [String] stock_id 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_widget_render_icon_pixbuf, :gtk_widget_render_icon_pixbuf, [GtkWidget, :string, :gtk_icon_size], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_set_composite_name(widget, name)
  # @param [GtkWidget] widget 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_composite_name, :gtk_widget_set_composite_name, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_composite_name(widget)
  # @param [GtkWidget] widget 
  # @return [String] 
  # @scope class
  attach_function :gtk_widget_get_composite_name, :gtk_widget_get_composite_name, [GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_widget_push_composite_child()
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_push_composite_child, :gtk_widget_push_composite_child, [], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_pop_composite_child()
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_pop_composite_child, :gtk_widget_pop_composite_child, [], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_class_install_style_property(klass, pspec)
  # @param [GtkWidgetClass] klass 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_class_install_style_property, :gtk_widget_class_install_style_property, [GtkWidgetClass, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_class_install_style_property_parser(klass, pspec, parser)
  # @param [GtkWidgetClass] klass 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [Proc(_callback_gtk_rc_property_parser_)] parser 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_class_install_style_property_parser, :gtk_widget_class_install_style_property_parser, [GtkWidgetClass, :pointer, :gtk_rc_property_parser], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_class_find_style_property(klass, property_name)
  # @param [GtkWidgetClass] klass 
  # @param [String] property_name 
  # @return [FFI::Pointer(*GParamSpec)] 
  # @scope class
  attach_function :gtk_widget_class_find_style_property, :gtk_widget_class_find_style_property, [GtkWidgetClass, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_class_list_style_properties(klass, n_properties)
  # @param [GtkWidgetClass] klass 
  # @param [FFI::Pointer(*Guint)] n_properties 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :gtk_widget_class_list_style_properties, :gtk_widget_class_list_style_properties, [GtkWidgetClass, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_style_get_property(widget, property_name, value)
  # @param [GtkWidget] widget 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_style_get_property, :gtk_widget_style_get_property, [GtkWidget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_style_get_valist(widget, first_property_name, var_args)
  # @param [GtkWidget] widget 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_style_get_valist, :gtk_widget_style_get_valist, [GtkWidget, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_style_get(widget, first_property_name)
  # @param [GtkWidget] widget 
  # @param [String] first_property_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_style_get, :gtk_widget_style_get, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_direction(widget, dir)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_text_direction_] dir 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_direction, :gtk_widget_set_direction, [GtkWidget, :gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_direction(widget)
  # @param [GtkWidget] widget 
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :gtk_widget_get_direction, :gtk_widget_get_direction, [GtkWidget], :gtk_text_direction
  
  # (Not documented)
  # 
  # @method gtk_widget_set_default_direction(dir)
  # @param [Symbol from _enum_gtk_text_direction_] dir 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_default_direction, :gtk_widget_set_default_direction, [:gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_default_direction()
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :gtk_widget_get_default_direction, :gtk_widget_get_default_direction, [], :gtk_text_direction
  
  # (Not documented)
  # 
  # @method gtk_widget_is_composited(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_is_composited, :gtk_widget_is_composited, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_shape_combine_region(widget, region)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_shape_combine_region, :gtk_widget_shape_combine_region, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_input_shape_combine_region(widget, region)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoRegionT)] region 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_input_shape_combine_region, :gtk_widget_input_shape_combine_region, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_list_mnemonic_labels(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_widget_list_mnemonic_labels, :gtk_widget_list_mnemonic_labels, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_add_mnemonic_label(widget, label)
  # @param [GtkWidget] widget 
  # @param [GtkWidget] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_add_mnemonic_label, :gtk_widget_add_mnemonic_label, [GtkWidget, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_remove_mnemonic_label(widget, label)
  # @param [GtkWidget] widget 
  # @param [GtkWidget] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_remove_mnemonic_label, :gtk_widget_remove_mnemonic_label, [GtkWidget, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_tooltip_window(widget, custom_window)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GtkWindow)] custom_window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_tooltip_window, :gtk_widget_set_tooltip_window, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_tooltip_window(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GtkWindow)] 
  # @scope class
  attach_function :gtk_widget_get_tooltip_window, :gtk_widget_get_tooltip_window, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_trigger_tooltip_query(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_trigger_tooltip_query, :gtk_widget_trigger_tooltip_query, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_set_tooltip_text(widget, text)
  # @param [GtkWidget] widget 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_tooltip_text, :gtk_widget_set_tooltip_text, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_tooltip_text(widget)
  # @param [GtkWidget] widget 
  # @return [String] 
  # @scope class
  attach_function :gtk_widget_get_tooltip_text, :gtk_widget_get_tooltip_text, [GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_widget_set_tooltip_markup(widget, markup)
  # @param [GtkWidget] widget 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_tooltip_markup, :gtk_widget_set_tooltip_markup, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_tooltip_markup(widget)
  # @param [GtkWidget] widget 
  # @return [String] 
  # @scope class
  attach_function :gtk_widget_get_tooltip_markup, :gtk_widget_get_tooltip_markup, [GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_widget_set_has_tooltip(widget, has_tooltip)
  # @param [GtkWidget] widget 
  # @param [Integer] has_tooltip 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_set_has_tooltip, :gtk_widget_set_has_tooltip, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_get_has_tooltip(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_get_has_tooltip, :gtk_widget_get_has_tooltip, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_cairo_should_draw_window(cr, window)
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cairo_should_draw_window, :gtk_cairo_should_draw_window, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_cairo_transform_to_window(cr, widget, window)
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cairo_transform_to_window, :gtk_cairo_transform_to_window, [:pointer, GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_requisition_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_requisition_get_type, :gtk_requisition_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_requisition_new()
  # @return [GtkRequisition] 
  # @scope class
  attach_function :gtk_requisition_new, :gtk_requisition_new, [], GtkRequisition
  
  # (Not documented)
  # 
  # @method gtk_requisition_copy(requisition)
  # @param [GtkRequisition] requisition 
  # @return [GtkRequisition] 
  # @scope class
  attach_function :gtk_requisition_copy, :gtk_requisition_copy, [GtkRequisition], GtkRequisition
  
  # (Not documented)
  # 
  # @method gtk_requisition_free(requisition)
  # @param [GtkRequisition] requisition 
  # @return [nil] 
  # @scope class
  attach_function :gtk_requisition_free, :gtk_requisition_free, [GtkRequisition], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_in_destruction(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_in_destruction, :gtk_widget_in_destruction, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_get_style_context(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GtkStyleContext)] 
  # @scope class
  attach_function :gtk_widget_get_style_context, :gtk_widget_get_style_context, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_get_path(widget)
  # @param [GtkWidget] widget 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_widget_get_path, :gtk_widget_get_path, [GtkWidget], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_widget_get_modifier_mask(widget, intent)
  # @param [GtkWidget] widget 
  # @param [unknown] intent 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_widget_get_modifier_mask, :gtk_widget_get_modifier_mask, [GtkWidget, :char], :char
  
  # (Not documented)
  # 
  # @method gtk_widget_insert_action_group(widget, name, group)
  # @param [GtkWidget] widget 
  # @param [String] name 
  # @param [FFI::Pointer(*GActionGroup)] group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_insert_action_group, :gtk_widget_insert_action_group, [GtkWidget, :string, :pointer], :void
  
  # (Not documented)
  class GtkApplicationPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkApplicationPrivate) < private >
  module GtkApplicationWrappers
    # @param [FFI::Pointer(*GtkWindow)] window 
    # @return [nil] 
    def add_window(window)
      Gtk.gtk_application_add_window(self, window)
    end
    
    # @param [FFI::Pointer(*GtkWindow)] window 
    # @return [nil] 
    def remove_window(window)
      Gtk.gtk_application_remove_window(self, window)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_windows()
      Gtk.gtk_application_get_windows(self)
    end
    
    # @return [FFI::Pointer(*GMenuModel)] 
    def get_app_menu()
      Gtk.gtk_application_get_app_menu(self)
    end
    
    # @param [FFI::Pointer(*GMenuModel)] app_menu 
    # @return [nil] 
    def set_app_menu(app_menu)
      Gtk.gtk_application_set_app_menu(self, app_menu)
    end
    
    # @return [FFI::Pointer(*GMenuModel)] 
    def get_menubar()
      Gtk.gtk_application_get_menubar(self)
    end
    
    # @param [FFI::Pointer(*GMenuModel)] menubar 
    # @return [nil] 
    def set_menubar(menubar)
      Gtk.gtk_application_set_menubar(self, menubar)
    end
    
    # @param [String] accelerator 
    # @param [String] action_name 
    # @param [FFI::Pointer(*GVariant)] parameter 
    # @return [nil] 
    def add_accelerator(accelerator, action_name, parameter)
      Gtk.gtk_application_add_accelerator(self, accelerator, action_name, parameter)
    end
    
    # @param [String] action_name 
    # @param [FFI::Pointer(*GVariant)] parameter 
    # @return [nil] 
    def remove_accelerator(action_name, parameter)
      Gtk.gtk_application_remove_accelerator(self, action_name, parameter)
    end
    
    # @param [FFI::Pointer(*GtkWindow)] window 
    # @param [Symbol from _enum_gtk_application_inhibit_flags_] flags 
    # @param [String] reason 
    # @return [Integer] 
    def inhibit(window, flags, reason)
      Gtk.gtk_application_inhibit(self, window, flags, reason)
    end
    
    # @param [Integer] cookie 
    # @return [nil] 
    def uninhibit(cookie)
      Gtk.gtk_application_uninhibit(self, cookie)
    end
    
    # @param [Symbol from _enum_gtk_application_inhibit_flags_] flags 
    # @return [Integer] 
    def is_inhibited(flags)
      Gtk.gtk_application_is_inhibited(self, flags)
    end
    
    # @param [Integer] id 
    # @return [GtkWindow] 
    def get_window_by_id(id)
      GtkWindow.new Gtk.gtk_application_get_window_by_id(self, id)
    end
    
    # @return [GtkWindow] 
    def get_active_window()
      GtkWindow.new Gtk.gtk_application_get_active_window(self)
    end
    
    # @return [GtkWidget] 
    def window_new()
      GtkWidget.new Gtk.gtk_application_window_new(self)
    end
  end
  
  class GtkApplication < FFI::Struct
    include GtkApplicationWrappers
    layout :parent, :char,
           :priv, GtkApplicationPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :window_added ::
  #   (FFI::Pointer(*)) 
  # :window_removed ::
  #   (FFI::Pointer(*)) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) < private >
  class GtkApplicationClass < FFI::Struct
    layout :parent_class, :char,
           :window_added, :pointer,
           :window_removed, :pointer,
           :padding, [:pointer, 12]
  end
  
  # (Not documented)
  # 
  # @method gtk_application_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_get_type, :gtk_application_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_application_new(application_id, flags)
  # @param [String] application_id 
  # @param [unknown] flags 
  # @return [GtkApplication] 
  # @scope class
  attach_function :gtk_application_new, :gtk_application_new, [:string, :char], GtkApplication
  
  # (Not documented)
  # 
  # @method gtk_application_add_window(application, window)
  # @param [GtkApplication] application 
  # @param [FFI::Pointer(*GtkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_add_window, :gtk_application_add_window, [GtkApplication, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_application_remove_window(application, window)
  # @param [GtkApplication] application 
  # @param [FFI::Pointer(*GtkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_remove_window, :gtk_application_remove_window, [GtkApplication, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_application_get_windows(application)
  # @param [GtkApplication] application 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_application_get_windows, :gtk_application_get_windows, [GtkApplication], :pointer
  
  # (Not documented)
  # 
  # @method gtk_application_get_app_menu(application)
  # @param [GtkApplication] application 
  # @return [FFI::Pointer(*GMenuModel)] 
  # @scope class
  attach_function :gtk_application_get_app_menu, :gtk_application_get_app_menu, [GtkApplication], :pointer
  
  # (Not documented)
  # 
  # @method gtk_application_set_app_menu(application, app_menu)
  # @param [GtkApplication] application 
  # @param [FFI::Pointer(*GMenuModel)] app_menu 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_set_app_menu, :gtk_application_set_app_menu, [GtkApplication, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_application_get_menubar(application)
  # @param [GtkApplication] application 
  # @return [FFI::Pointer(*GMenuModel)] 
  # @scope class
  attach_function :gtk_application_get_menubar, :gtk_application_get_menubar, [GtkApplication], :pointer
  
  # (Not documented)
  # 
  # @method gtk_application_set_menubar(application, menubar)
  # @param [GtkApplication] application 
  # @param [FFI::Pointer(*GMenuModel)] menubar 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_set_menubar, :gtk_application_set_menubar, [GtkApplication, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_application_add_accelerator(application, accelerator, action_name, parameter)
  # @param [GtkApplication] application 
  # @param [String] accelerator 
  # @param [String] action_name 
  # @param [FFI::Pointer(*GVariant)] parameter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_add_accelerator, :gtk_application_add_accelerator, [GtkApplication, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_application_remove_accelerator(application, action_name, parameter)
  # @param [GtkApplication] application 
  # @param [String] action_name 
  # @param [FFI::Pointer(*GVariant)] parameter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_remove_accelerator, :gtk_application_remove_accelerator, [GtkApplication, :string, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_application_inhibit_flags).</em>
  # 
  # === Options:
  # :logout ::
  #   
  # :switch ::
  #   
  # :suspend ::
  #   
  # :idle ::
  #   
  # 
  # @method _enum_gtk_application_inhibit_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_application_inhibit_flags, [
    :logout, 1,
    :switch, 2,
    :suspend, 4,
    :idle, 8
  ]
  
  # (Not documented)
  # 
  # @method gtk_application_inhibit(application, window, flags, reason)
  # @param [GtkApplication] application 
  # @param [FFI::Pointer(*GtkWindow)] window 
  # @param [Symbol from _enum_gtk_application_inhibit_flags_] flags 
  # @param [String] reason 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_inhibit, :gtk_application_inhibit, [GtkApplication, :pointer, :gtk_application_inhibit_flags, :string], :uint
  
  # (Not documented)
  # 
  # @method gtk_application_uninhibit(application, cookie)
  # @param [GtkApplication] application 
  # @param [Integer] cookie 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_uninhibit, :gtk_application_uninhibit, [GtkApplication, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_application_is_inhibited(application, flags)
  # @param [GtkApplication] application 
  # @param [Symbol from _enum_gtk_application_inhibit_flags_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_is_inhibited, :gtk_application_is_inhibited, [GtkApplication, :gtk_application_inhibit_flags], :int
  
  # (Not documented)
  # 
  # @method gtk_application_get_window_by_id(application, id)
  # @param [GtkApplication] application 
  # @param [Integer] id 
  # @return [FFI::Pointer(*GtkWindow)] 
  # @scope class
  attach_function :gtk_application_get_window_by_id, :gtk_application_get_window_by_id, [GtkApplication, :uint], :pointer
  
  # (Not documented)
  # 
  # @method gtk_application_get_active_window(application)
  # @param [GtkApplication] application 
  # @return [FFI::Pointer(*GtkWindow)] 
  # @scope class
  attach_function :gtk_application_get_active_window, :gtk_application_get_active_window, [GtkApplication], :pointer
  
  # (Not documented)
  class GtkContainerPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkContainerPrivate) < private >
  module GtkContainerWrappers
    # @param [Integer] border_width 
    # @return [nil] 
    def set_border_width(border_width)
      Gtk.gtk_container_set_border_width(self, border_width)
    end
    
    # @return [Integer] 
    def get_border_width()
      Gtk.gtk_container_get_border_width(self)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def add(widget)
      Gtk.gtk_container_add(self, widget)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def remove(widget)
      Gtk.gtk_container_remove(self, widget)
    end
    
    # @param [Symbol from _enum_gtk_resize_mode_] resize_mode 
    # @return [nil] 
    def set_resize_mode(resize_mode)
      Gtk.gtk_container_set_resize_mode(self, resize_mode)
    end
    
    # @return [Symbol from _enum_gtk_resize_mode_] 
    def get_resize_mode()
      Gtk.gtk_container_get_resize_mode(self)
    end
    
    # @return [nil] 
    def check_resize()
      Gtk.gtk_container_check_resize(self)
    end
    
    # @param [Proc(_callback_gtk_callback_)] callback 
    # @param [FFI::Pointer(Gpointer)] callback_data 
    # @return [nil] 
    def foreach(callback, callback_data)
      Gtk.gtk_container_foreach(self, callback, callback_data)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_children()
      Gtk.gtk_container_get_children(self)
    end
    
    # @param [GtkWidget] child 
    # @param [FFI::Pointer(*CairoT)] cr 
    # @return [nil] 
    def propagate_draw(child, cr)
      Gtk.gtk_container_propagate_draw(self, child, cr)
    end
    
    # @param [FFI::Pointer(*GList)] focusable_widgets 
    # @return [nil] 
    def set_focus_chain(focusable_widgets)
      Gtk.gtk_container_set_focus_chain(self, focusable_widgets)
    end
    
    # @param [FFI::Pointer(**GList)] focusable_widgets 
    # @return [Integer] 
    def get_focus_chain(focusable_widgets)
      Gtk.gtk_container_get_focus_chain(self, focusable_widgets)
    end
    
    # @return [nil] 
    def unset_focus_chain()
      Gtk.gtk_container_unset_focus_chain(self)
    end
    
    # @param [Integer] needs_redraws 
    # @return [nil] 
    def set_reallocate_redraws(needs_redraws)
      Gtk.gtk_container_set_reallocate_redraws(self, needs_redraws)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def set_focus_child(child)
      Gtk.gtk_container_set_focus_child(self, child)
    end
    
    # @return [GtkWidget] 
    def get_focus_child()
      GtkWidget.new Gtk.gtk_container_get_focus_child(self)
    end
    
    # @param [FFI::Pointer(*GtkAdjustment)] adjustment 
    # @return [nil] 
    def set_focus_vadjustment(adjustment)
      Gtk.gtk_container_set_focus_vadjustment(self, adjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_focus_vadjustment()
      GtkAdjustment.new Gtk.gtk_container_get_focus_vadjustment(self)
    end
    
    # @param [FFI::Pointer(*GtkAdjustment)] adjustment 
    # @return [nil] 
    def set_focus_hadjustment(adjustment)
      Gtk.gtk_container_set_focus_hadjustment(self, adjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_focus_hadjustment()
      GtkAdjustment.new Gtk.gtk_container_get_focus_hadjustment(self)
    end
    
    # @return [nil] 
    def resize_children()
      Gtk.gtk_container_resize_children(self)
    end
    
    # @return [Integer] 
    def child_type()
      Gtk.gtk_container_child_type(self)
    end
    
    # @param [GtkWidget] widget 
    # @param [String] first_prop_name 
    # @return [nil] 
    def add_with_properties(widget, first_prop_name)
      Gtk.gtk_container_add_with_properties(self, widget, first_prop_name)
    end
    
    # @param [GtkWidget] child 
    # @param [String] first_prop_name 
    # @return [nil] 
    def child_set(child, first_prop_name)
      Gtk.gtk_container_child_set(self, child, first_prop_name)
    end
    
    # @param [GtkWidget] child 
    # @param [String] first_prop_name 
    # @return [nil] 
    def child_get(child, first_prop_name)
      Gtk.gtk_container_child_get(self, child, first_prop_name)
    end
    
    # @param [GtkWidget] child 
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def child_set_valist(child, first_property_name, var_args)
      Gtk.gtk_container_child_set_valist(self, child, first_property_name, var_args)
    end
    
    # @param [GtkWidget] child 
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def child_get_valist(child, first_property_name, var_args)
      Gtk.gtk_container_child_get_valist(self, child, first_property_name, var_args)
    end
    
    # @param [GtkWidget] child 
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def child_set_property(child, property_name, value)
      Gtk.gtk_container_child_set_property(self, child, property_name, value)
    end
    
    # @param [GtkWidget] child 
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def child_get_property(child, property_name, value)
      Gtk.gtk_container_child_get_property(self, child, property_name, value)
    end
    
    # @param [GtkWidget] child 
    # @param [String] child_property 
    # @return [nil] 
    def child_notify(child, child_property)
      Gtk.gtk_container_child_notify(self, child, child_property)
    end
    
    # @param [Proc(_callback_gtk_callback_)] callback 
    # @param [FFI::Pointer(Gpointer)] callback_data 
    # @return [nil] 
    def forall(callback, callback_data)
      Gtk.gtk_container_forall(self, callback, callback_data)
    end
    
    # @param [GtkWidget] child 
    # @return [GtkWidgetPath] 
    def get_path_for_child(child)
      GtkWidgetPath.new Gtk.gtk_container_get_path_for_child(self, child)
    end
  end
  
  class GtkContainer < FFI::Struct
    include GtkContainerWrappers
    layout :widget, GtkWidget.by_value,
           :priv, GtkContainerPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :add ::
  #   (FFI::Pointer(*)) 
  # :remove ::
  #   (FFI::Pointer(*)) 
  # :check_resize ::
  #   (FFI::Pointer(*)) 
  # :forall ::
  #   (FFI::Pointer(*)) 
  # :set_focus_child ::
  #   (FFI::Pointer(*)) 
  # :child_type ::
  #   (FFI::Pointer(*)) 
  # :composite_name ::
  #   (FFI::Pointer(*)) 
  # :set_child_property ::
  #   (FFI::Pointer(*)) 
  # :get_child_property ::
  #   (FFI::Pointer(*)) 
  # :get_path_for_child ::
  #   (FFI::Pointer(*)) 
  # :handle_border_width ::
  #   (Integer) < private >
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  module GtkContainerClassWrappers
    # @param [Integer] property_id 
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @return [nil] 
    def install_child_property(property_id, pspec)
      Gtk.gtk_container_class_install_child_property(self, property_id, pspec)
    end
    
    # @return [nil] 
    def handle_border_width()
      Gtk.gtk_container_class_handle_border_width(self)
    end
  end
  
  class GtkContainerClass < FFI::Struct
    include GtkContainerClassWrappers
    layout :parent_class, GtkWidgetClass.by_value,
           :add, :pointer,
           :remove, :pointer,
           :check_resize, :pointer,
           :forall, :pointer,
           :set_focus_child, :pointer,
           :child_type, :pointer,
           :composite_name, :pointer,
           :set_child_property, :pointer,
           :get_child_property, :pointer,
           :get_path_for_child, :pointer,
           :handle_border_width, :uint,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_container_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_container_get_type, :gtk_container_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_container_set_border_width(container, border_width)
  # @param [GtkContainer] container 
  # @param [Integer] border_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_border_width, :gtk_container_set_border_width, [GtkContainer, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_border_width(container)
  # @param [GtkContainer] container 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_container_get_border_width, :gtk_container_get_border_width, [GtkContainer], :uint
  
  # (Not documented)
  # 
  # @method gtk_container_add(container, widget)
  # @param [GtkContainer] container 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_add, :gtk_container_add, [GtkContainer, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_container_remove(container, widget)
  # @param [GtkContainer] container 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_remove, :gtk_container_remove, [GtkContainer, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_container_set_resize_mode(container, resize_mode)
  # @param [GtkContainer] container 
  # @param [Symbol from _enum_gtk_resize_mode_] resize_mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_resize_mode, :gtk_container_set_resize_mode, [GtkContainer, :gtk_resize_mode], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_resize_mode(container)
  # @param [GtkContainer] container 
  # @return [Symbol from _enum_gtk_resize_mode_] 
  # @scope class
  attach_function :gtk_container_get_resize_mode, :gtk_container_get_resize_mode, [GtkContainer], :gtk_resize_mode
  
  # (Not documented)
  # 
  # @method gtk_container_check_resize(container)
  # @param [GtkContainer] container 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_check_resize, :gtk_container_check_resize, [GtkContainer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_foreach(container, callback, callback_data)
  # @param [GtkContainer] container 
  # @param [Proc(_callback_gtk_callback_)] callback 
  # @param [FFI::Pointer(Gpointer)] callback_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_foreach, :gtk_container_foreach, [GtkContainer, :gtk_callback, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_children(container)
  # @param [GtkContainer] container 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_container_get_children, :gtk_container_get_children, [GtkContainer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_container_propagate_draw(container, child, cr)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_propagate_draw, :gtk_container_propagate_draw, [GtkContainer, GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_set_focus_chain(container, focusable_widgets)
  # @param [GtkContainer] container 
  # @param [FFI::Pointer(*GList)] focusable_widgets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_focus_chain, :gtk_container_set_focus_chain, [GtkContainer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_focus_chain(container, focusable_widgets)
  # @param [GtkContainer] container 
  # @param [FFI::Pointer(**GList)] focusable_widgets 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_container_get_focus_chain, :gtk_container_get_focus_chain, [GtkContainer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_container_unset_focus_chain(container)
  # @param [GtkContainer] container 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_unset_focus_chain, :gtk_container_unset_focus_chain, [GtkContainer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_set_reallocate_redraws(container, needs_redraws)
  # @param [GtkContainer] container 
  # @param [Integer] needs_redraws 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_reallocate_redraws, :gtk_container_set_reallocate_redraws, [GtkContainer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_container_set_focus_child(container, child)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_focus_child, :gtk_container_set_focus_child, [GtkContainer, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_focus_child(container)
  # @param [GtkContainer] container 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_container_get_focus_child, :gtk_container_get_focus_child, [GtkContainer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_container_set_focus_vadjustment(container, adjustment)
  # @param [GtkContainer] container 
  # @param [FFI::Pointer(*GtkAdjustment)] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_focus_vadjustment, :gtk_container_set_focus_vadjustment, [GtkContainer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_focus_vadjustment(container)
  # @param [GtkContainer] container 
  # @return [FFI::Pointer(*GtkAdjustment)] 
  # @scope class
  attach_function :gtk_container_get_focus_vadjustment, :gtk_container_get_focus_vadjustment, [GtkContainer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_container_set_focus_hadjustment(container, adjustment)
  # @param [GtkContainer] container 
  # @param [FFI::Pointer(*GtkAdjustment)] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_set_focus_hadjustment, :gtk_container_set_focus_hadjustment, [GtkContainer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_focus_hadjustment(container)
  # @param [GtkContainer] container 
  # @return [FFI::Pointer(*GtkAdjustment)] 
  # @scope class
  attach_function :gtk_container_get_focus_hadjustment, :gtk_container_get_focus_hadjustment, [GtkContainer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_container_resize_children(container)
  # @param [GtkContainer] container 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_resize_children, :gtk_container_resize_children, [GtkContainer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_type(container)
  # @param [GtkContainer] container 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_container_child_type, :gtk_container_child_type, [GtkContainer], :uint
  
  # (Not documented)
  # 
  # @method gtk_container_class_install_child_property(cclass, property_id, pspec)
  # @param [GtkContainerClass] cclass 
  # @param [Integer] property_id 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_class_install_child_property, :gtk_container_class_install_child_property, [GtkContainerClass, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_class_find_child_property(cclass, property_name)
  # @param [FFI::Pointer(*GObjectClass)] cclass 
  # @param [String] property_name 
  # @return [FFI::Pointer(*GParamSpec)] 
  # @scope class
  attach_function :gtk_container_class_find_child_property, :gtk_container_class_find_child_property, [:pointer, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_container_class_list_child_properties(cclass, n_properties)
  # @param [FFI::Pointer(*GObjectClass)] cclass 
  # @param [FFI::Pointer(*Guint)] n_properties 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :gtk_container_class_list_child_properties, :gtk_container_class_list_child_properties, [:pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_container_add_with_properties(container, widget, first_prop_name)
  # @param [GtkContainer] container 
  # @param [GtkWidget] widget 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_add_with_properties, :gtk_container_add_with_properties, [GtkContainer, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_set(container, child, first_prop_name)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_set, :gtk_container_child_set, [GtkContainer, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_get(container, child, first_prop_name)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_get, :gtk_container_child_get, [GtkContainer, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_set_valist(container, child, first_property_name, var_args)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_set_valist, :gtk_container_child_set_valist, [GtkContainer, GtkWidget, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_get_valist(container, child, first_property_name, var_args)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_get_valist, :gtk_container_child_get_valist, [GtkContainer, GtkWidget, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_set_property(container, child, property_name, value)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_set_property, :gtk_container_child_set_property, [GtkContainer, GtkWidget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_get_property(container, child, property_name, value)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_get_property, :gtk_container_child_get_property, [GtkContainer, GtkWidget, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_child_notify(container, child, child_property)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @param [String] child_property 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_child_notify, :gtk_container_child_notify, [GtkContainer, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_container_forall(container, callback, callback_data)
  # @param [GtkContainer] container 
  # @param [Proc(_callback_gtk_callback_)] callback 
  # @param [FFI::Pointer(Gpointer)] callback_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_forall, :gtk_container_forall, [GtkContainer, :gtk_callback, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_container_class_handle_border_width(klass)
  # @param [GtkContainerClass] klass 
  # @return [nil] 
  # @scope class
  attach_function :gtk_container_class_handle_border_width, :gtk_container_class_handle_border_width, [GtkContainerClass], :void
  
  # (Not documented)
  # 
  # @method gtk_container_get_path_for_child(container, child)
  # @param [GtkContainer] container 
  # @param [GtkWidget] child 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_container_get_path_for_child, :gtk_container_get_path_for_child, [GtkContainer, GtkWidget], GtkWidgetPath
  
  # (Not documented)
  class GtkBinPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkBinPrivate) < private >
  module GtkBinWrappers
    # @return [GtkWidget] 
    def get_child()
      GtkWidget.new Gtk.gtk_bin_get_child(self)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def set_child(widget)
      Gtk.gtk_bin_set_child(self, widget)
    end
  end
  
  class GtkBin < FFI::Struct
    include GtkBinWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkBinPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkBinClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_bin_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_bin_get_type, :gtk_bin_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_bin_get_child(bin)
  # @param [GtkBin] bin 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_bin_get_child, :gtk_bin_get_child, [GtkBin], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_bin_set_child(bin, widget)
  # @param [GtkBin] bin 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_bin_set_child, :_gtk_bin_set_child, [GtkBin, GtkWidget], :void
  
  # (Not documented)
  class GtkWindowPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkWindowGeometryInfo < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkWindowGroupPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkWindowPrivate) 
  module GtkWindowWrappers
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_window_set_title(self, title)
    end
    
    # @return [String] 
    def get_title()
      Gtk.gtk_window_get_title(self)
    end
    
    # @param [String] wmclass_name 
    # @param [String] wmclass_class 
    # @return [nil] 
    def set_wmclass(wmclass_name, wmclass_class)
      Gtk.gtk_window_set_wmclass(self, wmclass_name, wmclass_class)
    end
    
    # @param [String] role 
    # @return [nil] 
    def set_role(role)
      Gtk.gtk_window_set_role(self, role)
    end
    
    # @param [String] startup_id 
    # @return [nil] 
    def set_startup_id(startup_id)
      Gtk.gtk_window_set_startup_id(self, startup_id)
    end
    
    # @return [String] 
    def get_role()
      Gtk.gtk_window_get_role(self)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def add_accel_group(accel_group)
      Gtk.gtk_window_add_accel_group(self, accel_group)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def remove_accel_group(accel_group)
      Gtk.gtk_window_remove_accel_group(self, accel_group)
    end
    
    # @param [Symbol from _enum_gtk_window_position_] position 
    # @return [nil] 
    def set_position(position)
      Gtk.gtk_window_set_position(self, position)
    end
    
    # @return [Integer] 
    def activate_focus()
      Gtk.gtk_window_activate_focus(self)
    end
    
    # @param [GtkWidget] focus 
    # @return [nil] 
    def set_focus(focus)
      Gtk.gtk_window_set_focus(self, focus)
    end
    
    # @return [GtkWidget] 
    def get_focus()
      GtkWidget.new Gtk.gtk_window_get_focus(self)
    end
    
    # @param [GtkWidget] default_widget 
    # @return [nil] 
    def set_default(default_widget)
      Gtk.gtk_window_set_default(self, default_widget)
    end
    
    # @return [GtkWidget] 
    def get_default_widget()
      GtkWidget.new Gtk.gtk_window_get_default_widget(self)
    end
    
    # @return [Integer] 
    def activate_default()
      Gtk.gtk_window_activate_default(self)
    end
    
    # @param [FFI::Pointer(*GtkWindow)] parent 
    # @return [nil] 
    def set_transient_for(parent)
      Gtk.gtk_window_set_transient_for(self, parent)
    end
    
    # @return [GtkWindow] 
    def get_transient_for()
      GtkWindow.new Gtk.gtk_window_get_transient_for(self)
    end
    
    # @param [GtkWidget] attach_widget 
    # @return [nil] 
    def set_attached_to(attach_widget)
      Gtk.gtk_window_set_attached_to(self, attach_widget)
    end
    
    # @return [GtkWidget] 
    def get_attached_to()
      GtkWidget.new Gtk.gtk_window_get_attached_to(self)
    end
    
    # @param [Float] opacity 
    # @return [nil] 
    def set_opacity(opacity)
      Gtk.gtk_window_set_opacity(self, opacity)
    end
    
    # @return [Float] 
    def get_opacity()
      Gtk.gtk_window_get_opacity(self)
    end
    
    # @param [unknown] hint 
    # @return [nil] 
    def set_type_hint(hint)
      Gtk.gtk_window_set_type_hint(self, hint)
    end
    
    # @return [unknown] 
    def get_type_hint()
      Gtk.gtk_window_get_type_hint(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_skip_taskbar_hint(setting)
      Gtk.gtk_window_set_skip_taskbar_hint(self, setting)
    end
    
    # @return [Integer] 
    def get_skip_taskbar_hint()
      Gtk.gtk_window_get_skip_taskbar_hint(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_skip_pager_hint(setting)
      Gtk.gtk_window_set_skip_pager_hint(self, setting)
    end
    
    # @return [Integer] 
    def get_skip_pager_hint()
      Gtk.gtk_window_get_skip_pager_hint(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_urgency_hint(setting)
      Gtk.gtk_window_set_urgency_hint(self, setting)
    end
    
    # @return [Integer] 
    def get_urgency_hint()
      Gtk.gtk_window_get_urgency_hint(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_accept_focus(setting)
      Gtk.gtk_window_set_accept_focus(self, setting)
    end
    
    # @return [Integer] 
    def get_accept_focus()
      Gtk.gtk_window_get_accept_focus(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_focus_on_map(setting)
      Gtk.gtk_window_set_focus_on_map(self, setting)
    end
    
    # @return [Integer] 
    def get_focus_on_map()
      Gtk.gtk_window_get_focus_on_map(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_destroy_with_parent(setting)
      Gtk.gtk_window_set_destroy_with_parent(self, setting)
    end
    
    # @return [Integer] 
    def get_destroy_with_parent()
      Gtk.gtk_window_get_destroy_with_parent(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_hide_titlebar_when_maximized(setting)
      Gtk.gtk_window_set_hide_titlebar_when_maximized(self, setting)
    end
    
    # @return [Integer] 
    def get_hide_titlebar_when_maximized()
      Gtk.gtk_window_get_hide_titlebar_when_maximized(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_mnemonics_visible(setting)
      Gtk.gtk_window_set_mnemonics_visible(self, setting)
    end
    
    # @return [Integer] 
    def get_mnemonics_visible()
      Gtk.gtk_window_get_mnemonics_visible(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_focus_visible(setting)
      Gtk.gtk_window_set_focus_visible(self, setting)
    end
    
    # @return [Integer] 
    def get_focus_visible()
      Gtk.gtk_window_get_focus_visible(self)
    end
    
    # @param [Integer] resizable 
    # @return [nil] 
    def set_resizable(resizable)
      Gtk.gtk_window_set_resizable(self, resizable)
    end
    
    # @return [Integer] 
    def get_resizable()
      Gtk.gtk_window_get_resizable(self)
    end
    
    # @param [unknown] gravity 
    # @return [nil] 
    def set_gravity(gravity)
      Gtk.gtk_window_set_gravity(self, gravity)
    end
    
    # @return [unknown] 
    def get_gravity()
      Gtk.gtk_window_get_gravity(self)
    end
    
    # @param [GtkWidget] geometry_widget 
    # @param [FFI::Pointer(*GdkGeometry)] geometry 
    # @param [unknown] geom_mask 
    # @return [nil] 
    def set_geometry_hints(geometry_widget, geometry, geom_mask)
      Gtk.gtk_window_set_geometry_hints(self, geometry_widget, geometry, geom_mask)
    end
    
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_window_set_screen(self, screen)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_window_get_screen(self)
    end
    
    # @return [Integer] 
    def is_active()
      Gtk.gtk_window_is_active(self)
    end
    
    # @return [Integer] 
    def has_toplevel_focus()
      Gtk.gtk_window_has_toplevel_focus(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_decorated(setting)
      Gtk.gtk_window_set_decorated(self, setting)
    end
    
    # @return [Integer] 
    def get_decorated()
      Gtk.gtk_window_get_decorated(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_deletable(setting)
      Gtk.gtk_window_set_deletable(self, setting)
    end
    
    # @return [Integer] 
    def get_deletable()
      Gtk.gtk_window_get_deletable(self)
    end
    
    # @param [FFI::Pointer(*GList)] list 
    # @return [nil] 
    def set_icon_list(list)
      Gtk.gtk_window_set_icon_list(self, list)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_icon_list()
      Gtk.gtk_window_get_icon_list(self)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] icon 
    # @return [nil] 
    def set_icon(icon)
      Gtk.gtk_window_set_icon(self, icon)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_icon_name(name)
      Gtk.gtk_window_set_icon_name(self, name)
    end
    
    # @param [String] filename 
    # @param [FFI::Pointer(**GError)] err 
    # @return [Integer] 
    def set_icon_from_file(filename, err)
      Gtk.gtk_window_set_icon_from_file(self, filename, err)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_icon()
      Gtk.gtk_window_get_icon(self)
    end
    
    # @return [String] 
    def get_icon_name()
      Gtk.gtk_window_get_icon_name(self)
    end
    
    # @param [Integer] modal 
    # @return [nil] 
    def set_modal(modal)
      Gtk.gtk_window_set_modal(self, modal)
    end
    
    # @return [Integer] 
    def get_modal()
      Gtk.gtk_window_get_modal(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_has_user_ref_count(setting)
      Gtk.gtk_window_set_has_user_ref_count(self, setting)
    end
    
    # @param [Integer] keyval 
    # @param [GtkWidget] target 
    # @return [nil] 
    def add_mnemonic(keyval, target)
      Gtk.gtk_window_add_mnemonic(self, keyval, target)
    end
    
    # @param [Integer] keyval 
    # @param [GtkWidget] target 
    # @return [nil] 
    def remove_mnemonic(keyval, target)
      Gtk.gtk_window_remove_mnemonic(self, keyval, target)
    end
    
    # @param [Integer] keyval 
    # @param [unknown] modifier 
    # @return [Integer] 
    def mnemonic_activate(keyval, modifier)
      Gtk.gtk_window_mnemonic_activate(self, keyval, modifier)
    end
    
    # @param [unknown] modifier 
    # @return [nil] 
    def set_mnemonic_modifier(modifier)
      Gtk.gtk_window_set_mnemonic_modifier(self, modifier)
    end
    
    # @return [unknown] 
    def get_mnemonic_modifier()
      Gtk.gtk_window_get_mnemonic_modifier(self)
    end
    
    # @param [FFI::Pointer(*GdkEventKey)] event 
    # @return [Integer] 
    def activate_key(event)
      Gtk.gtk_window_activate_key(self, event)
    end
    
    # @param [FFI::Pointer(*GdkEventKey)] event 
    # @return [Integer] 
    def propagate_key_event(event)
      Gtk.gtk_window_propagate_key_event(self, event)
    end
    
    # @return [nil] 
    def present()
      Gtk.gtk_window_present(self)
    end
    
    # @param [Integer] timestamp 
    # @return [nil] 
    def present_with_time(timestamp)
      Gtk.gtk_window_present_with_time(self, timestamp)
    end
    
    # @return [nil] 
    def iconify()
      Gtk.gtk_window_iconify(self)
    end
    
    # @return [nil] 
    def deiconify()
      Gtk.gtk_window_deiconify(self)
    end
    
    # @return [nil] 
    def stick()
      Gtk.gtk_window_stick(self)
    end
    
    # @return [nil] 
    def unstick()
      Gtk.gtk_window_unstick(self)
    end
    
    # @return [nil] 
    def maximize()
      Gtk.gtk_window_maximize(self)
    end
    
    # @return [nil] 
    def unmaximize()
      Gtk.gtk_window_unmaximize(self)
    end
    
    # @return [nil] 
    def fullscreen()
      Gtk.gtk_window_fullscreen(self)
    end
    
    # @return [nil] 
    def unfullscreen()
      Gtk.gtk_window_unfullscreen(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_keep_above(setting)
      Gtk.gtk_window_set_keep_above(self, setting)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_keep_below(setting)
      Gtk.gtk_window_set_keep_below(self, setting)
    end
    
    # @param [unknown] edge 
    # @param [Integer] button 
    # @param [Integer] root_x 
    # @param [Integer] root_y 
    # @param [Integer] timestamp 
    # @return [nil] 
    def begin_resize_drag(edge, button, root_x, root_y, timestamp)
      Gtk.gtk_window_begin_resize_drag(self, edge, button, root_x, root_y, timestamp)
    end
    
    # @param [Integer] button 
    # @param [Integer] root_x 
    # @param [Integer] root_y 
    # @param [Integer] timestamp 
    # @return [nil] 
    def begin_move_drag(button, root_x, root_y, timestamp)
      Gtk.gtk_window_begin_move_drag(self, button, root_x, root_y, timestamp)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def set_default_size(width, height)
      Gtk.gtk_window_set_default_size(self, width, height)
    end
    
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_default_size(width, height)
      Gtk.gtk_window_get_default_size(self, width, height)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def resize(width, height)
      Gtk.gtk_window_resize(self, width, height)
    end
    
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_size(width, height)
      Gtk.gtk_window_get_size(self, width, height)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def move(x, y)
      Gtk.gtk_window_move(self, x, y)
    end
    
    # @param [FFI::Pointer(*Gint)] root_x 
    # @param [FFI::Pointer(*Gint)] root_y 
    # @return [nil] 
    def get_position(root_x, root_y)
      Gtk.gtk_window_get_position(self, root_x, root_y)
    end
    
    # @param [String] geometry 
    # @return [Integer] 
    def parse_geometry(geometry)
      Gtk.gtk_window_parse_geometry(self, geometry)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def set_default_geometry(width, height)
      Gtk.gtk_window_set_default_geometry(self, width, height)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def resize_to_geometry(width, height)
      Gtk.gtk_window_resize_to_geometry(self, width, height)
    end
    
    # @return [GtkWindowGroup] 
    def get_group()
      GtkWindowGroup.new Gtk.gtk_window_get_group(self)
    end
    
    # @return [Integer] 
    def has_group()
      Gtk.gtk_window_has_group(self)
    end
    
    # @return [nil] 
    def reshow_with_initial_size()
      Gtk.gtk_window_reshow_with_initial_size(self)
    end
    
    # @return [Symbol from _enum_gtk_window_type_] 
    def get_window_type()
      Gtk.gtk_window_get_window_type(self)
    end
    
    # @return [GtkApplication] 
    def get_application()
      GtkApplication.new Gtk.gtk_window_get_application(self)
    end
    
    # @param [GtkApplication] application 
    # @return [nil] 
    def set_application(application)
      Gtk.gtk_window_set_application(self, application)
    end
    
    # @param [Integer] value 
    # @return [nil] 
    def set_has_resize_grip(value)
      Gtk.gtk_window_set_has_resize_grip(self, value)
    end
    
    # @return [Integer] 
    def get_has_resize_grip()
      Gtk.gtk_window_get_has_resize_grip(self)
    end
    
    # @return [Integer] 
    def resize_grip_is_visible()
      Gtk.gtk_window_resize_grip_is_visible(self)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] rect 
    # @return [Integer] 
    def get_resize_grip_area(rect)
      Gtk.gtk_window_get_resize_grip_area(self, rect)
    end
  end
  
  class GtkWindow < FFI::Struct
    include GtkWindowWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkWindowPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :set_focus ::
  #   (FFI::Pointer(*)) 
  # :activate_focus ::
  #   (FFI::Pointer(*)) G_SIGNAL_ACTION signals for keybindings
  # :activate_default ::
  #   (FFI::Pointer(*)) 
  # :keys_changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkWindowClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :set_focus, :pointer,
           :activate_focus, :pointer,
           :activate_default, :pointer,
           :keys_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkWindowGroupPrivate) 
  module GtkWindowGroupWrappers
    # @param [GtkWindow] window 
    # @return [nil] 
    def add_window(window)
      Gtk.gtk_window_group_add_window(self, window)
    end
    
    # @param [GtkWindow] window 
    # @return [nil] 
    def remove_window(window)
      Gtk.gtk_window_group_remove_window(self, window)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_windows()
      Gtk.gtk_window_group_list_windows(self)
    end
    
    # @return [GtkWidget] 
    def get_current_grab()
      GtkWidget.new Gtk.gtk_window_group_get_current_grab(self)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @return [GtkWidget] 
    def get_current_device_grab(device)
      GtkWidget.new Gtk.gtk_window_group_get_current_device_grab(self, device)
    end
  end
  
  class GtkWindowGroup < FFI::Struct
    include GtkWindowGroupWrappers
    layout :parent_instance, :char,
           :priv, GtkWindowGroupPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkWindowGroupClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_type, :gtk_window_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_window_new(type)
  # @param [Symbol from _enum_gtk_window_type_] type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_window_new, :gtk_window_new, [:gtk_window_type], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_window_set_title(window, title)
  # @param [GtkWindow] window 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_title, :gtk_window_set_title, [GtkWindow, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_title(window)
  # @param [GtkWindow] window 
  # @return [String] 
  # @scope class
  attach_function :gtk_window_get_title, :gtk_window_get_title, [GtkWindow], :string
  
  # (Not documented)
  # 
  # @method gtk_window_set_wmclass(window, wmclass_name, wmclass_class)
  # @param [GtkWindow] window 
  # @param [String] wmclass_name 
  # @param [String] wmclass_class 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_wmclass, :gtk_window_set_wmclass, [GtkWindow, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_role(window, role)
  # @param [GtkWindow] window 
  # @param [String] role 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_role, :gtk_window_set_role, [GtkWindow, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_startup_id(window, startup_id)
  # @param [GtkWindow] window 
  # @param [String] startup_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_startup_id, :gtk_window_set_startup_id, [GtkWindow, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_role(window)
  # @param [GtkWindow] window 
  # @return [String] 
  # @scope class
  attach_function :gtk_window_get_role, :gtk_window_get_role, [GtkWindow], :string
  
  # (Not documented)
  # 
  # @method gtk_window_add_accel_group(window, accel_group)
  # @param [GtkWindow] window 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_add_accel_group, :gtk_window_add_accel_group, [GtkWindow, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_window_remove_accel_group(window, accel_group)
  # @param [GtkWindow] window 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_remove_accel_group, :gtk_window_remove_accel_group, [GtkWindow, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_position(window, position)
  # @param [GtkWindow] window 
  # @param [Symbol from _enum_gtk_window_position_] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_position, :gtk_window_set_position, [GtkWindow, :gtk_window_position], :void
  
  # (Not documented)
  # 
  # @method gtk_window_activate_focus(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_activate_focus, :gtk_window_activate_focus, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_focus(window, focus)
  # @param [GtkWindow] window 
  # @param [GtkWidget] focus 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_focus, :gtk_window_set_focus, [GtkWindow, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_focus(window)
  # @param [GtkWindow] window 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_window_get_focus, :gtk_window_get_focus, [GtkWindow], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_window_set_default(window, default_widget)
  # @param [GtkWindow] window 
  # @param [GtkWidget] default_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_default, :gtk_window_set_default, [GtkWindow, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_default_widget(window)
  # @param [GtkWindow] window 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_window_get_default_widget, :gtk_window_get_default_widget, [GtkWindow], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_window_activate_default(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_activate_default, :gtk_window_activate_default, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_transient_for(window, parent)
  # @param [GtkWindow] window 
  # @param [GtkWindow] parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_transient_for, :gtk_window_set_transient_for, [GtkWindow, GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_transient_for(window)
  # @param [GtkWindow] window 
  # @return [GtkWindow] 
  # @scope class
  attach_function :gtk_window_get_transient_for, :gtk_window_get_transient_for, [GtkWindow], GtkWindow
  
  # (Not documented)
  # 
  # @method gtk_window_set_attached_to(window, attach_widget)
  # @param [GtkWindow] window 
  # @param [GtkWidget] attach_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_attached_to, :gtk_window_set_attached_to, [GtkWindow, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_attached_to(window)
  # @param [GtkWindow] window 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_window_get_attached_to, :gtk_window_get_attached_to, [GtkWindow], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_window_set_opacity(window, opacity)
  # @param [GtkWindow] window 
  # @param [Float] opacity 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_opacity, :gtk_window_set_opacity, [GtkWindow, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_opacity(window)
  # @param [GtkWindow] window 
  # @return [Float] 
  # @scope class
  attach_function :gtk_window_get_opacity, :gtk_window_get_opacity, [GtkWindow], :double
  
  # (Not documented)
  # 
  # @method gtk_window_set_type_hint(window, hint)
  # @param [GtkWindow] window 
  # @param [unknown] hint 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_type_hint, :gtk_window_set_type_hint, [GtkWindow, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_type_hint(window)
  # @param [GtkWindow] window 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_window_get_type_hint, :gtk_window_get_type_hint, [GtkWindow], :char
  
  # (Not documented)
  # 
  # @method gtk_window_set_skip_taskbar_hint(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_skip_taskbar_hint, :gtk_window_set_skip_taskbar_hint, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_skip_taskbar_hint(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_skip_taskbar_hint, :gtk_window_get_skip_taskbar_hint, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_skip_pager_hint(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_skip_pager_hint, :gtk_window_set_skip_pager_hint, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_skip_pager_hint(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_skip_pager_hint, :gtk_window_get_skip_pager_hint, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_urgency_hint(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_urgency_hint, :gtk_window_set_urgency_hint, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_urgency_hint(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_urgency_hint, :gtk_window_get_urgency_hint, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_accept_focus(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_accept_focus, :gtk_window_set_accept_focus, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_accept_focus(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_accept_focus, :gtk_window_get_accept_focus, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_focus_on_map(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_focus_on_map, :gtk_window_set_focus_on_map, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_focus_on_map(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_focus_on_map, :gtk_window_get_focus_on_map, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_destroy_with_parent(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_destroy_with_parent, :gtk_window_set_destroy_with_parent, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_destroy_with_parent(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_destroy_with_parent, :gtk_window_get_destroy_with_parent, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_hide_titlebar_when_maximized(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_hide_titlebar_when_maximized, :gtk_window_set_hide_titlebar_when_maximized, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_hide_titlebar_when_maximized(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_hide_titlebar_when_maximized, :gtk_window_get_hide_titlebar_when_maximized, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_mnemonics_visible(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_mnemonics_visible, :gtk_window_set_mnemonics_visible, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_mnemonics_visible(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_mnemonics_visible, :gtk_window_get_mnemonics_visible, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_focus_visible(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_focus_visible, :gtk_window_set_focus_visible, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_focus_visible(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_focus_visible, :gtk_window_get_focus_visible, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_resizable(window, resizable)
  # @param [GtkWindow] window 
  # @param [Integer] resizable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_resizable, :gtk_window_set_resizable, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_resizable(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_resizable, :gtk_window_get_resizable, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_gravity(window, gravity)
  # @param [GtkWindow] window 
  # @param [unknown] gravity 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_gravity, :gtk_window_set_gravity, [GtkWindow, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_gravity(window)
  # @param [GtkWindow] window 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_window_get_gravity, :gtk_window_get_gravity, [GtkWindow], :char
  
  # (Not documented)
  # 
  # @method gtk_window_set_geometry_hints(window, geometry_widget, geometry, geom_mask)
  # @param [GtkWindow] window 
  # @param [GtkWidget] geometry_widget 
  # @param [FFI::Pointer(*GdkGeometry)] geometry 
  # @param [unknown] geom_mask 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_geometry_hints, :gtk_window_set_geometry_hints, [GtkWindow, GtkWidget, :pointer, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_screen(window, screen)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_screen, :gtk_window_set_screen, [GtkWindow, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_screen(window)
  # @param [GtkWindow] window 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_window_get_screen, :gtk_window_get_screen, [GtkWindow], :pointer
  
  # (Not documented)
  # 
  # @method gtk_window_is_active(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_is_active, :gtk_window_is_active, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_has_toplevel_focus(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_has_toplevel_focus, :gtk_window_has_toplevel_focus, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_decorated(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_decorated, :gtk_window_set_decorated, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_decorated(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_decorated, :gtk_window_get_decorated, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_deletable(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_deletable, :gtk_window_set_deletable, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_deletable(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_deletable, :gtk_window_get_deletable, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_icon_list(window, list)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*GList)] list 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_icon_list, :gtk_window_set_icon_list, [GtkWindow, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_icon_list(window)
  # @param [GtkWindow] window 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_window_get_icon_list, :gtk_window_get_icon_list, [GtkWindow], :pointer
  
  # (Not documented)
  # 
  # @method gtk_window_set_icon(window, icon)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*GdkPixbuf)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_icon, :gtk_window_set_icon, [GtkWindow, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_icon_name(window, name)
  # @param [GtkWindow] window 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_icon_name, :gtk_window_set_icon_name, [GtkWindow, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_icon_from_file(window, filename, err)
  # @param [GtkWindow] window 
  # @param [String] filename 
  # @param [FFI::Pointer(**GError)] err 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_set_icon_from_file, :gtk_window_set_icon_from_file, [GtkWindow, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_window_get_icon(window)
  # @param [GtkWindow] window 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_window_get_icon, :gtk_window_get_icon, [GtkWindow], :pointer
  
  # (Not documented)
  # 
  # @method gtk_window_get_icon_name(window)
  # @param [GtkWindow] window 
  # @return [String] 
  # @scope class
  attach_function :gtk_window_get_icon_name, :gtk_window_get_icon_name, [GtkWindow], :string
  
  # (Not documented)
  # 
  # @method gtk_window_set_default_icon_list(list)
  # @param [FFI::Pointer(*GList)] list 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_default_icon_list, :gtk_window_set_default_icon_list, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_default_icon_list()
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_window_get_default_icon_list, :gtk_window_get_default_icon_list, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_window_set_default_icon(icon)
  # @param [FFI::Pointer(*GdkPixbuf)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_default_icon, :gtk_window_set_default_icon, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_default_icon_name(name)
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_default_icon_name, :gtk_window_set_default_icon_name, [:string], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_default_icon_name()
  # @return [String] 
  # @scope class
  attach_function :gtk_window_get_default_icon_name, :gtk_window_get_default_icon_name, [], :string
  
  # (Not documented)
  # 
  # @method gtk_window_set_default_icon_from_file(filename, err)
  # @param [String] filename 
  # @param [FFI::Pointer(**GError)] err 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_set_default_icon_from_file, :gtk_window_set_default_icon_from_file, [:string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_auto_startup_notification(setting)
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_auto_startup_notification, :gtk_window_set_auto_startup_notification, [:int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_modal(window, modal)
  # @param [GtkWindow] window 
  # @param [Integer] modal 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_modal, :gtk_window_set_modal, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_modal(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_modal, :gtk_window_get_modal, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_list_toplevels()
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_window_list_toplevels, :gtk_window_list_toplevels, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_window_set_has_user_ref_count(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_has_user_ref_count, :gtk_window_set_has_user_ref_count, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_add_mnemonic(window, keyval, target)
  # @param [GtkWindow] window 
  # @param [Integer] keyval 
  # @param [GtkWidget] target 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_add_mnemonic, :gtk_window_add_mnemonic, [GtkWindow, :uint, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_window_remove_mnemonic(window, keyval, target)
  # @param [GtkWindow] window 
  # @param [Integer] keyval 
  # @param [GtkWidget] target 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_remove_mnemonic, :gtk_window_remove_mnemonic, [GtkWindow, :uint, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_window_mnemonic_activate(window, keyval, modifier)
  # @param [GtkWindow] window 
  # @param [Integer] keyval 
  # @param [unknown] modifier 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_mnemonic_activate, :gtk_window_mnemonic_activate, [GtkWindow, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_mnemonic_modifier(window, modifier)
  # @param [GtkWindow] window 
  # @param [unknown] modifier 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_mnemonic_modifier, :gtk_window_set_mnemonic_modifier, [GtkWindow, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_mnemonic_modifier(window)
  # @param [GtkWindow] window 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_window_get_mnemonic_modifier, :gtk_window_get_mnemonic_modifier, [GtkWindow], :char
  
  # (Not documented)
  # 
  # @method gtk_window_activate_key(window, event)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_activate_key, :gtk_window_activate_key, [GtkWindow, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_window_propagate_key_event(window, event)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_propagate_key_event, :gtk_window_propagate_key_event, [GtkWindow, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_window_present(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_present, :gtk_window_present, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_present_with_time(window, timestamp)
  # @param [GtkWindow] window 
  # @param [Integer] timestamp 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_present_with_time, :gtk_window_present_with_time, [GtkWindow, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_window_iconify(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_iconify, :gtk_window_iconify, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_deiconify(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_deiconify, :gtk_window_deiconify, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_stick(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_stick, :gtk_window_stick, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_unstick(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_unstick, :gtk_window_unstick, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_maximize(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_maximize, :gtk_window_maximize, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_unmaximize(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_unmaximize, :gtk_window_unmaximize, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_fullscreen(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_fullscreen, :gtk_window_fullscreen, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_unfullscreen(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_unfullscreen, :gtk_window_unfullscreen, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_keep_above(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_keep_above, :gtk_window_set_keep_above, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_keep_below(window, setting)
  # @param [GtkWindow] window 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_keep_below, :gtk_window_set_keep_below, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_begin_resize_drag(window, edge, button, root_x, root_y, timestamp)
  # @param [GtkWindow] window 
  # @param [unknown] edge 
  # @param [Integer] button 
  # @param [Integer] root_x 
  # @param [Integer] root_y 
  # @param [Integer] timestamp 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_begin_resize_drag, :gtk_window_begin_resize_drag, [GtkWindow, :char, :int, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_window_begin_move_drag(window, button, root_x, root_y, timestamp)
  # @param [GtkWindow] window 
  # @param [Integer] button 
  # @param [Integer] root_x 
  # @param [Integer] root_y 
  # @param [Integer] timestamp 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_begin_move_drag, :gtk_window_begin_move_drag, [GtkWindow, :int, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_default_size(window, width, height)
  # @param [GtkWindow] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_default_size, :gtk_window_set_default_size, [GtkWindow, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_default_size(window, width, height)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_get_default_size, :gtk_window_get_default_size, [GtkWindow, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_resize(window, width, height)
  # @param [GtkWindow] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_resize, :gtk_window_resize, [GtkWindow, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_size(window, width, height)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_get_size, :gtk_window_get_size, [GtkWindow, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_move(window, x, y)
  # @param [GtkWindow] window 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_move, :gtk_window_move, [GtkWindow, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_position(window, root_x, root_y)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*Gint)] root_x 
  # @param [FFI::Pointer(*Gint)] root_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_get_position, :gtk_window_get_position, [GtkWindow, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_window_parse_geometry(window, geometry)
  # @param [GtkWindow] window 
  # @param [String] geometry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_parse_geometry, :gtk_window_parse_geometry, [GtkWindow, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_window_set_default_geometry(window, width, height)
  # @param [GtkWindow] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_default_geometry, :gtk_window_set_default_geometry, [GtkWindow, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_resize_to_geometry(window, width, height)
  # @param [GtkWindow] window 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_resize_to_geometry, :gtk_window_resize_to_geometry, [GtkWindow, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_group(window)
  # @param [GtkWindow] window 
  # @return [GtkWindowGroup] 
  # @scope class
  attach_function :gtk_window_get_group, :gtk_window_get_group, [GtkWindow], GtkWindowGroup
  
  # (Not documented)
  # 
  # @method gtk_window_has_group(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_has_group, :gtk_window_has_group, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_reshow_with_initial_size(window)
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_reshow_with_initial_size, :gtk_window_reshow_with_initial_size, [GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_window_type(window)
  # @param [GtkWindow] window 
  # @return [Symbol from _enum_gtk_window_type_] 
  # @scope class
  attach_function :gtk_window_get_window_type, :gtk_window_get_window_type, [GtkWindow], :gtk_window_type
  
  # (Not documented)
  # 
  # @method gtk_window_group_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_group_get_type, :gtk_window_group_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_window_group_new()
  # @return [GtkWindowGroup] 
  # @scope class
  attach_function :gtk_window_group_new, :gtk_window_group_new, [], GtkWindowGroup
  
  # (Not documented)
  # 
  # @method gtk_window_group_add_window(window_group, window)
  # @param [GtkWindowGroup] window_group 
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_group_add_window, :gtk_window_group_add_window, [GtkWindowGroup, GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_group_remove_window(window_group, window)
  # @param [GtkWindowGroup] window_group 
  # @param [GtkWindow] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_group_remove_window, :gtk_window_group_remove_window, [GtkWindowGroup, GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_window_group_list_windows(window_group)
  # @param [GtkWindowGroup] window_group 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_window_group_list_windows, :gtk_window_group_list_windows, [GtkWindowGroup], :pointer
  
  # (Not documented)
  # 
  # @method gtk_window_group_get_current_grab(window_group)
  # @param [GtkWindowGroup] window_group 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_window_group_get_current_grab, :gtk_window_group_get_current_grab, [GtkWindowGroup], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_window_group_get_current_device_grab(window_group, device)
  # @param [GtkWindowGroup] window_group 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_window_group_get_current_device_grab, :gtk_window_group_get_current_device_grab, [GtkWindowGroup, :pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_window_get_application(window)
  # @param [GtkWindow] window 
  # @return [GtkApplication] 
  # @scope class
  attach_function :gtk_window_get_application, :gtk_window_get_application, [GtkWindow], GtkApplication
  
  # (Not documented)
  # 
  # @method gtk_window_set_application(window, application)
  # @param [GtkWindow] window 
  # @param [GtkApplication] application 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_application, :gtk_window_set_application, [GtkWindow, GtkApplication], :void
  
  # (Not documented)
  # 
  # @method gtk_window_set_has_resize_grip(window, value)
  # @param [GtkWindow] window 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_window_set_has_resize_grip, :gtk_window_set_has_resize_grip, [GtkWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_window_get_has_resize_grip(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_has_resize_grip, :gtk_window_get_has_resize_grip, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_resize_grip_is_visible(window)
  # @param [GtkWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_resize_grip_is_visible, :gtk_window_resize_grip_is_visible, [GtkWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_window_get_resize_grip_area(window, rect)
  # @param [GtkWindow] window 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_get_resize_grip_area, :gtk_window_get_resize_grip_area, [GtkWindow, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_dialog_flags).</em>
  # 
  # === Options:
  # :modal ::
  #   
  # :destroy_with_parent ::
  #   
  # 
  # @method _enum_gtk_dialog_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_dialog_flags, [
    :modal, 1,
    :destroy_with_parent, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_response_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :reject ::
  #   
  # :accept ::
  #   
  # :delete_event ::
  #   
  # :ok ::
  #   
  # :cancel ::
  #   
  # :close ::
  #   
  # :yes ::
  #   
  # :no ::
  #   
  # :apply ::
  #   
  # :help ::
  #   
  # 
  # @method _enum_gtk_response_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_response_type, [
    :none, -1,
    :reject, -2,
    :accept, -3,
    :delete_event, -4,
    :ok, -5,
    :cancel, -6,
    :close, -7,
    :yes, -8,
    :no, -9,
    :apply, -10,
    :help, -11
  ]
  
  # (Not documented)
  class GtkDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :window ::
  #   (GtkWindow) 
  # :priv ::
  #   (GtkDialogPrivate) < private >
  module GtkDialogWrappers
    # @param [GtkWidget] child 
    # @param [Integer] response_id 
    # @return [nil] 
    def add_action_widget(child, response_id)
      Gtk.gtk_dialog_add_action_widget(self, child, response_id)
    end
    
    # @param [String] button_text 
    # @param [Integer] response_id 
    # @return [GtkWidget] 
    def add_button(button_text, response_id)
      GtkWidget.new Gtk.gtk_dialog_add_button(self, button_text, response_id)
    end
    
    # @param [String] first_button_text 
    # @return [nil] 
    def add_buttons(first_button_text)
      Gtk.gtk_dialog_add_buttons(self, first_button_text)
    end
    
    # @param [Integer] response_id 
    # @param [Integer] setting 
    # @return [nil] 
    def set_response_sensitive(response_id, setting)
      Gtk.gtk_dialog_set_response_sensitive(self, response_id, setting)
    end
    
    # @param [Integer] response_id 
    # @return [nil] 
    def set_default_response(response_id)
      Gtk.gtk_dialog_set_default_response(self, response_id)
    end
    
    # @param [Integer] response_id 
    # @return [GtkWidget] 
    def get_widget_for_response(response_id)
      GtkWidget.new Gtk.gtk_dialog_get_widget_for_response(self, response_id)
    end
    
    # @param [GtkWidget] widget 
    # @return [Integer] 
    def get_response_for_widget(widget)
      Gtk.gtk_dialog_get_response_for_widget(self, widget)
    end
    
    # @param [Integer] first_response_id 
    # @return [nil] 
    def set_alternative_button_order(first_response_id)
      Gtk.gtk_dialog_set_alternative_button_order(self, first_response_id)
    end
    
    # @param [Integer] n_params 
    # @param [FFI::Pointer(*Gint)] new_order 
    # @return [nil] 
    def set_alternative_button_order_from_array(n_params, new_order)
      Gtk.gtk_dialog_set_alternative_button_order_from_array(self, n_params, new_order)
    end
    
    # @param [Integer] response_id 
    # @return [nil] 
    def response(response_id)
      Gtk.gtk_dialog_response(self, response_id)
    end
    
    # @return [Integer] 
    def run()
      Gtk.gtk_dialog_run(self)
    end
    
    # @return [GtkWidget] 
    def get_action_area()
      GtkWidget.new Gtk.gtk_dialog_get_action_area(self)
    end
    
    # @return [GtkWidget] 
    def get_content_area()
      GtkWidget.new Gtk.gtk_dialog_get_content_area(self)
    end
  end
  
  class GtkDialog < FFI::Struct
    include GtkDialogWrappers
    layout :window, GtkWindow.by_value,
           :priv, GtkDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWindowClass) 
  # :response ::
  #   (FFI::Pointer(*)) 
  # :close ::
  #   (FFI::Pointer(*)) Keybinding signals
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkDialogClass < FFI::Struct
    layout :parent_class, GtkWindowClass.by_value,
           :response, :pointer,
           :close, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_dialog_get_type, :gtk_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_dialog_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_dialog_new, :gtk_dialog_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_dialog_new_with_buttons(title, parent, flags, first_button_text)
  # @param [String] title 
  # @param [GtkWindow] parent 
  # @param [Symbol from _enum_gtk_dialog_flags_] flags 
  # @param [String] first_button_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_dialog_new_with_buttons, :gtk_dialog_new_with_buttons, [:string, GtkWindow, :gtk_dialog_flags, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_dialog_add_action_widget(dialog, child, response_id)
  # @param [GtkDialog] dialog 
  # @param [GtkWidget] child 
  # @param [Integer] response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_add_action_widget, :gtk_dialog_add_action_widget, [GtkDialog, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_add_button(dialog, button_text, response_id)
  # @param [GtkDialog] dialog 
  # @param [String] button_text 
  # @param [Integer] response_id 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_dialog_add_button, :gtk_dialog_add_button, [GtkDialog, :string, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_dialog_add_buttons(dialog, first_button_text)
  # @param [GtkDialog] dialog 
  # @param [String] first_button_text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_add_buttons, :gtk_dialog_add_buttons, [GtkDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_set_response_sensitive(dialog, response_id, setting)
  # @param [GtkDialog] dialog 
  # @param [Integer] response_id 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_set_response_sensitive, :gtk_dialog_set_response_sensitive, [GtkDialog, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_set_default_response(dialog, response_id)
  # @param [GtkDialog] dialog 
  # @param [Integer] response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_set_default_response, :gtk_dialog_set_default_response, [GtkDialog, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_get_widget_for_response(dialog, response_id)
  # @param [GtkDialog] dialog 
  # @param [Integer] response_id 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_dialog_get_widget_for_response, :gtk_dialog_get_widget_for_response, [GtkDialog, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_dialog_get_response_for_widget(dialog, widget)
  # @param [GtkDialog] dialog 
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_dialog_get_response_for_widget, :gtk_dialog_get_response_for_widget, [GtkDialog, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_alternative_dialog_button_order(screen)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_alternative_dialog_button_order, :gtk_alternative_dialog_button_order, [:pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_dialog_set_alternative_button_order(dialog, first_response_id)
  # @param [GtkDialog] dialog 
  # @param [Integer] first_response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_set_alternative_button_order, :gtk_dialog_set_alternative_button_order, [GtkDialog, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_set_alternative_button_order_from_array(dialog, n_params, new_order)
  # @param [GtkDialog] dialog 
  # @param [Integer] n_params 
  # @param [FFI::Pointer(*Gint)] new_order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_set_alternative_button_order_from_array, :gtk_dialog_set_alternative_button_order_from_array, [GtkDialog, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_response(dialog, response_id)
  # @param [GtkDialog] dialog 
  # @param [Integer] response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_dialog_response, :gtk_dialog_response, [GtkDialog, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_dialog_run(dialog)
  # @param [GtkDialog] dialog 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_dialog_run, :gtk_dialog_run, [GtkDialog], :int
  
  # (Not documented)
  # 
  # @method gtk_dialog_get_action_area(dialog)
  # @param [GtkDialog] dialog 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_dialog_get_action_area, :gtk_dialog_get_action_area, [GtkDialog], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_dialog_get_content_area(dialog)
  # @param [GtkDialog] dialog 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_dialog_get_content_area, :gtk_dialog_get_content_area, [GtkDialog], GtkWidget
  
  # (Not documented)
  class GtkAboutDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_license).</em>
  # 
  # === Options:
  # :unknown ::
  #   
  # :custom ::
  #   
  # :gpl_2_0 ::
  #   
  # :gpl_3_0 ::
  #   
  # :lgpl_2_1 ::
  #   
  # :lgpl_3_0 ::
  #   
  # :bsd ::
  #   
  # :mit_x11 ::
  #   
  # :artistic ::
  #   
  # 
  # @method _enum_gtk_license_
  # @return [Symbol]
  # @scope class
  enum :gtk_license, [
    :unknown, 0,
    :custom, 1,
    :gpl_2_0, 2,
    :gpl_3_0, 3,
    :lgpl_2_1, 4,
    :lgpl_3_0, 5,
    :bsd, 6,
    :mit_x11, 7,
    :artistic, 8
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkAboutDialogPrivate) < private >
  module GtkAboutDialogWrappers
    # @return [String] 
    def get_program_name()
      Gtk.gtk_about_dialog_get_program_name(self)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_program_name(name)
      Gtk.gtk_about_dialog_set_program_name(self, name)
    end
    
    # @return [String] 
    def get_version()
      Gtk.gtk_about_dialog_get_version(self)
    end
    
    # @param [String] version 
    # @return [nil] 
    def set_version(version)
      Gtk.gtk_about_dialog_set_version(self, version)
    end
    
    # @return [String] 
    def get_copyright()
      Gtk.gtk_about_dialog_get_copyright(self)
    end
    
    # @param [String] copyright 
    # @return [nil] 
    def set_copyright(copyright)
      Gtk.gtk_about_dialog_set_copyright(self, copyright)
    end
    
    # @return [String] 
    def get_comments()
      Gtk.gtk_about_dialog_get_comments(self)
    end
    
    # @param [String] comments 
    # @return [nil] 
    def set_comments(comments)
      Gtk.gtk_about_dialog_set_comments(self, comments)
    end
    
    # @return [String] 
    def get_license()
      Gtk.gtk_about_dialog_get_license(self)
    end
    
    # @param [String] license 
    # @return [nil] 
    def set_license(license)
      Gtk.gtk_about_dialog_set_license(self, license)
    end
    
    # @param [Symbol from _enum_gtk_license_] license_type 
    # @return [nil] 
    def set_license_type(license_type)
      Gtk.gtk_about_dialog_set_license_type(self, license_type)
    end
    
    # @return [Symbol from _enum_gtk_license_] 
    def get_license_type()
      Gtk.gtk_about_dialog_get_license_type(self)
    end
    
    # @return [Integer] 
    def get_wrap_license()
      Gtk.gtk_about_dialog_get_wrap_license(self)
    end
    
    # @param [Integer] wrap_license 
    # @return [nil] 
    def set_wrap_license(wrap_license)
      Gtk.gtk_about_dialog_set_wrap_license(self, wrap_license)
    end
    
    # @return [String] 
    def get_website()
      Gtk.gtk_about_dialog_get_website(self)
    end
    
    # @param [String] website 
    # @return [nil] 
    def set_website(website)
      Gtk.gtk_about_dialog_set_website(self, website)
    end
    
    # @return [String] 
    def get_website_label()
      Gtk.gtk_about_dialog_get_website_label(self)
    end
    
    # @param [String] website_label 
    # @return [nil] 
    def set_website_label(website_label)
      Gtk.gtk_about_dialog_set_website_label(self, website_label)
    end
    
    # @return [FFI::Pointer(**Gchar)] 
    def get_authors()
      Gtk.gtk_about_dialog_get_authors(self)
    end
    
    # @param [FFI::Pointer(**Gchar)] authors 
    # @return [nil] 
    def set_authors(authors)
      Gtk.gtk_about_dialog_set_authors(self, authors)
    end
    
    # @return [FFI::Pointer(**Gchar)] 
    def get_documenters()
      Gtk.gtk_about_dialog_get_documenters(self)
    end
    
    # @param [FFI::Pointer(**Gchar)] documenters 
    # @return [nil] 
    def set_documenters(documenters)
      Gtk.gtk_about_dialog_set_documenters(self, documenters)
    end
    
    # @return [FFI::Pointer(**Gchar)] 
    def get_artists()
      Gtk.gtk_about_dialog_get_artists(self)
    end
    
    # @param [FFI::Pointer(**Gchar)] artists 
    # @return [nil] 
    def set_artists(artists)
      Gtk.gtk_about_dialog_set_artists(self, artists)
    end
    
    # @return [String] 
    def get_translator_credits()
      Gtk.gtk_about_dialog_get_translator_credits(self)
    end
    
    # @param [String] translator_credits 
    # @return [nil] 
    def set_translator_credits(translator_credits)
      Gtk.gtk_about_dialog_set_translator_credits(self, translator_credits)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_logo()
      Gtk.gtk_about_dialog_get_logo(self)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] logo 
    # @return [nil] 
    def set_logo(logo)
      Gtk.gtk_about_dialog_set_logo(self, logo)
    end
    
    # @return [String] 
    def get_logo_icon_name()
      Gtk.gtk_about_dialog_get_logo_icon_name(self)
    end
    
    # @param [String] icon_name 
    # @return [nil] 
    def set_logo_icon_name(icon_name)
      Gtk.gtk_about_dialog_set_logo_icon_name(self, icon_name)
    end
    
    # @param [String] section_name 
    # @param [FFI::Pointer(**Gchar)] people 
    # @return [nil] 
    def add_credit_section(section_name, people)
      Gtk.gtk_about_dialog_add_credit_section(self, section_name, people)
    end
  end
  
  class GtkAboutDialog < FFI::Struct
    include GtkAboutDialogWrappers
    layout :parent_instance, GtkDialog.by_value,
           :priv, GtkAboutDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :activate_link ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkAboutDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :activate_link, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_about_dialog_get_type, :gtk_about_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_about_dialog_new, :gtk_about_dialog_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_show_about_dialog(parent, first_property_name)
  # @param [GtkWindow] parent 
  # @param [String] first_property_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_show_about_dialog, :gtk_show_about_dialog, [GtkWindow, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_program_name(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_program_name, :gtk_about_dialog_get_program_name, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_program_name(about, name)
  # @param [GtkAboutDialog] about 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_program_name, :gtk_about_dialog_set_program_name, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_version(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_version, :gtk_about_dialog_get_version, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_version(about, version)
  # @param [GtkAboutDialog] about 
  # @param [String] version 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_version, :gtk_about_dialog_set_version, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_copyright(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_copyright, :gtk_about_dialog_get_copyright, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_copyright(about, copyright)
  # @param [GtkAboutDialog] about 
  # @param [String] copyright 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_copyright, :gtk_about_dialog_set_copyright, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_comments(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_comments, :gtk_about_dialog_get_comments, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_comments(about, comments)
  # @param [GtkAboutDialog] about 
  # @param [String] comments 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_comments, :gtk_about_dialog_set_comments, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_license(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_license, :gtk_about_dialog_get_license, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_license(about, license)
  # @param [GtkAboutDialog] about 
  # @param [String] license 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_license, :gtk_about_dialog_set_license, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_license_type(about, license_type)
  # @param [GtkAboutDialog] about 
  # @param [Symbol from _enum_gtk_license_] license_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_license_type, :gtk_about_dialog_set_license_type, [GtkAboutDialog, :gtk_license], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_license_type(about)
  # @param [GtkAboutDialog] about 
  # @return [Symbol from _enum_gtk_license_] 
  # @scope class
  attach_function :gtk_about_dialog_get_license_type, :gtk_about_dialog_get_license_type, [GtkAboutDialog], :gtk_license
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_wrap_license(about)
  # @param [GtkAboutDialog] about 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_about_dialog_get_wrap_license, :gtk_about_dialog_get_wrap_license, [GtkAboutDialog], :int
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_wrap_license(about, wrap_license)
  # @param [GtkAboutDialog] about 
  # @param [Integer] wrap_license 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_wrap_license, :gtk_about_dialog_set_wrap_license, [GtkAboutDialog, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_website(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_website, :gtk_about_dialog_get_website, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_website(about, website)
  # @param [GtkAboutDialog] about 
  # @param [String] website 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_website, :gtk_about_dialog_set_website, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_website_label(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_website_label, :gtk_about_dialog_get_website_label, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_website_label(about, website_label)
  # @param [GtkAboutDialog] about 
  # @param [String] website_label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_website_label, :gtk_about_dialog_set_website_label, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_authors(about)
  # @param [GtkAboutDialog] about 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_about_dialog_get_authors, :gtk_about_dialog_get_authors, [GtkAboutDialog], :pointer
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_authors(about, authors)
  # @param [GtkAboutDialog] about 
  # @param [FFI::Pointer(**Gchar)] authors 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_authors, :gtk_about_dialog_set_authors, [GtkAboutDialog, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_documenters(about)
  # @param [GtkAboutDialog] about 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_about_dialog_get_documenters, :gtk_about_dialog_get_documenters, [GtkAboutDialog], :pointer
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_documenters(about, documenters)
  # @param [GtkAboutDialog] about 
  # @param [FFI::Pointer(**Gchar)] documenters 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_documenters, :gtk_about_dialog_set_documenters, [GtkAboutDialog, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_artists(about)
  # @param [GtkAboutDialog] about 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_about_dialog_get_artists, :gtk_about_dialog_get_artists, [GtkAboutDialog], :pointer
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_artists(about, artists)
  # @param [GtkAboutDialog] about 
  # @param [FFI::Pointer(**Gchar)] artists 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_artists, :gtk_about_dialog_set_artists, [GtkAboutDialog, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_translator_credits(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_translator_credits, :gtk_about_dialog_get_translator_credits, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_translator_credits(about, translator_credits)
  # @param [GtkAboutDialog] about 
  # @param [String] translator_credits 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_translator_credits, :gtk_about_dialog_set_translator_credits, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_logo(about)
  # @param [GtkAboutDialog] about 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_about_dialog_get_logo, :gtk_about_dialog_get_logo, [GtkAboutDialog], :pointer
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_logo(about, logo)
  # @param [GtkAboutDialog] about 
  # @param [FFI::Pointer(*GdkPixbuf)] logo 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_logo, :gtk_about_dialog_set_logo, [GtkAboutDialog, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_get_logo_icon_name(about)
  # @param [GtkAboutDialog] about 
  # @return [String] 
  # @scope class
  attach_function :gtk_about_dialog_get_logo_icon_name, :gtk_about_dialog_get_logo_icon_name, [GtkAboutDialog], :string
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_set_logo_icon_name(about, icon_name)
  # @param [GtkAboutDialog] about 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_set_logo_icon_name, :gtk_about_dialog_set_logo_icon_name, [GtkAboutDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_about_dialog_add_credit_section(about, section_name, people)
  # @param [GtkAboutDialog] about 
  # @param [String] section_name 
  # @param [FFI::Pointer(**Gchar)] people 
  # @return [nil] 
  # @scope class
  attach_function :gtk_about_dialog_add_credit_section, :gtk_about_dialog_add_credit_section, [GtkAboutDialog, :string, :pointer], :void
  
  # (Not documented)
  class GtkMiscPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkMiscPrivate) < private >
  module GtkMiscWrappers
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @return [nil] 
    def set_alignment(xalign, yalign)
      Gtk.gtk_misc_set_alignment(self, xalign, yalign)
    end
    
    # @param [FFI::Pointer(*Gfloat)] xalign 
    # @param [FFI::Pointer(*Gfloat)] yalign 
    # @return [nil] 
    def get_alignment(xalign, yalign)
      Gtk.gtk_misc_get_alignment(self, xalign, yalign)
    end
    
    # @param [Integer] xpad 
    # @param [Integer] ypad 
    # @return [nil] 
    def set_padding(xpad, ypad)
      Gtk.gtk_misc_set_padding(self, xpad, ypad)
    end
    
    # @param [FFI::Pointer(*Gint)] xpad 
    # @param [FFI::Pointer(*Gint)] ypad 
    # @return [nil] 
    def get_padding(xpad, ypad)
      Gtk.gtk_misc_get_padding(self, xpad, ypad)
    end
    
    # @param [GtkBorder] border 
    # @return [nil] 
    def get_padding_and_border(border)
      Gtk.gtk_misc_get_padding_and_border(self, border)
    end
  end
  
  class GtkMisc < FFI::Struct
    include GtkMiscWrappers
    layout :widget, GtkWidget.by_value,
           :priv, GtkMiscPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMiscClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_misc_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_misc_get_type, :gtk_misc_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_misc_set_alignment(misc, xalign, yalign)
  # @param [GtkMisc] misc 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_misc_set_alignment, :gtk_misc_set_alignment, [GtkMisc, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_misc_get_alignment(misc, xalign, yalign)
  # @param [GtkMisc] misc 
  # @param [FFI::Pointer(*Gfloat)] xalign 
  # @param [FFI::Pointer(*Gfloat)] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_misc_get_alignment, :gtk_misc_get_alignment, [GtkMisc, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_misc_set_padding(misc, xpad, ypad)
  # @param [GtkMisc] misc 
  # @param [Integer] xpad 
  # @param [Integer] ypad 
  # @return [nil] 
  # @scope class
  attach_function :gtk_misc_set_padding, :gtk_misc_set_padding, [GtkMisc, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_misc_get_padding(misc, xpad, ypad)
  # @param [GtkMisc] misc 
  # @param [FFI::Pointer(*Gint)] xpad 
  # @param [FFI::Pointer(*Gint)] ypad 
  # @return [nil] 
  # @scope class
  attach_function :gtk_misc_get_padding, :gtk_misc_get_padding, [GtkMisc, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_misc_get_padding_and_border(misc, border)
  # @param [GtkMisc] misc 
  # @param [GtkBorder] border 
  # @return [nil] 
  # @scope class
  attach_function :gtk_misc_get_padding_and_border, :_gtk_misc_get_padding_and_border, [GtkMisc, GtkBorder], :void
  
  # (Not documented)
  class GtkMenuShellPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkMenuShellPrivate) < private >
  module GtkMenuShellWrappers
    # @param [GtkWidget] child 
    # @return [nil] 
    def append(child)
      Gtk.gtk_menu_shell_append(self, child)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def prepend(child)
      Gtk.gtk_menu_shell_prepend(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] position 
    # @return [nil] 
    def insert(child, position)
      Gtk.gtk_menu_shell_insert(self, child, position)
    end
    
    # @return [nil] 
    def deactivate()
      Gtk.gtk_menu_shell_deactivate(self)
    end
    
    # @param [GtkWidget] menu_item 
    # @return [nil] 
    def select_item(menu_item)
      Gtk.gtk_menu_shell_select_item(self, menu_item)
    end
    
    # @return [nil] 
    def deselect()
      Gtk.gtk_menu_shell_deselect(self)
    end
    
    # @param [GtkWidget] menu_item 
    # @param [Integer] force_deactivate 
    # @return [nil] 
    def activate_item(menu_item, force_deactivate)
      Gtk.gtk_menu_shell_activate_item(self, menu_item, force_deactivate)
    end
    
    # @param [Integer] search_sensitive 
    # @return [nil] 
    def select_first(search_sensitive)
      Gtk.gtk_menu_shell_select_first(self, search_sensitive)
    end
    
    # @return [nil] 
    def cancel()
      Gtk.gtk_menu_shell_cancel(self)
    end
    
    # @return [Integer] 
    def get_take_focus()
      Gtk.gtk_menu_shell_get_take_focus(self)
    end
    
    # @param [Integer] take_focus 
    # @return [nil] 
    def set_take_focus(take_focus)
      Gtk.gtk_menu_shell_set_take_focus(self, take_focus)
    end
    
    # @return [GtkWidget] 
    def get_selected_item()
      GtkWidget.new Gtk.gtk_menu_shell_get_selected_item(self)
    end
    
    # @return [GtkWidget] 
    def get_parent_shell()
      GtkWidget.new Gtk.gtk_menu_shell_get_parent_shell(self)
    end
    
    # @param [FFI::Pointer(*GMenuModel)] model 
    # @param [String] action_namespace 
    # @param [Integer] with_separators 
    # @return [nil] 
    def bind_model(model, action_namespace, with_separators)
      Gtk.gtk_menu_shell_bind_model(self, model, action_namespace, with_separators)
    end
  end
  
  class GtkMenuShell < FFI::Struct
    include GtkMenuShellWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkMenuShellPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :submenu_placement ::
  #   (Integer) 
  # :deactivate ::
  #   (FFI::Pointer(*)) 
  # :selection_done ::
  #   (FFI::Pointer(*)) 
  # :move_current ::
  #   (FFI::Pointer(*)) 
  # :activate_current ::
  #   (FFI::Pointer(*)) 
  # :cancel ::
  #   (FFI::Pointer(*)) 
  # :select_item ::
  #   (FFI::Pointer(*)) 
  # :insert ::
  #   (FFI::Pointer(*)) 
  # :get_popup_delay ::
  #   (FFI::Pointer(*)) 
  # :move_selected ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMenuShellClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :submenu_placement, :uint,
           :deactivate, :pointer,
           :selection_done, :pointer,
           :move_current, :pointer,
           :activate_current, :pointer,
           :cancel, :pointer,
           :select_item, :pointer,
           :insert, :pointer,
           :get_popup_delay, :pointer,
           :move_selected, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_shell_get_type, :gtk_menu_shell_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_append(menu_shell, child)
  # @param [GtkMenuShell] menu_shell 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_append, :gtk_menu_shell_append, [GtkMenuShell, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_prepend(menu_shell, child)
  # @param [GtkMenuShell] menu_shell 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_prepend, :gtk_menu_shell_prepend, [GtkMenuShell, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_insert(menu_shell, child, position)
  # @param [GtkMenuShell] menu_shell 
  # @param [GtkWidget] child 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_insert, :gtk_menu_shell_insert, [GtkMenuShell, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_deactivate(menu_shell)
  # @param [GtkMenuShell] menu_shell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_deactivate, :gtk_menu_shell_deactivate, [GtkMenuShell], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_select_item(menu_shell, menu_item)
  # @param [GtkMenuShell] menu_shell 
  # @param [GtkWidget] menu_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_select_item, :gtk_menu_shell_select_item, [GtkMenuShell, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_deselect(menu_shell)
  # @param [GtkMenuShell] menu_shell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_deselect, :gtk_menu_shell_deselect, [GtkMenuShell], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_activate_item(menu_shell, menu_item, force_deactivate)
  # @param [GtkMenuShell] menu_shell 
  # @param [GtkWidget] menu_item 
  # @param [Integer] force_deactivate 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_activate_item, :gtk_menu_shell_activate_item, [GtkMenuShell, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_select_first(menu_shell, search_sensitive)
  # @param [GtkMenuShell] menu_shell 
  # @param [Integer] search_sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_select_first, :gtk_menu_shell_select_first, [GtkMenuShell, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_cancel(menu_shell)
  # @param [GtkMenuShell] menu_shell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_cancel, :gtk_menu_shell_cancel, [GtkMenuShell], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_get_take_focus(menu_shell)
  # @param [GtkMenuShell] menu_shell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_shell_get_take_focus, :gtk_menu_shell_get_take_focus, [GtkMenuShell], :int
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_set_take_focus(menu_shell, take_focus)
  # @param [GtkMenuShell] menu_shell 
  # @param [Integer] take_focus 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_set_take_focus, :gtk_menu_shell_set_take_focus, [GtkMenuShell, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_get_selected_item(menu_shell)
  # @param [GtkMenuShell] menu_shell 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_shell_get_selected_item, :gtk_menu_shell_get_selected_item, [GtkMenuShell], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_get_parent_shell(menu_shell)
  # @param [GtkMenuShell] menu_shell 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_shell_get_parent_shell, :gtk_menu_shell_get_parent_shell, [GtkMenuShell], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_shell_bind_model(menu_shell, model, action_namespace, with_separators)
  # @param [GtkMenuShell] menu_shell 
  # @param [FFI::Pointer(*GMenuModel)] model 
  # @param [String] action_namespace 
  # @param [Integer] with_separators 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_shell_bind_model, :gtk_menu_shell_bind_model, [GtkMenuShell, :pointer, :string, :int], :void
  
  # (Not documented)
  class GtkMenuPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_menu_position_func_(x, y, push_in, user_data)
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @param [FFI::Pointer(*Gboolean)] push_in 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [FFI::Pointer(*GtkMenu)] 
  # @scope class
  callback :gtk_menu_position_func, [:pointer, :pointer, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_menu_detach_func_(menu)
  # @param [FFI::Pointer(*GtkMenu)] menu 
  # @return [GtkWidget] 
  # @scope class
  callback :gtk_menu_detach_func, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # = Fields:
  # :menu_shell ::
  #   (GtkMenuShell) 
  # :priv ::
  #   (GtkMenuPrivate) < private >
  module GtkMenuWrappers
    # @param [GtkWidget] parent_menu_shell 
    # @param [GtkWidget] parent_menu_item 
    # @param [Proc(_callback_gtk_menu_position_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [Integer] button 
    # @param [Integer] activate_time 
    # @return [nil] 
    def popup(parent_menu_shell, parent_menu_item, func, data, button, activate_time)
      Gtk.gtk_menu_popup(self, parent_menu_shell, parent_menu_item, func, data, button, activate_time)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @param [GtkWidget] parent_menu_shell 
    # @param [GtkWidget] parent_menu_item 
    # @param [Proc(_callback_gtk_menu_position_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @param [Integer] button 
    # @param [Integer] activate_time 
    # @return [nil] 
    def popup_for_device(device, parent_menu_shell, parent_menu_item, func, data, destroy, button, activate_time)
      Gtk.gtk_menu_popup_for_device(self, device, parent_menu_shell, parent_menu_item, func, data, destroy, button, activate_time)
    end
    
    # @return [nil] 
    def reposition()
      Gtk.gtk_menu_reposition(self)
    end
    
    # @return [nil] 
    def popdown()
      Gtk.gtk_menu_popdown(self)
    end
    
    # @return [GtkWidget] 
    def get_active()
      GtkWidget.new Gtk.gtk_menu_get_active(self)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def set_active(index)
      Gtk.gtk_menu_set_active(self, index)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def set_accel_group(accel_group)
      Gtk.gtk_menu_set_accel_group(self, accel_group)
    end
    
    # @return [GtkAccelGroup] 
    def get_accel_group()
      GtkAccelGroup.new Gtk.gtk_menu_get_accel_group(self)
    end
    
    # @param [String] accel_path 
    # @return [nil] 
    def set_accel_path(accel_path)
      Gtk.gtk_menu_set_accel_path(self, accel_path)
    end
    
    # @return [String] 
    def get_accel_path()
      Gtk.gtk_menu_get_accel_path(self)
    end
    
    # @param [GtkWidget] attach_widget 
    # @param [Proc(_callback_gtk_menu_detach_func_)] detacher 
    # @return [nil] 
    def attach_to_widget(attach_widget, detacher)
      Gtk.gtk_menu_attach_to_widget(self, attach_widget, detacher)
    end
    
    # @return [nil] 
    def detach()
      Gtk.gtk_menu_detach(self)
    end
    
    # @return [GtkWidget] 
    def get_attach_widget()
      GtkWidget.new Gtk.gtk_menu_get_attach_widget(self)
    end
    
    # @param [Integer] torn_off 
    # @return [nil] 
    def set_tearoff_state(torn_off)
      Gtk.gtk_menu_set_tearoff_state(self, torn_off)
    end
    
    # @return [Integer] 
    def get_tearoff_state()
      Gtk.gtk_menu_get_tearoff_state(self)
    end
    
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_menu_set_title(self, title)
    end
    
    # @return [String] 
    def get_title()
      Gtk.gtk_menu_get_title(self)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] position 
    # @return [nil] 
    def reorder_child(child, position)
      Gtk.gtk_menu_reorder_child(self, child, position)
    end
    
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_menu_set_screen(self, screen)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] left_attach 
    # @param [Integer] right_attach 
    # @param [Integer] top_attach 
    # @param [Integer] bottom_attach 
    # @return [nil] 
    def attach(child, left_attach, right_attach, top_attach, bottom_attach)
      Gtk.gtk_menu_attach(self, child, left_attach, right_attach, top_attach, bottom_attach)
    end
    
    # @param [Integer] monitor_num 
    # @return [nil] 
    def set_monitor(monitor_num)
      Gtk.gtk_menu_set_monitor(self, monitor_num)
    end
    
    # @return [Integer] 
    def get_monitor()
      Gtk.gtk_menu_get_monitor(self)
    end
    
    # @param [Integer] reserve_toggle_size 
    # @return [nil] 
    def set_reserve_toggle_size(reserve_toggle_size)
      Gtk.gtk_menu_set_reserve_toggle_size(self, reserve_toggle_size)
    end
    
    # @return [Integer] 
    def get_reserve_toggle_size()
      Gtk.gtk_menu_get_reserve_toggle_size(self)
    end
  end
  
  class GtkMenu < FFI::Struct
    include GtkMenuWrappers
    layout :menu_shell, GtkMenuShell.by_value,
           :priv, GtkMenuPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMenuShellClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMenuClass < FFI::Struct
    layout :parent_class, GtkMenuShellClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_menu_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_get_type, :gtk_menu_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_new, :gtk_menu_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_new_from_model(model)
  # @param [FFI::Pointer(*GMenuModel)] model 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_new_from_model, :gtk_menu_new_from_model, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_popup(menu, parent_menu_shell, parent_menu_item, func, data, button, activate_time)
  # @param [GtkMenu] menu 
  # @param [GtkWidget] parent_menu_shell 
  # @param [GtkWidget] parent_menu_item 
  # @param [Proc(_callback_gtk_menu_position_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [Integer] button 
  # @param [Integer] activate_time 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_popup, :gtk_menu_popup, [GtkMenu, GtkWidget, GtkWidget, :gtk_menu_position_func, :pointer, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_popup_for_device(menu, device, parent_menu_shell, parent_menu_item, func, data, destroy, button, activate_time)
  # @param [GtkMenu] menu 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [GtkWidget] parent_menu_shell 
  # @param [GtkWidget] parent_menu_item 
  # @param [Proc(_callback_gtk_menu_position_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @param [Integer] button 
  # @param [Integer] activate_time 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_popup_for_device, :gtk_menu_popup_for_device, [GtkMenu, :pointer, GtkWidget, GtkWidget, :gtk_menu_position_func, :pointer, :pointer, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_reposition(menu)
  # @param [GtkMenu] menu 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_reposition, :gtk_menu_reposition, [GtkMenu], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_popdown(menu)
  # @param [GtkMenu] menu 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_popdown, :gtk_menu_popdown, [GtkMenu], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_active(menu)
  # @param [GtkMenu] menu 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_get_active, :gtk_menu_get_active, [GtkMenu], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_set_active(menu, index)
  # @param [GtkMenu] menu 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_active, :gtk_menu_set_active, [GtkMenu, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_set_accel_group(menu, accel_group)
  # @param [GtkMenu] menu 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_accel_group, :gtk_menu_set_accel_group, [GtkMenu, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_accel_group(menu)
  # @param [GtkMenu] menu 
  # @return [GtkAccelGroup] 
  # @scope class
  attach_function :gtk_menu_get_accel_group, :gtk_menu_get_accel_group, [GtkMenu], GtkAccelGroup
  
  # (Not documented)
  # 
  # @method gtk_menu_set_accel_path(menu, accel_path)
  # @param [GtkMenu] menu 
  # @param [String] accel_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_accel_path, :gtk_menu_set_accel_path, [GtkMenu, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_accel_path(menu)
  # @param [GtkMenu] menu 
  # @return [String] 
  # @scope class
  attach_function :gtk_menu_get_accel_path, :gtk_menu_get_accel_path, [GtkMenu], :string
  
  # (Not documented)
  # 
  # @method gtk_menu_attach_to_widget(menu, attach_widget, detacher)
  # @param [GtkMenu] menu 
  # @param [GtkWidget] attach_widget 
  # @param [Proc(_callback_gtk_menu_detach_func_)] detacher 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_attach_to_widget, :gtk_menu_attach_to_widget, [GtkMenu, GtkWidget, :gtk_menu_detach_func], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_detach(menu)
  # @param [GtkMenu] menu 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_detach, :gtk_menu_detach, [GtkMenu], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_attach_widget(menu)
  # @param [GtkMenu] menu 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_get_attach_widget, :gtk_menu_get_attach_widget, [GtkMenu], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_set_tearoff_state(menu, torn_off)
  # @param [GtkMenu] menu 
  # @param [Integer] torn_off 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_tearoff_state, :gtk_menu_set_tearoff_state, [GtkMenu, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_tearoff_state(menu)
  # @param [GtkMenu] menu 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_get_tearoff_state, :gtk_menu_get_tearoff_state, [GtkMenu], :int
  
  # (Not documented)
  # 
  # @method gtk_menu_set_title(menu, title)
  # @param [GtkMenu] menu 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_title, :gtk_menu_set_title, [GtkMenu, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_title(menu)
  # @param [GtkMenu] menu 
  # @return [String] 
  # @scope class
  attach_function :gtk_menu_get_title, :gtk_menu_get_title, [GtkMenu], :string
  
  # (Not documented)
  # 
  # @method gtk_menu_reorder_child(menu, child, position)
  # @param [GtkMenu] menu 
  # @param [GtkWidget] child 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_reorder_child, :gtk_menu_reorder_child, [GtkMenu, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_set_screen(menu, screen)
  # @param [GtkMenu] menu 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_screen, :gtk_menu_set_screen, [GtkMenu, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_attach(menu, child, left_attach, right_attach, top_attach, bottom_attach)
  # @param [GtkMenu] menu 
  # @param [GtkWidget] child 
  # @param [Integer] left_attach 
  # @param [Integer] right_attach 
  # @param [Integer] top_attach 
  # @param [Integer] bottom_attach 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_attach, :gtk_menu_attach, [GtkMenu, GtkWidget, :uint, :uint, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_set_monitor(menu, monitor_num)
  # @param [GtkMenu] menu 
  # @param [Integer] monitor_num 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_monitor, :gtk_menu_set_monitor, [GtkMenu, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_monitor(menu)
  # @param [GtkMenu] menu 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_get_monitor, :gtk_menu_get_monitor, [GtkMenu], :int
  
  # (Not documented)
  # 
  # @method gtk_menu_get_for_attach_widget(widget)
  # @param [GtkWidget] widget 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_menu_get_for_attach_widget, :gtk_menu_get_for_attach_widget, [GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_menu_set_reserve_toggle_size(menu, reserve_toggle_size)
  # @param [GtkMenu] menu 
  # @param [Integer] reserve_toggle_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_set_reserve_toggle_size, :gtk_menu_set_reserve_toggle_size, [GtkMenu, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_get_reserve_toggle_size(menu)
  # @param [GtkMenu] menu 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_get_reserve_toggle_size, :gtk_menu_get_reserve_toggle_size, [GtkMenu], :int
  
  # (Not documented)
  class GtkLabelPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkLabelSelectionInfo < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :misc ::
  #   (GtkMisc) 
  # :priv ::
  #   (GtkLabelPrivate) < private >
  module GtkLabelWrappers
    # @param [String] str 
    # @return [nil] 
    def set_text(str)
      Gtk.gtk_label_set_text(self, str)
    end
    
    # @return [String] 
    def get_text()
      Gtk.gtk_label_get_text(self)
    end
    
    # @param [FFI::Pointer(*PangoAttrList)] attrs 
    # @return [nil] 
    def set_attributes(attrs)
      Gtk.gtk_label_set_attributes(self, attrs)
    end
    
    # @return [FFI::Pointer(*PangoAttrList)] 
    def get_attributes()
      Gtk.gtk_label_get_attributes(self)
    end
    
    # @param [String] str 
    # @return [nil] 
    def set_label(str)
      Gtk.gtk_label_set_label(self, str)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_label_get_label(self)
    end
    
    # @param [String] str 
    # @return [nil] 
    def set_markup(str)
      Gtk.gtk_label_set_markup(self, str)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_use_markup(setting)
      Gtk.gtk_label_set_use_markup(self, setting)
    end
    
    # @return [Integer] 
    def get_use_markup()
      Gtk.gtk_label_get_use_markup(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_use_underline(setting)
      Gtk.gtk_label_set_use_underline(self, setting)
    end
    
    # @return [Integer] 
    def get_use_underline()
      Gtk.gtk_label_get_use_underline(self)
    end
    
    # @param [String] str 
    # @return [nil] 
    def set_markup_with_mnemonic(str)
      Gtk.gtk_label_set_markup_with_mnemonic(self, str)
    end
    
    # @return [Integer] 
    def get_mnemonic_keyval()
      Gtk.gtk_label_get_mnemonic_keyval(self)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def set_mnemonic_widget(widget)
      Gtk.gtk_label_set_mnemonic_widget(self, widget)
    end
    
    # @return [GtkWidget] 
    def get_mnemonic_widget()
      GtkWidget.new Gtk.gtk_label_get_mnemonic_widget(self)
    end
    
    # @param [String] str 
    # @return [nil] 
    def set_text_with_mnemonic(str)
      Gtk.gtk_label_set_text_with_mnemonic(self, str)
    end
    
    # @param [Symbol from _enum_gtk_justification_] jtype 
    # @return [nil] 
    def set_justify(jtype)
      Gtk.gtk_label_set_justify(self, jtype)
    end
    
    # @return [Symbol from _enum_gtk_justification_] 
    def get_justify()
      Gtk.gtk_label_get_justify(self)
    end
    
    # @param [unknown] mode 
    # @return [nil] 
    def set_ellipsize(mode)
      Gtk.gtk_label_set_ellipsize(self, mode)
    end
    
    # @return [unknown] 
    def get_ellipsize()
      Gtk.gtk_label_get_ellipsize(self)
    end
    
    # @param [Integer] n_chars 
    # @return [nil] 
    def set_width_chars(n_chars)
      Gtk.gtk_label_set_width_chars(self, n_chars)
    end
    
    # @return [Integer] 
    def get_width_chars()
      Gtk.gtk_label_get_width_chars(self)
    end
    
    # @param [Integer] n_chars 
    # @return [nil] 
    def set_max_width_chars(n_chars)
      Gtk.gtk_label_set_max_width_chars(self, n_chars)
    end
    
    # @return [Integer] 
    def get_max_width_chars()
      Gtk.gtk_label_get_max_width_chars(self)
    end
    
    # @param [String] pattern 
    # @return [nil] 
    def set_pattern(pattern)
      Gtk.gtk_label_set_pattern(self, pattern)
    end
    
    # @param [Integer] wrap 
    # @return [nil] 
    def set_line_wrap(wrap)
      Gtk.gtk_label_set_line_wrap(self, wrap)
    end
    
    # @return [Integer] 
    def get_line_wrap()
      Gtk.gtk_label_get_line_wrap(self)
    end
    
    # @param [unknown] wrap_mode 
    # @return [nil] 
    def set_line_wrap_mode(wrap_mode)
      Gtk.gtk_label_set_line_wrap_mode(self, wrap_mode)
    end
    
    # @return [unknown] 
    def get_line_wrap_mode()
      Gtk.gtk_label_get_line_wrap_mode(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_selectable(setting)
      Gtk.gtk_label_set_selectable(self, setting)
    end
    
    # @return [Integer] 
    def get_selectable()
      Gtk.gtk_label_get_selectable(self)
    end
    
    # @param [Float] angle 
    # @return [nil] 
    def set_angle(angle)
      Gtk.gtk_label_set_angle(self, angle)
    end
    
    # @return [Float] 
    def get_angle()
      Gtk.gtk_label_get_angle(self)
    end
    
    # @param [Integer] start_offset 
    # @param [Integer] end_offset 
    # @return [nil] 
    def select_region(start_offset, end_offset)
      Gtk.gtk_label_select_region(self, start_offset, end_offset)
    end
    
    # @param [FFI::Pointer(*Gint)] start 
    # @param [FFI::Pointer(*Gint)] end_ 
    # @return [Integer] 
    def get_selection_bounds(start, end_)
      Gtk.gtk_label_get_selection_bounds(self, start, end_)
    end
    
    # @return [FFI::Pointer(*PangoLayout)] 
    def get_layout()
      Gtk.gtk_label_get_layout(self)
    end
    
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] y 
    # @return [nil] 
    def get_layout_offsets(x, y)
      Gtk.gtk_label_get_layout_offsets(self, x, y)
    end
    
    # @param [Integer] single_line_mode 
    # @return [nil] 
    def set_single_line_mode(single_line_mode)
      Gtk.gtk_label_set_single_line_mode(self, single_line_mode)
    end
    
    # @return [Integer] 
    def get_single_line_mode()
      Gtk.gtk_label_get_single_line_mode(self)
    end
    
    # @return [String] 
    def get_current_uri()
      Gtk.gtk_label_get_current_uri(self)
    end
    
    # @param [Integer] track_links 
    # @return [nil] 
    def set_track_visited_links(track_links)
      Gtk.gtk_label_set_track_visited_links(self, track_links)
    end
    
    # @return [Integer] 
    def get_track_visited_links()
      Gtk.gtk_label_get_track_visited_links(self)
    end
    
    # @return [Integer] 
    def get_cursor_position()
      Gtk.gtk_label_get_cursor_position(self)
    end
    
    # @return [Integer] 
    def get_selection_bound()
      Gtk.gtk_label_get_selection_bound(self)
    end
  end
  
  class GtkLabel < FFI::Struct
    include GtkLabelWrappers
    layout :misc, GtkMisc.by_value,
           :priv, GtkLabelPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMiscClass) 
  # :move_cursor ::
  #   (FFI::Pointer(*)) 
  # :copy_clipboard ::
  #   (FFI::Pointer(*)) 
  # :populate_popup ::
  #   (FFI::Pointer(*)) Hook to customize right-click popup for selectable labels
  # :activate_link ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkLabelClass < FFI::Struct
    layout :parent_class, GtkMiscClass.by_value,
           :move_cursor, :pointer,
           :copy_clipboard, :pointer,
           :populate_popup, :pointer,
           :activate_link, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_label_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_type, :gtk_label_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_label_new(str)
  # @param [String] str 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_label_new, :gtk_label_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_label_new_with_mnemonic(str)
  # @param [String] str 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_label_new_with_mnemonic, :gtk_label_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_label_set_text(label, str)
  # @param [GtkLabel] label 
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_text, :gtk_label_set_text, [GtkLabel, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_text(label)
  # @param [GtkLabel] label 
  # @return [String] 
  # @scope class
  attach_function :gtk_label_get_text, :gtk_label_get_text, [GtkLabel], :string
  
  # (Not documented)
  # 
  # @method gtk_label_set_attributes(label, attrs)
  # @param [GtkLabel] label 
  # @param [FFI::Pointer(*PangoAttrList)] attrs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_attributes, :gtk_label_set_attributes, [GtkLabel, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_attributes(label)
  # @param [GtkLabel] label 
  # @return [FFI::Pointer(*PangoAttrList)] 
  # @scope class
  attach_function :gtk_label_get_attributes, :gtk_label_get_attributes, [GtkLabel], :pointer
  
  # (Not documented)
  # 
  # @method gtk_label_set_label(label, str)
  # @param [GtkLabel] label 
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_label, :gtk_label_set_label, [GtkLabel, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_label(label)
  # @param [GtkLabel] label 
  # @return [String] 
  # @scope class
  attach_function :gtk_label_get_label, :gtk_label_get_label, [GtkLabel], :string
  
  # (Not documented)
  # 
  # @method gtk_label_set_markup(label, str)
  # @param [GtkLabel] label 
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_markup, :gtk_label_set_markup, [GtkLabel, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_label_set_use_markup(label, setting)
  # @param [GtkLabel] label 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_use_markup, :gtk_label_set_use_markup, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_use_markup(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_use_markup, :gtk_label_get_use_markup, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_set_use_underline(label, setting)
  # @param [GtkLabel] label 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_use_underline, :gtk_label_set_use_underline, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_use_underline(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_use_underline, :gtk_label_get_use_underline, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_set_markup_with_mnemonic(label, str)
  # @param [GtkLabel] label 
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_markup_with_mnemonic, :gtk_label_set_markup_with_mnemonic, [GtkLabel, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_mnemonic_keyval(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_mnemonic_keyval, :gtk_label_get_mnemonic_keyval, [GtkLabel], :uint
  
  # (Not documented)
  # 
  # @method gtk_label_set_mnemonic_widget(label, widget)
  # @param [GtkLabel] label 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_mnemonic_widget, :gtk_label_set_mnemonic_widget, [GtkLabel, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_mnemonic_widget(label)
  # @param [GtkLabel] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_label_get_mnemonic_widget, :gtk_label_get_mnemonic_widget, [GtkLabel], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_label_set_text_with_mnemonic(label, str)
  # @param [GtkLabel] label 
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_text_with_mnemonic, :gtk_label_set_text_with_mnemonic, [GtkLabel, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_label_set_justify(label, jtype)
  # @param [GtkLabel] label 
  # @param [Symbol from _enum_gtk_justification_] jtype 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_justify, :gtk_label_set_justify, [GtkLabel, :gtk_justification], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_justify(label)
  # @param [GtkLabel] label 
  # @return [Symbol from _enum_gtk_justification_] 
  # @scope class
  attach_function :gtk_label_get_justify, :gtk_label_get_justify, [GtkLabel], :gtk_justification
  
  # (Not documented)
  # 
  # @method gtk_label_set_ellipsize(label, mode)
  # @param [GtkLabel] label 
  # @param [unknown] mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_ellipsize, :gtk_label_set_ellipsize, [GtkLabel, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_ellipsize(label)
  # @param [GtkLabel] label 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_label_get_ellipsize, :gtk_label_get_ellipsize, [GtkLabel], :char
  
  # (Not documented)
  # 
  # @method gtk_label_set_width_chars(label, n_chars)
  # @param [GtkLabel] label 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_width_chars, :gtk_label_set_width_chars, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_width_chars(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_width_chars, :gtk_label_get_width_chars, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_set_max_width_chars(label, n_chars)
  # @param [GtkLabel] label 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_max_width_chars, :gtk_label_set_max_width_chars, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_max_width_chars(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_max_width_chars, :gtk_label_get_max_width_chars, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_set_pattern(label, pattern)
  # @param [GtkLabel] label 
  # @param [String] pattern 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_pattern, :gtk_label_set_pattern, [GtkLabel, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_label_set_line_wrap(label, wrap)
  # @param [GtkLabel] label 
  # @param [Integer] wrap 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_line_wrap, :gtk_label_set_line_wrap, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_line_wrap(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_line_wrap, :gtk_label_get_line_wrap, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_set_line_wrap_mode(label, wrap_mode)
  # @param [GtkLabel] label 
  # @param [unknown] wrap_mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_line_wrap_mode, :gtk_label_set_line_wrap_mode, [GtkLabel, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_line_wrap_mode(label)
  # @param [GtkLabel] label 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_label_get_line_wrap_mode, :gtk_label_get_line_wrap_mode, [GtkLabel], :char
  
  # (Not documented)
  # 
  # @method gtk_label_set_selectable(label, setting)
  # @param [GtkLabel] label 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_selectable, :gtk_label_set_selectable, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_selectable(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_selectable, :gtk_label_get_selectable, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_set_angle(label, angle)
  # @param [GtkLabel] label 
  # @param [Float] angle 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_angle, :gtk_label_set_angle, [GtkLabel, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_angle(label)
  # @param [GtkLabel] label 
  # @return [Float] 
  # @scope class
  attach_function :gtk_label_get_angle, :gtk_label_get_angle, [GtkLabel], :double
  
  # (Not documented)
  # 
  # @method gtk_label_select_region(label, start_offset, end_offset)
  # @param [GtkLabel] label 
  # @param [Integer] start_offset 
  # @param [Integer] end_offset 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_select_region, :gtk_label_select_region, [GtkLabel, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_selection_bounds(label, start, end_)
  # @param [GtkLabel] label 
  # @param [FFI::Pointer(*Gint)] start 
  # @param [FFI::Pointer(*Gint)] end_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_selection_bounds, :gtk_label_get_selection_bounds, [GtkLabel, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_label_get_layout(label)
  # @param [GtkLabel] label 
  # @return [FFI::Pointer(*PangoLayout)] 
  # @scope class
  attach_function :gtk_label_get_layout, :gtk_label_get_layout, [GtkLabel], :pointer
  
  # (Not documented)
  # 
  # @method gtk_label_get_layout_offsets(label, x, y)
  # @param [GtkLabel] label 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_get_layout_offsets, :gtk_label_get_layout_offsets, [GtkLabel, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_label_set_single_line_mode(label, single_line_mode)
  # @param [GtkLabel] label 
  # @param [Integer] single_line_mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_single_line_mode, :gtk_label_set_single_line_mode, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_single_line_mode(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_single_line_mode, :gtk_label_get_single_line_mode, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_get_current_uri(label)
  # @param [GtkLabel] label 
  # @return [String] 
  # @scope class
  attach_function :gtk_label_get_current_uri, :gtk_label_get_current_uri, [GtkLabel], :string
  
  # (Not documented)
  # 
  # @method gtk_label_set_track_visited_links(label, track_links)
  # @param [GtkLabel] label 
  # @param [Integer] track_links 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_set_track_visited_links, :gtk_label_set_track_visited_links, [GtkLabel, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_track_visited_links(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_track_visited_links, :gtk_label_get_track_visited_links, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_mnemonics_visible_apply_recursively(widget, mnemonics_visible)
  # @param [GtkWidget] widget 
  # @param [Integer] mnemonics_visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_label_mnemonics_visible_apply_recursively, :_gtk_label_mnemonics_visible_apply_recursively, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_label_get_cursor_position(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_cursor_position, :_gtk_label_get_cursor_position, [GtkLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_label_get_selection_bound(label)
  # @param [GtkLabel] label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_label_get_selection_bound, :_gtk_label_get_selection_bound, [GtkLabel], :int
  
  # (Not documented)
  class GtkAccelLabelPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :label ::
  #   (GtkLabel) 
  # :priv ::
  #   (GtkAccelLabelPrivate) 
  module GtkAccelLabelWrappers
    # @return [GtkWidget] 
    def get_accel_widget()
      GtkWidget.new Gtk.gtk_accel_label_get_accel_widget(self)
    end
    
    # @return [Integer] 
    def get_accel_width()
      Gtk.gtk_accel_label_get_accel_width(self)
    end
    
    # @param [GtkWidget] accel_widget 
    # @return [nil] 
    def set_accel_widget(accel_widget)
      Gtk.gtk_accel_label_set_accel_widget(self, accel_widget)
    end
    
    # @param [FFI::Pointer(*GClosure)] accel_closure 
    # @return [nil] 
    def set_accel_closure(accel_closure)
      Gtk.gtk_accel_label_set_accel_closure(self, accel_closure)
    end
    
    # @return [Integer] 
    def refetch()
      Gtk.gtk_accel_label_refetch(self)
    end
    
    # @param [Integer] accelerator_key 
    # @param [unknown] accelerator_mods 
    # @return [nil] 
    def set_accel(accelerator_key, accelerator_mods)
      Gtk.gtk_accel_label_set_accel(self, accelerator_key, accelerator_mods)
    end
  end
  
  class GtkAccelLabel < FFI::Struct
    include GtkAccelLabelWrappers
    layout :label, GtkLabel.by_value,
           :priv, GtkAccelLabelPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkLabelClass) 
  # :signal_quote1 ::
  #   (String) 
  # :signal_quote2 ::
  #   (String) 
  # :mod_name_shift ::
  #   (String) 
  # :mod_name_control ::
  #   (String) 
  # :mod_name_alt ::
  #   (String) 
  # :mod_separator ::
  #   (String) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  module GtkAccelLabelClassWrappers
    # @param [Integer] accelerator_key 
    # @param [unknown] accelerator_mods 
    # @return [String] 
    def get_accelerator_label(accelerator_key, accelerator_mods)
      Gtk.gtk_accel_label_class_get_accelerator_label(self, accelerator_key, accelerator_mods)
    end
  end
  
  class GtkAccelLabelClass < FFI::Struct
    include GtkAccelLabelClassWrappers
    layout :parent_class, GtkLabelClass.by_value,
           :signal_quote1, :string,
           :signal_quote2, :string,
           :mod_name_shift, :string,
           :mod_name_control, :string,
           :mod_name_alt, :string,
           :mod_separator, :string,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_accel_label_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_label_get_type, :gtk_accel_label_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_accel_label_new(string)
  # @param [String] string 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_accel_label_new, :gtk_accel_label_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_accel_label_get_accel_widget(accel_label)
  # @param [GtkAccelLabel] accel_label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_accel_label_get_accel_widget, :gtk_accel_label_get_accel_widget, [GtkAccelLabel], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_accel_label_get_accel_width(accel_label)
  # @param [GtkAccelLabel] accel_label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_label_get_accel_width, :gtk_accel_label_get_accel_width, [GtkAccelLabel], :uint
  
  # (Not documented)
  # 
  # @method gtk_accel_label_set_accel_widget(accel_label, accel_widget)
  # @param [GtkAccelLabel] accel_label 
  # @param [GtkWidget] accel_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_label_set_accel_widget, :gtk_accel_label_set_accel_widget, [GtkAccelLabel, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_label_set_accel_closure(accel_label, accel_closure)
  # @param [GtkAccelLabel] accel_label 
  # @param [FFI::Pointer(*GClosure)] accel_closure 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_label_set_accel_closure, :gtk_accel_label_set_accel_closure, [GtkAccelLabel, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_label_refetch(accel_label)
  # @param [GtkAccelLabel] accel_label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_label_refetch, :gtk_accel_label_refetch, [GtkAccelLabel], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_label_set_accel(accel_label, accelerator_key, accelerator_mods)
  # @param [GtkAccelLabel] accel_label 
  # @param [Integer] accelerator_key 
  # @param [unknown] accelerator_mods 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_label_set_accel, :gtk_accel_label_set_accel, [GtkAccelLabel, :uint, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_label_class_get_accelerator_label(klass, accelerator_key, accelerator_mods)
  # @param [GtkAccelLabelClass] klass 
  # @param [Integer] accelerator_key 
  # @param [unknown] accelerator_mods 
  # @return [String] 
  # @scope class
  attach_function :gtk_accel_label_class_get_accelerator_label, :_gtk_accel_label_class_get_accelerator_label, [GtkAccelLabelClass, :uint, :char], :string
  
  # (Not documented)
  class GtkAccelMap < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkAccelMapClass < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_accel_map_foreach_(accel_path, accel_key, accel_mods, changed)
  # @param [String] accel_path 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @param [Integer] changed 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  callback :gtk_accel_map_foreach, [:string, :uint, :char, :int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_accel_map_add_entry(accel_path, accel_key, accel_mods)
  # @param [String] accel_path 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_add_entry, :gtk_accel_map_add_entry, [:string, :uint, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_lookup_entry(accel_path, key)
  # @param [String] accel_path 
  # @param [GtkAccelKey] key 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_map_lookup_entry, :gtk_accel_map_lookup_entry, [:string, GtkAccelKey], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_map_change_entry(accel_path, accel_key, accel_mods, replace)
  # @param [String] accel_path 
  # @param [Integer] accel_key 
  # @param [unknown] accel_mods 
  # @param [Integer] replace 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_map_change_entry, :gtk_accel_map_change_entry, [:string, :uint, :char, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_accel_map_load(file_name)
  # @param [String] file_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_load, :gtk_accel_map_load, [:string], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_save(file_name)
  # @param [String] file_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_save, :gtk_accel_map_save, [:string], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_foreach(data, foreach_func)
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [Proc(_callback_gtk_accel_map_foreach_)] foreach_func 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_foreach, :gtk_accel_map_foreach, [:pointer, :gtk_accel_map_foreach], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_load_fd(fd)
  # @param [Integer] fd 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_load_fd, :gtk_accel_map_load_fd, [:int], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_load_scanner(scanner)
  # @param [FFI::Pointer(*GScanner)] scanner 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_load_scanner, :gtk_accel_map_load_scanner, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_save_fd(fd)
  # @param [Integer] fd 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_save_fd, :gtk_accel_map_save_fd, [:int], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_lock_path(accel_path)
  # @param [String] accel_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_lock_path, :gtk_accel_map_lock_path, [:string], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_unlock_path(accel_path)
  # @param [String] accel_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_unlock_path, :gtk_accel_map_unlock_path, [:string], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_add_filter(filter_pattern)
  # @param [String] filter_pattern 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_add_filter, :gtk_accel_map_add_filter, [:string], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_foreach_unfiltered(data, foreach_func)
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [Proc(_callback_gtk_accel_map_foreach_)] foreach_func 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accel_map_foreach_unfiltered, :gtk_accel_map_foreach_unfiltered, [:pointer, :gtk_accel_map_foreach], :void
  
  # (Not documented)
  # 
  # @method gtk_accel_map_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_map_get_type, :gtk_accel_map_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_accel_map_get()
  # @return [GtkAccelMap] 
  # @scope class
  attach_function :gtk_accel_map_get, :gtk_accel_map_get, [], GtkAccelMap
  
  # (Not documented)
  class GtkAccessiblePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkAccessiblePrivate) < private >
  module GtkAccessibleWrappers
    # @param [GtkWidget] widget 
    # @return [nil] 
    def set_widget(widget)
      Gtk.gtk_accessible_set_widget(self, widget)
    end
    
    # @return [GtkWidget] 
    def get_widget()
      GtkWidget.new Gtk.gtk_accessible_get_widget(self)
    end
    
    # @return [nil] 
    def connect_widget_destroyed()
      Gtk.gtk_accessible_connect_widget_destroyed(self)
    end
  end
  
  class GtkAccessible < FFI::Struct
    include GtkAccessibleWrappers
    layout :parent, :char,
           :priv, GtkAccessiblePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :connect_widget_destroyed ::
  #   (FFI::Pointer(*)) 
  # :widget_set ::
  #   (FFI::Pointer(*)) 
  # :widget_unset ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkAccessibleClass < FFI::Struct
    layout :parent_class, :char,
           :connect_widget_destroyed, :pointer,
           :widget_set, :pointer,
           :widget_unset, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_accessible_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accessible_get_type, :gtk_accessible_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_accessible_set_widget(accessible, widget)
  # @param [GtkAccessible] accessible 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accessible_set_widget, :gtk_accessible_set_widget, [GtkAccessible, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_accessible_get_widget(accessible)
  # @param [GtkAccessible] accessible 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_accessible_get_widget, :gtk_accessible_get_widget, [GtkAccessible], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_accessible_connect_widget_destroyed(accessible)
  # @param [GtkAccessible] accessible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_accessible_connect_widget_destroyed, :gtk_accessible_connect_widget_destroyed, [GtkAccessible], :void
  
  # (Not documented)
  class GtkActionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :object ::
  #   (unknown) 
  # :private_data ::
  #   (GtkActionPrivate) < private >
  module GtkActionWrappers
    # @return [String] 
    def get_name()
      Gtk.gtk_action_get_name(self)
    end
    
    # @return [Integer] 
    def is_sensitive()
      Gtk.gtk_action_is_sensitive(self)
    end
    
    # @return [Integer] 
    def get_sensitive()
      Gtk.gtk_action_get_sensitive(self)
    end
    
    # @param [Integer] sensitive 
    # @return [nil] 
    def set_sensitive(sensitive)
      Gtk.gtk_action_set_sensitive(self, sensitive)
    end
    
    # @return [Integer] 
    def is_visible()
      Gtk.gtk_action_is_visible(self)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_action_get_visible(self)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visible(visible)
      Gtk.gtk_action_set_visible(self, visible)
    end
    
    # @return [nil] 
    def activate()
      Gtk.gtk_action_activate(self)
    end
    
    # @param [Symbol from _enum_gtk_icon_size_] icon_size 
    # @return [GtkWidget] 
    def create_icon(icon_size)
      GtkWidget.new Gtk.gtk_action_create_icon(self, icon_size)
    end
    
    # @return [GtkWidget] 
    def create_menu_item()
      GtkWidget.new Gtk.gtk_action_create_menu_item(self)
    end
    
    # @return [GtkWidget] 
    def create_tool_item()
      GtkWidget.new Gtk.gtk_action_create_tool_item(self)
    end
    
    # @return [GtkWidget] 
    def create_menu()
      GtkWidget.new Gtk.gtk_action_create_menu(self)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_proxies()
      Gtk.gtk_action_get_proxies(self)
    end
    
    # @return [nil] 
    def connect_accelerator()
      Gtk.gtk_action_connect_accelerator(self)
    end
    
    # @return [nil] 
    def disconnect_accelerator()
      Gtk.gtk_action_disconnect_accelerator(self)
    end
    
    # @return [String] 
    def get_accel_path()
      Gtk.gtk_action_get_accel_path(self)
    end
    
    # @return [FFI::Pointer(*GClosure)] 
    def get_accel_closure()
      Gtk.gtk_action_get_accel_closure(self)
    end
    
    # @return [nil] 
    def block_activate()
      Gtk.gtk_action_block_activate(self)
    end
    
    # @return [nil] 
    def unblock_activate()
      Gtk.gtk_action_unblock_activate(self)
    end
    
    # @param [GtkWidget] proxy 
    # @return [nil] 
    def add_to_proxy_list(proxy)
      Gtk.gtk_action_add_to_proxy_list(self, proxy)
    end
    
    # @param [GtkWidget] proxy 
    # @return [nil] 
    def remove_from_proxy_list(proxy)
      Gtk.gtk_action_remove_from_proxy_list(self, proxy)
    end
    
    # @return [nil] 
    def emit_activate()
      Gtk.gtk_action_emit_activate(self)
    end
    
    # @param [String] accel_path 
    # @return [nil] 
    def set_accel_path(accel_path)
      Gtk.gtk_action_set_accel_path(self, accel_path)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def set_accel_group(accel_group)
      Gtk.gtk_action_set_accel_group(self, accel_group)
    end
    
    # @param [GtkWidget] proxy 
    # @param [Integer] empty 
    # @return [nil] 
    def sync_menu_visible(proxy, empty)
      Gtk.gtk_action_sync_menu_visible(self, proxy, empty)
    end
    
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_action_set_label(self, label)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_action_get_label(self)
    end
    
    # @param [String] short_label 
    # @return [nil] 
    def set_short_label(short_label)
      Gtk.gtk_action_set_short_label(self, short_label)
    end
    
    # @return [String] 
    def get_short_label()
      Gtk.gtk_action_get_short_label(self)
    end
    
    # @param [String] tooltip 
    # @return [nil] 
    def set_tooltip(tooltip)
      Gtk.gtk_action_set_tooltip(self, tooltip)
    end
    
    # @return [String] 
    def get_tooltip()
      Gtk.gtk_action_get_tooltip(self)
    end
    
    # @param [String] stock_id 
    # @return [nil] 
    def set_stock_id(stock_id)
      Gtk.gtk_action_set_stock_id(self, stock_id)
    end
    
    # @return [String] 
    def get_stock_id()
      Gtk.gtk_action_get_stock_id(self)
    end
    
    # @param [FFI::Pointer(*GIcon)] icon 
    # @return [nil] 
    def set_gicon(icon)
      Gtk.gtk_action_set_gicon(self, icon)
    end
    
    # @return [FFI::Pointer(*GIcon)] 
    def get_gicon()
      Gtk.gtk_action_get_gicon(self)
    end
    
    # @param [String] icon_name 
    # @return [nil] 
    def set_icon_name(icon_name)
      Gtk.gtk_action_set_icon_name(self, icon_name)
    end
    
    # @return [String] 
    def get_icon_name()
      Gtk.gtk_action_get_icon_name(self)
    end
    
    # @param [Integer] visible_horizontal 
    # @return [nil] 
    def set_visible_horizontal(visible_horizontal)
      Gtk.gtk_action_set_visible_horizontal(self, visible_horizontal)
    end
    
    # @return [Integer] 
    def get_visible_horizontal()
      Gtk.gtk_action_get_visible_horizontal(self)
    end
    
    # @param [Integer] visible_vertical 
    # @return [nil] 
    def set_visible_vertical(visible_vertical)
      Gtk.gtk_action_set_visible_vertical(self, visible_vertical)
    end
    
    # @return [Integer] 
    def get_visible_vertical()
      Gtk.gtk_action_get_visible_vertical(self)
    end
    
    # @param [Integer] is_important 
    # @return [nil] 
    def set_is_important(is_important)
      Gtk.gtk_action_set_is_important(self, is_important)
    end
    
    # @return [Integer] 
    def get_is_important()
      Gtk.gtk_action_get_is_important(self)
    end
    
    # @param [Integer] always_show 
    # @return [nil] 
    def set_always_show_image(always_show)
      Gtk.gtk_action_set_always_show_image(self, always_show)
    end
    
    # @return [Integer] 
    def get_always_show_image()
      Gtk.gtk_action_get_always_show_image(self)
    end
  end
  
  class GtkAction < FFI::Struct
    include GtkActionWrappers
    layout :object, :char,
           :private_data, GtkActionPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :activate ::
  #   (FFI::Pointer(*)) activation signal
  # :menu_item_type ::
  #   (Integer) 
  # :toolbar_item_type ::
  #   (Integer) 
  # :create_menu_item ::
  #   (FFI::Pointer(*)) widget creation routines (not signals)
  # :create_tool_item ::
  #   (FFI::Pointer(*)) 
  # :connect_proxy ::
  #   (FFI::Pointer(*)) 
  # :disconnect_proxy ::
  #   (FFI::Pointer(*)) 
  # :create_menu ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkActionClass < FFI::Struct
    layout :parent_class, :char,
           :activate, :pointer,
           :menu_item_type, :uint,
           :toolbar_item_type, :uint,
           :create_menu_item, :pointer,
           :create_tool_item, :pointer,
           :connect_proxy, :pointer,
           :disconnect_proxy, :pointer,
           :create_menu, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_type, :gtk_action_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_action_new(name, label, tooltip, stock_id)
  # @param [String] name 
  # @param [String] label 
  # @param [String] tooltip 
  # @param [String] stock_id 
  # @return [GtkAction] 
  # @scope class
  attach_function :gtk_action_new, :gtk_action_new, [:string, :string, :string, :string], GtkAction
  
  # (Not documented)
  # 
  # @method gtk_action_get_name(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_name, :gtk_action_get_name, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_is_sensitive(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_is_sensitive, :gtk_action_is_sensitive, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_get_sensitive(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_sensitive, :gtk_action_get_sensitive, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_set_sensitive(action, sensitive)
  # @param [GtkAction] action 
  # @param [Integer] sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_sensitive, :gtk_action_set_sensitive, [GtkAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_is_visible(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_is_visible, :gtk_action_is_visible, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_get_visible(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_visible, :gtk_action_get_visible, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_set_visible(action, visible)
  # @param [GtkAction] action 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_visible, :gtk_action_set_visible, [GtkAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_activate(action)
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_activate, :gtk_action_activate, [GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_create_icon(action, icon_size)
  # @param [GtkAction] action 
  # @param [Symbol from _enum_gtk_icon_size_] icon_size 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_action_create_icon, :gtk_action_create_icon, [GtkAction, :gtk_icon_size], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_action_create_menu_item(action)
  # @param [GtkAction] action 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_action_create_menu_item, :gtk_action_create_menu_item, [GtkAction], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_action_create_tool_item(action)
  # @param [GtkAction] action 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_action_create_tool_item, :gtk_action_create_tool_item, [GtkAction], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_action_create_menu(action)
  # @param [GtkAction] action 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_action_create_menu, :gtk_action_create_menu, [GtkAction], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_action_get_proxies(action)
  # @param [GtkAction] action 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_action_get_proxies, :gtk_action_get_proxies, [GtkAction], :pointer
  
  # (Not documented)
  # 
  # @method gtk_action_connect_accelerator(action)
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_connect_accelerator, :gtk_action_connect_accelerator, [GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_disconnect_accelerator(action)
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_disconnect_accelerator, :gtk_action_disconnect_accelerator, [GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_accel_path(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_accel_path, :gtk_action_get_accel_path, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_get_accel_closure(action)
  # @param [GtkAction] action 
  # @return [FFI::Pointer(*GClosure)] 
  # @scope class
  attach_function :gtk_action_get_accel_closure, :gtk_action_get_accel_closure, [GtkAction], :pointer
  
  # (Not documented)
  # 
  # @method gtk_action_block_activate(action)
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_block_activate, :gtk_action_block_activate, [GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_unblock_activate(action)
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_unblock_activate, :gtk_action_unblock_activate, [GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_add_to_proxy_list(action, proxy)
  # @param [GtkAction] action 
  # @param [GtkWidget] proxy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_add_to_proxy_list, :_gtk_action_add_to_proxy_list, [GtkAction, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_action_remove_from_proxy_list(action, proxy)
  # @param [GtkAction] action 
  # @param [GtkWidget] proxy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_remove_from_proxy_list, :_gtk_action_remove_from_proxy_list, [GtkAction, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_action_emit_activate(action)
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_emit_activate, :_gtk_action_emit_activate, [GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_set_accel_path(action, accel_path)
  # @param [GtkAction] action 
  # @param [String] accel_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_accel_path, :gtk_action_set_accel_path, [GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_set_accel_group(action, accel_group)
  # @param [GtkAction] action 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_accel_group, :gtk_action_set_accel_group, [GtkAction, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_action_sync_menu_visible(action, proxy, empty)
  # @param [GtkAction] action 
  # @param [GtkWidget] proxy 
  # @param [Integer] empty 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_sync_menu_visible, :_gtk_action_sync_menu_visible, [GtkAction, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_set_label(action, label)
  # @param [GtkAction] action 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_label, :gtk_action_set_label, [GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_label(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_label, :gtk_action_get_label, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_set_short_label(action, short_label)
  # @param [GtkAction] action 
  # @param [String] short_label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_short_label, :gtk_action_set_short_label, [GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_short_label(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_short_label, :gtk_action_get_short_label, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_set_tooltip(action, tooltip)
  # @param [GtkAction] action 
  # @param [String] tooltip 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_tooltip, :gtk_action_set_tooltip, [GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_tooltip(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_tooltip, :gtk_action_get_tooltip, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_set_stock_id(action, stock_id)
  # @param [GtkAction] action 
  # @param [String] stock_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_stock_id, :gtk_action_set_stock_id, [GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_stock_id(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_stock_id, :gtk_action_get_stock_id, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_set_gicon(action, icon)
  # @param [GtkAction] action 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_gicon, :gtk_action_set_gicon, [GtkAction, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_gicon(action)
  # @param [GtkAction] action 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_action_get_gicon, :gtk_action_get_gicon, [GtkAction], :pointer
  
  # (Not documented)
  # 
  # @method gtk_action_set_icon_name(action, icon_name)
  # @param [GtkAction] action 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_icon_name, :gtk_action_set_icon_name, [GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_icon_name(action)
  # @param [GtkAction] action 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_get_icon_name, :gtk_action_get_icon_name, [GtkAction], :string
  
  # (Not documented)
  # 
  # @method gtk_action_set_visible_horizontal(action, visible_horizontal)
  # @param [GtkAction] action 
  # @param [Integer] visible_horizontal 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_visible_horizontal, :gtk_action_set_visible_horizontal, [GtkAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_visible_horizontal(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_visible_horizontal, :gtk_action_get_visible_horizontal, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_set_visible_vertical(action, visible_vertical)
  # @param [GtkAction] action 
  # @param [Integer] visible_vertical 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_visible_vertical, :gtk_action_set_visible_vertical, [GtkAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_visible_vertical(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_visible_vertical, :gtk_action_get_visible_vertical, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_set_is_important(action, is_important)
  # @param [GtkAction] action 
  # @param [Integer] is_important 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_is_important, :gtk_action_set_is_important, [GtkAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_is_important(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_is_important, :gtk_action_get_is_important, [GtkAction], :int
  
  # (Not documented)
  # 
  # @method gtk_action_set_always_show_image(action, always_show)
  # @param [GtkAction] action 
  # @param [Integer] always_show 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_set_always_show_image, :gtk_action_set_always_show_image, [GtkAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_get_always_show_image(action)
  # @param [GtkAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_get_always_show_image, :gtk_action_get_always_show_image, [GtkAction], :int
  
  # (Not documented)
  module GtkActionableWrappers
    # @return [String] 
    def get_action_name()
      Gtk.gtk_actionable_get_action_name(self)
    end
    
    # @param [String] action_name 
    # @return [nil] 
    def set_action_name(action_name)
      Gtk.gtk_actionable_set_action_name(self, action_name)
    end
    
    # @return [FFI::Pointer(*GVariant)] 
    def get_action_target_value()
      Gtk.gtk_actionable_get_action_target_value(self)
    end
    
    # @param [FFI::Pointer(*GVariant)] target_value 
    # @return [nil] 
    def set_action_target_value(target_value)
      Gtk.gtk_actionable_set_action_target_value(self, target_value)
    end
    
    # @param [String] format_string 
    # @return [nil] 
    def set_action_target(format_string)
      Gtk.gtk_actionable_set_action_target(self, format_string)
    end
    
    # @param [String] detailed_action_name 
    # @return [nil] 
    def set_detailed_action_name(detailed_action_name)
      Gtk.gtk_actionable_set_detailed_action_name(self, detailed_action_name)
    end
  end
  
  class GtkActionable < FFI::Struct
    include GtkActionableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :get_action_name ::
  #   (FFI::Pointer(*)) 
  # :set_action_name ::
  #   (FFI::Pointer(*)) 
  # :get_action_target_value ::
  #   (FFI::Pointer(*)) 
  # :set_action_target_value ::
  #   (FFI::Pointer(*)) 
  class GtkActionableInterface < FFI::Struct
    layout :g_iface, :char,
           :get_action_name, :pointer,
           :set_action_name, :pointer,
           :get_action_target_value, :pointer,
           :set_action_target_value, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_actionable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_actionable_get_type, :gtk_actionable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_actionable_get_action_name(actionable)
  # @param [GtkActionable] actionable 
  # @return [String] 
  # @scope class
  attach_function :gtk_actionable_get_action_name, :gtk_actionable_get_action_name, [GtkActionable], :string
  
  # (Not documented)
  # 
  # @method gtk_actionable_set_action_name(actionable, action_name)
  # @param [GtkActionable] actionable 
  # @param [String] action_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_actionable_set_action_name, :gtk_actionable_set_action_name, [GtkActionable, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_actionable_get_action_target_value(actionable)
  # @param [GtkActionable] actionable 
  # @return [FFI::Pointer(*GVariant)] 
  # @scope class
  attach_function :gtk_actionable_get_action_target_value, :gtk_actionable_get_action_target_value, [GtkActionable], :pointer
  
  # (Not documented)
  # 
  # @method gtk_actionable_set_action_target_value(actionable, target_value)
  # @param [GtkActionable] actionable 
  # @param [FFI::Pointer(*GVariant)] target_value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_actionable_set_action_target_value, :gtk_actionable_set_action_target_value, [GtkActionable, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_actionable_set_action_target(actionable, format_string)
  # @param [GtkActionable] actionable 
  # @param [String] format_string 
  # @return [nil] 
  # @scope class
  attach_function :gtk_actionable_set_action_target, :gtk_actionable_set_action_target, [GtkActionable, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_actionable_set_detailed_action_name(actionable, detailed_action_name)
  # @param [GtkActionable] actionable 
  # @param [String] detailed_action_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_actionable_set_detailed_action_name, :gtk_actionable_set_detailed_action_name, [GtkActionable, :string], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_translate_func_(path, func_data)
  # @param [String] path 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_translate_func, [:string, :pointer], :char
  
  # (Not documented)
  # 
  # = Fields:
  # :stock_id ::
  #   (String) 
  # :label ::
  #   (String) 
  # :modifier ::
  #   (unknown) 
  # :keyval ::
  #   (Integer) 
  # :translation_domain ::
  #   (String) 
  module GtkStockItemWrappers
    # @return [GtkStockItem] 
    def copy()
      GtkStockItem.new Gtk.gtk_stock_item_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_stock_item_free(self)
    end
  end
  
  class GtkStockItem < FFI::Struct
    include GtkStockItemWrappers
    layout :stock_id, :string,
           :label, :string,
           :modifier, :char,
           :keyval, :uint,
           :translation_domain, :string
  end
  
  # (Not documented)
  # 
  # @method gtk_stock_add(items, n_items)
  # @param [GtkStockItem] items 
  # @param [Integer] n_items 
  # @return [nil] 
  # @scope class
  attach_function :gtk_stock_add, :gtk_stock_add, [GtkStockItem, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_stock_add_static(items, n_items)
  # @param [GtkStockItem] items 
  # @param [Integer] n_items 
  # @return [nil] 
  # @scope class
  attach_function :gtk_stock_add_static, :gtk_stock_add_static, [GtkStockItem, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_stock_lookup(stock_id, item)
  # @param [String] stock_id 
  # @param [GtkStockItem] item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_stock_lookup, :gtk_stock_lookup, [:string, GtkStockItem], :int
  
  # (Not documented)
  # 
  # @method gtk_stock_list_ids()
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_stock_list_ids, :gtk_stock_list_ids, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_stock_item_copy(item)
  # @param [GtkStockItem] item 
  # @return [GtkStockItem] 
  # @scope class
  attach_function :gtk_stock_item_copy, :gtk_stock_item_copy, [GtkStockItem], GtkStockItem
  
  # (Not documented)
  # 
  # @method gtk_stock_item_free(item)
  # @param [GtkStockItem] item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_stock_item_free, :gtk_stock_item_free, [GtkStockItem], :void
  
  # (Not documented)
  # 
  # @method gtk_stock_set_translate_func(domain, func, data, notify)
  # @param [String] domain 
  # @param [Proc(_callback_gtk_translate_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] notify 
  # @return [nil] 
  # @scope class
  attach_function :gtk_stock_set_translate_func, :gtk_stock_set_translate_func, [:string, :gtk_translate_func, :pointer, :pointer], :void
  
  # (Not documented)
  class GtkActionGroupPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkActionGroupPrivate) < private >
  module GtkActionGroupWrappers
    # @return [String] 
    def get_name()
      Gtk.gtk_action_group_get_name(self)
    end
    
    # @return [Integer] 
    def get_sensitive()
      Gtk.gtk_action_group_get_sensitive(self)
    end
    
    # @param [Integer] sensitive 
    # @return [nil] 
    def set_sensitive(sensitive)
      Gtk.gtk_action_group_set_sensitive(self, sensitive)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_action_group_get_visible(self)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visible(visible)
      Gtk.gtk_action_group_set_visible(self, visible)
    end
    
    # @return [GtkAccelGroup] 
    def get_accel_group()
      GtkAccelGroup.new Gtk.gtk_action_group_get_accel_group(self)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def set_accel_group(accel_group)
      Gtk.gtk_action_group_set_accel_group(self, accel_group)
    end
    
    # @param [String] action_name 
    # @return [GtkAction] 
    def get_action(action_name)
      GtkAction.new Gtk.gtk_action_group_get_action(self, action_name)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_actions()
      Gtk.gtk_action_group_list_actions(self)
    end
    
    # @param [GtkAction] action 
    # @return [nil] 
    def add_action(action)
      Gtk.gtk_action_group_add_action(self, action)
    end
    
    # @param [GtkAction] action 
    # @param [String] accelerator 
    # @return [nil] 
    def add_action_with_accel(action, accelerator)
      Gtk.gtk_action_group_add_action_with_accel(self, action, accelerator)
    end
    
    # @param [GtkAction] action 
    # @return [nil] 
    def remove_action(action)
      Gtk.gtk_action_group_remove_action(self, action)
    end
    
    # @param [FFI::Pointer(*GtkActionEntry)] entries 
    # @param [Integer] n_entries 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def add_actions(entries, n_entries, user_data)
      Gtk.gtk_action_group_add_actions(self, entries, n_entries, user_data)
    end
    
    # @param [FFI::Pointer(*GtkToggleActionEntry)] entries 
    # @param [Integer] n_entries 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def add_toggle_actions(entries, n_entries, user_data)
      Gtk.gtk_action_group_add_toggle_actions(self, entries, n_entries, user_data)
    end
    
    # @param [FFI::Pointer(*GtkRadioActionEntry)] entries 
    # @param [Integer] n_entries 
    # @param [Integer] value 
    # @param [FFI::Pointer(GCallback)] on_change 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def add_radio_actions(entries, n_entries, value, on_change, user_data)
      Gtk.gtk_action_group_add_radio_actions(self, entries, n_entries, value, on_change, user_data)
    end
    
    # @param [FFI::Pointer(*GtkActionEntry)] entries 
    # @param [Integer] n_entries 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def add_actions_full(entries, n_entries, user_data, destroy)
      Gtk.gtk_action_group_add_actions_full(self, entries, n_entries, user_data, destroy)
    end
    
    # @param [FFI::Pointer(*GtkToggleActionEntry)] entries 
    # @param [Integer] n_entries 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def add_toggle_actions_full(entries, n_entries, user_data, destroy)
      Gtk.gtk_action_group_add_toggle_actions_full(self, entries, n_entries, user_data, destroy)
    end
    
    # @param [FFI::Pointer(*GtkRadioActionEntry)] entries 
    # @param [Integer] n_entries 
    # @param [Integer] value 
    # @param [FFI::Pointer(GCallback)] on_change 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def add_radio_actions_full(entries, n_entries, value, on_change, user_data, destroy)
      Gtk.gtk_action_group_add_radio_actions_full(self, entries, n_entries, value, on_change, user_data, destroy)
    end
    
    # @param [Proc(_callback_gtk_translate_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] notify 
    # @return [nil] 
    def set_translate_func(func, data, notify)
      Gtk.gtk_action_group_set_translate_func(self, func, data, notify)
    end
    
    # @param [String] domain 
    # @return [nil] 
    def set_translation_domain(domain)
      Gtk.gtk_action_group_set_translation_domain(self, domain)
    end
    
    # @param [String] string 
    # @return [String] 
    def translate_string(string)
      Gtk.gtk_action_group_translate_string(self, string)
    end
    
    # @param [GtkAction] action 
    # @param [GtkWidget] proxy 
    # @return [nil] 
    def emit_connect_proxy(action, proxy)
      Gtk.gtk_action_group_emit_connect_proxy(self, action, proxy)
    end
    
    # @param [GtkAction] action 
    # @param [GtkWidget] proxy 
    # @return [nil] 
    def emit_disconnect_proxy(action, proxy)
      Gtk.gtk_action_group_emit_disconnect_proxy(self, action, proxy)
    end
    
    # @param [GtkAction] action 
    # @return [nil] 
    def emit_pre_activate(action)
      Gtk.gtk_action_group_emit_pre_activate(self, action)
    end
    
    # @param [GtkAction] action 
    # @return [nil] 
    def emit_post_activate(action)
      Gtk.gtk_action_group_emit_post_activate(self, action)
    end
  end
  
  class GtkActionGroup < FFI::Struct
    include GtkActionGroupWrappers
    layout :parent, :char,
           :priv, GtkActionGroupPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :get_action ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkActionGroupClass < FFI::Struct
    layout :parent_class, :char,
           :get_action, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :stock_id ::
  #   (String) 
  # :label ::
  #   (String) 
  # :accelerator ::
  #   (String) 
  # :tooltip ::
  #   (String) 
  # :callback ::
  #   (FFI::Pointer(GCallback)) 
  class GtkActionEntry < FFI::Struct
    layout :name, :string,
           :stock_id, :string,
           :label, :string,
           :accelerator, :string,
           :tooltip, :string,
           :callback, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :stock_id ::
  #   (String) 
  # :label ::
  #   (String) 
  # :accelerator ::
  #   (String) 
  # :tooltip ::
  #   (String) 
  # :callback ::
  #   (FFI::Pointer(GCallback)) 
  # :is_active ::
  #   (Integer) 
  class GtkToggleActionEntry < FFI::Struct
    layout :name, :string,
           :stock_id, :string,
           :label, :string,
           :accelerator, :string,
           :tooltip, :string,
           :callback, :pointer,
           :is_active, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :name ::
  #   (String) 
  # :stock_id ::
  #   (String) 
  # :label ::
  #   (String) 
  # :accelerator ::
  #   (String) 
  # :tooltip ::
  #   (String) 
  # :value ::
  #   (Integer) 
  class GtkRadioActionEntry < FFI::Struct
    layout :name, :string,
           :stock_id, :string,
           :label, :string,
           :accelerator, :string,
           :tooltip, :string,
           :value, :int
  end
  
  # (Not documented)
  # 
  # @method gtk_action_group_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_group_get_type, :gtk_action_group_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_action_group_new(name)
  # @param [String] name 
  # @return [GtkActionGroup] 
  # @scope class
  attach_function :gtk_action_group_new, :gtk_action_group_new, [:string], GtkActionGroup
  
  # (Not documented)
  # 
  # @method gtk_action_group_get_name(action_group)
  # @param [GtkActionGroup] action_group 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_group_get_name, :gtk_action_group_get_name, [GtkActionGroup], :string
  
  # (Not documented)
  # 
  # @method gtk_action_group_get_sensitive(action_group)
  # @param [GtkActionGroup] action_group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_group_get_sensitive, :gtk_action_group_get_sensitive, [GtkActionGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_action_group_set_sensitive(action_group, sensitive)
  # @param [GtkActionGroup] action_group 
  # @param [Integer] sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_set_sensitive, :gtk_action_group_set_sensitive, [GtkActionGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_get_visible(action_group)
  # @param [GtkActionGroup] action_group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_action_group_get_visible, :gtk_action_group_get_visible, [GtkActionGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_action_group_set_visible(action_group, visible)
  # @param [GtkActionGroup] action_group 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_set_visible, :gtk_action_group_set_visible, [GtkActionGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_get_accel_group(action_group)
  # @param [GtkActionGroup] action_group 
  # @return [GtkAccelGroup] 
  # @scope class
  attach_function :gtk_action_group_get_accel_group, :gtk_action_group_get_accel_group, [GtkActionGroup], GtkAccelGroup
  
  # (Not documented)
  # 
  # @method gtk_action_group_set_accel_group(action_group, accel_group)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_set_accel_group, :gtk_action_group_set_accel_group, [GtkActionGroup, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_get_action(action_group, action_name)
  # @param [GtkActionGroup] action_group 
  # @param [String] action_name 
  # @return [GtkAction] 
  # @scope class
  attach_function :gtk_action_group_get_action, :gtk_action_group_get_action, [GtkActionGroup, :string], GtkAction
  
  # (Not documented)
  # 
  # @method gtk_action_group_list_actions(action_group)
  # @param [GtkActionGroup] action_group 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_action_group_list_actions, :gtk_action_group_list_actions, [GtkActionGroup], :pointer
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_action(action_group, action)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_action, :gtk_action_group_add_action, [GtkActionGroup, GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_action_with_accel(action_group, action, accelerator)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @param [String] accelerator 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_action_with_accel, :gtk_action_group_add_action_with_accel, [GtkActionGroup, GtkAction, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_remove_action(action_group, action)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_remove_action, :gtk_action_group_remove_action, [GtkActionGroup, GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_actions(action_group, entries, n_entries, user_data)
  # @param [GtkActionGroup] action_group 
  # @param [GtkActionEntry] entries 
  # @param [Integer] n_entries 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_actions, :gtk_action_group_add_actions, [GtkActionGroup, GtkActionEntry, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_toggle_actions(action_group, entries, n_entries, user_data)
  # @param [GtkActionGroup] action_group 
  # @param [GtkToggleActionEntry] entries 
  # @param [Integer] n_entries 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_toggle_actions, :gtk_action_group_add_toggle_actions, [GtkActionGroup, GtkToggleActionEntry, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_radio_actions(action_group, entries, n_entries, value, on_change, user_data)
  # @param [GtkActionGroup] action_group 
  # @param [GtkRadioActionEntry] entries 
  # @param [Integer] n_entries 
  # @param [Integer] value 
  # @param [FFI::Pointer(GCallback)] on_change 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_radio_actions, :gtk_action_group_add_radio_actions, [GtkActionGroup, GtkRadioActionEntry, :uint, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_actions_full(action_group, entries, n_entries, user_data, destroy)
  # @param [GtkActionGroup] action_group 
  # @param [GtkActionEntry] entries 
  # @param [Integer] n_entries 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_actions_full, :gtk_action_group_add_actions_full, [GtkActionGroup, GtkActionEntry, :uint, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_toggle_actions_full(action_group, entries, n_entries, user_data, destroy)
  # @param [GtkActionGroup] action_group 
  # @param [GtkToggleActionEntry] entries 
  # @param [Integer] n_entries 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_toggle_actions_full, :gtk_action_group_add_toggle_actions_full, [GtkActionGroup, GtkToggleActionEntry, :uint, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_add_radio_actions_full(action_group, entries, n_entries, value, on_change, user_data, destroy)
  # @param [GtkActionGroup] action_group 
  # @param [GtkRadioActionEntry] entries 
  # @param [Integer] n_entries 
  # @param [Integer] value 
  # @param [FFI::Pointer(GCallback)] on_change 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_add_radio_actions_full, :gtk_action_group_add_radio_actions_full, [GtkActionGroup, GtkRadioActionEntry, :uint, :int, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_set_translate_func(action_group, func, data, notify)
  # @param [GtkActionGroup] action_group 
  # @param [Proc(_callback_gtk_translate_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] notify 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_set_translate_func, :gtk_action_group_set_translate_func, [GtkActionGroup, :gtk_translate_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_set_translation_domain(action_group, domain)
  # @param [GtkActionGroup] action_group 
  # @param [String] domain 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_set_translation_domain, :gtk_action_group_set_translation_domain, [GtkActionGroup, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_translate_string(action_group, string)
  # @param [GtkActionGroup] action_group 
  # @param [String] string 
  # @return [String] 
  # @scope class
  attach_function :gtk_action_group_translate_string, :gtk_action_group_translate_string, [GtkActionGroup, :string], :string
  
  # (Not documented)
  # 
  # @method gtk_action_group_emit_connect_proxy(action_group, action, proxy)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @param [GtkWidget] proxy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_emit_connect_proxy, :_gtk_action_group_emit_connect_proxy, [GtkActionGroup, GtkAction, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_emit_disconnect_proxy(action_group, action, proxy)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @param [GtkWidget] proxy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_emit_disconnect_proxy, :_gtk_action_group_emit_disconnect_proxy, [GtkActionGroup, GtkAction, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_emit_pre_activate(action_group, action)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_emit_pre_activate, :_gtk_action_group_emit_pre_activate, [GtkActionGroup, GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_action_group_emit_post_activate(action_group, action)
  # @param [GtkActionGroup] action_group 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_action_group_emit_post_activate, :_gtk_action_group_emit_post_activate, [GtkActionGroup, GtkAction], :void
  
  # (Not documented)
  module GtkActivatableWrappers
    # @param [GtkAction] action 
    # @return [nil] 
    def sync_action_properties(action)
      Gtk.gtk_activatable_sync_action_properties(self, action)
    end
    
    # @param [GtkAction] action 
    # @return [nil] 
    def set_related_action(action)
      Gtk.gtk_activatable_set_related_action(self, action)
    end
    
    # @return [GtkAction] 
    def get_related_action()
      GtkAction.new Gtk.gtk_activatable_get_related_action(self)
    end
    
    # @param [Integer] use_appearance 
    # @return [nil] 
    def set_use_action_appearance(use_appearance)
      Gtk.gtk_activatable_set_use_action_appearance(self, use_appearance)
    end
    
    # @return [Integer] 
    def get_use_action_appearance()
      Gtk.gtk_activatable_get_use_action_appearance(self)
    end
    
    # @param [GtkAction] action 
    # @return [nil] 
    def do_set_related_action(action)
      Gtk.gtk_activatable_do_set_related_action(self, action)
    end
  end
  
  class GtkActivatable < FFI::Struct
    include GtkActivatableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :update ::
  #   (FFI::Pointer(*)) virtual table
  # :sync_action_properties ::
  #   (FFI::Pointer(*)) 
  class GtkActivatableIface < FFI::Struct
    layout :g_iface, :char,
           :update, :pointer,
           :sync_action_properties, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_activatable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_activatable_get_type, :gtk_activatable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_activatable_sync_action_properties(activatable, action)
  # @param [GtkActivatable] activatable 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_activatable_sync_action_properties, :gtk_activatable_sync_action_properties, [GtkActivatable, GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_activatable_set_related_action(activatable, action)
  # @param [GtkActivatable] activatable 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_activatable_set_related_action, :gtk_activatable_set_related_action, [GtkActivatable, GtkAction], :void
  
  # (Not documented)
  # 
  # @method gtk_activatable_get_related_action(activatable)
  # @param [GtkActivatable] activatable 
  # @return [GtkAction] 
  # @scope class
  attach_function :gtk_activatable_get_related_action, :gtk_activatable_get_related_action, [GtkActivatable], GtkAction
  
  # (Not documented)
  # 
  # @method gtk_activatable_set_use_action_appearance(activatable, use_appearance)
  # @param [GtkActivatable] activatable 
  # @param [Integer] use_appearance 
  # @return [nil] 
  # @scope class
  attach_function :gtk_activatable_set_use_action_appearance, :gtk_activatable_set_use_action_appearance, [GtkActivatable, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_activatable_get_use_action_appearance(activatable)
  # @param [GtkActivatable] activatable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_activatable_get_use_action_appearance, :gtk_activatable_get_use_action_appearance, [GtkActivatable], :int
  
  # (Not documented)
  # 
  # @method gtk_activatable_do_set_related_action(activatable, action)
  # @param [GtkActivatable] activatable 
  # @param [GtkAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_activatable_do_set_related_action, :gtk_activatable_do_set_related_action, [GtkActivatable, GtkAction], :void
  
  # (Not documented)
  class GtkAdjustmentPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkAdjustmentPrivate) 
  module GtkAdjustmentWrappers
    # @return [nil] 
    def changed()
      Gtk.gtk_adjustment_changed(self)
    end
    
    # @return [nil] 
    def value_changed()
      Gtk.gtk_adjustment_value_changed(self)
    end
    
    # @param [Float] lower 
    # @param [Float] upper 
    # @return [nil] 
    def clamp_page(lower, upper)
      Gtk.gtk_adjustment_clamp_page(self, lower, upper)
    end
    
    # @return [Float] 
    def get_value()
      Gtk.gtk_adjustment_get_value(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_value(value)
      Gtk.gtk_adjustment_set_value(self, value)
    end
    
    # @return [Float] 
    def get_lower()
      Gtk.gtk_adjustment_get_lower(self)
    end
    
    # @param [Float] lower 
    # @return [nil] 
    def set_lower(lower)
      Gtk.gtk_adjustment_set_lower(self, lower)
    end
    
    # @return [Float] 
    def get_upper()
      Gtk.gtk_adjustment_get_upper(self)
    end
    
    # @param [Float] upper 
    # @return [nil] 
    def set_upper(upper)
      Gtk.gtk_adjustment_set_upper(self, upper)
    end
    
    # @return [Float] 
    def get_step_increment()
      Gtk.gtk_adjustment_get_step_increment(self)
    end
    
    # @param [Float] step_increment 
    # @return [nil] 
    def set_step_increment(step_increment)
      Gtk.gtk_adjustment_set_step_increment(self, step_increment)
    end
    
    # @return [Float] 
    def get_page_increment()
      Gtk.gtk_adjustment_get_page_increment(self)
    end
    
    # @param [Float] page_increment 
    # @return [nil] 
    def set_page_increment(page_increment)
      Gtk.gtk_adjustment_set_page_increment(self, page_increment)
    end
    
    # @return [Float] 
    def get_page_size()
      Gtk.gtk_adjustment_get_page_size(self)
    end
    
    # @param [Float] page_size 
    # @return [nil] 
    def set_page_size(page_size)
      Gtk.gtk_adjustment_set_page_size(self, page_size)
    end
    
    # @param [Float] value 
    # @param [Float] lower 
    # @param [Float] upper 
    # @param [Float] step_increment 
    # @param [Float] page_increment 
    # @param [Float] page_size 
    # @return [nil] 
    def configure(value, lower, upper, step_increment, page_increment, page_size)
      Gtk.gtk_adjustment_configure(self, value, lower, upper, step_increment, page_increment, page_size)
    end
    
    # @return [Float] 
    def get_minimum_increment()
      Gtk.gtk_adjustment_get_minimum_increment(self)
    end
  end
  
  class GtkAdjustment < FFI::Struct
    include GtkAdjustmentWrappers
    layout :parent_instance, :char,
           :priv, GtkAdjustmentPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :value_changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkAdjustmentClass < FFI::Struct
    layout :parent_class, :char,
           :changed, :pointer,
           :value_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_adjustment_get_type, :gtk_adjustment_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size)
  # @param [Float] value 
  # @param [Float] lower 
  # @param [Float] upper 
  # @param [Float] step_increment 
  # @param [Float] page_increment 
  # @param [Float] page_size 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_adjustment_new, :gtk_adjustment_new, [:double, :double, :double, :double, :double, :double], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_adjustment_changed(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_changed, :gtk_adjustment_changed, [GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_value_changed(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_value_changed, :gtk_adjustment_value_changed, [GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_clamp_page(adjustment, lower, upper)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] lower 
  # @param [Float] upper 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_clamp_page, :gtk_adjustment_clamp_page, [GtkAdjustment, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_value(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_value, :gtk_adjustment_get_value, [GtkAdjustment], :double
  
  # (Not documented)
  # 
  # @method gtk_adjustment_set_value(adjustment, value)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_set_value, :gtk_adjustment_set_value, [GtkAdjustment, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_lower(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_lower, :gtk_adjustment_get_lower, [GtkAdjustment], :double
  
  # (Not documented)
  # 
  # @method gtk_adjustment_set_lower(adjustment, lower)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] lower 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_set_lower, :gtk_adjustment_set_lower, [GtkAdjustment, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_upper(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_upper, :gtk_adjustment_get_upper, [GtkAdjustment], :double
  
  # (Not documented)
  # 
  # @method gtk_adjustment_set_upper(adjustment, upper)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] upper 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_set_upper, :gtk_adjustment_set_upper, [GtkAdjustment, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_step_increment(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_step_increment, :gtk_adjustment_get_step_increment, [GtkAdjustment], :double
  
  # (Not documented)
  # 
  # @method gtk_adjustment_set_step_increment(adjustment, step_increment)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] step_increment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_set_step_increment, :gtk_adjustment_set_step_increment, [GtkAdjustment, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_page_increment(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_page_increment, :gtk_adjustment_get_page_increment, [GtkAdjustment], :double
  
  # (Not documented)
  # 
  # @method gtk_adjustment_set_page_increment(adjustment, page_increment)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] page_increment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_set_page_increment, :gtk_adjustment_set_page_increment, [GtkAdjustment, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_page_size(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_page_size, :gtk_adjustment_get_page_size, [GtkAdjustment], :double
  
  # (Not documented)
  # 
  # @method gtk_adjustment_set_page_size(adjustment, page_size)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] page_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_set_page_size, :gtk_adjustment_set_page_size, [GtkAdjustment, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_configure(adjustment, value, lower, upper, step_increment, page_increment, page_size)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] value 
  # @param [Float] lower 
  # @param [Float] upper 
  # @param [Float] step_increment 
  # @param [Float] page_increment 
  # @param [Float] page_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_adjustment_configure, :gtk_adjustment_configure, [GtkAdjustment, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_adjustment_get_minimum_increment(adjustment)
  # @param [GtkAdjustment] adjustment 
  # @return [Float] 
  # @scope class
  attach_function :gtk_adjustment_get_minimum_increment, :gtk_adjustment_get_minimum_increment, [GtkAdjustment], :double
  
  # (Not documented)
  class GtkAlignmentPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkAlignmentPrivate) < private >
  module GtkAlignmentWrappers
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @param [Float] xscale 
    # @param [Float] yscale 
    # @return [nil] 
    def set(xalign, yalign, xscale, yscale)
      Gtk.gtk_alignment_set(self, xalign, yalign, xscale, yscale)
    end
    
    # @param [Integer] padding_top 
    # @param [Integer] padding_bottom 
    # @param [Integer] padding_left 
    # @param [Integer] padding_right 
    # @return [nil] 
    def set_padding(padding_top, padding_bottom, padding_left, padding_right)
      Gtk.gtk_alignment_set_padding(self, padding_top, padding_bottom, padding_left, padding_right)
    end
    
    # @param [FFI::Pointer(*Guint)] padding_top 
    # @param [FFI::Pointer(*Guint)] padding_bottom 
    # @param [FFI::Pointer(*Guint)] padding_left 
    # @param [FFI::Pointer(*Guint)] padding_right 
    # @return [nil] 
    def get_padding(padding_top, padding_bottom, padding_left, padding_right)
      Gtk.gtk_alignment_get_padding(self, padding_top, padding_bottom, padding_left, padding_right)
    end
  end
  
  class GtkAlignment < FFI::Struct
    include GtkAlignmentWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkAlignmentPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkAlignmentClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_alignment_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_alignment_get_type, :gtk_alignment_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_alignment_new(xalign, yalign, xscale, yscale)
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @param [Float] xscale 
  # @param [Float] yscale 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_alignment_new, :gtk_alignment_new, [:float, :float, :float, :float], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_alignment_set(alignment, xalign, yalign, xscale, yscale)
  # @param [GtkAlignment] alignment 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @param [Float] xscale 
  # @param [Float] yscale 
  # @return [nil] 
  # @scope class
  attach_function :gtk_alignment_set, :gtk_alignment_set, [GtkAlignment, :float, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_alignment_set_padding(alignment, padding_top, padding_bottom, padding_left, padding_right)
  # @param [GtkAlignment] alignment 
  # @param [Integer] padding_top 
  # @param [Integer] padding_bottom 
  # @param [Integer] padding_left 
  # @param [Integer] padding_right 
  # @return [nil] 
  # @scope class
  attach_function :gtk_alignment_set_padding, :gtk_alignment_set_padding, [GtkAlignment, :uint, :uint, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_alignment_get_padding(alignment, padding_top, padding_bottom, padding_left, padding_right)
  # @param [GtkAlignment] alignment 
  # @param [FFI::Pointer(*Guint)] padding_top 
  # @param [FFI::Pointer(*Guint)] padding_bottom 
  # @param [FFI::Pointer(*Guint)] padding_left 
  # @param [FFI::Pointer(*Guint)] padding_right 
  # @return [nil] 
  # @scope class
  attach_function :gtk_alignment_get_padding, :gtk_alignment_get_padding, [GtkAlignment, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  module GtkAppChooserWrappers
    # @return [FFI::Pointer(*GAppInfo)] 
    def get_app_info()
      Gtk.gtk_app_chooser_get_app_info(self)
    end
    
    # @return [String] 
    def get_content_type()
      Gtk.gtk_app_chooser_get_content_type(self)
    end
    
    # @return [nil] 
    def refresh()
      Gtk.gtk_app_chooser_refresh(self)
    end
  end
  
  class GtkAppChooser < FFI::Struct
    include GtkAppChooserWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_get_type, :gtk_app_chooser_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_get_app_info(self_)
  # @param [GtkAppChooser] self_ 
  # @return [FFI::Pointer(*GAppInfo)] 
  # @scope class
  attach_function :gtk_app_chooser_get_app_info, :gtk_app_chooser_get_app_info, [GtkAppChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_get_content_type(self_)
  # @param [GtkAppChooser] self_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_app_chooser_get_content_type, :gtk_app_chooser_get_content_type, [GtkAppChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_refresh(self_)
  # @param [GtkAppChooser] self_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_refresh, :gtk_app_chooser_refresh, [GtkAppChooser], :void
  
  # (Not documented)
  class GtkAppChooserDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkAppChooserDialogPrivate) < private >
  module GtkAppChooserDialogWrappers
    # @return [GtkWidget] 
    def get_widget()
      GtkWidget.new Gtk.gtk_app_chooser_dialog_get_widget(self)
    end
    
    # @param [String] heading 
    # @return [nil] 
    def set_heading(heading)
      Gtk.gtk_app_chooser_dialog_set_heading(self, heading)
    end
    
    # @return [String] 
    def get_heading()
      Gtk.gtk_app_chooser_dialog_get_heading(self)
    end
  end
  
  class GtkAppChooserDialog < FFI::Struct
    include GtkAppChooserDialogWrappers
    layout :parent, GtkDialog.by_value,
           :priv, GtkAppChooserDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) padding for future class expansion
  class GtkAppChooserDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :padding, [:pointer, 16]
  end
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_dialog_get_type, :gtk_app_chooser_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_dialog_new(parent, flags, file)
  # @param [GtkWindow] parent 
  # @param [Symbol from _enum_gtk_dialog_flags_] flags 
  # @param [FFI::Pointer(*GFile)] file 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_app_chooser_dialog_new, :gtk_app_chooser_dialog_new, [GtkWindow, :gtk_dialog_flags, :pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_dialog_new_for_content_type(parent, flags, content_type)
  # @param [GtkWindow] parent 
  # @param [Symbol from _enum_gtk_dialog_flags_] flags 
  # @param [String] content_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_app_chooser_dialog_new_for_content_type, :gtk_app_chooser_dialog_new_for_content_type, [GtkWindow, :gtk_dialog_flags, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_dialog_get_widget(self_)
  # @param [GtkAppChooserDialog] self_ 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_app_chooser_dialog_get_widget, :gtk_app_chooser_dialog_get_widget, [GtkAppChooserDialog], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_dialog_set_heading(self_, heading)
  # @param [GtkAppChooserDialog] self_ 
  # @param [String] heading 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_dialog_set_heading, :gtk_app_chooser_dialog_set_heading, [GtkAppChooserDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_dialog_get_heading(self_)
  # @param [GtkAppChooserDialog] self_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_app_chooser_dialog_get_heading, :gtk_app_chooser_dialog_get_heading, [GtkAppChooserDialog], :string
  
  # (Not documented)
  class GtkBoxPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkBoxPrivate) < private >
  module GtkBoxWrappers
    # @param [GtkWidget] child 
    # @param [Integer] expand 
    # @param [Integer] fill 
    # @param [Integer] padding 
    # @return [nil] 
    def pack_start(child, expand, fill, padding)
      Gtk.gtk_box_pack_start(self, child, expand, fill, padding)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] expand 
    # @param [Integer] fill 
    # @param [Integer] padding 
    # @return [nil] 
    def pack_end(child, expand, fill, padding)
      Gtk.gtk_box_pack_end(self, child, expand, fill, padding)
    end
    
    # @param [Integer] homogeneous 
    # @return [nil] 
    def set_homogeneous(homogeneous)
      Gtk.gtk_box_set_homogeneous(self, homogeneous)
    end
    
    # @return [Integer] 
    def get_homogeneous()
      Gtk.gtk_box_get_homogeneous(self)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_spacing(spacing)
      Gtk.gtk_box_set_spacing(self, spacing)
    end
    
    # @return [Integer] 
    def get_spacing()
      Gtk.gtk_box_get_spacing(self)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] position 
    # @return [nil] 
    def reorder_child(child, position)
      Gtk.gtk_box_reorder_child(self, child, position)
    end
    
    # @param [GtkWidget] child 
    # @param [FFI::Pointer(*Gboolean)] expand 
    # @param [FFI::Pointer(*Gboolean)] fill 
    # @param [FFI::Pointer(*Guint)] padding 
    # @param [FFI::Pointer(*GtkPackType)] pack_type 
    # @return [nil] 
    def query_child_packing(child, expand, fill, padding, pack_type)
      Gtk.gtk_box_query_child_packing(self, child, expand, fill, padding, pack_type)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] expand 
    # @param [Integer] fill 
    # @param [Integer] padding 
    # @param [Symbol from _enum_gtk_pack_type_] pack_type 
    # @return [nil] 
    def set_child_packing(child, expand, fill, padding, pack_type)
      Gtk.gtk_box_set_child_packing(self, child, expand, fill, padding, pack_type)
    end
  end
  
  class GtkBox < FFI::Struct
    include GtkBoxWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkBoxPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkBoxClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_box_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_box_get_type, :gtk_box_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_box_new(orientation, spacing)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @param [Integer] spacing 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_box_new, :gtk_box_new, [:gtk_orientation, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_box_pack_start(box, child, expand, fill, padding)
  # @param [GtkBox] box 
  # @param [GtkWidget] child 
  # @param [Integer] expand 
  # @param [Integer] fill 
  # @param [Integer] padding 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_pack_start, :gtk_box_pack_start, [GtkBox, GtkWidget, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_box_pack_end(box, child, expand, fill, padding)
  # @param [GtkBox] box 
  # @param [GtkWidget] child 
  # @param [Integer] expand 
  # @param [Integer] fill 
  # @param [Integer] padding 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_pack_end, :gtk_box_pack_end, [GtkBox, GtkWidget, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_box_set_homogeneous(box, homogeneous)
  # @param [GtkBox] box 
  # @param [Integer] homogeneous 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_set_homogeneous, :gtk_box_set_homogeneous, [GtkBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_box_get_homogeneous(box)
  # @param [GtkBox] box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_box_get_homogeneous, :gtk_box_get_homogeneous, [GtkBox], :int
  
  # (Not documented)
  # 
  # @method gtk_box_set_spacing(box, spacing)
  # @param [GtkBox] box 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_set_spacing, :gtk_box_set_spacing, [GtkBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_box_get_spacing(box)
  # @param [GtkBox] box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_box_get_spacing, :gtk_box_get_spacing, [GtkBox], :int
  
  # (Not documented)
  # 
  # @method gtk_box_reorder_child(box, child, position)
  # @param [GtkBox] box 
  # @param [GtkWidget] child 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_reorder_child, :gtk_box_reorder_child, [GtkBox, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_box_query_child_packing(box, child, expand, fill, padding, pack_type)
  # @param [GtkBox] box 
  # @param [GtkWidget] child 
  # @param [FFI::Pointer(*Gboolean)] expand 
  # @param [FFI::Pointer(*Gboolean)] fill 
  # @param [FFI::Pointer(*Guint)] padding 
  # @param [FFI::Pointer(*GtkPackType)] pack_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_query_child_packing, :gtk_box_query_child_packing, [GtkBox, GtkWidget, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_box_set_child_packing(box, child, expand, fill, padding, pack_type)
  # @param [GtkBox] box 
  # @param [GtkWidget] child 
  # @param [Integer] expand 
  # @param [Integer] fill 
  # @param [Integer] padding 
  # @param [Symbol from _enum_gtk_pack_type_] pack_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_box_set_child_packing, :gtk_box_set_child_packing, [GtkBox, GtkWidget, :int, :int, :uint, :gtk_pack_type], :void
  
  # (Not documented)
  class GtkAppChooserWidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkAppChooserWidgetPrivate) < private >
  module GtkAppChooserWidgetWrappers
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_default(setting)
      Gtk.gtk_app_chooser_widget_set_show_default(self, setting)
    end
    
    # @return [Integer] 
    def get_show_default()
      Gtk.gtk_app_chooser_widget_get_show_default(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_recommended(setting)
      Gtk.gtk_app_chooser_widget_set_show_recommended(self, setting)
    end
    
    # @return [Integer] 
    def get_show_recommended()
      Gtk.gtk_app_chooser_widget_get_show_recommended(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_fallback(setting)
      Gtk.gtk_app_chooser_widget_set_show_fallback(self, setting)
    end
    
    # @return [Integer] 
    def get_show_fallback()
      Gtk.gtk_app_chooser_widget_get_show_fallback(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_other(setting)
      Gtk.gtk_app_chooser_widget_set_show_other(self, setting)
    end
    
    # @return [Integer] 
    def get_show_other()
      Gtk.gtk_app_chooser_widget_get_show_other(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_all(setting)
      Gtk.gtk_app_chooser_widget_set_show_all(self, setting)
    end
    
    # @return [Integer] 
    def get_show_all()
      Gtk.gtk_app_chooser_widget_get_show_all(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_default_text(text)
      Gtk.gtk_app_chooser_widget_set_default_text(self, text)
    end
    
    # @return [String] 
    def get_default_text()
      Gtk.gtk_app_chooser_widget_get_default_text(self)
    end
  end
  
  class GtkAppChooserWidget < FFI::Struct
    include GtkAppChooserWidgetWrappers
    layout :parent, GtkBox.by_value,
           :priv, GtkAppChooserWidgetPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :application_selected ::
  #   (FFI::Pointer(*)) 
  # :application_activated ::
  #   (FFI::Pointer(*)) 
  # :populate_popup ::
  #   (FFI::Pointer(*)) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) padding for future class expansion
  class GtkAppChooserWidgetClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :application_selected, :pointer,
           :application_activated, :pointer,
           :populate_popup, :pointer,
           :padding, [:pointer, 16]
  end
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_type, :gtk_app_chooser_widget_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_new(content_type)
  # @param [String] content_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_app_chooser_widget_new, :gtk_app_chooser_widget_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_set_show_default(self_, setting)
  # @param [GtkAppChooserWidget] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_widget_set_show_default, :gtk_app_chooser_widget_set_show_default, [GtkAppChooserWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_show_default(self_)
  # @param [GtkAppChooserWidget] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_show_default, :gtk_app_chooser_widget_get_show_default, [GtkAppChooserWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_set_show_recommended(self_, setting)
  # @param [GtkAppChooserWidget] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_widget_set_show_recommended, :gtk_app_chooser_widget_set_show_recommended, [GtkAppChooserWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_show_recommended(self_)
  # @param [GtkAppChooserWidget] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_show_recommended, :gtk_app_chooser_widget_get_show_recommended, [GtkAppChooserWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_set_show_fallback(self_, setting)
  # @param [GtkAppChooserWidget] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_widget_set_show_fallback, :gtk_app_chooser_widget_set_show_fallback, [GtkAppChooserWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_show_fallback(self_)
  # @param [GtkAppChooserWidget] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_show_fallback, :gtk_app_chooser_widget_get_show_fallback, [GtkAppChooserWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_set_show_other(self_, setting)
  # @param [GtkAppChooserWidget] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_widget_set_show_other, :gtk_app_chooser_widget_set_show_other, [GtkAppChooserWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_show_other(self_)
  # @param [GtkAppChooserWidget] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_show_other, :gtk_app_chooser_widget_get_show_other, [GtkAppChooserWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_set_show_all(self_, setting)
  # @param [GtkAppChooserWidget] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_widget_set_show_all, :gtk_app_chooser_widget_set_show_all, [GtkAppChooserWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_show_all(self_)
  # @param [GtkAppChooserWidget] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_show_all, :gtk_app_chooser_widget_get_show_all, [GtkAppChooserWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_set_default_text(self_, text)
  # @param [GtkAppChooserWidget] self_ 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_widget_set_default_text, :gtk_app_chooser_widget_set_default_text, [GtkAppChooserWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_widget_get_default_text(self_)
  # @param [GtkAppChooserWidget] self_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_app_chooser_widget_get_default_text, :gtk_app_chooser_widget_get_default_text, [GtkAppChooserWidget], :string
  
  # (Not documented)
  module GtkTreePathWrappers
    # @return [String] 
    def to_string()
      Gtk.gtk_tree_path_to_string(self)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def append_index(index)
      Gtk.gtk_tree_path_append_index(self, index)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def prepend_index(index)
      Gtk.gtk_tree_path_prepend_index(self, index)
    end
    
    # @return [Integer] 
    def get_depth()
      Gtk.gtk_tree_path_get_depth(self)
    end
    
    # @return [FFI::Pointer(*Gint)] 
    def get_indices()
      Gtk.gtk_tree_path_get_indices(self)
    end
    
    # @param [FFI::Pointer(*Gint)] depth 
    # @return [FFI::Pointer(*Gint)] 
    def get_indices_with_depth(depth)
      Gtk.gtk_tree_path_get_indices_with_depth(self, depth)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_tree_path_free(self)
    end
    
    # @return [GtkTreePath] 
    def copy()
      GtkTreePath.new Gtk.gtk_tree_path_copy(self)
    end
    
    # @param [FFI::Pointer(*GtkTreePath)] b 
    # @return [Integer] 
    def compare(b)
      Gtk.gtk_tree_path_compare(self, b)
    end
    
    # @return [nil] 
    def next_()
      Gtk.gtk_tree_path_next(self)
    end
    
    # @return [Integer] 
    def prev()
      Gtk.gtk_tree_path_prev(self)
    end
    
    # @return [Integer] 
    def up()
      Gtk.gtk_tree_path_up(self)
    end
    
    # @return [nil] 
    def down()
      Gtk.gtk_tree_path_down(self)
    end
    
    # @param [FFI::Pointer(*GtkTreePath)] descendant 
    # @return [Integer] 
    def is_ancestor(descendant)
      Gtk.gtk_tree_path_is_ancestor(self, descendant)
    end
    
    # @param [FFI::Pointer(*GtkTreePath)] ancestor 
    # @return [Integer] 
    def is_descendant(ancestor)
      Gtk.gtk_tree_path_is_descendant(self, ancestor)
    end
  end
  
  class GtkTreePath < FFI::Struct
    include GtkTreePathWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkTreeRowReferenceWrappers
    # @return [GtkTreePath] 
    def get_path()
      GtkTreePath.new Gtk.gtk_tree_row_reference_get_path(self)
    end
    
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_tree_row_reference_get_model(self)
    end
    
    # @return [Integer] 
    def valid()
      Gtk.gtk_tree_row_reference_valid(self)
    end
    
    # @return [GtkTreeRowReference] 
    def copy()
      GtkTreeRowReference.new Gtk.gtk_tree_row_reference_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_tree_row_reference_free(self)
    end
  end
  
  class GtkTreeRowReference < FFI::Struct
    include GtkTreeRowReferenceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkTreeModelWrappers
    # @return [Symbol from _enum_gtk_tree_model_flags_] 
    def get_flags()
      Gtk.gtk_tree_model_get_flags(self)
    end
    
    # @return [Integer] 
    def get_n_columns()
      Gtk.gtk_tree_model_get_n_columns(self)
    end
    
    # @param [Integer] index 
    # @return [Integer] 
    def get_column_type(index)
      Gtk.gtk_tree_model_get_column_type(self, index)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def get_iter(iter, path)
      Gtk.gtk_tree_model_get_iter(self, iter, path)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [String] path_string 
    # @return [Integer] 
    def get_iter_from_string(iter, path_string)
      Gtk.gtk_tree_model_get_iter_from_string(self, iter, path_string)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [String] 
    def get_string_from_iter(iter)
      Gtk.gtk_tree_model_get_string_from_iter(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [Integer] 
    def get_iter_first(iter)
      Gtk.gtk_tree_model_get_iter_first(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [GtkTreePath] 
    def get_path(iter)
      GtkTreePath.new Gtk.gtk_tree_model_get_path(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [Integer] column 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def get_value(iter, column, value)
      Gtk.gtk_tree_model_get_value(self, iter, column, value)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [Integer] 
    def iter_previous(iter)
      Gtk.gtk_tree_model_iter_previous(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [Integer] 
    def iter_next(iter)
      Gtk.gtk_tree_model_iter_next(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [FFI::Pointer(*GtkTreeIter)] parent 
    # @return [Integer] 
    def iter_children(iter, parent)
      Gtk.gtk_tree_model_iter_children(self, iter, parent)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [Integer] 
    def iter_has_child(iter)
      Gtk.gtk_tree_model_iter_has_child(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [Integer] 
    def iter_n_children(iter)
      Gtk.gtk_tree_model_iter_n_children(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [FFI::Pointer(*GtkTreeIter)] parent 
    # @param [Integer] n 
    # @return [Integer] 
    def iter_nth_child(iter, parent, n)
      Gtk.gtk_tree_model_iter_nth_child(self, iter, parent, n)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [FFI::Pointer(*GtkTreeIter)] child 
    # @return [Integer] 
    def iter_parent(iter, child)
      Gtk.gtk_tree_model_iter_parent(self, iter, child)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [nil] 
    def ref_node(iter)
      Gtk.gtk_tree_model_ref_node(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [nil] 
    def unref_node(iter)
      Gtk.gtk_tree_model_unref_node(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [nil] 
    def get(iter)
      Gtk.gtk_tree_model_get(self, iter)
    end
    
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [String] var_args 
    # @return [nil] 
    def get_valist(iter, var_args)
      Gtk.gtk_tree_model_get_valist(self, iter, var_args)
    end
    
    # @param [Proc(_callback_gtk_tree_model_foreach_func_)] func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def foreach(func, user_data)
      Gtk.gtk_tree_model_foreach(self, func, user_data)
    end
    
    # @param [GtkTreePath] path 
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [nil] 
    def row_changed(path, iter)
      Gtk.gtk_tree_model_row_changed(self, path, iter)
    end
    
    # @param [GtkTreePath] path 
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [nil] 
    def row_inserted(path, iter)
      Gtk.gtk_tree_model_row_inserted(self, path, iter)
    end
    
    # @param [GtkTreePath] path 
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @return [nil] 
    def row_has_child_toggled(path, iter)
      Gtk.gtk_tree_model_row_has_child_toggled(self, path, iter)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def row_deleted(path)
      Gtk.gtk_tree_model_row_deleted(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @param [FFI::Pointer(*GtkTreeIter)] iter 
    # @param [FFI::Pointer(*Gint)] new_order 
    # @return [nil] 
    def rows_reordered(path, iter, new_order)
      Gtk.gtk_tree_model_rows_reordered(self, path, iter, new_order)
    end
    
    # @param [GtkTreePath] root 
    # @return [GtkTreeModel] 
    def filter_new(root)
      GtkTreeModel.new Gtk.gtk_tree_model_filter_new(self, root)
    end
    
    # @return [GtkTreeModel] 
    def sort_new_with_model()
      GtkTreeModel.new Gtk.gtk_tree_model_sort_new_with_model(self)
    end
  end
  
  class GtkTreeModel < FFI::Struct
    include GtkTreeModelWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_model_foreach_func_(model, path, iter, data)
  # @param [GtkTreeModel] model 
  # @param [GtkTreePath] path 
  # @param [FFI::Pointer(*GtkTreeIter)] iter 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_model_foreach_func, [GtkTreeModel, GtkTreePath, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_tree_model_flags).</em>
  # 
  # === Options:
  # :iters_persist ::
  #   
  # :list_only ::
  #   
  # 
  # @method _enum_gtk_tree_model_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_tree_model_flags, [
    :iters_persist, 1,
    :list_only, 2
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :stamp ::
  #   (Integer) 
  # :user_data ::
  #   (FFI::Pointer(Gpointer)) 
  # :user_data2 ::
  #   (FFI::Pointer(Gpointer)) 
  # :user_data3 ::
  #   (FFI::Pointer(Gpointer)) 
  module GtkTreeIterWrappers
    # @return [GtkTreeIter] 
    def copy()
      GtkTreeIter.new Gtk.gtk_tree_iter_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_tree_iter_free(self)
    end
  end
  
  class GtkTreeIter < FFI::Struct
    include GtkTreeIterWrappers
    layout :stamp, :int,
           :user_data, :pointer,
           :user_data2, :pointer,
           :user_data3, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :row_changed ::
  #   (FFI::Pointer(*)) Signals
  # :row_inserted ::
  #   (FFI::Pointer(*)) 
  # :row_has_child_toggled ::
  #   (FFI::Pointer(*)) 
  # :row_deleted ::
  #   (FFI::Pointer(*)) 
  # :rows_reordered ::
  #   (FFI::Pointer(*)) 
  # :get_flags ::
  #   (FFI::Pointer(*)) Virtual Table
  # :get_n_columns ::
  #   (FFI::Pointer(*)) 
  # :get_column_type ::
  #   (FFI::Pointer(*)) 
  # :get_iter ::
  #   (FFI::Pointer(*)) 
  # :get_path ::
  #   (FFI::Pointer(*)) 
  # :get_value ::
  #   (FFI::Pointer(*)) 
  # :iter_next ::
  #   (FFI::Pointer(*)) 
  # :iter_previous ::
  #   (FFI::Pointer(*)) 
  # :iter_children ::
  #   (FFI::Pointer(*)) 
  # :iter_has_child ::
  #   (FFI::Pointer(*)) 
  # :iter_n_children ::
  #   (FFI::Pointer(*)) 
  # :iter_nth_child ::
  #   (FFI::Pointer(*)) 
  # :iter_parent ::
  #   (FFI::Pointer(*)) 
  # :ref_node ::
  #   (FFI::Pointer(*)) 
  # :unref_node ::
  #   (FFI::Pointer(*)) 
  class GtkTreeModelIface < FFI::Struct
    layout :g_iface, :char,
           :row_changed, :pointer,
           :row_inserted, :pointer,
           :row_has_child_toggled, :pointer,
           :row_deleted, :pointer,
           :rows_reordered, :pointer,
           :get_flags, :pointer,
           :get_n_columns, :pointer,
           :get_column_type, :pointer,
           :get_iter, :pointer,
           :get_path, :pointer,
           :get_value, :pointer,
           :iter_next, :pointer,
           :iter_previous, :pointer,
           :iter_children, :pointer,
           :iter_has_child, :pointer,
           :iter_n_children, :pointer,
           :iter_nth_child, :pointer,
           :iter_parent, :pointer,
           :ref_node, :pointer,
           :unref_node, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_path_new()
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_path_new, :gtk_tree_path_new, [], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_path_new_from_string(path)
  # @param [String] path 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_path_new_from_string, :gtk_tree_path_new_from_string, [:string], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_path_new_from_indices(first_index)
  # @param [Integer] first_index 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_path_new_from_indices, :gtk_tree_path_new_from_indices, [:int], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_path_to_string(path)
  # @param [GtkTreePath] path 
  # @return [String] 
  # @scope class
  attach_function :gtk_tree_path_to_string, :gtk_tree_path_to_string, [GtkTreePath], :string
  
  # (Not documented)
  # 
  # @method gtk_tree_path_new_first()
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_path_new_first, :gtk_tree_path_new_first, [], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_path_append_index(path, index)
  # @param [GtkTreePath] path 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_path_append_index, :gtk_tree_path_append_index, [GtkTreePath, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_path_prepend_index(path, index)
  # @param [GtkTreePath] path 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_path_prepend_index, :gtk_tree_path_prepend_index, [GtkTreePath, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_path_get_depth(path)
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_get_depth, :gtk_tree_path_get_depth, [GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_path_get_indices(path)
  # @param [GtkTreePath] path 
  # @return [FFI::Pointer(*Gint)] 
  # @scope class
  attach_function :gtk_tree_path_get_indices, :gtk_tree_path_get_indices, [GtkTreePath], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_path_get_indices_with_depth(path, depth)
  # @param [GtkTreePath] path 
  # @param [FFI::Pointer(*Gint)] depth 
  # @return [FFI::Pointer(*Gint)] 
  # @scope class
  attach_function :gtk_tree_path_get_indices_with_depth, :gtk_tree_path_get_indices_with_depth, [GtkTreePath, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_path_free(path)
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_path_free, :gtk_tree_path_free, [GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_path_copy(path)
  # @param [GtkTreePath] path 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_path_copy, :gtk_tree_path_copy, [GtkTreePath], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_path_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_get_type, :gtk_tree_path_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_path_compare(a, b)
  # @param [GtkTreePath] a 
  # @param [GtkTreePath] b 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_compare, :gtk_tree_path_compare, [GtkTreePath, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_path_next(path)
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_path_next, :gtk_tree_path_next, [GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_path_prev(path)
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_prev, :gtk_tree_path_prev, [GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_path_up(path)
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_up, :gtk_tree_path_up, [GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_path_down(path)
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_path_down, :gtk_tree_path_down, [GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_path_is_ancestor(path, descendant)
  # @param [GtkTreePath] path 
  # @param [GtkTreePath] descendant 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_is_ancestor, :gtk_tree_path_is_ancestor, [GtkTreePath, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_path_is_descendant(path, ancestor)
  # @param [GtkTreePath] path 
  # @param [GtkTreePath] ancestor 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_path_is_descendant, :gtk_tree_path_is_descendant, [GtkTreePath, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_row_reference_get_type, :gtk_tree_row_reference_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_new(model, path)
  # @param [GtkTreeModel] model 
  # @param [GtkTreePath] path 
  # @return [GtkTreeRowReference] 
  # @scope class
  attach_function :gtk_tree_row_reference_new, :gtk_tree_row_reference_new, [GtkTreeModel, GtkTreePath], GtkTreeRowReference
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_new_proxy(proxy, model, path)
  # @param [FFI::Pointer(*GObject)] proxy 
  # @param [GtkTreeModel] model 
  # @param [GtkTreePath] path 
  # @return [GtkTreeRowReference] 
  # @scope class
  attach_function :gtk_tree_row_reference_new_proxy, :gtk_tree_row_reference_new_proxy, [:pointer, GtkTreeModel, GtkTreePath], GtkTreeRowReference
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_get_path(reference)
  # @param [GtkTreeRowReference] reference 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_row_reference_get_path, :gtk_tree_row_reference_get_path, [GtkTreeRowReference], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_get_model(reference)
  # @param [GtkTreeRowReference] reference 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_tree_row_reference_get_model, :gtk_tree_row_reference_get_model, [GtkTreeRowReference], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_valid(reference)
  # @param [GtkTreeRowReference] reference 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_row_reference_valid, :gtk_tree_row_reference_valid, [GtkTreeRowReference], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_copy(reference)
  # @param [GtkTreeRowReference] reference 
  # @return [GtkTreeRowReference] 
  # @scope class
  attach_function :gtk_tree_row_reference_copy, :gtk_tree_row_reference_copy, [GtkTreeRowReference], GtkTreeRowReference
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_free(reference)
  # @param [GtkTreeRowReference] reference 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_row_reference_free, :gtk_tree_row_reference_free, [GtkTreeRowReference], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_inserted(proxy, path)
  # @param [FFI::Pointer(*GObject)] proxy 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_row_reference_inserted, :gtk_tree_row_reference_inserted, [:pointer, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_deleted(proxy, path)
  # @param [FFI::Pointer(*GObject)] proxy 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_row_reference_deleted, :gtk_tree_row_reference_deleted, [:pointer, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_row_reference_reordered(proxy, path, iter, new_order)
  # @param [FFI::Pointer(*GObject)] proxy 
  # @param [GtkTreePath] path 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(*Gint)] new_order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_row_reference_reordered, :gtk_tree_row_reference_reordered, [:pointer, GtkTreePath, GtkTreeIter, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_iter_copy(iter)
  # @param [GtkTreeIter] iter 
  # @return [GtkTreeIter] 
  # @scope class
  attach_function :gtk_tree_iter_copy, :gtk_tree_iter_copy, [GtkTreeIter], GtkTreeIter
  
  # (Not documented)
  # 
  # @method gtk_tree_iter_free(iter)
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_iter_free, :gtk_tree_iter_free, [GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_iter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_iter_get_type, :gtk_tree_iter_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_get_type, :gtk_tree_model_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_flags(tree_model)
  # @param [GtkTreeModel] tree_model 
  # @return [Symbol from _enum_gtk_tree_model_flags_] 
  # @scope class
  attach_function :gtk_tree_model_get_flags, :gtk_tree_model_get_flags, [GtkTreeModel], :gtk_tree_model_flags
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_n_columns(tree_model)
  # @param [GtkTreeModel] tree_model 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_get_n_columns, :gtk_tree_model_get_n_columns, [GtkTreeModel], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_column_type(tree_model, index)
  # @param [GtkTreeModel] tree_model 
  # @param [Integer] index 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_get_column_type, :gtk_tree_model_get_column_type, [GtkTreeModel, :int], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_iter(tree_model, iter, path)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_get_iter, :gtk_tree_model_get_iter, [GtkTreeModel, GtkTreeIter, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_iter_from_string(tree_model, iter, path_string)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [String] path_string 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_get_iter_from_string, :gtk_tree_model_get_iter_from_string, [GtkTreeModel, GtkTreeIter, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_string_from_iter(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [String] 
  # @scope class
  attach_function :gtk_tree_model_get_string_from_iter, :gtk_tree_model_get_string_from_iter, [GtkTreeModel, GtkTreeIter], :string
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_iter_first(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_get_iter_first, :gtk_tree_model_get_iter_first, [GtkTreeModel, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_path(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_model_get_path, :gtk_tree_model_get_path, [GtkTreeModel, GtkTreeIter], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_value(tree_model, iter, column, value)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [Integer] column 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_get_value, :gtk_tree_model_get_value, [GtkTreeModel, GtkTreeIter, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_previous(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_previous, :gtk_tree_model_iter_previous, [GtkTreeModel, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_next(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_next, :gtk_tree_model_iter_next, [GtkTreeModel, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_children(tree_model, iter, parent)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_children, :gtk_tree_model_iter_children, [GtkTreeModel, GtkTreeIter, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_has_child(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_has_child, :gtk_tree_model_iter_has_child, [GtkTreeModel, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_n_children(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_n_children, :gtk_tree_model_iter_n_children, [GtkTreeModel, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_nth_child(tree_model, iter, parent, n)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @param [Integer] n 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_nth_child, :gtk_tree_model_iter_nth_child, [GtkTreeModel, GtkTreeIter, GtkTreeIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_iter_parent(tree_model, iter, child)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] child 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_iter_parent, :gtk_tree_model_iter_parent, [GtkTreeModel, GtkTreeIter, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_ref_node(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_ref_node, :gtk_tree_model_ref_node, [GtkTreeModel, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_unref_node(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_unref_node, :gtk_tree_model_unref_node, [GtkTreeModel, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get(tree_model, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_get, :gtk_tree_model_get, [GtkTreeModel, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_get_valist(tree_model, iter, var_args)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_get_valist, :gtk_tree_model_get_valist, [GtkTreeModel, GtkTreeIter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_foreach(model, func, user_data)
  # @param [GtkTreeModel] model 
  # @param [Proc(_callback_gtk_tree_model_foreach_func_)] func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_foreach, :gtk_tree_model_foreach, [GtkTreeModel, :gtk_tree_model_foreach_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_row_changed(tree_model, path, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreePath] path 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_row_changed, :gtk_tree_model_row_changed, [GtkTreeModel, GtkTreePath, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_row_inserted(tree_model, path, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreePath] path 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_row_inserted, :gtk_tree_model_row_inserted, [GtkTreeModel, GtkTreePath, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_row_has_child_toggled(tree_model, path, iter)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreePath] path 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_row_has_child_toggled, :gtk_tree_model_row_has_child_toggled, [GtkTreeModel, GtkTreePath, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_row_deleted(tree_model, path)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_row_deleted, :gtk_tree_model_row_deleted, [GtkTreeModel, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_rows_reordered(tree_model, path, iter, new_order)
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreePath] path 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(*Gint)] new_order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_rows_reordered, :gtk_tree_model_rows_reordered, [GtkTreeModel, GtkTreePath, GtkTreeIter, :pointer], :void
  
  # (Not documented)
  module GtkCellEditableWrappers
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @return [nil] 
    def start_editing(event)
      Gtk.gtk_cell_editable_start_editing(self, event)
    end
    
    # @return [nil] 
    def editing_done()
      Gtk.gtk_cell_editable_editing_done(self)
    end
    
    # @return [nil] 
    def remove_widget()
      Gtk.gtk_cell_editable_remove_widget(self)
    end
  end
  
  class GtkCellEditable < FFI::Struct
    include GtkCellEditableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :editing_done ::
  #   (FFI::Pointer(*)) signals
  # :remove_widget ::
  #   (FFI::Pointer(*)) 
  # :start_editing ::
  #   (FFI::Pointer(*)) virtual table
  class GtkCellEditableIface < FFI::Struct
    layout :g_iface, :char,
           :editing_done, :pointer,
           :remove_widget, :pointer,
           :start_editing, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_editable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_editable_get_type, :gtk_cell_editable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_editable_start_editing(cell_editable, event)
  # @param [GtkCellEditable] cell_editable 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_editable_start_editing, :gtk_cell_editable_start_editing, [GtkCellEditable, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_editable_editing_done(cell_editable)
  # @param [GtkCellEditable] cell_editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_editable_editing_done, :gtk_cell_editable_editing_done, [GtkCellEditable], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_editable_remove_widget(cell_editable)
  # @param [GtkCellEditable] cell_editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_editable_remove_widget, :gtk_cell_editable_remove_widget, [GtkCellEditable], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_cell_renderer_state).</em>
  # 
  # === Options:
  # :selected ::
  #   
  # :prelit ::
  #   
  # :insensitive ::
  #   
  # :sorted ::
  #   this flag means the cell is in the sort column/row
  # :focused ::
  #   
  # :expandable ::
  #   
  # :expanded ::
  #   
  # 
  # @method _enum_gtk_cell_renderer_state_
  # @return [Symbol]
  # @scope class
  enum :gtk_cell_renderer_state, [
    :selected, 1,
    :prelit, 2,
    :insensitive, 4,
    :sorted, 8,
    :focused, 16,
    :expandable, 32,
    :expanded, 64
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_cell_renderer_mode).</em>
  # 
  # === Options:
  # :inert ::
  #   
  # :activatable ::
  #   
  # :editable ::
  #   
  # 
  # @method _enum_gtk_cell_renderer_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_cell_renderer_mode, [
    :inert, 0,
    :activatable, 1,
    :editable, 2
  ]
  
  # (Not documented)
  class GtkCellRendererPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkCellRendererClassPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkCellRendererPrivate) < private >
  module GtkCellRendererWrappers
    # @return [Symbol from _enum_gtk_size_request_mode_] 
    def get_request_mode()
      Gtk.gtk_cell_renderer_get_request_mode(self)
    end
    
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*Gint)] minimum_size 
    # @param [FFI::Pointer(*Gint)] natural_size 
    # @return [nil] 
    def get_preferred_width(widget, minimum_size, natural_size)
      Gtk.gtk_cell_renderer_get_preferred_width(self, widget, minimum_size, natural_size)
    end
    
    # @param [GtkWidget] widget 
    # @param [Integer] width 
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height_for_width(widget, width, minimum_height, natural_height)
      Gtk.gtk_cell_renderer_get_preferred_height_for_width(self, widget, width, minimum_height, natural_height)
    end
    
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*Gint)] minimum_size 
    # @param [FFI::Pointer(*Gint)] natural_size 
    # @return [nil] 
    def get_preferred_height(widget, minimum_size, natural_size)
      Gtk.gtk_cell_renderer_get_preferred_height(self, widget, minimum_size, natural_size)
    end
    
    # @param [GtkWidget] widget 
    # @param [Integer] height 
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width_for_height(widget, height, minimum_width, natural_width)
      Gtk.gtk_cell_renderer_get_preferred_width_for_height(self, widget, height, minimum_width, natural_width)
    end
    
    # @param [GtkWidget] widget 
    # @param [GtkRequisition] minimum_size 
    # @param [GtkRequisition] natural_size 
    # @return [nil] 
    def get_preferred_size(widget, minimum_size, natural_size)
      Gtk.gtk_cell_renderer_get_preferred_size(self, widget, minimum_size, natural_size)
    end
    
    # @param [GtkWidget] widget 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [FFI::Pointer(*GdkRectangle)] aligned_area 
    # @return [nil] 
    def get_aligned_area(widget, flags, cell_area, aligned_area)
      Gtk.gtk_cell_renderer_get_aligned_area(self, widget, flags, cell_area, aligned_area)
    end
    
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [FFI::Pointer(*Gint)] x_offset 
    # @param [FFI::Pointer(*Gint)] y_offset 
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_size(widget, cell_area, x_offset, y_offset, width, height)
      Gtk.gtk_cell_renderer_get_size(self, widget, cell_area, x_offset, y_offset, width, height)
    end
    
    # @param [FFI::Pointer(*CairoT)] cr 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkRectangle)] background_area 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @return [nil] 
    def render(cr, widget, background_area, cell_area, flags)
      Gtk.gtk_cell_renderer_render(self, cr, widget, background_area, cell_area, flags)
    end
    
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @param [GtkWidget] widget 
    # @param [String] path 
    # @param [FFI::Pointer(*GdkRectangle)] background_area 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @return [Integer] 
    def activate(event, widget, path, background_area, cell_area, flags)
      Gtk.gtk_cell_renderer_activate(self, event, widget, path, background_area, cell_area, flags)
    end
    
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @param [GtkWidget] widget 
    # @param [String] path 
    # @param [FFI::Pointer(*GdkRectangle)] background_area 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @return [GtkCellEditable] 
    def start_editing(event, widget, path, background_area, cell_area, flags)
      GtkCellEditable.new Gtk.gtk_cell_renderer_start_editing(self, event, widget, path, background_area, cell_area, flags)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def set_fixed_size(width, height)
      Gtk.gtk_cell_renderer_set_fixed_size(self, width, height)
    end
    
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_fixed_size(width, height)
      Gtk.gtk_cell_renderer_get_fixed_size(self, width, height)
    end
    
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @return [nil] 
    def set_alignment(xalign, yalign)
      Gtk.gtk_cell_renderer_set_alignment(self, xalign, yalign)
    end
    
    # @param [FFI::Pointer(*Gfloat)] xalign 
    # @param [FFI::Pointer(*Gfloat)] yalign 
    # @return [nil] 
    def get_alignment(xalign, yalign)
      Gtk.gtk_cell_renderer_get_alignment(self, xalign, yalign)
    end
    
    # @param [Integer] xpad 
    # @param [Integer] ypad 
    # @return [nil] 
    def set_padding(xpad, ypad)
      Gtk.gtk_cell_renderer_set_padding(self, xpad, ypad)
    end
    
    # @param [FFI::Pointer(*Gint)] xpad 
    # @param [FFI::Pointer(*Gint)] ypad 
    # @return [nil] 
    def get_padding(xpad, ypad)
      Gtk.gtk_cell_renderer_get_padding(self, xpad, ypad)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visible(visible)
      Gtk.gtk_cell_renderer_set_visible(self, visible)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_cell_renderer_get_visible(self)
    end
    
    # @param [Integer] sensitive 
    # @return [nil] 
    def set_sensitive(sensitive)
      Gtk.gtk_cell_renderer_set_sensitive(self, sensitive)
    end
    
    # @return [Integer] 
    def get_sensitive()
      Gtk.gtk_cell_renderer_get_sensitive(self)
    end
    
    # @return [Integer] 
    def is_activatable()
      Gtk.gtk_cell_renderer_is_activatable(self)
    end
    
    # @param [Integer] canceled 
    # @return [nil] 
    def stop_editing(canceled)
      Gtk.gtk_cell_renderer_stop_editing(self, canceled)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_text_direction_] direction 
    # @param [Integer] width 
    # @param [Integer] height 
    # @param [FFI::Pointer(*Gint)] x_offset 
    # @param [FFI::Pointer(*Gint)] y_offset 
    # @return [nil] 
    def calc_offset(cell_area, direction, width, height, x_offset, y_offset)
      Gtk.gtk_cell_renderer_calc_offset(self, cell_area, direction, width, height, x_offset, y_offset)
    end
    
    # @param [GtkWidget] widget 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] cell_state 
    # @return [Symbol from _enum_gtk_state_flags_] 
    def get_state(widget, cell_state)
      Gtk.gtk_cell_renderer_get_state(self, widget, cell_state)
    end
    
    # @return [Integer] 
    def get_accessible_type()
      Gtk.gtk_cell_renderer_get_accessible_type(self)
    end
  end
  
  class GtkCellRenderer < FFI::Struct
    include GtkCellRendererWrappers
    layout :parent_instance, :char,
           :priv, GtkCellRendererPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :get_request_mode ::
  #   (FFI::Pointer(*)) vtable - not signals
  # :get_preferred_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height_for_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width_for_height ::
  #   (FFI::Pointer(*)) 
  # :get_aligned_area ::
  #   (FFI::Pointer(*)) 
  # :get_size ::
  #   (FFI::Pointer(*)) 
  # :render ::
  #   (FFI::Pointer(*)) 
  # :activate ::
  #   (FFI::Pointer(*)) 
  # :start_editing ::
  #   (FFI::Pointer(*)) 
  # :editing_canceled ::
  #   (FFI::Pointer(*)) Signals
  # :editing_started ::
  #   (FFI::Pointer(*)) 
  # :priv ::
  #   (GtkCellRendererClassPrivate) 
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  module GtkCellRendererClassWrappers
    # @param [Integer] type 
    # @return [nil] 
    def set_accessible_type(type)
      Gtk.gtk_cell_renderer_class_set_accessible_type(self, type)
    end
  end
  
  class GtkCellRendererClass < FFI::Struct
    include GtkCellRendererClassWrappers
    layout :parent_class, :char,
           :get_request_mode, :pointer,
           :get_preferred_width, :pointer,
           :get_preferred_height_for_width, :pointer,
           :get_preferred_height, :pointer,
           :get_preferred_width_for_height, :pointer,
           :get_aligned_area, :pointer,
           :get_size, :pointer,
           :render, :pointer,
           :activate, :pointer,
           :start_editing, :pointer,
           :editing_canceled, :pointer,
           :editing_started, :pointer,
           :priv, GtkCellRendererClassPrivate,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_get_type, :gtk_cell_renderer_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_request_mode(cell)
  # @param [GtkCellRenderer] cell 
  # @return [Symbol from _enum_gtk_size_request_mode_] 
  # @scope class
  attach_function :gtk_cell_renderer_get_request_mode, :gtk_cell_renderer_get_request_mode, [GtkCellRenderer], :gtk_size_request_mode
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_preferred_width(cell, widget, minimum_size, natural_size)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_size 
  # @param [FFI::Pointer(*Gint)] natural_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_preferred_width, :gtk_cell_renderer_get_preferred_width, [GtkCellRenderer, GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_preferred_height_for_width(cell, widget, width, minimum_height, natural_height)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [Integer] width 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_preferred_height_for_width, :gtk_cell_renderer_get_preferred_height_for_width, [GtkCellRenderer, GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_preferred_height(cell, widget, minimum_size, natural_size)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_size 
  # @param [FFI::Pointer(*Gint)] natural_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_preferred_height, :gtk_cell_renderer_get_preferred_height, [GtkCellRenderer, GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_preferred_width_for_height(cell, widget, height, minimum_width, natural_width)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [Integer] height 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_preferred_width_for_height, :gtk_cell_renderer_get_preferred_width_for_height, [GtkCellRenderer, GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_preferred_size(cell, widget, minimum_size, natural_size)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [GtkRequisition] minimum_size 
  # @param [GtkRequisition] natural_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_preferred_size, :gtk_cell_renderer_get_preferred_size, [GtkCellRenderer, GtkWidget, GtkRequisition, GtkRequisition], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_aligned_area(cell, widget, flags, cell_area, aligned_area)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*GdkRectangle)] aligned_area 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_aligned_area, :gtk_cell_renderer_get_aligned_area, [GtkCellRenderer, GtkWidget, :gtk_cell_renderer_state, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_size(cell, widget, cell_area, x_offset, y_offset, width, height)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*Gint)] x_offset 
  # @param [FFI::Pointer(*Gint)] y_offset 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_size, :gtk_cell_renderer_get_size, [GtkCellRenderer, GtkWidget, :pointer, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_render(cell, cr, widget, background_area, cell_area, flags)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] background_area 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_render, :gtk_cell_renderer_render, [GtkCellRenderer, :pointer, GtkWidget, :pointer, :pointer, :gtk_cell_renderer_state], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_activate(cell, event, widget, path, background_area, cell_area, flags)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @param [GtkWidget] widget 
  # @param [String] path 
  # @param [FFI::Pointer(*GdkRectangle)] background_area 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_activate, :gtk_cell_renderer_activate, [GtkCellRenderer, :pointer, GtkWidget, :string, :pointer, :pointer, :gtk_cell_renderer_state], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_start_editing(cell, event, widget, path, background_area, cell_area, flags)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @param [GtkWidget] widget 
  # @param [String] path 
  # @param [FFI::Pointer(*GdkRectangle)] background_area 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @return [GtkCellEditable] 
  # @scope class
  attach_function :gtk_cell_renderer_start_editing, :gtk_cell_renderer_start_editing, [GtkCellRenderer, :pointer, GtkWidget, :string, :pointer, :pointer, :gtk_cell_renderer_state], GtkCellEditable
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_set_fixed_size(cell, width, height)
  # @param [GtkCellRenderer] cell 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_set_fixed_size, :gtk_cell_renderer_set_fixed_size, [GtkCellRenderer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_fixed_size(cell, width, height)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_fixed_size, :gtk_cell_renderer_get_fixed_size, [GtkCellRenderer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_set_alignment(cell, xalign, yalign)
  # @param [GtkCellRenderer] cell 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_set_alignment, :gtk_cell_renderer_set_alignment, [GtkCellRenderer, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_alignment(cell, xalign, yalign)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*Gfloat)] xalign 
  # @param [FFI::Pointer(*Gfloat)] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_alignment, :gtk_cell_renderer_get_alignment, [GtkCellRenderer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_set_padding(cell, xpad, ypad)
  # @param [GtkCellRenderer] cell 
  # @param [Integer] xpad 
  # @param [Integer] ypad 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_set_padding, :gtk_cell_renderer_set_padding, [GtkCellRenderer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_padding(cell, xpad, ypad)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*Gint)] xpad 
  # @param [FFI::Pointer(*Gint)] ypad 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_get_padding, :gtk_cell_renderer_get_padding, [GtkCellRenderer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_set_visible(cell, visible)
  # @param [GtkCellRenderer] cell 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_set_visible, :gtk_cell_renderer_set_visible, [GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_visible(cell)
  # @param [GtkCellRenderer] cell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_get_visible, :gtk_cell_renderer_get_visible, [GtkCellRenderer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_set_sensitive(cell, sensitive)
  # @param [GtkCellRenderer] cell 
  # @param [Integer] sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_set_sensitive, :gtk_cell_renderer_set_sensitive, [GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_sensitive(cell)
  # @param [GtkCellRenderer] cell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_get_sensitive, :gtk_cell_renderer_get_sensitive, [GtkCellRenderer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_is_activatable(cell)
  # @param [GtkCellRenderer] cell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_is_activatable, :gtk_cell_renderer_is_activatable, [GtkCellRenderer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_stop_editing(cell, canceled)
  # @param [GtkCellRenderer] cell 
  # @param [Integer] canceled 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_stop_editing, :gtk_cell_renderer_stop_editing, [GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_calc_offset(cell, cell_area, direction, width, height, x_offset, y_offset)
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_text_direction_] direction 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [FFI::Pointer(*Gint)] x_offset 
  # @param [FFI::Pointer(*Gint)] y_offset 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_calc_offset, :_gtk_cell_renderer_calc_offset, [GtkCellRenderer, :pointer, :gtk_text_direction, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_state(cell, widget, cell_state)
  # @param [GtkCellRenderer] cell 
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] cell_state 
  # @return [Symbol from _enum_gtk_state_flags_] 
  # @scope class
  attach_function :gtk_cell_renderer_get_state, :gtk_cell_renderer_get_state, [GtkCellRenderer, GtkWidget, :gtk_cell_renderer_state], :gtk_state_flags
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_class_set_accessible_type(renderer_class, type)
  # @param [GtkCellRendererClass] renderer_class 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_class_set_accessible_type, :_gtk_cell_renderer_class_set_accessible_type, [GtkCellRendererClass, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_get_accessible_type(renderer)
  # @param [GtkCellRenderer] renderer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_get_accessible_type, :_gtk_cell_renderer_get_accessible_type, [GtkCellRenderer], :uint
  
  # (Not documented)
  module GtkTreeSortableWrappers
    # @return [nil] 
    def sort_column_changed()
      Gtk.gtk_tree_sortable_sort_column_changed(self)
    end
    
    # @param [FFI::Pointer(*Gint)] sort_column_id 
    # @param [FFI::Pointer(*GtkSortType)] order 
    # @return [Integer] 
    def get_sort_column_id(sort_column_id, order)
      Gtk.gtk_tree_sortable_get_sort_column_id(self, sort_column_id, order)
    end
    
    # @param [Integer] sort_column_id 
    # @param [Symbol from _enum_gtk_sort_type_] order 
    # @return [nil] 
    def set_sort_column_id(sort_column_id, order)
      Gtk.gtk_tree_sortable_set_sort_column_id(self, sort_column_id, order)
    end
    
    # @param [Integer] sort_column_id 
    # @param [Proc(_callback_gtk_tree_iter_compare_func_)] sort_func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_sort_func(sort_column_id, sort_func, user_data, destroy)
      Gtk.gtk_tree_sortable_set_sort_func(self, sort_column_id, sort_func, user_data, destroy)
    end
    
    # @param [Proc(_callback_gtk_tree_iter_compare_func_)] sort_func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_default_sort_func(sort_func, user_data, destroy)
      Gtk.gtk_tree_sortable_set_default_sort_func(self, sort_func, user_data, destroy)
    end
    
    # @return [Integer] 
    def has_default_sort_func()
      Gtk.gtk_tree_sortable_has_default_sort_func(self)
    end
  end
  
  class GtkTreeSortable < FFI::Struct
    include GtkTreeSortableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_iter_compare_func_(model, a, b, user_data)
  # @param [GtkTreeModel] model 
  # @param [GtkTreeIter] a 
  # @param [GtkTreeIter] b 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_iter_compare_func, [GtkTreeModel, GtkTreeIter, GtkTreeIter, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :sort_column_changed ::
  #   (FFI::Pointer(*)) signals
  # :get_sort_column_id ::
  #   (FFI::Pointer(*)) virtual table
  # :set_sort_column_id ::
  #   (FFI::Pointer(*)) 
  # :set_sort_func ::
  #   (FFI::Pointer(*)) 
  # :set_default_sort_func ::
  #   (FFI::Pointer(*)) 
  # :has_default_sort_func ::
  #   (FFI::Pointer(*)) 
  class GtkTreeSortableIface < FFI::Struct
    layout :g_iface, :char,
           :sort_column_changed, :pointer,
           :get_sort_column_id, :pointer,
           :set_sort_column_id, :pointer,
           :set_sort_func, :pointer,
           :set_default_sort_func, :pointer,
           :has_default_sort_func, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_sortable_get_type, :gtk_tree_sortable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_sort_column_changed(sortable)
  # @param [GtkTreeSortable] sortable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_sortable_sort_column_changed, :gtk_tree_sortable_sort_column_changed, [GtkTreeSortable], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_get_sort_column_id(sortable, sort_column_id, order)
  # @param [GtkTreeSortable] sortable 
  # @param [FFI::Pointer(*Gint)] sort_column_id 
  # @param [FFI::Pointer(*GtkSortType)] order 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_sortable_get_sort_column_id, :gtk_tree_sortable_get_sort_column_id, [GtkTreeSortable, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_set_sort_column_id(sortable, sort_column_id, order)
  # @param [GtkTreeSortable] sortable 
  # @param [Integer] sort_column_id 
  # @param [Symbol from _enum_gtk_sort_type_] order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_sortable_set_sort_column_id, :gtk_tree_sortable_set_sort_column_id, [GtkTreeSortable, :int, :gtk_sort_type], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_set_sort_func(sortable, sort_column_id, sort_func, user_data, destroy)
  # @param [GtkTreeSortable] sortable 
  # @param [Integer] sort_column_id 
  # @param [Proc(_callback_gtk_tree_iter_compare_func_)] sort_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_sortable_set_sort_func, :gtk_tree_sortable_set_sort_func, [GtkTreeSortable, :int, :gtk_tree_iter_compare_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_set_default_sort_func(sortable, sort_func, user_data, destroy)
  # @param [GtkTreeSortable] sortable 
  # @param [Proc(_callback_gtk_tree_iter_compare_func_)] sort_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_sortable_set_default_sort_func, :gtk_tree_sortable_set_default_sort_func, [GtkTreeSortable, :gtk_tree_iter_compare_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_sortable_has_default_sort_func(sortable)
  # @param [GtkTreeSortable] sortable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_sortable_has_default_sort_func, :gtk_tree_sortable_has_default_sort_func, [GtkTreeSortable], :int
  
  # (Not documented)
  class GtkCellAreaPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_cell_callback_(renderer, data)
  # @param [GtkCellRenderer] renderer 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_cell_callback, [GtkCellRenderer, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_cell_alloc_callback_(renderer, cell_area, cell_background, data)
  # @param [GtkCellRenderer] renderer 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*GdkRectangle)] cell_background 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_cell_alloc_callback, [GtkCellRenderer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) < private >
  # :priv ::
  #   (GtkCellAreaPrivate) 
  module GtkCellAreaWrappers
    # @param [GtkCellRenderer] renderer 
    # @return [nil] 
    def add(renderer)
      Gtk.gtk_cell_area_add(self, renderer)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @return [nil] 
    def remove(renderer)
      Gtk.gtk_cell_area_remove(self, renderer)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @return [Integer] 
    def has_renderer(renderer)
      Gtk.gtk_cell_area_has_renderer(self, renderer)
    end
    
    # @param [Proc(_callback_gtk_cell_callback_)] callback 
    # @param [FFI::Pointer(Gpointer)] callback_data 
    # @return [nil] 
    def foreach(callback, callback_data)
      Gtk.gtk_cell_area_foreach(self, callback, callback_data)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [FFI::Pointer(*GdkRectangle)] background_area 
    # @param [Proc(_callback_gtk_cell_alloc_callback_)] callback 
    # @param [FFI::Pointer(Gpointer)] callback_data 
    # @return [nil] 
    def foreach_alloc(context, widget, cell_area, background_area, callback, callback_data)
      Gtk.gtk_cell_area_foreach_alloc(self, context, widget, cell_area, background_area, callback, callback_data)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @return [Integer] 
    def event(context, widget, event, cell_area, flags)
      Gtk.gtk_cell_area_event(self, context, widget, event, cell_area, flags)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*CairoT)] cr 
    # @param [FFI::Pointer(*GdkRectangle)] background_area 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @param [Integer] paint_focus 
    # @return [nil] 
    def render(context, widget, cr, background_area, cell_area, flags, paint_focus)
      Gtk.gtk_cell_area_render(self, context, widget, cr, background_area, cell_area, flags, paint_focus)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [GtkCellRenderer] renderer 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [FFI::Pointer(*GdkRectangle)] allocation 
    # @return [nil] 
    def get_cell_allocation(context, widget, renderer, cell_area, allocation)
      Gtk.gtk_cell_area_get_cell_allocation(self, context, widget, renderer, cell_area, allocation)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Integer] x 
    # @param [Integer] y 
    # @param [FFI::Pointer(*GdkRectangle)] alloc_area 
    # @return [GtkCellRenderer] 
    def get_cell_at_position(context, widget, cell_area, x, y, alloc_area)
      GtkCellRenderer.new Gtk.gtk_cell_area_get_cell_at_position(self, context, widget, cell_area, x, y, alloc_area)
    end
    
    # @return [GtkCellAreaContext] 
    def create_context()
      GtkCellAreaContext.new Gtk.gtk_cell_area_create_context(self)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @return [GtkCellAreaContext] 
    def copy_context(context)
      GtkCellAreaContext.new Gtk.gtk_cell_area_copy_context(self, context)
    end
    
    # @return [Symbol from _enum_gtk_size_request_mode_] 
    def get_request_mode()
      Gtk.gtk_cell_area_get_request_mode(self)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width(context, widget, minimum_width, natural_width)
      Gtk.gtk_cell_area_get_preferred_width(self, context, widget, minimum_width, natural_width)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [Integer] width 
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height_for_width(context, widget, width, minimum_height, natural_height)
      Gtk.gtk_cell_area_get_preferred_height_for_width(self, context, widget, width, minimum_height, natural_height)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height(context, widget, minimum_height, natural_height)
      Gtk.gtk_cell_area_get_preferred_height(self, context, widget, minimum_height, natural_height)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [Integer] height 
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width_for_height(context, widget, height, minimum_width, natural_width)
      Gtk.gtk_cell_area_get_preferred_width_for_height(self, context, widget, height, minimum_width, natural_width)
    end
    
    # @return [String] 
    def get_current_path_string()
      Gtk.gtk_cell_area_get_current_path_string(self)
    end
    
    # @param [GtkTreeModel] tree_model 
    # @param [GtkTreeIter] iter 
    # @param [Integer] is_expander 
    # @param [Integer] is_expanded 
    # @return [nil] 
    def apply_attributes(tree_model, iter, is_expander, is_expanded)
      Gtk.gtk_cell_area_apply_attributes(self, tree_model, iter, is_expander, is_expanded)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] attribute 
    # @param [Integer] column 
    # @return [nil] 
    def attribute_connect(renderer, attribute, column)
      Gtk.gtk_cell_area_attribute_connect(self, renderer, attribute, column)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] attribute 
    # @return [nil] 
    def attribute_disconnect(renderer, attribute)
      Gtk.gtk_cell_area_attribute_disconnect(self, renderer, attribute)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] first_prop_name 
    # @return [nil] 
    def add_with_properties(renderer, first_prop_name)
      Gtk.gtk_cell_area_add_with_properties(self, renderer, first_prop_name)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] first_prop_name 
    # @return [nil] 
    def cell_set(renderer, first_prop_name)
      Gtk.gtk_cell_area_cell_set(self, renderer, first_prop_name)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] first_prop_name 
    # @return [nil] 
    def cell_get(renderer, first_prop_name)
      Gtk.gtk_cell_area_cell_get(self, renderer, first_prop_name)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def cell_set_valist(renderer, first_property_name, var_args)
      Gtk.gtk_cell_area_cell_set_valist(self, renderer, first_property_name, var_args)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] first_property_name 
    # @param [String] var_args 
    # @return [nil] 
    def cell_get_valist(renderer, first_property_name, var_args)
      Gtk.gtk_cell_area_cell_get_valist(self, renderer, first_property_name, var_args)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def cell_set_property(renderer, property_name, value)
      Gtk.gtk_cell_area_cell_set_property(self, renderer, property_name, value)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def cell_get_property(renderer, property_name, value)
      Gtk.gtk_cell_area_cell_get_property(self, renderer, property_name, value)
    end
    
    # @return [Integer] 
    def is_activatable()
      Gtk.gtk_cell_area_is_activatable(self)
    end
    
    # @param [FFI::Pointer(*GtkCellAreaContext)] context 
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @param [Integer] edit_only 
    # @return [Integer] 
    def activate(context, widget, cell_area, flags, edit_only)
      Gtk.gtk_cell_area_activate(self, context, widget, cell_area, flags, edit_only)
    end
    
    # @param [Symbol from _enum_gtk_direction_type_] direction 
    # @return [Integer] 
    def focus(direction)
      Gtk.gtk_cell_area_focus(self, direction)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @return [nil] 
    def set_focus_cell(renderer)
      Gtk.gtk_cell_area_set_focus_cell(self, renderer)
    end
    
    # @return [GtkCellRenderer] 
    def get_focus_cell()
      GtkCellRenderer.new Gtk.gtk_cell_area_get_focus_cell(self)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [GtkCellRenderer] sibling 
    # @return [nil] 
    def add_focus_sibling(renderer, sibling)
      Gtk.gtk_cell_area_add_focus_sibling(self, renderer, sibling)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [GtkCellRenderer] sibling 
    # @return [nil] 
    def remove_focus_sibling(renderer, sibling)
      Gtk.gtk_cell_area_remove_focus_sibling(self, renderer, sibling)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [GtkCellRenderer] sibling 
    # @return [Integer] 
    def is_focus_sibling(renderer, sibling)
      Gtk.gtk_cell_area_is_focus_sibling(self, renderer, sibling)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @return [FFI::Pointer(*GList)] 
    def get_focus_siblings(renderer)
      Gtk.gtk_cell_area_get_focus_siblings(self, renderer)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @return [GtkCellRenderer] 
    def get_focus_from_sibling(renderer)
      GtkCellRenderer.new Gtk.gtk_cell_area_get_focus_from_sibling(self, renderer)
    end
    
    # @return [GtkCellRenderer] 
    def get_edited_cell()
      GtkCellRenderer.new Gtk.gtk_cell_area_get_edited_cell(self)
    end
    
    # @return [GtkCellEditable] 
    def get_edit_widget()
      GtkCellEditable.new Gtk.gtk_cell_area_get_edit_widget(self)
    end
    
    # @param [GtkWidget] widget 
    # @param [GtkCellRenderer] renderer 
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
    # @return [Integer] 
    def activate_cell(widget, renderer, event, cell_area, flags)
      Gtk.gtk_cell_area_activate_cell(self, widget, renderer, event, cell_area, flags)
    end
    
    # @param [Integer] canceled 
    # @return [nil] 
    def stop_editing(canceled)
      Gtk.gtk_cell_area_stop_editing(self, canceled)
    end
    
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [FFI::Pointer(*GdkRectangle)] inner_area 
    # @return [nil] 
    def inner_cell_area(widget, cell_area, inner_area)
      Gtk.gtk_cell_area_inner_cell_area(self, widget, cell_area, inner_area)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [Symbol from _enum_gtk_orientation_] orientation 
    # @param [GtkWidget] widget 
    # @param [Integer] for_size 
    # @param [FFI::Pointer(*Gint)] minimum_size 
    # @param [FFI::Pointer(*Gint)] natural_size 
    # @return [nil] 
    def request_renderer(renderer, orientation, widget, for_size, minimum_size, natural_size)
      Gtk.gtk_cell_area_request_renderer(self, renderer, orientation, widget, for_size, minimum_size, natural_size)
    end
    
    # @param [GtkCellRenderer] cell 
    # @param [FFI::Pointer(GFunc)] func 
    # @param [FFI::Pointer(Gpointer)] func_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @param [FFI::Pointer(Gpointer)] proxy 
    # @return [nil] 
    def set_cell_data_func_with_proxy(cell, func, func_data, destroy, proxy)
      Gtk.gtk_cell_area_set_cell_data_func_with_proxy(self, cell, func, func_data, destroy, proxy)
    end
  end
  
  class GtkCellArea < FFI::Struct
    include GtkCellAreaWrappers
    layout :parent_instance, :char,
           :priv, GtkCellAreaPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) < private >
  # :add ::
  #   (FFI::Pointer(*)) Basic methods
  # :remove ::
  #   (FFI::Pointer(*)) 
  # :foreach ::
  #   (FFI::Pointer(*)) 
  # :foreach_alloc ::
  #   (FFI::Pointer(*)) 
  # :event ::
  #   (FFI::Pointer(*)) 
  # :render ::
  #   (FFI::Pointer(*)) 
  # :apply_attributes ::
  #   (FFI::Pointer(*)) 
  # :create_context ::
  #   (FFI::Pointer(*)) Geometry
  # :copy_context ::
  #   (FFI::Pointer(*)) 
  # :get_request_mode ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height_for_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width_for_height ::
  #   (FFI::Pointer(*)) 
  # :set_cell_property ::
  #   (FFI::Pointer(*)) Cell Properties
  # :get_cell_property ::
  #   (FFI::Pointer(*)) 
  # :focus ::
  #   (FFI::Pointer(*)) Focus
  # :is_activatable ::
  #   (FFI::Pointer(*)) 
  # :activate ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  module GtkCellAreaClassWrappers
    # @param [Integer] property_id 
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @return [nil] 
    def install_cell_property(property_id, pspec)
      Gtk.gtk_cell_area_class_install_cell_property(self, property_id, pspec)
    end
    
    # @param [String] property_name 
    # @return [FFI::Pointer(*GParamSpec)] 
    def find_cell_property(property_name)
      Gtk.gtk_cell_area_class_find_cell_property(self, property_name)
    end
    
    # @param [FFI::Pointer(*Guint)] n_properties 
    # @return [FFI::Pointer(**GParamSpec)] 
    def list_cell_properties(n_properties)
      Gtk.gtk_cell_area_class_list_cell_properties(self, n_properties)
    end
  end
  
  class GtkCellAreaClass < FFI::Struct
    include GtkCellAreaClassWrappers
    layout :parent_class, :char,
           :add, :pointer,
           :remove, :pointer,
           :foreach, :pointer,
           :foreach_alloc, :pointer,
           :event, :pointer,
           :render, :pointer,
           :apply_attributes, :pointer,
           :create_context, :pointer,
           :copy_context, :pointer,
           :get_request_mode, :pointer,
           :get_preferred_width, :pointer,
           :get_preferred_height_for_width, :pointer,
           :get_preferred_height, :pointer,
           :get_preferred_width_for_height, :pointer,
           :set_cell_property, :pointer,
           :get_cell_property, :pointer,
           :focus, :pointer,
           :is_activatable, :pointer,
           :activate, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_get_type, :gtk_cell_area_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_area_add(area, renderer)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_add, :gtk_cell_area_add, [GtkCellArea, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_remove(area, renderer)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_remove, :gtk_cell_area_remove, [GtkCellArea, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_has_renderer(area, renderer)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_has_renderer, :gtk_cell_area_has_renderer, [GtkCellArea, GtkCellRenderer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_foreach(area, callback, callback_data)
  # @param [GtkCellArea] area 
  # @param [Proc(_callback_gtk_cell_callback_)] callback 
  # @param [FFI::Pointer(Gpointer)] callback_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_foreach, :gtk_cell_area_foreach, [GtkCellArea, :gtk_cell_callback, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_foreach_alloc(area, context, widget, cell_area, background_area, callback, callback_data)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*GdkRectangle)] background_area 
  # @param [Proc(_callback_gtk_cell_alloc_callback_)] callback 
  # @param [FFI::Pointer(Gpointer)] callback_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_foreach_alloc, :gtk_cell_area_foreach_alloc, [GtkCellArea, :pointer, GtkWidget, :pointer, :pointer, :gtk_cell_alloc_callback, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_event(area, context, widget, event, cell_area, flags)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_event, :gtk_cell_area_event, [GtkCellArea, :pointer, GtkWidget, :pointer, :pointer, :gtk_cell_renderer_state], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_render(area, context, widget, cr, background_area, cell_area, flags, paint_focus)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [FFI::Pointer(*GdkRectangle)] background_area 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @param [Integer] paint_focus 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_render, :gtk_cell_area_render, [GtkCellArea, :pointer, GtkWidget, :pointer, :pointer, :pointer, :gtk_cell_renderer_state, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_cell_allocation(area, context, widget, renderer, cell_area, allocation)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [GtkCellRenderer] renderer 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*GdkRectangle)] allocation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_get_cell_allocation, :gtk_cell_area_get_cell_allocation, [GtkCellArea, :pointer, GtkWidget, GtkCellRenderer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_cell_at_position(area, context, widget, cell_area, x, y, alloc_area)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [FFI::Pointer(*GdkRectangle)] alloc_area 
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_area_get_cell_at_position, :gtk_cell_area_get_cell_at_position, [GtkCellArea, :pointer, GtkWidget, :pointer, :int, :int, :pointer], GtkCellRenderer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_create_context(area)
  # @param [GtkCellArea] area 
  # @return [FFI::Pointer(*GtkCellAreaContext)] 
  # @scope class
  attach_function :gtk_cell_area_create_context, :gtk_cell_area_create_context, [GtkCellArea], :pointer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_copy_context(area, context)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @return [FFI::Pointer(*GtkCellAreaContext)] 
  # @scope class
  attach_function :gtk_cell_area_copy_context, :gtk_cell_area_copy_context, [GtkCellArea, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_request_mode(area)
  # @param [GtkCellArea] area 
  # @return [Symbol from _enum_gtk_size_request_mode_] 
  # @scope class
  attach_function :gtk_cell_area_get_request_mode, :gtk_cell_area_get_request_mode, [GtkCellArea], :gtk_size_request_mode
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_preferred_width(area, context, widget, minimum_width, natural_width)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_get_preferred_width, :gtk_cell_area_get_preferred_width, [GtkCellArea, :pointer, GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_preferred_height_for_width(area, context, widget, width, minimum_height, natural_height)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [Integer] width 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_get_preferred_height_for_width, :gtk_cell_area_get_preferred_height_for_width, [GtkCellArea, :pointer, GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_preferred_height(area, context, widget, minimum_height, natural_height)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_get_preferred_height, :gtk_cell_area_get_preferred_height, [GtkCellArea, :pointer, GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_preferred_width_for_height(area, context, widget, height, minimum_width, natural_width)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [Integer] height 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_get_preferred_width_for_height, :gtk_cell_area_get_preferred_width_for_height, [GtkCellArea, :pointer, GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_current_path_string(area)
  # @param [GtkCellArea] area 
  # @return [String] 
  # @scope class
  attach_function :gtk_cell_area_get_current_path_string, :gtk_cell_area_get_current_path_string, [GtkCellArea], :string
  
  # (Not documented)
  # 
  # @method gtk_cell_area_apply_attributes(area, tree_model, iter, is_expander, is_expanded)
  # @param [GtkCellArea] area 
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [Integer] is_expander 
  # @param [Integer] is_expanded 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_apply_attributes, :gtk_cell_area_apply_attributes, [GtkCellArea, GtkTreeModel, GtkTreeIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_attribute_connect(area, renderer, attribute, column)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] attribute 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_attribute_connect, :gtk_cell_area_attribute_connect, [GtkCellArea, GtkCellRenderer, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_attribute_disconnect(area, renderer, attribute)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] attribute 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_attribute_disconnect, :gtk_cell_area_attribute_disconnect, [GtkCellArea, GtkCellRenderer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_class_install_cell_property(aclass, property_id, pspec)
  # @param [GtkCellAreaClass] aclass 
  # @param [Integer] property_id 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_class_install_cell_property, :gtk_cell_area_class_install_cell_property, [GtkCellAreaClass, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_class_find_cell_property(aclass, property_name)
  # @param [GtkCellAreaClass] aclass 
  # @param [String] property_name 
  # @return [FFI::Pointer(*GParamSpec)] 
  # @scope class
  attach_function :gtk_cell_area_class_find_cell_property, :gtk_cell_area_class_find_cell_property, [GtkCellAreaClass, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_class_list_cell_properties(aclass, n_properties)
  # @param [GtkCellAreaClass] aclass 
  # @param [FFI::Pointer(*Guint)] n_properties 
  # @return [FFI::Pointer(**GParamSpec)] 
  # @scope class
  attach_function :gtk_cell_area_class_list_cell_properties, :gtk_cell_area_class_list_cell_properties, [GtkCellAreaClass, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_add_with_properties(area, renderer, first_prop_name)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_add_with_properties, :gtk_cell_area_add_with_properties, [GtkCellArea, GtkCellRenderer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_cell_set(area, renderer, first_prop_name)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_cell_set, :gtk_cell_area_cell_set, [GtkCellArea, GtkCellRenderer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_cell_get(area, renderer, first_prop_name)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] first_prop_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_cell_get, :gtk_cell_area_cell_get, [GtkCellArea, GtkCellRenderer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_cell_set_valist(area, renderer, first_property_name, var_args)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_cell_set_valist, :gtk_cell_area_cell_set_valist, [GtkCellArea, GtkCellRenderer, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_cell_get_valist(area, renderer, first_property_name, var_args)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] first_property_name 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_cell_get_valist, :gtk_cell_area_cell_get_valist, [GtkCellArea, GtkCellRenderer, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_cell_set_property(area, renderer, property_name, value)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_cell_set_property, :gtk_cell_area_cell_set_property, [GtkCellArea, GtkCellRenderer, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_cell_get_property(area, renderer, property_name, value)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_cell_get_property, :gtk_cell_area_cell_get_property, [GtkCellArea, GtkCellRenderer, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_is_activatable(area)
  # @param [GtkCellArea] area 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_is_activatable, :gtk_cell_area_is_activatable, [GtkCellArea], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_activate(area, context, widget, cell_area, flags, edit_only)
  # @param [GtkCellArea] area 
  # @param [FFI::Pointer(*GtkCellAreaContext)] context 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @param [Integer] edit_only 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_activate, :gtk_cell_area_activate, [GtkCellArea, :pointer, GtkWidget, :pointer, :gtk_cell_renderer_state, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_focus(area, direction)
  # @param [GtkCellArea] area 
  # @param [Symbol from _enum_gtk_direction_type_] direction 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_focus, :gtk_cell_area_focus, [GtkCellArea, :gtk_direction_type], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_set_focus_cell(area, renderer)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_set_focus_cell, :gtk_cell_area_set_focus_cell, [GtkCellArea, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_focus_cell(area)
  # @param [GtkCellArea] area 
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_area_get_focus_cell, :gtk_cell_area_get_focus_cell, [GtkCellArea], GtkCellRenderer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_add_focus_sibling(area, renderer, sibling)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [GtkCellRenderer] sibling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_add_focus_sibling, :gtk_cell_area_add_focus_sibling, [GtkCellArea, GtkCellRenderer, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_remove_focus_sibling(area, renderer, sibling)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [GtkCellRenderer] sibling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_remove_focus_sibling, :gtk_cell_area_remove_focus_sibling, [GtkCellArea, GtkCellRenderer, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_is_focus_sibling(area, renderer, sibling)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [GtkCellRenderer] sibling 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_is_focus_sibling, :gtk_cell_area_is_focus_sibling, [GtkCellArea, GtkCellRenderer, GtkCellRenderer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_focus_siblings(area, renderer)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_cell_area_get_focus_siblings, :gtk_cell_area_get_focus_siblings, [GtkCellArea, GtkCellRenderer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_focus_from_sibling(area, renderer)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_area_get_focus_from_sibling, :gtk_cell_area_get_focus_from_sibling, [GtkCellArea, GtkCellRenderer], GtkCellRenderer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_edited_cell(area)
  # @param [GtkCellArea] area 
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_area_get_edited_cell, :gtk_cell_area_get_edited_cell, [GtkCellArea], GtkCellRenderer
  
  # (Not documented)
  # 
  # @method gtk_cell_area_get_edit_widget(area)
  # @param [GtkCellArea] area 
  # @return [GtkCellEditable] 
  # @scope class
  attach_function :gtk_cell_area_get_edit_widget, :gtk_cell_area_get_edit_widget, [GtkCellArea], GtkCellEditable
  
  # (Not documented)
  # 
  # @method gtk_cell_area_activate_cell(area, widget, renderer, event, cell_area, flags)
  # @param [GtkCellArea] area 
  # @param [GtkWidget] widget 
  # @param [GtkCellRenderer] renderer 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [Symbol from _enum_gtk_cell_renderer_state_] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_activate_cell, :gtk_cell_area_activate_cell, [GtkCellArea, GtkWidget, GtkCellRenderer, :pointer, :pointer, :gtk_cell_renderer_state], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_stop_editing(area, canceled)
  # @param [GtkCellArea] area 
  # @param [Integer] canceled 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_stop_editing, :gtk_cell_area_stop_editing, [GtkCellArea, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_inner_cell_area(area, widget, cell_area, inner_area)
  # @param [GtkCellArea] area 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*GdkRectangle)] inner_area 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_inner_cell_area, :gtk_cell_area_inner_cell_area, [GtkCellArea, GtkWidget, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_request_renderer(area, renderer, orientation, widget, for_size, minimum_size, natural_size)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] renderer 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @param [GtkWidget] widget 
  # @param [Integer] for_size 
  # @param [FFI::Pointer(*Gint)] minimum_size 
  # @param [FFI::Pointer(*Gint)] natural_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_request_renderer, :gtk_cell_area_request_renderer, [GtkCellArea, GtkCellRenderer, :gtk_orientation, GtkWidget, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_set_cell_data_func_with_proxy(area, cell, func, func_data, destroy, proxy)
  # @param [GtkCellArea] area 
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(GFunc)] func 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @param [FFI::Pointer(Gpointer)] proxy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_set_cell_data_func_with_proxy, :_gtk_cell_area_set_cell_data_func_with_proxy, [GtkCellArea, GtkCellRenderer, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  class GtkTreeViewColumnPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_tree_view_column_sizing).</em>
  # 
  # === Options:
  # :grow_only ::
  #   
  # :autosize ::
  #   
  # :fixed ::
  #   
  # 
  # @method _enum_gtk_tree_view_column_sizing_
  # @return [Symbol]
  # @scope class
  enum :gtk_tree_view_column_sizing, [
    :grow_only, 0,
    :autosize, 1,
    :fixed, 2
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_cell_data_func_(cell, tree_model, iter, data)
  # @param [GtkCellRenderer] cell 
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [FFI::Pointer(*GtkTreeViewColumn)] 
  # @scope class
  callback :gtk_tree_cell_data_func, [GtkCellRenderer, GtkTreeModel, GtkTreeIter, :pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkTreeViewColumnPrivate) 
  module GtkTreeViewColumnWrappers
    # @param [GtkCellRenderer] cell 
    # @param [Integer] expand 
    # @return [nil] 
    def pack_start(cell, expand)
      Gtk.gtk_tree_view_column_pack_start(self, cell, expand)
    end
    
    # @param [GtkCellRenderer] cell 
    # @param [Integer] expand 
    # @return [nil] 
    def pack_end(cell, expand)
      Gtk.gtk_tree_view_column_pack_end(self, cell, expand)
    end
    
    # @return [nil] 
    def clear()
      Gtk.gtk_tree_view_column_clear(self)
    end
    
    # @param [GtkCellRenderer] cell_renderer 
    # @param [String] attribute 
    # @param [Integer] column 
    # @return [nil] 
    def add_attribute(cell_renderer, attribute, column)
      Gtk.gtk_tree_view_column_add_attribute(self, cell_renderer, attribute, column)
    end
    
    # @param [GtkCellRenderer] cell_renderer 
    # @return [nil] 
    def set_attributes(cell_renderer)
      Gtk.gtk_tree_view_column_set_attributes(self, cell_renderer)
    end
    
    # @param [GtkCellRenderer] cell_renderer 
    # @param [Proc(_callback_gtk_tree_cell_data_func_)] func 
    # @param [FFI::Pointer(Gpointer)] func_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_cell_data_func(cell_renderer, func, func_data, destroy)
      Gtk.gtk_tree_view_column_set_cell_data_func(self, cell_renderer, func, func_data, destroy)
    end
    
    # @param [GtkCellRenderer] cell_renderer 
    # @return [nil] 
    def clear_attributes(cell_renderer)
      Gtk.gtk_tree_view_column_clear_attributes(self, cell_renderer)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_spacing(spacing)
      Gtk.gtk_tree_view_column_set_spacing(self, spacing)
    end
    
    # @return [Integer] 
    def get_spacing()
      Gtk.gtk_tree_view_column_get_spacing(self)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visible(visible)
      Gtk.gtk_tree_view_column_set_visible(self, visible)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_tree_view_column_get_visible(self)
    end
    
    # @param [Integer] resizable 
    # @return [nil] 
    def set_resizable(resizable)
      Gtk.gtk_tree_view_column_set_resizable(self, resizable)
    end
    
    # @return [Integer] 
    def get_resizable()
      Gtk.gtk_tree_view_column_get_resizable(self)
    end
    
    # @param [Symbol from _enum_gtk_tree_view_column_sizing_] type 
    # @return [nil] 
    def set_sizing(type)
      Gtk.gtk_tree_view_column_set_sizing(self, type)
    end
    
    # @return [Symbol from _enum_gtk_tree_view_column_sizing_] 
    def get_sizing()
      Gtk.gtk_tree_view_column_get_sizing(self)
    end
    
    # @return [Integer] 
    def get_x_offset()
      Gtk.gtk_tree_view_column_get_x_offset(self)
    end
    
    # @return [Integer] 
    def get_width()
      Gtk.gtk_tree_view_column_get_width(self)
    end
    
    # @return [Integer] 
    def get_fixed_width()
      Gtk.gtk_tree_view_column_get_fixed_width(self)
    end
    
    # @param [Integer] fixed_width 
    # @return [nil] 
    def set_fixed_width(fixed_width)
      Gtk.gtk_tree_view_column_set_fixed_width(self, fixed_width)
    end
    
    # @param [Integer] min_width 
    # @return [nil] 
    def set_min_width(min_width)
      Gtk.gtk_tree_view_column_set_min_width(self, min_width)
    end
    
    # @return [Integer] 
    def get_min_width()
      Gtk.gtk_tree_view_column_get_min_width(self)
    end
    
    # @param [Integer] max_width 
    # @return [nil] 
    def set_max_width(max_width)
      Gtk.gtk_tree_view_column_set_max_width(self, max_width)
    end
    
    # @return [Integer] 
    def get_max_width()
      Gtk.gtk_tree_view_column_get_max_width(self)
    end
    
    # @return [nil] 
    def clicked()
      Gtk.gtk_tree_view_column_clicked(self)
    end
    
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_tree_view_column_set_title(self, title)
    end
    
    # @return [String] 
    def get_title()
      Gtk.gtk_tree_view_column_get_title(self)
    end
    
    # @param [Integer] expand 
    # @return [nil] 
    def set_expand(expand)
      Gtk.gtk_tree_view_column_set_expand(self, expand)
    end
    
    # @return [Integer] 
    def get_expand()
      Gtk.gtk_tree_view_column_get_expand(self)
    end
    
    # @param [Integer] clickable 
    # @return [nil] 
    def set_clickable(clickable)
      Gtk.gtk_tree_view_column_set_clickable(self, clickable)
    end
    
    # @return [Integer] 
    def get_clickable()
      Gtk.gtk_tree_view_column_get_clickable(self)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def set_widget(widget)
      Gtk.gtk_tree_view_column_set_widget(self, widget)
    end
    
    # @return [GtkWidget] 
    def get_widget()
      GtkWidget.new Gtk.gtk_tree_view_column_get_widget(self)
    end
    
    # @param [Float] xalign 
    # @return [nil] 
    def set_alignment(xalign)
      Gtk.gtk_tree_view_column_set_alignment(self, xalign)
    end
    
    # @return [Float] 
    def get_alignment()
      Gtk.gtk_tree_view_column_get_alignment(self)
    end
    
    # @param [Integer] reorderable 
    # @return [nil] 
    def set_reorderable(reorderable)
      Gtk.gtk_tree_view_column_set_reorderable(self, reorderable)
    end
    
    # @return [Integer] 
    def get_reorderable()
      Gtk.gtk_tree_view_column_get_reorderable(self)
    end
    
    # @param [Integer] sort_column_id 
    # @return [nil] 
    def set_sort_column_id(sort_column_id)
      Gtk.gtk_tree_view_column_set_sort_column_id(self, sort_column_id)
    end
    
    # @return [Integer] 
    def get_sort_column_id()
      Gtk.gtk_tree_view_column_get_sort_column_id(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_sort_indicator(setting)
      Gtk.gtk_tree_view_column_set_sort_indicator(self, setting)
    end
    
    # @return [Integer] 
    def get_sort_indicator()
      Gtk.gtk_tree_view_column_get_sort_indicator(self)
    end
    
    # @param [Symbol from _enum_gtk_sort_type_] order 
    # @return [nil] 
    def set_sort_order(order)
      Gtk.gtk_tree_view_column_set_sort_order(self, order)
    end
    
    # @return [Symbol from _enum_gtk_sort_type_] 
    def get_sort_order()
      Gtk.gtk_tree_view_column_get_sort_order(self)
    end
    
    # @param [GtkTreeModel] tree_model 
    # @param [GtkTreeIter] iter 
    # @param [Integer] is_expander 
    # @param [Integer] is_expanded 
    # @return [nil] 
    def cell_set_cell_data(tree_model, iter, is_expander, is_expanded)
      Gtk.gtk_tree_view_column_cell_set_cell_data(self, tree_model, iter, is_expander, is_expanded)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] cell_area 
    # @param [FFI::Pointer(*Gint)] x_offset 
    # @param [FFI::Pointer(*Gint)] y_offset 
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def cell_get_size(cell_area, x_offset, y_offset, width, height)
      Gtk.gtk_tree_view_column_cell_get_size(self, cell_area, x_offset, y_offset, width, height)
    end
    
    # @return [Integer] 
    def cell_is_visible()
      Gtk.gtk_tree_view_column_cell_is_visible(self)
    end
    
    # @param [GtkCellRenderer] cell 
    # @return [nil] 
    def focus_cell(cell)
      Gtk.gtk_tree_view_column_focus_cell(self, cell)
    end
    
    # @param [GtkCellRenderer] cell_renderer 
    # @param [FFI::Pointer(*Gint)] x_offset 
    # @param [FFI::Pointer(*Gint)] width 
    # @return [Integer] 
    def cell_get_position(cell_renderer, x_offset, width)
      Gtk.gtk_tree_view_column_cell_get_position(self, cell_renderer, x_offset, width)
    end
    
    # @return [nil] 
    def queue_resize()
      Gtk.gtk_tree_view_column_queue_resize(self)
    end
    
    # @return [GtkWidget] 
    def get_tree_view()
      GtkWidget.new Gtk.gtk_tree_view_column_get_tree_view(self)
    end
    
    # @return [GtkWidget] 
    def get_button()
      GtkWidget.new Gtk.gtk_tree_view_column_get_button(self)
    end
  end
  
  class GtkTreeViewColumn < FFI::Struct
    include GtkTreeViewColumnWrappers
    layout :parent_instance, :char,
           :priv, GtkTreeViewColumnPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :clicked ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTreeViewColumnClass < FFI::Struct
    layout :parent_class, :char,
           :clicked, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_type, :gtk_tree_view_column_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_new()
  # @return [GtkTreeViewColumn] 
  # @scope class
  attach_function :gtk_tree_view_column_new, :gtk_tree_view_column_new, [], GtkTreeViewColumn
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_new_with_area(area)
  # @param [GtkCellArea] area 
  # @return [GtkTreeViewColumn] 
  # @scope class
  attach_function :gtk_tree_view_column_new_with_area, :gtk_tree_view_column_new_with_area, [GtkCellArea], GtkTreeViewColumn
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_new_with_attributes(title, cell)
  # @param [String] title 
  # @param [GtkCellRenderer] cell 
  # @return [GtkTreeViewColumn] 
  # @scope class
  attach_function :gtk_tree_view_column_new_with_attributes, :gtk_tree_view_column_new_with_attributes, [:string, GtkCellRenderer], GtkTreeViewColumn
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_pack_start(tree_column, cell, expand)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_pack_start, :gtk_tree_view_column_pack_start, [GtkTreeViewColumn, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_pack_end(tree_column, cell, expand)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_pack_end, :gtk_tree_view_column_pack_end, [GtkTreeViewColumn, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_clear(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_clear, :gtk_tree_view_column_clear, [GtkTreeViewColumn], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_add_attribute(tree_column, cell_renderer, attribute, column)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell_renderer 
  # @param [String] attribute 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_add_attribute, :gtk_tree_view_column_add_attribute, [GtkTreeViewColumn, GtkCellRenderer, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_attributes(tree_column, cell_renderer)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell_renderer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_attributes, :gtk_tree_view_column_set_attributes, [GtkTreeViewColumn, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_cell_data_func(tree_column, cell_renderer, func, func_data, destroy)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell_renderer 
  # @param [Proc(_callback_gtk_tree_cell_data_func_)] func 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_cell_data_func, :gtk_tree_view_column_set_cell_data_func, [GtkTreeViewColumn, GtkCellRenderer, :gtk_tree_cell_data_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_clear_attributes(tree_column, cell_renderer)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell_renderer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_clear_attributes, :gtk_tree_view_column_clear_attributes, [GtkTreeViewColumn, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_spacing(tree_column, spacing)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_spacing, :gtk_tree_view_column_set_spacing, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_spacing(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_spacing, :gtk_tree_view_column_get_spacing, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_visible(tree_column, visible)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_visible, :gtk_tree_view_column_set_visible, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_visible(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_visible, :gtk_tree_view_column_get_visible, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_resizable(tree_column, resizable)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] resizable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_resizable, :gtk_tree_view_column_set_resizable, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_resizable(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_resizable, :gtk_tree_view_column_get_resizable, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_sizing(tree_column, type)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Symbol from _enum_gtk_tree_view_column_sizing_] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_sizing, :gtk_tree_view_column_set_sizing, [GtkTreeViewColumn, :gtk_tree_view_column_sizing], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_sizing(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Symbol from _enum_gtk_tree_view_column_sizing_] 
  # @scope class
  attach_function :gtk_tree_view_column_get_sizing, :gtk_tree_view_column_get_sizing, [GtkTreeViewColumn], :gtk_tree_view_column_sizing
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_x_offset(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_x_offset, :gtk_tree_view_column_get_x_offset, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_width(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_width, :gtk_tree_view_column_get_width, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_fixed_width(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_fixed_width, :gtk_tree_view_column_get_fixed_width, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_fixed_width(tree_column, fixed_width)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] fixed_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_fixed_width, :gtk_tree_view_column_set_fixed_width, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_min_width(tree_column, min_width)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] min_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_min_width, :gtk_tree_view_column_set_min_width, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_min_width(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_min_width, :gtk_tree_view_column_get_min_width, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_max_width(tree_column, max_width)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] max_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_max_width, :gtk_tree_view_column_set_max_width, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_max_width(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_max_width, :gtk_tree_view_column_get_max_width, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_clicked(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_clicked, :gtk_tree_view_column_clicked, [GtkTreeViewColumn], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_title(tree_column, title)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_title, :gtk_tree_view_column_set_title, [GtkTreeViewColumn, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_title(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [String] 
  # @scope class
  attach_function :gtk_tree_view_column_get_title, :gtk_tree_view_column_get_title, [GtkTreeViewColumn], :string
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_expand(tree_column, expand)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_expand, :gtk_tree_view_column_set_expand, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_expand(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_expand, :gtk_tree_view_column_get_expand, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_clickable(tree_column, clickable)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] clickable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_clickable, :gtk_tree_view_column_set_clickable, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_clickable(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_clickable, :gtk_tree_view_column_get_clickable, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_widget(tree_column, widget)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_widget, :gtk_tree_view_column_set_widget, [GtkTreeViewColumn, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_widget(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tree_view_column_get_widget, :gtk_tree_view_column_get_widget, [GtkTreeViewColumn], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_alignment(tree_column, xalign)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Float] xalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_alignment, :gtk_tree_view_column_set_alignment, [GtkTreeViewColumn, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_alignment(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Float] 
  # @scope class
  attach_function :gtk_tree_view_column_get_alignment, :gtk_tree_view_column_get_alignment, [GtkTreeViewColumn], :float
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_reorderable(tree_column, reorderable)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] reorderable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_reorderable, :gtk_tree_view_column_set_reorderable, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_reorderable(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_reorderable, :gtk_tree_view_column_get_reorderable, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_sort_column_id(tree_column, sort_column_id)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] sort_column_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_sort_column_id, :gtk_tree_view_column_set_sort_column_id, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_sort_column_id(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_sort_column_id, :gtk_tree_view_column_get_sort_column_id, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_sort_indicator(tree_column, setting)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_sort_indicator, :gtk_tree_view_column_set_sort_indicator, [GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_sort_indicator(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_get_sort_indicator, :gtk_tree_view_column_get_sort_indicator, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_set_sort_order(tree_column, order)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [Symbol from _enum_gtk_sort_type_] order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_set_sort_order, :gtk_tree_view_column_set_sort_order, [GtkTreeViewColumn, :gtk_sort_type], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_sort_order(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Symbol from _enum_gtk_sort_type_] 
  # @scope class
  attach_function :gtk_tree_view_column_get_sort_order, :gtk_tree_view_column_get_sort_order, [GtkTreeViewColumn], :gtk_sort_type
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_cell_set_cell_data(tree_column, tree_model, iter, is_expander, is_expanded)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [Integer] is_expander 
  # @param [Integer] is_expanded 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_cell_set_cell_data, :gtk_tree_view_column_cell_set_cell_data, [GtkTreeViewColumn, GtkTreeModel, GtkTreeIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_cell_get_size(tree_column, cell_area, x_offset, y_offset, width, height)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [FFI::Pointer(*GdkRectangle)] cell_area 
  # @param [FFI::Pointer(*Gint)] x_offset 
  # @param [FFI::Pointer(*Gint)] y_offset 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_cell_get_size, :gtk_tree_view_column_cell_get_size, [GtkTreeViewColumn, :pointer, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_cell_is_visible(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_cell_is_visible, :gtk_tree_view_column_cell_is_visible, [GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_focus_cell(tree_column, cell)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_focus_cell, :gtk_tree_view_column_focus_cell, [GtkTreeViewColumn, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_cell_get_position(tree_column, cell_renderer, x_offset, width)
  # @param [GtkTreeViewColumn] tree_column 
  # @param [GtkCellRenderer] cell_renderer 
  # @param [FFI::Pointer(*Gint)] x_offset 
  # @param [FFI::Pointer(*Gint)] width 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_cell_get_position, :gtk_tree_view_column_cell_get_position, [GtkTreeViewColumn, GtkCellRenderer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_queue_resize(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_column_queue_resize, :gtk_tree_view_column_queue_resize, [GtkTreeViewColumn], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_tree_view(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tree_view_column_get_tree_view, :gtk_tree_view_column_get_tree_view, [GtkTreeViewColumn], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_get_button(tree_column)
  # @param [GtkTreeViewColumn] tree_column 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tree_view_column_get_button, :gtk_tree_view_column_get_button, [GtkTreeViewColumn], GtkWidget
  
  # (Not documented)
  # 
  # = Fields:
  # :bg_color ::
  #   (unknown) < public >
  # :fg_color ::
  #   (unknown) 
  # :rise ::
  #   (Integer) super/subscript rise, can be negative
  # :underline ::
  #   (Integer) PangoUnderline
  # :strikethrough ::
  #   (Integer) 
  # :draw_bg ::
  #   (Integer) Whether to use background-related values; this is irrelevant for
  #   the values struct when in a tag, but is used for the composite
  #   values struct; it's true if any of the tags being composited
  #   had background stuff set.
  # :inside_selection ::
  #   (Integer) These are only used when we are actually laying out and rendering
  #   a paragraph; not when a GtkTextAppearance is part of a
  #   GtkTextAttributes.
  # :is_text ::
  #   (Integer) 
  # :rgba ::
  #   (Array<FFI::Pointer(*GdkRGBA)>) 
  # :padding ::
  #   (Array<Integer>) unusable, just for ABI compat
  class GtkTextAppearance < FFI::Struct
    layout :bg_color, :char,
           :fg_color, :char,
           :rise, :int,
           :underline, :uint,
           :strikethrough, :uint,
           :draw_bg, :uint,
           :inside_selection, :uint,
           :is_text, :uint,
           :rgba, [:pointer, 2],
           :padding, [:uint, 2]
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :refcount ::
  #   (Integer) < private >
  # :appearance ::
  #   (GtkTextAppearance) < public >
  # :justification ::
  #   (Symbol from _enum_gtk_justification_) 
  # :direction ::
  #   (Symbol from _enum_gtk_text_direction_) 
  # :font ::
  #   (FFI::Pointer(*PangoFontDescription)) Individual chunks of this can be set/unset as a group
  # :font_scale ::
  #   (Float) 
  # :left_margin ::
  #   (Integer) 
  # :right_margin ::
  #   (Integer) 
  # :indent ::
  #   (Integer) 
  # :pixels_above_lines ::
  #   (Integer) 
  # :pixels_below_lines ::
  #   (Integer) 
  # :pixels_inside_wrap ::
  #   (Integer) 
  # :tabs ::
  #   (FFI::Pointer(*PangoTabArray)) 
  # :wrap_mode ::
  #   (Symbol from _enum_gtk_wrap_mode_) How to handle wrap-around for this tag.
  #   Must be GTK_WRAPMODE_CHAR,
  #   GTK_WRAPMODE_NONE, GTK_WRAPMODE_WORD
  # :language ::
  #   (FFI::Pointer(*PangoLanguage)) 
  # :pg_bg_color ::
  #   (FFI::Pointer(*GdkColor)) < private >
  # :invisible ::
  #   (Integer) hide the text 
  # :bg_full_height ::
  #   (Integer) Background is fit to full line height rather than
  #   baseline +/- ascent/descent (font height)
  # :editable ::
  #   (Integer) can edit this text
  # :pg_bg_rgba ::
  #   (FFI::Pointer(*GdkRGBA)) < private >
  # :padding ::
  #   (Array<Integer>) 
  module GtkTextAttributesWrappers
    # @return [GtkTextAttributes] 
    def copy()
      GtkTextAttributes.new Gtk.gtk_text_attributes_copy(self)
    end
    
    # @param [FFI::Pointer(*GtkTextAttributes)] dest 
    # @return [nil] 
    def copy_values(dest)
      Gtk.gtk_text_attributes_copy_values(self, dest)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_text_attributes_unref(self)
    end
    
    # @return [GtkTextAttributes] 
    def ref()
      GtkTextAttributes.new Gtk.gtk_text_attributes_ref(self)
    end
  end
  
  class GtkTextAttributes < FFI::Struct
    include GtkTextAttributesWrappers
    layout :refcount, :uint,
           :appearance, GtkTextAppearance.by_value,
           :justification, :gtk_justification,
           :direction, :gtk_text_direction,
           :font, :pointer,
           :font_scale, :double,
           :left_margin, :int,
           :right_margin, :int,
           :indent, :int,
           :pixels_above_lines, :int,
           :pixels_below_lines, :int,
           :pixels_inside_wrap, :int,
           :tabs, :pointer,
           :wrap_mode, :gtk_wrap_mode,
           :language, :pointer,
           :pg_bg_color, :pointer,
           :invisible, :uint,
           :bg_full_height, :uint,
           :editable, :uint,
           :pg_bg_rgba, :pointer,
           :padding, [:uint, 3]
  end
  
  # (Not documented)
  # 
  # @method gtk_text_attributes_new()
  # @return [GtkTextAttributes] 
  # @scope class
  attach_function :gtk_text_attributes_new, :gtk_text_attributes_new, [], GtkTextAttributes
  
  # (Not documented)
  # 
  # @method gtk_text_attributes_copy(src)
  # @param [GtkTextAttributes] src 
  # @return [GtkTextAttributes] 
  # @scope class
  attach_function :gtk_text_attributes_copy, :gtk_text_attributes_copy, [GtkTextAttributes], GtkTextAttributes
  
  # (Not documented)
  # 
  # @method gtk_text_attributes_copy_values(src, dest)
  # @param [GtkTextAttributes] src 
  # @param [GtkTextAttributes] dest 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_attributes_copy_values, :gtk_text_attributes_copy_values, [GtkTextAttributes, GtkTextAttributes], :void
  
  # (Not documented)
  # 
  # @method gtk_text_attributes_unref(values)
  # @param [GtkTextAttributes] values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_attributes_unref, :gtk_text_attributes_unref, [GtkTextAttributes], :void
  
  # (Not documented)
  # 
  # @method gtk_text_attributes_ref(values)
  # @param [GtkTextAttributes] values 
  # @return [GtkTextAttributes] 
  # @scope class
  attach_function :gtk_text_attributes_ref, :gtk_text_attributes_ref, [GtkTextAttributes], GtkTextAttributes
  
  # (Not documented)
  # 
  # @method gtk_text_attributes_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_attributes_get_type, :gtk_text_attributes_get_type, [], :uint
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :segment ::
  #   (FFI::Pointer(Gpointer)) < private >
  module GtkTextChildAnchorWrappers
    # @return [FFI::Pointer(*GList)] 
    def get_widgets()
      Gtk.gtk_text_child_anchor_get_widgets(self)
    end
    
    # @return [Integer] 
    def get_deleted()
      Gtk.gtk_text_child_anchor_get_deleted(self)
    end
    
    # @param [GtkWidget] child 
    # @param [FFI::Pointer(*GtkTextLayout)] layout 
    # @return [nil] 
    def register_child(child, layout)
      Gtk.gtk_text_child_anchor_register_child(self, child, layout)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def unregister_child(child)
      Gtk.gtk_text_child_anchor_unregister_child(self, child)
    end
    
    # @param [FFI::Pointer(*GtkTextLayout)] layout 
    # @return [nil] 
    def queue_resize(layout)
      Gtk.gtk_text_child_anchor_queue_resize(self, layout)
    end
  end
  
  class GtkTextChildAnchor < FFI::Struct
    include GtkTextChildAnchorWrappers
    layout :parent_instance, :char,
           :segment, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTextChildAnchorClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_child_anchor_get_type, :gtk_text_child_anchor_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_new()
  # @return [GtkTextChildAnchor] 
  # @scope class
  attach_function :gtk_text_child_anchor_new, :gtk_text_child_anchor_new, [], GtkTextChildAnchor
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_get_widgets(anchor)
  # @param [GtkTextChildAnchor] anchor 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_text_child_anchor_get_widgets, :gtk_text_child_anchor_get_widgets, [GtkTextChildAnchor], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_get_deleted(anchor)
  # @param [GtkTextChildAnchor] anchor 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_child_anchor_get_deleted, :gtk_text_child_anchor_get_deleted, [GtkTextChildAnchor], :int
  
  # (Not documented)
  class GtkTextTagPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkTextTagPrivate) 
  module GtkTextTagWrappers
    # @return [Integer] 
    def get_priority()
      Gtk.gtk_text_tag_get_priority(self)
    end
    
    # @param [Integer] priority 
    # @return [nil] 
    def set_priority(priority)
      Gtk.gtk_text_tag_set_priority(self, priority)
    end
    
    # @param [FFI::Pointer(*GObject)] event_object 
    # @param [FFI::Pointer(*GdkEvent)] event 
    # @param [FFI::Pointer(*GtkTextIter)] iter 
    # @return [Integer] 
    def event(event_object, event, iter)
      Gtk.gtk_text_tag_event(self, event_object, event, iter)
    end
  end
  
  class GtkTextTag < FFI::Struct
    include GtkTextTagWrappers
    layout :parent_instance, :char,
           :priv, GtkTextTagPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :event ::
  #   (FFI::Pointer(*)) location of event in buffer
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTextTagClass < FFI::Struct
    layout :parent_class, :char,
           :event, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_tag_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_tag_get_type, :gtk_text_tag_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_tag_new(name)
  # @param [String] name 
  # @return [GtkTextTag] 
  # @scope class
  attach_function :gtk_text_tag_new, :gtk_text_tag_new, [:string], GtkTextTag
  
  # (Not documented)
  # 
  # @method gtk_text_tag_get_priority(tag)
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_tag_get_priority, :gtk_text_tag_get_priority, [GtkTextTag], :int
  
  # (Not documented)
  # 
  # @method gtk_text_tag_set_priority(tag, priority)
  # @param [GtkTextTag] tag 
  # @param [Integer] priority 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_tag_set_priority, :gtk_text_tag_set_priority, [GtkTextTag, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_tag_event(tag, event_object, event, iter)
  # @param [GtkTextTag] tag 
  # @param [FFI::Pointer(*GObject)] event_object 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @param [FFI::Pointer(*GtkTextIter)] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_tag_event, :gtk_text_tag_event, [GtkTextTag, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_text_search_flags).</em>
  # 
  # === Options:
  # :visible_only ::
  #   
  # :text_only ::
  #   
  # :case_insensitive ::
  #   
  # 
  # @method _enum_gtk_text_search_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_text_search_flags, [
    :visible_only, 1,
    :text_only, 2,
    :case_insensitive, 4
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :dummy1 ::
  #   (FFI::Pointer(Gpointer)) < private >
  # :dummy2 ::
  #   (FFI::Pointer(Gpointer)) 
  # :dummy3 ::
  #   (Integer) 
  # :dummy4 ::
  #   (Integer) 
  # :dummy5 ::
  #   (Integer) 
  # :dummy6 ::
  #   (Integer) 
  # :dummy7 ::
  #   (Integer) 
  # :dummy8 ::
  #   (Integer) 
  # :dummy9 ::
  #   (FFI::Pointer(Gpointer)) 
  # :dummy10 ::
  #   (FFI::Pointer(Gpointer)) 
  # :dummy11 ::
  #   (Integer) 
  # :dummy12 ::
  #   (Integer) 
  # :dummy13 ::
  #   (Integer) padding
  # :dummy14 ::
  #   (FFI::Pointer(Gpointer)) 
  module GtkTextIterWrappers
    # @return [GtkTextBuffer] 
    def get_buffer()
      GtkTextBuffer.new Gtk.gtk_text_iter_get_buffer(self)
    end
    
    # @return [GtkTextIter] 
    def copy()
      GtkTextIter.new Gtk.gtk_text_iter_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_text_iter_free(self)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] other 
    # @return [nil] 
    def assign(other)
      Gtk.gtk_text_iter_assign(self, other)
    end
    
    # @return [Integer] 
    def get_offset()
      Gtk.gtk_text_iter_get_offset(self)
    end
    
    # @return [Integer] 
    def get_line()
      Gtk.gtk_text_iter_get_line(self)
    end
    
    # @return [Integer] 
    def get_line_offset()
      Gtk.gtk_text_iter_get_line_offset(self)
    end
    
    # @return [Integer] 
    def get_line_index()
      Gtk.gtk_text_iter_get_line_index(self)
    end
    
    # @return [Integer] 
    def get_visible_line_offset()
      Gtk.gtk_text_iter_get_visible_line_offset(self)
    end
    
    # @return [Integer] 
    def get_visible_line_index()
      Gtk.gtk_text_iter_get_visible_line_index(self)
    end
    
    # @return [Integer] 
    def get_char()
      Gtk.gtk_text_iter_get_char(self)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] end_ 
    # @return [String] 
    def get_slice(end_)
      Gtk.gtk_text_iter_get_slice(self, end_)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] end_ 
    # @return [String] 
    def get_text(end_)
      Gtk.gtk_text_iter_get_text(self, end_)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] end_ 
    # @return [String] 
    def get_visible_slice(end_)
      Gtk.gtk_text_iter_get_visible_slice(self, end_)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] end_ 
    # @return [String] 
    def get_visible_text(end_)
      Gtk.gtk_text_iter_get_visible_text(self, end_)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_pixbuf()
      Gtk.gtk_text_iter_get_pixbuf(self)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_marks()
      Gtk.gtk_text_iter_get_marks(self)
    end
    
    # @return [GtkTextChildAnchor] 
    def get_child_anchor()
      GtkTextChildAnchor.new Gtk.gtk_text_iter_get_child_anchor(self)
    end
    
    # @param [Integer] toggled_on 
    # @return [FFI::Pointer(*GSList)] 
    def get_toggled_tags(toggled_on)
      Gtk.gtk_text_iter_get_toggled_tags(self, toggled_on)
    end
    
    # @param [GtkTextTag] tag 
    # @return [Integer] 
    def begins_tag(tag)
      Gtk.gtk_text_iter_begins_tag(self, tag)
    end
    
    # @param [GtkTextTag] tag 
    # @return [Integer] 
    def ends_tag(tag)
      Gtk.gtk_text_iter_ends_tag(self, tag)
    end
    
    # @param [GtkTextTag] tag 
    # @return [Integer] 
    def toggles_tag(tag)
      Gtk.gtk_text_iter_toggles_tag(self, tag)
    end
    
    # @param [GtkTextTag] tag 
    # @return [Integer] 
    def has_tag(tag)
      Gtk.gtk_text_iter_has_tag(self, tag)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_tags()
      Gtk.gtk_text_iter_get_tags(self)
    end
    
    # @param [Integer] default_setting 
    # @return [Integer] 
    def editable(default_setting)
      Gtk.gtk_text_iter_editable(self, default_setting)
    end
    
    # @param [Integer] default_editability 
    # @return [Integer] 
    def can_insert(default_editability)
      Gtk.gtk_text_iter_can_insert(self, default_editability)
    end
    
    # @return [Integer] 
    def starts_word()
      Gtk.gtk_text_iter_starts_word(self)
    end
    
    # @return [Integer] 
    def ends_word()
      Gtk.gtk_text_iter_ends_word(self)
    end
    
    # @return [Integer] 
    def inside_word()
      Gtk.gtk_text_iter_inside_word(self)
    end
    
    # @return [Integer] 
    def starts_sentence()
      Gtk.gtk_text_iter_starts_sentence(self)
    end
    
    # @return [Integer] 
    def ends_sentence()
      Gtk.gtk_text_iter_ends_sentence(self)
    end
    
    # @return [Integer] 
    def inside_sentence()
      Gtk.gtk_text_iter_inside_sentence(self)
    end
    
    # @return [Integer] 
    def starts_line()
      Gtk.gtk_text_iter_starts_line(self)
    end
    
    # @return [Integer] 
    def ends_line()
      Gtk.gtk_text_iter_ends_line(self)
    end
    
    # @return [Integer] 
    def is_cursor_position()
      Gtk.gtk_text_iter_is_cursor_position(self)
    end
    
    # @return [Integer] 
    def get_chars_in_line()
      Gtk.gtk_text_iter_get_chars_in_line(self)
    end
    
    # @return [Integer] 
    def get_bytes_in_line()
      Gtk.gtk_text_iter_get_bytes_in_line(self)
    end
    
    # @param [GtkTextAttributes] values 
    # @return [Integer] 
    def get_attributes(values)
      Gtk.gtk_text_iter_get_attributes(self, values)
    end
    
    # @return [FFI::Pointer(*PangoLanguage)] 
    def get_language()
      Gtk.gtk_text_iter_get_language(self)
    end
    
    # @return [Integer] 
    def is_end()
      Gtk.gtk_text_iter_is_end(self)
    end
    
    # @return [Integer] 
    def is_start()
      Gtk.gtk_text_iter_is_start(self)
    end
    
    # @return [Integer] 
    def forward_char()
      Gtk.gtk_text_iter_forward_char(self)
    end
    
    # @return [Integer] 
    def backward_char()
      Gtk.gtk_text_iter_backward_char(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_chars(count)
      Gtk.gtk_text_iter_forward_chars(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_chars(count)
      Gtk.gtk_text_iter_backward_chars(self, count)
    end
    
    # @return [Integer] 
    def forward_line()
      Gtk.gtk_text_iter_forward_line(self)
    end
    
    # @return [Integer] 
    def backward_line()
      Gtk.gtk_text_iter_backward_line(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_lines(count)
      Gtk.gtk_text_iter_forward_lines(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_lines(count)
      Gtk.gtk_text_iter_backward_lines(self, count)
    end
    
    # @return [Integer] 
    def forward_word_end()
      Gtk.gtk_text_iter_forward_word_end(self)
    end
    
    # @return [Integer] 
    def backward_word_start()
      Gtk.gtk_text_iter_backward_word_start(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_word_ends(count)
      Gtk.gtk_text_iter_forward_word_ends(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_word_starts(count)
      Gtk.gtk_text_iter_backward_word_starts(self, count)
    end
    
    # @return [Integer] 
    def forward_visible_line()
      Gtk.gtk_text_iter_forward_visible_line(self)
    end
    
    # @return [Integer] 
    def backward_visible_line()
      Gtk.gtk_text_iter_backward_visible_line(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_visible_lines(count)
      Gtk.gtk_text_iter_forward_visible_lines(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_visible_lines(count)
      Gtk.gtk_text_iter_backward_visible_lines(self, count)
    end
    
    # @return [Integer] 
    def forward_visible_word_end()
      Gtk.gtk_text_iter_forward_visible_word_end(self)
    end
    
    # @return [Integer] 
    def backward_visible_word_start()
      Gtk.gtk_text_iter_backward_visible_word_start(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_visible_word_ends(count)
      Gtk.gtk_text_iter_forward_visible_word_ends(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_visible_word_starts(count)
      Gtk.gtk_text_iter_backward_visible_word_starts(self, count)
    end
    
    # @return [Integer] 
    def forward_sentence_end()
      Gtk.gtk_text_iter_forward_sentence_end(self)
    end
    
    # @return [Integer] 
    def backward_sentence_start()
      Gtk.gtk_text_iter_backward_sentence_start(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_sentence_ends(count)
      Gtk.gtk_text_iter_forward_sentence_ends(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_sentence_starts(count)
      Gtk.gtk_text_iter_backward_sentence_starts(self, count)
    end
    
    # @return [Integer] 
    def forward_cursor_position()
      Gtk.gtk_text_iter_forward_cursor_position(self)
    end
    
    # @return [Integer] 
    def backward_cursor_position()
      Gtk.gtk_text_iter_backward_cursor_position(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_cursor_positions(count)
      Gtk.gtk_text_iter_forward_cursor_positions(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_cursor_positions(count)
      Gtk.gtk_text_iter_backward_cursor_positions(self, count)
    end
    
    # @return [Integer] 
    def forward_visible_cursor_position()
      Gtk.gtk_text_iter_forward_visible_cursor_position(self)
    end
    
    # @return [Integer] 
    def backward_visible_cursor_position()
      Gtk.gtk_text_iter_backward_visible_cursor_position(self)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def forward_visible_cursor_positions(count)
      Gtk.gtk_text_iter_forward_visible_cursor_positions(self, count)
    end
    
    # @param [Integer] count 
    # @return [Integer] 
    def backward_visible_cursor_positions(count)
      Gtk.gtk_text_iter_backward_visible_cursor_positions(self, count)
    end
    
    # @param [Integer] char_offset 
    # @return [nil] 
    def set_offset(char_offset)
      Gtk.gtk_text_iter_set_offset(self, char_offset)
    end
    
    # @param [Integer] line_number 
    # @return [nil] 
    def set_line(line_number)
      Gtk.gtk_text_iter_set_line(self, line_number)
    end
    
    # @param [Integer] char_on_line 
    # @return [nil] 
    def set_line_offset(char_on_line)
      Gtk.gtk_text_iter_set_line_offset(self, char_on_line)
    end
    
    # @param [Integer] byte_on_line 
    # @return [nil] 
    def set_line_index(byte_on_line)
      Gtk.gtk_text_iter_set_line_index(self, byte_on_line)
    end
    
    # @return [nil] 
    def forward_to_end()
      Gtk.gtk_text_iter_forward_to_end(self)
    end
    
    # @return [Integer] 
    def forward_to_line_end()
      Gtk.gtk_text_iter_forward_to_line_end(self)
    end
    
    # @param [Integer] char_on_line 
    # @return [nil] 
    def set_visible_line_offset(char_on_line)
      Gtk.gtk_text_iter_set_visible_line_offset(self, char_on_line)
    end
    
    # @param [Integer] byte_on_line 
    # @return [nil] 
    def set_visible_line_index(byte_on_line)
      Gtk.gtk_text_iter_set_visible_line_index(self, byte_on_line)
    end
    
    # @param [GtkTextTag] tag 
    # @return [Integer] 
    def forward_to_tag_toggle(tag)
      Gtk.gtk_text_iter_forward_to_tag_toggle(self, tag)
    end
    
    # @param [GtkTextTag] tag 
    # @return [Integer] 
    def backward_to_tag_toggle(tag)
      Gtk.gtk_text_iter_backward_to_tag_toggle(self, tag)
    end
    
    # @param [Proc(_callback_gtk_text_char_predicate_)] pred 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(*GtkTextIter)] limit 
    # @return [Integer] 
    def forward_find_char(pred, user_data, limit)
      Gtk.gtk_text_iter_forward_find_char(self, pred, user_data, limit)
    end
    
    # @param [Proc(_callback_gtk_text_char_predicate_)] pred 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(*GtkTextIter)] limit 
    # @return [Integer] 
    def backward_find_char(pred, user_data, limit)
      Gtk.gtk_text_iter_backward_find_char(self, pred, user_data, limit)
    end
    
    # @param [String] str 
    # @param [Symbol from _enum_gtk_text_search_flags_] flags 
    # @param [FFI::Pointer(*GtkTextIter)] match_start 
    # @param [FFI::Pointer(*GtkTextIter)] match_end 
    # @param [FFI::Pointer(*GtkTextIter)] limit 
    # @return [Integer] 
    def forward_search(str, flags, match_start, match_end, limit)
      Gtk.gtk_text_iter_forward_search(self, str, flags, match_start, match_end, limit)
    end
    
    # @param [String] str 
    # @param [Symbol from _enum_gtk_text_search_flags_] flags 
    # @param [FFI::Pointer(*GtkTextIter)] match_start 
    # @param [FFI::Pointer(*GtkTextIter)] match_end 
    # @param [FFI::Pointer(*GtkTextIter)] limit 
    # @return [Integer] 
    def backward_search(str, flags, match_start, match_end, limit)
      Gtk.gtk_text_iter_backward_search(self, str, flags, match_start, match_end, limit)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] rhs 
    # @return [Integer] 
    def equal(rhs)
      Gtk.gtk_text_iter_equal(self, rhs)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] rhs 
    # @return [Integer] 
    def compare(rhs)
      Gtk.gtk_text_iter_compare(self, rhs)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] start 
    # @param [FFI::Pointer(*GtkTextIter)] end_ 
    # @return [Integer] 
    def in_range(start, end_)
      Gtk.gtk_text_iter_in_range(self, start, end_)
    end
    
    # @param [FFI::Pointer(*GtkTextIter)] second 
    # @return [nil] 
    def order(second)
      Gtk.gtk_text_iter_order(self, second)
    end
  end
  
  class GtkTextIter < FFI::Struct
    include GtkTextIterWrappers
    layout :dummy1, :pointer,
           :dummy2, :pointer,
           :dummy3, :int,
           :dummy4, :int,
           :dummy5, :int,
           :dummy6, :int,
           :dummy7, :int,
           :dummy8, :int,
           :dummy9, :pointer,
           :dummy10, :pointer,
           :dummy11, :int,
           :dummy12, :int,
           :dummy13, :int,
           :dummy14, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_buffer(iter)
  # @param [GtkTextIter] iter 
  # @return [FFI::Pointer(*GtkTextBuffer)] 
  # @scope class
  attach_function :gtk_text_iter_get_buffer, :gtk_text_iter_get_buffer, [GtkTextIter], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_iter_copy(iter)
  # @param [GtkTextIter] iter 
  # @return [GtkTextIter] 
  # @scope class
  attach_function :gtk_text_iter_copy, :gtk_text_iter_copy, [GtkTextIter], GtkTextIter
  
  # (Not documented)
  # 
  # @method gtk_text_iter_free(iter)
  # @param [GtkTextIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_free, :gtk_text_iter_free, [GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_assign(iter, other)
  # @param [GtkTextIter] iter 
  # @param [GtkTextIter] other 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_assign, :gtk_text_iter_assign, [GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_type, :gtk_text_iter_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_offset(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_offset, :gtk_text_iter_get_offset, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_line, :gtk_text_iter_get_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_line_offset(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_line_offset, :gtk_text_iter_get_line_offset, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_line_index(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_line_index, :gtk_text_iter_get_line_index, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_visible_line_offset(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_visible_line_offset, :gtk_text_iter_get_visible_line_offset, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_visible_line_index(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_visible_line_index, :gtk_text_iter_get_visible_line_index, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_char(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_char, :gtk_text_iter_get_char, [GtkTextIter], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_slice(start, end_)
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_iter_get_slice, :gtk_text_iter_get_slice, [GtkTextIter, GtkTextIter], :string
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_text(start, end_)
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_iter_get_text, :gtk_text_iter_get_text, [GtkTextIter, GtkTextIter], :string
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_visible_slice(start, end_)
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_iter_get_visible_slice, :gtk_text_iter_get_visible_slice, [GtkTextIter, GtkTextIter], :string
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_visible_text(start, end_)
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_iter_get_visible_text, :gtk_text_iter_get_visible_text, [GtkTextIter, GtkTextIter], :string
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_pixbuf(iter)
  # @param [GtkTextIter] iter 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_text_iter_get_pixbuf, :gtk_text_iter_get_pixbuf, [GtkTextIter], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_marks(iter)
  # @param [GtkTextIter] iter 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_text_iter_get_marks, :gtk_text_iter_get_marks, [GtkTextIter], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_child_anchor(iter)
  # @param [GtkTextIter] iter 
  # @return [GtkTextChildAnchor] 
  # @scope class
  attach_function :gtk_text_iter_get_child_anchor, :gtk_text_iter_get_child_anchor, [GtkTextIter], GtkTextChildAnchor
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_toggled_tags(iter, toggled_on)
  # @param [GtkTextIter] iter 
  # @param [Integer] toggled_on 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_text_iter_get_toggled_tags, :gtk_text_iter_get_toggled_tags, [GtkTextIter, :int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_iter_begins_tag(iter, tag)
  # @param [GtkTextIter] iter 
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_begins_tag, :gtk_text_iter_begins_tag, [GtkTextIter, GtkTextTag], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_ends_tag(iter, tag)
  # @param [GtkTextIter] iter 
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_ends_tag, :gtk_text_iter_ends_tag, [GtkTextIter, GtkTextTag], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_toggles_tag(iter, tag)
  # @param [GtkTextIter] iter 
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_toggles_tag, :gtk_text_iter_toggles_tag, [GtkTextIter, GtkTextTag], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_has_tag(iter, tag)
  # @param [GtkTextIter] iter 
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_has_tag, :gtk_text_iter_has_tag, [GtkTextIter, GtkTextTag], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_tags(iter)
  # @param [GtkTextIter] iter 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_text_iter_get_tags, :gtk_text_iter_get_tags, [GtkTextIter], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_iter_editable(iter, default_setting)
  # @param [GtkTextIter] iter 
  # @param [Integer] default_setting 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_editable, :gtk_text_iter_editable, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_can_insert(iter, default_editability)
  # @param [GtkTextIter] iter 
  # @param [Integer] default_editability 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_can_insert, :gtk_text_iter_can_insert, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_starts_word(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_starts_word, :gtk_text_iter_starts_word, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_ends_word(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_ends_word, :gtk_text_iter_ends_word, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_inside_word(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_inside_word, :gtk_text_iter_inside_word, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_starts_sentence(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_starts_sentence, :gtk_text_iter_starts_sentence, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_ends_sentence(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_ends_sentence, :gtk_text_iter_ends_sentence, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_inside_sentence(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_inside_sentence, :gtk_text_iter_inside_sentence, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_starts_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_starts_line, :gtk_text_iter_starts_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_ends_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_ends_line, :gtk_text_iter_ends_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_is_cursor_position(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_is_cursor_position, :gtk_text_iter_is_cursor_position, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_chars_in_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_chars_in_line, :gtk_text_iter_get_chars_in_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_bytes_in_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_bytes_in_line, :gtk_text_iter_get_bytes_in_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_attributes(iter, values)
  # @param [GtkTextIter] iter 
  # @param [GtkTextAttributes] values 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_get_attributes, :gtk_text_iter_get_attributes, [GtkTextIter, GtkTextAttributes], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_get_language(iter)
  # @param [GtkTextIter] iter 
  # @return [FFI::Pointer(*PangoLanguage)] 
  # @scope class
  attach_function :gtk_text_iter_get_language, :gtk_text_iter_get_language, [GtkTextIter], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_iter_is_end(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_is_end, :gtk_text_iter_is_end, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_is_start(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_is_start, :gtk_text_iter_is_start, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_char(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_char, :gtk_text_iter_forward_char, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_char(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_char, :gtk_text_iter_backward_char, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_chars(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_chars, :gtk_text_iter_forward_chars, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_chars(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_chars, :gtk_text_iter_backward_chars, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_line, :gtk_text_iter_forward_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_line, :gtk_text_iter_backward_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_lines(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_lines, :gtk_text_iter_forward_lines, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_lines(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_lines, :gtk_text_iter_backward_lines, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_word_end(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_word_end, :gtk_text_iter_forward_word_end, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_word_start(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_word_start, :gtk_text_iter_backward_word_start, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_word_ends(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_word_ends, :gtk_text_iter_forward_word_ends, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_word_starts(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_word_starts, :gtk_text_iter_backward_word_starts, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_visible_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_visible_line, :gtk_text_iter_forward_visible_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_visible_line(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_visible_line, :gtk_text_iter_backward_visible_line, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_visible_lines(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_visible_lines, :gtk_text_iter_forward_visible_lines, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_visible_lines(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_visible_lines, :gtk_text_iter_backward_visible_lines, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_visible_word_end(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_visible_word_end, :gtk_text_iter_forward_visible_word_end, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_visible_word_start(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_visible_word_start, :gtk_text_iter_backward_visible_word_start, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_visible_word_ends(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_visible_word_ends, :gtk_text_iter_forward_visible_word_ends, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_visible_word_starts(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_visible_word_starts, :gtk_text_iter_backward_visible_word_starts, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_sentence_end(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_sentence_end, :gtk_text_iter_forward_sentence_end, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_sentence_start(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_sentence_start, :gtk_text_iter_backward_sentence_start, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_sentence_ends(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_sentence_ends, :gtk_text_iter_forward_sentence_ends, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_sentence_starts(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_sentence_starts, :gtk_text_iter_backward_sentence_starts, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_cursor_position(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_cursor_position, :gtk_text_iter_forward_cursor_position, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_cursor_position(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_cursor_position, :gtk_text_iter_backward_cursor_position, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_cursor_positions(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_cursor_positions, :gtk_text_iter_forward_cursor_positions, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_cursor_positions(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_cursor_positions, :gtk_text_iter_backward_cursor_positions, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_visible_cursor_position(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_visible_cursor_position, :gtk_text_iter_forward_visible_cursor_position, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_visible_cursor_position(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_visible_cursor_position, :gtk_text_iter_backward_visible_cursor_position, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_visible_cursor_positions(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_visible_cursor_positions, :gtk_text_iter_forward_visible_cursor_positions, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_visible_cursor_positions(iter, count)
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_visible_cursor_positions, :gtk_text_iter_backward_visible_cursor_positions, [GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_set_offset(iter, char_offset)
  # @param [GtkTextIter] iter 
  # @param [Integer] char_offset 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_set_offset, :gtk_text_iter_set_offset, [GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_set_line(iter, line_number)
  # @param [GtkTextIter] iter 
  # @param [Integer] line_number 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_set_line, :gtk_text_iter_set_line, [GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_set_line_offset(iter, char_on_line)
  # @param [GtkTextIter] iter 
  # @param [Integer] char_on_line 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_set_line_offset, :gtk_text_iter_set_line_offset, [GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_set_line_index(iter, byte_on_line)
  # @param [GtkTextIter] iter 
  # @param [Integer] byte_on_line 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_set_line_index, :gtk_text_iter_set_line_index, [GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_to_end(iter)
  # @param [GtkTextIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_forward_to_end, :gtk_text_iter_forward_to_end, [GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_to_line_end(iter)
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_to_line_end, :gtk_text_iter_forward_to_line_end, [GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_set_visible_line_offset(iter, char_on_line)
  # @param [GtkTextIter] iter 
  # @param [Integer] char_on_line 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_set_visible_line_offset, :gtk_text_iter_set_visible_line_offset, [GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_set_visible_line_index(iter, byte_on_line)
  # @param [GtkTextIter] iter 
  # @param [Integer] byte_on_line 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_set_visible_line_index, :gtk_text_iter_set_visible_line_index, [GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_to_tag_toggle(iter, tag)
  # @param [GtkTextIter] iter 
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_to_tag_toggle, :gtk_text_iter_forward_to_tag_toggle, [GtkTextIter, GtkTextTag], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_to_tag_toggle(iter, tag)
  # @param [GtkTextIter] iter 
  # @param [GtkTextTag] tag 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_to_tag_toggle, :gtk_text_iter_backward_to_tag_toggle, [GtkTextIter, GtkTextTag], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_text_char_predicate_(ch, user_data)
  # @param [Integer] ch 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_text_char_predicate, [:uint, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_find_char(iter, pred, user_data, limit)
  # @param [GtkTextIter] iter 
  # @param [Proc(_callback_gtk_text_char_predicate_)] pred 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [GtkTextIter] limit 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_find_char, :gtk_text_iter_forward_find_char, [GtkTextIter, :gtk_text_char_predicate, :pointer, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_find_char(iter, pred, user_data, limit)
  # @param [GtkTextIter] iter 
  # @param [Proc(_callback_gtk_text_char_predicate_)] pred 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [GtkTextIter] limit 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_find_char, :gtk_text_iter_backward_find_char, [GtkTextIter, :gtk_text_char_predicate, :pointer, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_forward_search(iter, str, flags, match_start, match_end, limit)
  # @param [GtkTextIter] iter 
  # @param [String] str 
  # @param [Symbol from _enum_gtk_text_search_flags_] flags 
  # @param [GtkTextIter] match_start 
  # @param [GtkTextIter] match_end 
  # @param [GtkTextIter] limit 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_forward_search, :gtk_text_iter_forward_search, [GtkTextIter, :string, :gtk_text_search_flags, GtkTextIter, GtkTextIter, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_backward_search(iter, str, flags, match_start, match_end, limit)
  # @param [GtkTextIter] iter 
  # @param [String] str 
  # @param [Symbol from _enum_gtk_text_search_flags_] flags 
  # @param [GtkTextIter] match_start 
  # @param [GtkTextIter] match_end 
  # @param [GtkTextIter] limit 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_backward_search, :gtk_text_iter_backward_search, [GtkTextIter, :string, :gtk_text_search_flags, GtkTextIter, GtkTextIter, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_equal(lhs, rhs)
  # @param [GtkTextIter] lhs 
  # @param [GtkTextIter] rhs 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_equal, :gtk_text_iter_equal, [GtkTextIter, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_compare(lhs, rhs)
  # @param [GtkTextIter] lhs 
  # @param [GtkTextIter] rhs 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_compare, :gtk_text_iter_compare, [GtkTextIter, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_in_range(iter, start, end_)
  # @param [GtkTextIter] iter 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_iter_in_range, :gtk_text_iter_in_range, [GtkTextIter, GtkTextIter, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_iter_order(first, second)
  # @param [GtkTextIter] first 
  # @param [GtkTextIter] second 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_iter_order, :gtk_text_iter_order, [GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  module GtkTargetListWrappers
    # @return [GtkTargetList] 
    def ref()
      GtkTargetList.new Gtk.gtk_target_list_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_target_list_unref(self)
    end
    
    # @param [FFI::Pointer(GdkAtom)] target 
    # @param [Integer] flags 
    # @param [Integer] info 
    # @return [nil] 
    def add(target, flags, info)
      Gtk.gtk_target_list_add(self, target, flags, info)
    end
    
    # @param [Integer] info 
    # @return [nil] 
    def add_text_targets(info)
      Gtk.gtk_target_list_add_text_targets(self, info)
    end
    
    # @param [Integer] info 
    # @param [Integer] deserializable 
    # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
    # @return [nil] 
    def add_rich_text_targets(info, deserializable, buffer)
      Gtk.gtk_target_list_add_rich_text_targets(self, info, deserializable, buffer)
    end
    
    # @param [Integer] info 
    # @param [Integer] writable 
    # @return [nil] 
    def add_image_targets(info, writable)
      Gtk.gtk_target_list_add_image_targets(self, info, writable)
    end
    
    # @param [Integer] info 
    # @return [nil] 
    def add_uri_targets(info)
      Gtk.gtk_target_list_add_uri_targets(self, info)
    end
    
    # @param [FFI::Pointer(*GtkTargetEntry)] targets 
    # @param [Integer] ntargets 
    # @return [nil] 
    def add_table(targets, ntargets)
      Gtk.gtk_target_list_add_table(self, targets, ntargets)
    end
    
    # @param [FFI::Pointer(GdkAtom)] target 
    # @return [nil] 
    def remove(target)
      Gtk.gtk_target_list_remove(self, target)
    end
    
    # @param [FFI::Pointer(GdkAtom)] target 
    # @param [FFI::Pointer(*Guint)] info 
    # @return [Integer] 
    def find(target, info)
      Gtk.gtk_target_list_find(self, target, info)
    end
  end
  
  class GtkTargetList < FFI::Struct
    include GtkTargetListWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :target ::
  #   (String) 
  # :flags ::
  #   (Integer) 
  # :info ::
  #   (Integer) 
  module GtkTargetEntryWrappers
    # @return [GtkTargetEntry] 
    def copy()
      GtkTargetEntry.new Gtk.gtk_target_entry_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_target_entry_free(self)
    end
  end
  
  class GtkTargetEntry < FFI::Struct
    include GtkTargetEntryWrappers
    layout :target, :string,
           :flags, :uint,
           :info, :uint
  end
  
  # (Not documented)
  # 
  # @method gtk_target_list_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_target_list_get_type, :gtk_target_list_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_target_list_new(targets, ntargets)
  # @param [GtkTargetEntry] targets 
  # @param [Integer] ntargets 
  # @return [GtkTargetList] 
  # @scope class
  attach_function :gtk_target_list_new, :gtk_target_list_new, [GtkTargetEntry, :uint], GtkTargetList
  
  # (Not documented)
  # 
  # @method gtk_target_list_ref(list)
  # @param [GtkTargetList] list 
  # @return [GtkTargetList] 
  # @scope class
  attach_function :gtk_target_list_ref, :gtk_target_list_ref, [GtkTargetList], GtkTargetList
  
  # (Not documented)
  # 
  # @method gtk_target_list_unref(list)
  # @param [GtkTargetList] list 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_unref, :gtk_target_list_unref, [GtkTargetList], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_add(list, target, flags, info)
  # @param [GtkTargetList] list 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @param [Integer] flags 
  # @param [Integer] info 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_add, :gtk_target_list_add, [GtkTargetList, :pointer, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_add_text_targets(list, info)
  # @param [GtkTargetList] list 
  # @param [Integer] info 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_add_text_targets, :gtk_target_list_add_text_targets, [GtkTargetList, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_add_rich_text_targets(list, info, deserializable, buffer)
  # @param [GtkTargetList] list 
  # @param [Integer] info 
  # @param [Integer] deserializable 
  # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_add_rich_text_targets, :gtk_target_list_add_rich_text_targets, [GtkTargetList, :uint, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_add_image_targets(list, info, writable)
  # @param [GtkTargetList] list 
  # @param [Integer] info 
  # @param [Integer] writable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_add_image_targets, :gtk_target_list_add_image_targets, [GtkTargetList, :uint, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_add_uri_targets(list, info)
  # @param [GtkTargetList] list 
  # @param [Integer] info 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_add_uri_targets, :gtk_target_list_add_uri_targets, [GtkTargetList, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_add_table(list, targets, ntargets)
  # @param [GtkTargetList] list 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] ntargets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_add_table, :gtk_target_list_add_table, [GtkTargetList, GtkTargetEntry, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_remove(list, target)
  # @param [GtkTargetList] list 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_list_remove, :gtk_target_list_remove, [GtkTargetList, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_target_list_find(list, target, info)
  # @param [GtkTargetList] list 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @param [FFI::Pointer(*Guint)] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_target_list_find, :gtk_target_list_find, [GtkTargetList, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_target_table_new_from_list(list, n_targets)
  # @param [GtkTargetList] list 
  # @param [FFI::Pointer(*Gint)] n_targets 
  # @return [GtkTargetEntry] 
  # @scope class
  attach_function :gtk_target_table_new_from_list, :gtk_target_table_new_from_list, [GtkTargetList, :pointer], GtkTargetEntry
  
  # (Not documented)
  # 
  # @method gtk_target_table_free(targets, n_targets)
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_table_free, :gtk_target_table_free, [GtkTargetEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_selection_owner_set(widget, selection, time)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @param [Integer] time 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_owner_set, :gtk_selection_owner_set, [GtkWidget, :pointer, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_owner_set_for_display(display, widget, selection, time)
  # @param [FFI::Pointer(*GdkDisplay)] display 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @param [Integer] time 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_owner_set_for_display, :gtk_selection_owner_set_for_display, [:pointer, GtkWidget, :pointer, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_add_target(widget, selection, target, info)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @param [Integer] info 
  # @return [nil] 
  # @scope class
  attach_function :gtk_selection_add_target, :gtk_selection_add_target, [GtkWidget, :pointer, :pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_selection_add_targets(widget, selection, targets, ntargets)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] ntargets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_selection_add_targets, :gtk_selection_add_targets, [GtkWidget, :pointer, GtkTargetEntry, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_selection_clear_targets(widget, selection)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @return [nil] 
  # @scope class
  attach_function :gtk_selection_clear_targets, :gtk_selection_clear_targets, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_selection_convert(widget, selection, target, time)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @param [Integer] time 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_convert, :gtk_selection_convert, [GtkWidget, :pointer, :pointer, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_remove_all(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_selection_remove_all, :gtk_selection_remove_all, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_selection(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_selection_data_get_selection, :gtk_selection_data_get_selection, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_target(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_selection_data_get_target, :gtk_selection_data_get_target, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_data_type(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_selection_data_get_data_type, :gtk_selection_data_get_data_type, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_format(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_get_format, :gtk_selection_data_get_format, [GtkSelectionData], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_data(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(*Guchar)] 
  # @scope class
  attach_function :gtk_selection_data_get_data, :gtk_selection_data_get_data, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_length(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_get_length, :gtk_selection_data_get_length, [GtkSelectionData], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_data_with_length(selection_data, length)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(*Gint)] length 
  # @return [FFI::Pointer(*Guchar)] 
  # @scope class
  attach_function :gtk_selection_data_get_data_with_length, :gtk_selection_data_get_data_with_length, [GtkSelectionData, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_display(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(*GdkDisplay)] 
  # @scope class
  attach_function :gtk_selection_data_get_display, :gtk_selection_data_get_display, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_set(selection_data, type, format, data, length)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(GdkAtom)] type 
  # @param [Integer] format 
  # @param [FFI::Pointer(*Guchar)] data 
  # @param [Integer] length 
  # @return [nil] 
  # @scope class
  attach_function :gtk_selection_data_set, :gtk_selection_data_set, [GtkSelectionData, :pointer, :int, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_selection_data_set_text(selection_data, str, len)
  # @param [GtkSelectionData] selection_data 
  # @param [String] str 
  # @param [Integer] len 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_set_text, :gtk_selection_data_set_text, [GtkSelectionData, :string, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_text(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(*Guchar)] 
  # @scope class
  attach_function :gtk_selection_data_get_text, :gtk_selection_data_get_text, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_set_pixbuf(selection_data, pixbuf)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_set_pixbuf, :gtk_selection_data_set_pixbuf, [GtkSelectionData, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_pixbuf(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_selection_data_get_pixbuf, :gtk_selection_data_get_pixbuf, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_set_uris(selection_data, uris)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(**Gchar)] uris 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_set_uris, :gtk_selection_data_set_uris, [GtkSelectionData, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_uris(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_selection_data_get_uris, :gtk_selection_data_get_uris, [GtkSelectionData], :pointer
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_targets(selection_data, targets, n_atoms)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(**GdkAtom)] targets 
  # @param [FFI::Pointer(*Gint)] n_atoms 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_get_targets, :gtk_selection_data_get_targets, [GtkSelectionData, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_targets_include_text(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_targets_include_text, :gtk_selection_data_targets_include_text, [GtkSelectionData], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_targets_include_rich_text(selection_data, buffer)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_targets_include_rich_text, :gtk_selection_data_targets_include_rich_text, [GtkSelectionData, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_targets_include_image(selection_data, writable)
  # @param [GtkSelectionData] selection_data 
  # @param [Integer] writable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_targets_include_image, :gtk_selection_data_targets_include_image, [GtkSelectionData, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_targets_include_uri(selection_data)
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_targets_include_uri, :gtk_selection_data_targets_include_uri, [GtkSelectionData], :int
  
  # (Not documented)
  # 
  # @method gtk_targets_include_text(targets, n_targets)
  # @param [FFI::Pointer(*GdkAtom)] targets 
  # @param [Integer] n_targets 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_targets_include_text, :gtk_targets_include_text, [:pointer, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_targets_include_rich_text(targets, n_targets, buffer)
  # @param [FFI::Pointer(*GdkAtom)] targets 
  # @param [Integer] n_targets 
  # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_targets_include_rich_text, :gtk_targets_include_rich_text, [:pointer, :int, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_targets_include_image(targets, n_targets, writable)
  # @param [FFI::Pointer(*GdkAtom)] targets 
  # @param [Integer] n_targets 
  # @param [Integer] writable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_targets_include_image, :gtk_targets_include_image, [:pointer, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_targets_include_uri(targets, n_targets)
  # @param [FFI::Pointer(*GdkAtom)] targets 
  # @param [Integer] n_targets 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_targets_include_uri, :gtk_targets_include_uri, [:pointer, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_selection_data_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_data_get_type, :gtk_selection_data_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_selection_data_copy(data)
  # @param [GtkSelectionData] data 
  # @return [GtkSelectionData] 
  # @scope class
  attach_function :gtk_selection_data_copy, :gtk_selection_data_copy, [GtkSelectionData], GtkSelectionData
  
  # (Not documented)
  # 
  # @method gtk_selection_data_free(data)
  # @param [GtkSelectionData] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_selection_data_free, :gtk_selection_data_free, [GtkSelectionData], :void
  
  # (Not documented)
  # 
  # @method gtk_target_entry_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_target_entry_get_type, :gtk_target_entry_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_target_entry_new(target, flags, info)
  # @param [String] target 
  # @param [Integer] flags 
  # @param [Integer] info 
  # @return [GtkTargetEntry] 
  # @scope class
  attach_function :gtk_target_entry_new, :gtk_target_entry_new, [:string, :uint, :uint], GtkTargetEntry
  
  # (Not documented)
  # 
  # @method gtk_target_entry_copy(data)
  # @param [GtkTargetEntry] data 
  # @return [GtkTargetEntry] 
  # @scope class
  attach_function :gtk_target_entry_copy, :gtk_target_entry_copy, [GtkTargetEntry], GtkTargetEntry
  
  # (Not documented)
  # 
  # @method gtk_target_entry_free(data)
  # @param [GtkTargetEntry] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_target_entry_free, :gtk_target_entry_free, [GtkTargetEntry], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_dest_defaults).</em>
  # 
  # === Options:
  # :default_motion ::
  #   
  # :default_highlight ::
  #   respond to "drag_motion"
  # :default_drop ::
  #   auto-highlight
  # :default_all ::
  #   respond to "drag_drop"
  # 
  # @method _enum_gtk_dest_defaults_
  # @return [Symbol]
  # @scope class
  enum :gtk_dest_defaults, [
    :default_motion, 1,
    :default_highlight, 2,
    :default_drop, 4,
    :default_all, 7
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_target_flags).</em>
  # 
  # === Options:
  # :same_app ::
  #   
  # :same_widget ::
  #   < nick=same-app >
  # :other_app ::
  #   < nick=same-widget >
  # :other_widget ::
  #   < nick=other-app >
  # 
  # @method _enum_gtk_target_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_target_flags, [
    :same_app, 1,
    :same_widget, 2,
    :other_app, 4,
    :other_widget, 8
  ]
  
  # (Not documented)
  # 
  # @method gtk_drag_get_data(widget, context, target, time)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @param [Integer] time 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_get_data, :gtk_drag_get_data, [GtkWidget, :pointer, :pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_finish(context, success, del, time)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [Integer] success 
  # @param [Integer] del 
  # @param [Integer] time 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_finish, :gtk_drag_finish, [:pointer, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_get_source_widget(context)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_drag_get_source_widget, :gtk_drag_get_source_widget, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_drag_highlight(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_highlight, :gtk_drag_highlight, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_unhighlight(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_unhighlight, :gtk_drag_unhighlight, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_set(widget, flags, targets, n_targets, actions)
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_dest_defaults_] flags 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_set, :gtk_drag_dest_set, [GtkWidget, :gtk_dest_defaults, GtkTargetEntry, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_set_proxy(widget, proxy_window, protocol, use_coordinates)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkWindow)] proxy_window 
  # @param [unknown] protocol 
  # @param [Integer] use_coordinates 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_set_proxy, :gtk_drag_dest_set_proxy, [GtkWidget, :pointer, :char, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_unset(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_unset, :gtk_drag_dest_unset, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_find_target(widget, context, target_list)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [GtkTargetList] target_list 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_drag_dest_find_target, :gtk_drag_dest_find_target, [GtkWidget, :pointer, GtkTargetList], :pointer
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_get_target_list(widget)
  # @param [GtkWidget] widget 
  # @return [GtkTargetList] 
  # @scope class
  attach_function :gtk_drag_dest_get_target_list, :gtk_drag_dest_get_target_list, [GtkWidget], GtkTargetList
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_set_target_list(widget, target_list)
  # @param [GtkWidget] widget 
  # @param [GtkTargetList] target_list 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_set_target_list, :gtk_drag_dest_set_target_list, [GtkWidget, GtkTargetList], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_add_text_targets(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_add_text_targets, :gtk_drag_dest_add_text_targets, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_add_image_targets(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_add_image_targets, :gtk_drag_dest_add_image_targets, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_add_uri_targets(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_add_uri_targets, :gtk_drag_dest_add_uri_targets, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_set_track_motion(widget, track_motion)
  # @param [GtkWidget] widget 
  # @param [Integer] track_motion 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_set_track_motion, :gtk_drag_dest_set_track_motion, [GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_get_track_motion(widget)
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_drag_dest_get_track_motion, :gtk_drag_dest_get_track_motion, [GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_drag_source_set(widget, start_button_mask, targets, n_targets, actions)
  # @param [GtkWidget] widget 
  # @param [unknown] start_button_mask 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_set, :gtk_drag_source_set, [GtkWidget, :char, GtkTargetEntry, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_unset(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_unset, :gtk_drag_source_unset, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_get_target_list(widget)
  # @param [GtkWidget] widget 
  # @return [GtkTargetList] 
  # @scope class
  attach_function :gtk_drag_source_get_target_list, :gtk_drag_source_get_target_list, [GtkWidget], GtkTargetList
  
  # (Not documented)
  # 
  # @method gtk_drag_source_set_target_list(widget, target_list)
  # @param [GtkWidget] widget 
  # @param [GtkTargetList] target_list 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_set_target_list, :gtk_drag_source_set_target_list, [GtkWidget, GtkTargetList], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_add_text_targets(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_add_text_targets, :gtk_drag_source_add_text_targets, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_add_image_targets(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_add_image_targets, :gtk_drag_source_add_image_targets, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_add_uri_targets(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_add_uri_targets, :gtk_drag_source_add_uri_targets, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_set_icon_pixbuf(widget, pixbuf)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_set_icon_pixbuf, :gtk_drag_source_set_icon_pixbuf, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_set_icon_stock(widget, stock_id)
  # @param [GtkWidget] widget 
  # @param [String] stock_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_set_icon_stock, :gtk_drag_source_set_icon_stock, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_set_icon_name(widget, icon_name)
  # @param [GtkWidget] widget 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_set_icon_name, :gtk_drag_source_set_icon_name, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_source_set_icon_gicon(widget, icon)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_set_icon_gicon, :gtk_drag_source_set_icon_gicon, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_begin(widget, targets, actions, button, event)
  # @param [GtkWidget] widget 
  # @param [GtkTargetList] targets 
  # @param [unknown] actions 
  # @param [Integer] button 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [FFI::Pointer(*GdkDragContext)] 
  # @scope class
  attach_function :gtk_drag_begin, :gtk_drag_begin, [GtkWidget, GtkTargetList, :char, :int, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_widget(context, widget, hot_x, hot_y)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [GtkWidget] widget 
  # @param [Integer] hot_x 
  # @param [Integer] hot_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_widget, :gtk_drag_set_icon_widget, [:pointer, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_pixbuf(context, pixbuf, hot_x, hot_y)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @param [Integer] hot_x 
  # @param [Integer] hot_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_pixbuf, :gtk_drag_set_icon_pixbuf, [:pointer, :pointer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_stock(context, stock_id, hot_x, hot_y)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [String] stock_id 
  # @param [Integer] hot_x 
  # @param [Integer] hot_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_stock, :gtk_drag_set_icon_stock, [:pointer, :string, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_surface(context, surface)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [FFI::Pointer(*CairoSurfaceT)] surface 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_surface, :gtk_drag_set_icon_surface, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_name(context, icon_name, hot_x, hot_y)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [String] icon_name 
  # @param [Integer] hot_x 
  # @param [Integer] hot_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_name, :gtk_drag_set_icon_name, [:pointer, :string, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_gicon(context, icon, hot_x, hot_y)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @param [Integer] hot_x 
  # @param [Integer] hot_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_gicon, :gtk_drag_set_icon_gicon, [:pointer, :pointer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_set_icon_default(context)
  # @param [FFI::Pointer(*GdkDragContext)] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_set_icon_default, :gtk_drag_set_icon_default, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_check_threshold(widget, start_x, start_y, current_x, current_y)
  # @param [GtkWidget] widget 
  # @param [Integer] start_x 
  # @param [Integer] start_y 
  # @param [Integer] current_x 
  # @param [Integer] current_y 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_drag_check_threshold, :gtk_drag_check_threshold, [GtkWidget, :int, :int, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_drag_source_handle_event(widget, event)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_source_handle_event, :_gtk_drag_source_handle_event, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_drag_dest_handle_event(toplevel, event)
  # @param [GtkWidget] toplevel 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_drag_dest_handle_event, :_gtk_drag_dest_handle_event, [GtkWidget, :pointer], :void
  
  # (Not documented)
  module GtkEditableWrappers
    # @param [Integer] start_pos 
    # @param [Integer] end_pos 
    # @return [nil] 
    def select_region(start_pos, end_pos)
      Gtk.gtk_editable_select_region(self, start_pos, end_pos)
    end
    
    # @param [FFI::Pointer(*Gint)] start_pos 
    # @param [FFI::Pointer(*Gint)] end_pos 
    # @return [Integer] 
    def get_selection_bounds(start_pos, end_pos)
      Gtk.gtk_editable_get_selection_bounds(self, start_pos, end_pos)
    end
    
    # @param [String] new_text 
    # @param [Integer] new_text_length 
    # @param [FFI::Pointer(*Gint)] position 
    # @return [nil] 
    def insert_text(new_text, new_text_length, position)
      Gtk.gtk_editable_insert_text(self, new_text, new_text_length, position)
    end
    
    # @param [Integer] start_pos 
    # @param [Integer] end_pos 
    # @return [nil] 
    def delete_text(start_pos, end_pos)
      Gtk.gtk_editable_delete_text(self, start_pos, end_pos)
    end
    
    # @param [Integer] start_pos 
    # @param [Integer] end_pos 
    # @return [String] 
    def get_chars(start_pos, end_pos)
      Gtk.gtk_editable_get_chars(self, start_pos, end_pos)
    end
    
    # @return [nil] 
    def cut_clipboard()
      Gtk.gtk_editable_cut_clipboard(self)
    end
    
    # @return [nil] 
    def copy_clipboard()
      Gtk.gtk_editable_copy_clipboard(self)
    end
    
    # @return [nil] 
    def paste_clipboard()
      Gtk.gtk_editable_paste_clipboard(self)
    end
    
    # @return [nil] 
    def delete_selection()
      Gtk.gtk_editable_delete_selection(self)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def set_position(position)
      Gtk.gtk_editable_set_position(self, position)
    end
    
    # @return [Integer] 
    def get_position()
      Gtk.gtk_editable_get_position(self)
    end
    
    # @param [Integer] is_editable 
    # @return [nil] 
    def set_editable(is_editable)
      Gtk.gtk_editable_set_editable(self, is_editable)
    end
    
    # @return [Integer] 
    def get_editable()
      Gtk.gtk_editable_get_editable(self)
    end
  end
  
  class GtkEditable < FFI::Struct
    include GtkEditableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base_iface ::
  #   (unknown) 
  # :insert_text ::
  #   (FFI::Pointer(*)) signals
  # :delete_text ::
  #   (FFI::Pointer(*)) 
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :do_insert_text ::
  #   (FFI::Pointer(*)) vtable
  # :do_delete_text ::
  #   (FFI::Pointer(*)) 
  # :get_chars ::
  #   (FFI::Pointer(*)) 
  # :set_selection_bounds ::
  #   (FFI::Pointer(*)) 
  # :get_selection_bounds ::
  #   (FFI::Pointer(*)) 
  # :set_position ::
  #   (FFI::Pointer(*)) 
  # :get_position ::
  #   (FFI::Pointer(*)) 
  class GtkEditableInterface < FFI::Struct
    layout :base_iface, :char,
           :insert_text, :pointer,
           :delete_text, :pointer,
           :changed, :pointer,
           :do_insert_text, :pointer,
           :do_delete_text, :pointer,
           :get_chars, :pointer,
           :set_selection_bounds, :pointer,
           :get_selection_bounds, :pointer,
           :set_position, :pointer,
           :get_position, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_editable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_editable_get_type, :gtk_editable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_editable_select_region(editable, start_pos, end_pos)
  # @param [GtkEditable] editable 
  # @param [Integer] start_pos 
  # @param [Integer] end_pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_select_region, :gtk_editable_select_region, [GtkEditable, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_get_selection_bounds(editable, start_pos, end_pos)
  # @param [GtkEditable] editable 
  # @param [FFI::Pointer(*Gint)] start_pos 
  # @param [FFI::Pointer(*Gint)] end_pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_editable_get_selection_bounds, :gtk_editable_get_selection_bounds, [GtkEditable, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_editable_insert_text(editable, new_text, new_text_length, position)
  # @param [GtkEditable] editable 
  # @param [String] new_text 
  # @param [Integer] new_text_length 
  # @param [FFI::Pointer(*Gint)] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_insert_text, :gtk_editable_insert_text, [GtkEditable, :string, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_delete_text(editable, start_pos, end_pos)
  # @param [GtkEditable] editable 
  # @param [Integer] start_pos 
  # @param [Integer] end_pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_delete_text, :gtk_editable_delete_text, [GtkEditable, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_get_chars(editable, start_pos, end_pos)
  # @param [GtkEditable] editable 
  # @param [Integer] start_pos 
  # @param [Integer] end_pos 
  # @return [String] 
  # @scope class
  attach_function :gtk_editable_get_chars, :gtk_editable_get_chars, [GtkEditable, :int, :int], :string
  
  # (Not documented)
  # 
  # @method gtk_editable_cut_clipboard(editable)
  # @param [GtkEditable] editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_cut_clipboard, :gtk_editable_cut_clipboard, [GtkEditable], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_copy_clipboard(editable)
  # @param [GtkEditable] editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_copy_clipboard, :gtk_editable_copy_clipboard, [GtkEditable], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_paste_clipboard(editable)
  # @param [GtkEditable] editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_paste_clipboard, :gtk_editable_paste_clipboard, [GtkEditable], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_delete_selection(editable)
  # @param [GtkEditable] editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_delete_selection, :gtk_editable_delete_selection, [GtkEditable], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_set_position(editable, position)
  # @param [GtkEditable] editable 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_set_position, :gtk_editable_set_position, [GtkEditable, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_get_position(editable)
  # @param [GtkEditable] editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_editable_get_position, :gtk_editable_get_position, [GtkEditable], :int
  
  # (Not documented)
  # 
  # @method gtk_editable_set_editable(editable, is_editable)
  # @param [GtkEditable] editable 
  # @param [Integer] is_editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_editable_set_editable, :gtk_editable_set_editable, [GtkEditable, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_editable_get_editable(editable)
  # @param [GtkEditable] editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_editable_get_editable, :gtk_editable_get_editable, [GtkEditable], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  module GtkIMContextWrappers
    # @param [FFI::Pointer(*GdkWindow)] window 
    # @return [nil] 
    def set_client_window(window)
      Gtk.gtk_im_context_set_client_window(self, window)
    end
    
    # @param [FFI::Pointer(**Gchar)] str 
    # @param [FFI::Pointer(**PangoAttrList)] attrs 
    # @param [FFI::Pointer(*Gint)] cursor_pos 
    # @return [nil] 
    def get_preedit_string(str, attrs, cursor_pos)
      Gtk.gtk_im_context_get_preedit_string(self, str, attrs, cursor_pos)
    end
    
    # @param [FFI::Pointer(*GdkEventKey)] event 
    # @return [Integer] 
    def filter_keypress(event)
      Gtk.gtk_im_context_filter_keypress(self, event)
    end
    
    # @return [nil] 
    def focus_in()
      Gtk.gtk_im_context_focus_in(self)
    end
    
    # @return [nil] 
    def focus_out()
      Gtk.gtk_im_context_focus_out(self)
    end
    
    # @return [nil] 
    def reset()
      Gtk.gtk_im_context_reset(self)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] area 
    # @return [nil] 
    def set_cursor_location(area)
      Gtk.gtk_im_context_set_cursor_location(self, area)
    end
    
    # @param [Integer] use_preedit 
    # @return [nil] 
    def set_use_preedit(use_preedit)
      Gtk.gtk_im_context_set_use_preedit(self, use_preedit)
    end
    
    # @param [String] text 
    # @param [Integer] len 
    # @param [Integer] cursor_index 
    # @return [nil] 
    def set_surrounding(text, len, cursor_index)
      Gtk.gtk_im_context_set_surrounding(self, text, len, cursor_index)
    end
    
    # @param [FFI::Pointer(**Gchar)] text 
    # @param [FFI::Pointer(*Gint)] cursor_index 
    # @return [Integer] 
    def get_surrounding(text, cursor_index)
      Gtk.gtk_im_context_get_surrounding(self, text, cursor_index)
    end
    
    # @param [Integer] offset 
    # @param [Integer] n_chars 
    # @return [Integer] 
    def delete_surrounding(offset, n_chars)
      Gtk.gtk_im_context_delete_surrounding(self, offset, n_chars)
    end
  end
  
  class GtkIMContext < FFI::Struct
    include GtkIMContextWrappers
    layout :parent_instance, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) < private >
  # :preedit_start ::
  #   (FFI::Pointer(*)) Signals
  # :preedit_end ::
  #   (FFI::Pointer(*)) 
  # :preedit_changed ::
  #   (FFI::Pointer(*)) 
  # :commit ::
  #   (FFI::Pointer(*)) 
  # :retrieve_surrounding ::
  #   (FFI::Pointer(*)) 
  # :delete_surrounding ::
  #   (FFI::Pointer(*)) 
  # :set_client_window ::
  #   (FFI::Pointer(*)) Virtual functions
  # :get_preedit_string ::
  #   (FFI::Pointer(*)) 
  # :filter_keypress ::
  #   (FFI::Pointer(*)) 
  # :focus_in ::
  #   (FFI::Pointer(*)) 
  # :focus_out ::
  #   (FFI::Pointer(*)) 
  # :reset ::
  #   (FFI::Pointer(*)) 
  # :set_cursor_location ::
  #   (FFI::Pointer(*)) 
  # :set_use_preedit ::
  #   (FFI::Pointer(*)) 
  # :set_surrounding ::
  #   (FFI::Pointer(*)) 
  # :get_surrounding ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  class GtkIMContextClass < FFI::Struct
    layout :parent_class, :char,
           :preedit_start, :pointer,
           :preedit_end, :pointer,
           :preedit_changed, :pointer,
           :commit, :pointer,
           :retrieve_surrounding, :pointer,
           :delete_surrounding, :pointer,
           :set_client_window, :pointer,
           :get_preedit_string, :pointer,
           :filter_keypress, :pointer,
           :focus_in, :pointer,
           :focus_out, :pointer,
           :reset, :pointer,
           :set_cursor_location, :pointer,
           :set_use_preedit, :pointer,
           :set_surrounding, :pointer,
           :get_surrounding, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_im_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_context_get_type, :gtk_im_context_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_im_context_set_client_window(context, window)
  # @param [GtkIMContext] context 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_set_client_window, :gtk_im_context_set_client_window, [GtkIMContext, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_get_preedit_string(context, str, attrs, cursor_pos)
  # @param [GtkIMContext] context 
  # @param [FFI::Pointer(**Gchar)] str 
  # @param [FFI::Pointer(**PangoAttrList)] attrs 
  # @param [FFI::Pointer(*Gint)] cursor_pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_get_preedit_string, :gtk_im_context_get_preedit_string, [GtkIMContext, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_filter_keypress(context, event)
  # @param [GtkIMContext] context 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_context_filter_keypress, :gtk_im_context_filter_keypress, [GtkIMContext, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_im_context_focus_in(context)
  # @param [GtkIMContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_focus_in, :gtk_im_context_focus_in, [GtkIMContext], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_focus_out(context)
  # @param [GtkIMContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_focus_out, :gtk_im_context_focus_out, [GtkIMContext], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_reset(context)
  # @param [GtkIMContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_reset, :gtk_im_context_reset, [GtkIMContext], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_set_cursor_location(context, area)
  # @param [GtkIMContext] context 
  # @param [FFI::Pointer(*GdkRectangle)] area 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_set_cursor_location, :gtk_im_context_set_cursor_location, [GtkIMContext, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_set_use_preedit(context, use_preedit)
  # @param [GtkIMContext] context 
  # @param [Integer] use_preedit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_set_use_preedit, :gtk_im_context_set_use_preedit, [GtkIMContext, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_set_surrounding(context, text, len, cursor_index)
  # @param [GtkIMContext] context 
  # @param [String] text 
  # @param [Integer] len 
  # @param [Integer] cursor_index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_set_surrounding, :gtk_im_context_set_surrounding, [GtkIMContext, :string, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_im_context_get_surrounding(context, text, cursor_index)
  # @param [GtkIMContext] context 
  # @param [FFI::Pointer(**Gchar)] text 
  # @param [FFI::Pointer(*Gint)] cursor_index 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_context_get_surrounding, :gtk_im_context_get_surrounding, [GtkIMContext, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_im_context_delete_surrounding(context, offset, n_chars)
  # @param [GtkIMContext] context 
  # @param [Integer] offset 
  # @param [Integer] n_chars 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_context_delete_surrounding, :gtk_im_context_delete_surrounding, [GtkIMContext, :int, :int], :int
  
  # (Not documented)
  class GtkEntryBufferPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkEntryBufferPrivate) < private >
  module GtkEntryBufferWrappers
    # @return [Integer] 
    def get_bytes()
      Gtk.gtk_entry_buffer_get_bytes(self)
    end
    
    # @return [Integer] 
    def get_length()
      Gtk.gtk_entry_buffer_get_length(self)
    end
    
    # @return [String] 
    def get_text()
      Gtk.gtk_entry_buffer_get_text(self)
    end
    
    # @param [String] chars 
    # @param [Integer] n_chars 
    # @return [nil] 
    def set_text(chars, n_chars)
      Gtk.gtk_entry_buffer_set_text(self, chars, n_chars)
    end
    
    # @param [Integer] max_length 
    # @return [nil] 
    def set_max_length(max_length)
      Gtk.gtk_entry_buffer_set_max_length(self, max_length)
    end
    
    # @return [Integer] 
    def get_max_length()
      Gtk.gtk_entry_buffer_get_max_length(self)
    end
    
    # @param [Integer] position 
    # @param [String] chars 
    # @param [Integer] n_chars 
    # @return [Integer] 
    def insert_text(position, chars, n_chars)
      Gtk.gtk_entry_buffer_insert_text(self, position, chars, n_chars)
    end
    
    # @param [Integer] position 
    # @param [Integer] n_chars 
    # @return [Integer] 
    def delete_text(position, n_chars)
      Gtk.gtk_entry_buffer_delete_text(self, position, n_chars)
    end
    
    # @param [Integer] position 
    # @param [String] chars 
    # @param [Integer] n_chars 
    # @return [nil] 
    def emit_inserted_text(position, chars, n_chars)
      Gtk.gtk_entry_buffer_emit_inserted_text(self, position, chars, n_chars)
    end
    
    # @param [Integer] position 
    # @param [Integer] n_chars 
    # @return [nil] 
    def emit_deleted_text(position, n_chars)
      Gtk.gtk_entry_buffer_emit_deleted_text(self, position, n_chars)
    end
  end
  
  class GtkEntryBuffer < FFI::Struct
    include GtkEntryBufferWrappers
    layout :parent_instance, :char,
           :priv, GtkEntryBufferPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :inserted_text ::
  #   (FFI::Pointer(*)) Signals
  # :deleted_text ::
  #   (FFI::Pointer(*)) 
  # :get_text ::
  #   (FFI::Pointer(*)) Virtual Methods
  # :get_length ::
  #   (FFI::Pointer(*)) 
  # :insert_text ::
  #   (FFI::Pointer(*)) 
  # :delete_text ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkEntryBufferClass < FFI::Struct
    layout :parent_class, :char,
           :inserted_text, :pointer,
           :deleted_text, :pointer,
           :get_text, :pointer,
           :get_length, :pointer,
           :insert_text, :pointer,
           :delete_text, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_buffer_get_type, :gtk_entry_buffer_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_new(initial_chars, n_initial_chars)
  # @param [String] initial_chars 
  # @param [Integer] n_initial_chars 
  # @return [GtkEntryBuffer] 
  # @scope class
  attach_function :gtk_entry_buffer_new, :gtk_entry_buffer_new, [:string, :int], GtkEntryBuffer
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_get_bytes(buffer)
  # @param [GtkEntryBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_buffer_get_bytes, :gtk_entry_buffer_get_bytes, [GtkEntryBuffer], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_get_length(buffer)
  # @param [GtkEntryBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_buffer_get_length, :gtk_entry_buffer_get_length, [GtkEntryBuffer], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_get_text(buffer)
  # @param [GtkEntryBuffer] buffer 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_buffer_get_text, :gtk_entry_buffer_get_text, [GtkEntryBuffer], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_set_text(buffer, chars, n_chars)
  # @param [GtkEntryBuffer] buffer 
  # @param [String] chars 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_buffer_set_text, :gtk_entry_buffer_set_text, [GtkEntryBuffer, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_set_max_length(buffer, max_length)
  # @param [GtkEntryBuffer] buffer 
  # @param [Integer] max_length 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_buffer_set_max_length, :gtk_entry_buffer_set_max_length, [GtkEntryBuffer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_get_max_length(buffer)
  # @param [GtkEntryBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_buffer_get_max_length, :gtk_entry_buffer_get_max_length, [GtkEntryBuffer], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_insert_text(buffer, position, chars, n_chars)
  # @param [GtkEntryBuffer] buffer 
  # @param [Integer] position 
  # @param [String] chars 
  # @param [Integer] n_chars 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_buffer_insert_text, :gtk_entry_buffer_insert_text, [GtkEntryBuffer, :uint, :string, :int], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_delete_text(buffer, position, n_chars)
  # @param [GtkEntryBuffer] buffer 
  # @param [Integer] position 
  # @param [Integer] n_chars 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_buffer_delete_text, :gtk_entry_buffer_delete_text, [GtkEntryBuffer, :uint, :int], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_emit_inserted_text(buffer, position, chars, n_chars)
  # @param [GtkEntryBuffer] buffer 
  # @param [Integer] position 
  # @param [String] chars 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_buffer_emit_inserted_text, :gtk_entry_buffer_emit_inserted_text, [GtkEntryBuffer, :uint, :string, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_buffer_emit_deleted_text(buffer, position, n_chars)
  # @param [GtkEntryBuffer] buffer 
  # @param [Integer] position 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_buffer_emit_deleted_text, :gtk_entry_buffer_emit_deleted_text, [GtkEntryBuffer, :uint, :uint], :void
  
  # (Not documented)
  class GtkListStorePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkListStorePrivate) < private >
  module GtkListStoreWrappers
    # @param [Integer] n_columns 
    # @param [FFI::Pointer(*GType)] types 
    # @return [nil] 
    def set_column_types(n_columns, types)
      Gtk.gtk_list_store_set_column_types(self, n_columns, types)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [Integer] column 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def set_value(iter, column, value)
      Gtk.gtk_list_store_set_value(self, iter, column, value)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def set(iter)
      Gtk.gtk_list_store_set(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [FFI::Pointer(*Gint)] columns 
    # @param [FFI::Pointer(*GValue)] values 
    # @param [Integer] n_values 
    # @return [nil] 
    def set_valuesv(iter, columns, values, n_values)
      Gtk.gtk_list_store_set_valuesv(self, iter, columns, values, n_values)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [String] var_args 
    # @return [nil] 
    def set_valist(iter, var_args)
      Gtk.gtk_list_store_set_valist(self, iter, var_args)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def remove(iter)
      Gtk.gtk_list_store_remove(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [Integer] position 
    # @return [nil] 
    def insert(iter, position)
      Gtk.gtk_list_store_insert(self, iter, position)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] sibling 
    # @return [nil] 
    def insert_before(iter, sibling)
      Gtk.gtk_list_store_insert_before(self, iter, sibling)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] sibling 
    # @return [nil] 
    def insert_after(iter, sibling)
      Gtk.gtk_list_store_insert_after(self, iter, sibling)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [Integer] position 
    # @return [nil] 
    def insert_with_values(iter, position)
      Gtk.gtk_list_store_insert_with_values(self, iter, position)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [Integer] position 
    # @param [FFI::Pointer(*Gint)] columns 
    # @param [FFI::Pointer(*GValue)] values 
    # @param [Integer] n_values 
    # @return [nil] 
    def insert_with_valuesv(iter, position, columns, values, n_values)
      Gtk.gtk_list_store_insert_with_valuesv(self, iter, position, columns, values, n_values)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def prepend(iter)
      Gtk.gtk_list_store_prepend(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def append(iter)
      Gtk.gtk_list_store_append(self, iter)
    end
    
    # @return [nil] 
    def clear()
      Gtk.gtk_list_store_clear(self)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def iter_is_valid(iter)
      Gtk.gtk_list_store_iter_is_valid(self, iter)
    end
    
    # @param [FFI::Pointer(*Gint)] new_order 
    # @return [nil] 
    def reorder(new_order)
      Gtk.gtk_list_store_reorder(self, new_order)
    end
    
    # @param [GtkTreeIter] a 
    # @param [GtkTreeIter] b 
    # @return [nil] 
    def swap(a, b)
      Gtk.gtk_list_store_swap(self, a, b)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] position 
    # @return [nil] 
    def move_after(iter, position)
      Gtk.gtk_list_store_move_after(self, iter, position)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] position 
    # @return [nil] 
    def move_before(iter, position)
      Gtk.gtk_list_store_move_before(self, iter, position)
    end
  end
  
  class GtkListStore < FFI::Struct
    include GtkListStoreWrappers
    layout :parent, :char,
           :priv, GtkListStorePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkListStoreClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_list_store_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_list_store_get_type, :gtk_list_store_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_list_store_new(n_columns)
  # @param [Integer] n_columns 
  # @return [GtkListStore] 
  # @scope class
  attach_function :gtk_list_store_new, :gtk_list_store_new, [:int], GtkListStore
  
  # (Not documented)
  # 
  # @method gtk_list_store_newv(n_columns, types)
  # @param [Integer] n_columns 
  # @param [FFI::Pointer(*GType)] types 
  # @return [GtkListStore] 
  # @scope class
  attach_function :gtk_list_store_newv, :gtk_list_store_newv, [:int, :pointer], GtkListStore
  
  # (Not documented)
  # 
  # @method gtk_list_store_set_column_types(list_store, n_columns, types)
  # @param [GtkListStore] list_store 
  # @param [Integer] n_columns 
  # @param [FFI::Pointer(*GType)] types 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_set_column_types, :gtk_list_store_set_column_types, [GtkListStore, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_set_value(list_store, iter, column, value)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [Integer] column 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_set_value, :gtk_list_store_set_value, [GtkListStore, GtkTreeIter, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_set(list_store, iter)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_set, :gtk_list_store_set, [GtkListStore, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_set_valuesv(list_store, iter, columns, values, n_values)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(*Gint)] columns 
  # @param [FFI::Pointer(*GValue)] values 
  # @param [Integer] n_values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_set_valuesv, :gtk_list_store_set_valuesv, [GtkListStore, GtkTreeIter, :pointer, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_set_valist(list_store, iter, var_args)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_set_valist, :gtk_list_store_set_valist, [GtkListStore, GtkTreeIter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_remove(list_store, iter)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_list_store_remove, :gtk_list_store_remove, [GtkListStore, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_list_store_insert(list_store, iter, position)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_insert, :gtk_list_store_insert, [GtkListStore, GtkTreeIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_insert_before(list_store, iter, sibling)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] sibling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_insert_before, :gtk_list_store_insert_before, [GtkListStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_insert_after(list_store, iter, sibling)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] sibling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_insert_after, :gtk_list_store_insert_after, [GtkListStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_insert_with_values(list_store, iter, position)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_insert_with_values, :gtk_list_store_insert_with_values, [GtkListStore, GtkTreeIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_insert_with_valuesv(list_store, iter, position, columns, values, n_values)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @param [Integer] position 
  # @param [FFI::Pointer(*Gint)] columns 
  # @param [FFI::Pointer(*GValue)] values 
  # @param [Integer] n_values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_insert_with_valuesv, :gtk_list_store_insert_with_valuesv, [GtkListStore, GtkTreeIter, :int, :pointer, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_prepend(list_store, iter)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_prepend, :gtk_list_store_prepend, [GtkListStore, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_append(list_store, iter)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_append, :gtk_list_store_append, [GtkListStore, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_clear(list_store)
  # @param [GtkListStore] list_store 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_clear, :gtk_list_store_clear, [GtkListStore], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_iter_is_valid(list_store, iter)
  # @param [GtkListStore] list_store 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_list_store_iter_is_valid, :gtk_list_store_iter_is_valid, [GtkListStore, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_list_store_reorder(store, new_order)
  # @param [GtkListStore] store 
  # @param [FFI::Pointer(*Gint)] new_order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_reorder, :gtk_list_store_reorder, [GtkListStore, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_swap(store, a, b)
  # @param [GtkListStore] store 
  # @param [GtkTreeIter] a 
  # @param [GtkTreeIter] b 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_swap, :gtk_list_store_swap, [GtkListStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_move_after(store, iter, position)
  # @param [GtkListStore] store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_move_after, :gtk_list_store_move_after, [GtkListStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_list_store_move_before(store, iter, position)
  # @param [GtkListStore] store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_list_store_move_before, :gtk_list_store_move_before, [GtkListStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_model_filter_visible_func_(model, iter, data)
  # @param [GtkTreeModel] model 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_model_filter_visible_func, [GtkTreeModel, GtkTreeIter, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_model_filter_modify_func_(iter, value, column, data)
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(*GValue)] value 
  # @param [Integer] column 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkTreeModel] 
  # @scope class
  callback :gtk_tree_model_filter_modify_func, [GtkTreeIter, :pointer, :int, :pointer], GtkTreeModel
  
  # (Not documented)
  class GtkTreeModelFilterPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkTreeModelFilterPrivate) < private >
  module GtkTreeModelFilterWrappers
    # @param [Proc(_callback_gtk_tree_model_filter_visible_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_visible_func(func, data, destroy)
      Gtk.gtk_tree_model_filter_set_visible_func(self, func, data, destroy)
    end
    
    # @param [Integer] n_columns 
    # @param [FFI::Pointer(*GType)] types 
    # @param [Proc(_callback_gtk_tree_model_filter_modify_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_modify_func(n_columns, types, func, data, destroy)
      Gtk.gtk_tree_model_filter_set_modify_func(self, n_columns, types, func, data, destroy)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_visible_column(column)
      Gtk.gtk_tree_model_filter_set_visible_column(self, column)
    end
    
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_tree_model_filter_get_model(self)
    end
    
    # @param [GtkTreeIter] filter_iter 
    # @param [GtkTreeIter] child_iter 
    # @return [Integer] 
    def convert_child_iter_to_iter(filter_iter, child_iter)
      Gtk.gtk_tree_model_filter_convert_child_iter_to_iter(self, filter_iter, child_iter)
    end
    
    # @param [GtkTreeIter] child_iter 
    # @param [GtkTreeIter] filter_iter 
    # @return [nil] 
    def convert_iter_to_child_iter(child_iter, filter_iter)
      Gtk.gtk_tree_model_filter_convert_iter_to_child_iter(self, child_iter, filter_iter)
    end
    
    # @param [GtkTreePath] child_path 
    # @return [GtkTreePath] 
    def convert_child_path_to_path(child_path)
      GtkTreePath.new Gtk.gtk_tree_model_filter_convert_child_path_to_path(self, child_path)
    end
    
    # @param [GtkTreePath] filter_path 
    # @return [GtkTreePath] 
    def convert_path_to_child_path(filter_path)
      GtkTreePath.new Gtk.gtk_tree_model_filter_convert_path_to_child_path(self, filter_path)
    end
    
    # @return [nil] 
    def refilter()
      Gtk.gtk_tree_model_filter_refilter(self)
    end
    
    # @return [nil] 
    def clear_cache()
      Gtk.gtk_tree_model_filter_clear_cache(self)
    end
  end
  
  class GtkTreeModelFilter < FFI::Struct
    include GtkTreeModelFilterWrappers
    layout :parent, :char,
           :priv, GtkTreeModelFilterPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :visible ::
  #   (FFI::Pointer(*)) 
  # :modify ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTreeModelFilterClass < FFI::Struct
    layout :parent_class, :char,
           :visible, :pointer,
           :modify, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_filter_get_type, :gtk_tree_model_filter_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_new(child_model, root)
  # @param [GtkTreeModel] child_model 
  # @param [GtkTreePath] root 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_tree_model_filter_new, :gtk_tree_model_filter_new, [GtkTreeModel, GtkTreePath], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_set_visible_func(filter, func, data, destroy)
  # @param [GtkTreeModelFilter] filter 
  # @param [Proc(_callback_gtk_tree_model_filter_visible_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_filter_set_visible_func, :gtk_tree_model_filter_set_visible_func, [GtkTreeModelFilter, :gtk_tree_model_filter_visible_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_set_modify_func(filter, n_columns, types, func, data, destroy)
  # @param [GtkTreeModelFilter] filter 
  # @param [Integer] n_columns 
  # @param [FFI::Pointer(*GType)] types 
  # @param [Proc(_callback_gtk_tree_model_filter_modify_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_filter_set_modify_func, :gtk_tree_model_filter_set_modify_func, [GtkTreeModelFilter, :int, :pointer, :gtk_tree_model_filter_modify_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_set_visible_column(filter, column)
  # @param [GtkTreeModelFilter] filter 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_filter_set_visible_column, :gtk_tree_model_filter_set_visible_column, [GtkTreeModelFilter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_get_model(filter)
  # @param [GtkTreeModelFilter] filter 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_tree_model_filter_get_model, :gtk_tree_model_filter_get_model, [GtkTreeModelFilter], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_convert_child_iter_to_iter(filter, filter_iter, child_iter)
  # @param [GtkTreeModelFilter] filter 
  # @param [GtkTreeIter] filter_iter 
  # @param [GtkTreeIter] child_iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_filter_convert_child_iter_to_iter, :gtk_tree_model_filter_convert_child_iter_to_iter, [GtkTreeModelFilter, GtkTreeIter, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_convert_iter_to_child_iter(filter, child_iter, filter_iter)
  # @param [GtkTreeModelFilter] filter 
  # @param [GtkTreeIter] child_iter 
  # @param [GtkTreeIter] filter_iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_filter_convert_iter_to_child_iter, :gtk_tree_model_filter_convert_iter_to_child_iter, [GtkTreeModelFilter, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_convert_child_path_to_path(filter, child_path)
  # @param [GtkTreeModelFilter] filter 
  # @param [GtkTreePath] child_path 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_model_filter_convert_child_path_to_path, :gtk_tree_model_filter_convert_child_path_to_path, [GtkTreeModelFilter, GtkTreePath], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_convert_path_to_child_path(filter, filter_path)
  # @param [GtkTreeModelFilter] filter 
  # @param [GtkTreePath] filter_path 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_model_filter_convert_path_to_child_path, :gtk_tree_model_filter_convert_path_to_child_path, [GtkTreeModelFilter, GtkTreePath], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_refilter(filter)
  # @param [GtkTreeModelFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_filter_refilter, :gtk_tree_model_filter_refilter, [GtkTreeModelFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_filter_clear_cache(filter)
  # @param [GtkTreeModelFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_filter_clear_cache, :gtk_tree_model_filter_clear_cache, [GtkTreeModelFilter], :void
  
  # (Not documented)
  class GtkEntryCompletionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_entry_completion_match_func_(completion, key, iter, user_data)
  # @param [FFI::Pointer(*GtkEntryCompletion)] completion 
  # @param [String] key 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_entry_completion_match_func, [:pointer, :string, GtkTreeIter, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkEntryCompletionPrivate) < private >
  module GtkEntryCompletionWrappers
    # @return [GtkWidget] 
    def get_entry()
      GtkWidget.new Gtk.gtk_entry_completion_get_entry(self)
    end
    
    # @param [GtkTreeModel] model 
    # @return [nil] 
    def set_model(model)
      Gtk.gtk_entry_completion_set_model(self, model)
    end
    
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_entry_completion_get_model(self)
    end
    
    # @param [Proc(_callback_gtk_entry_completion_match_func_)] func 
    # @param [FFI::Pointer(Gpointer)] func_data 
    # @param [FFI::Pointer(GDestroyNotify)] func_notify 
    # @return [nil] 
    def set_match_func(func, func_data, func_notify)
      Gtk.gtk_entry_completion_set_match_func(self, func, func_data, func_notify)
    end
    
    # @param [Integer] length 
    # @return [nil] 
    def set_minimum_key_length(length)
      Gtk.gtk_entry_completion_set_minimum_key_length(self, length)
    end
    
    # @return [Integer] 
    def get_minimum_key_length()
      Gtk.gtk_entry_completion_get_minimum_key_length(self)
    end
    
    # @param [String] key 
    # @return [String] 
    def compute_prefix(key)
      Gtk.gtk_entry_completion_compute_prefix(self, key)
    end
    
    # @return [nil] 
    def complete()
      Gtk.gtk_entry_completion_complete(self)
    end
    
    # @return [nil] 
    def insert_prefix()
      Gtk.gtk_entry_completion_insert_prefix(self)
    end
    
    # @param [Integer] index 
    # @param [String] text 
    # @return [nil] 
    def insert_action_text(index, text)
      Gtk.gtk_entry_completion_insert_action_text(self, index, text)
    end
    
    # @param [Integer] index 
    # @param [String] markup 
    # @return [nil] 
    def insert_action_markup(index, markup)
      Gtk.gtk_entry_completion_insert_action_markup(self, index, markup)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def delete_action(index)
      Gtk.gtk_entry_completion_delete_action(self, index)
    end
    
    # @param [Integer] inline_completion 
    # @return [nil] 
    def set_inline_completion(inline_completion)
      Gtk.gtk_entry_completion_set_inline_completion(self, inline_completion)
    end
    
    # @return [Integer] 
    def get_inline_completion()
      Gtk.gtk_entry_completion_get_inline_completion(self)
    end
    
    # @param [Integer] inline_selection 
    # @return [nil] 
    def set_inline_selection(inline_selection)
      Gtk.gtk_entry_completion_set_inline_selection(self, inline_selection)
    end
    
    # @return [Integer] 
    def get_inline_selection()
      Gtk.gtk_entry_completion_get_inline_selection(self)
    end
    
    # @param [Integer] popup_completion 
    # @return [nil] 
    def set_popup_completion(popup_completion)
      Gtk.gtk_entry_completion_set_popup_completion(self, popup_completion)
    end
    
    # @return [Integer] 
    def get_popup_completion()
      Gtk.gtk_entry_completion_get_popup_completion(self)
    end
    
    # @param [Integer] popup_set_width 
    # @return [nil] 
    def set_popup_set_width(popup_set_width)
      Gtk.gtk_entry_completion_set_popup_set_width(self, popup_set_width)
    end
    
    # @return [Integer] 
    def get_popup_set_width()
      Gtk.gtk_entry_completion_get_popup_set_width(self)
    end
    
    # @param [Integer] popup_single_match 
    # @return [nil] 
    def set_popup_single_match(popup_single_match)
      Gtk.gtk_entry_completion_set_popup_single_match(self, popup_single_match)
    end
    
    # @return [Integer] 
    def get_popup_single_match()
      Gtk.gtk_entry_completion_get_popup_single_match(self)
    end
    
    # @return [String] 
    def get_completion_prefix()
      Gtk.gtk_entry_completion_get_completion_prefix(self)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_text_column(column)
      Gtk.gtk_entry_completion_set_text_column(self, column)
    end
    
    # @return [Integer] 
    def get_text_column()
      Gtk.gtk_entry_completion_get_text_column(self)
    end
  end
  
  class GtkEntryCompletion < FFI::Struct
    include GtkEntryCompletionWrappers
    layout :parent_instance, :char,
           :priv, GtkEntryCompletionPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :match_selected ::
  #   (FFI::Pointer(*)) 
  # :action_activated ::
  #   (FFI::Pointer(*)) 
  # :insert_prefix ::
  #   (FFI::Pointer(*)) 
  # :cursor_on_match ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  class GtkEntryCompletionClass < FFI::Struct
    layout :parent_class, :char,
           :match_selected, :pointer,
           :action_activated, :pointer,
           :insert_prefix, :pointer,
           :cursor_on_match, :pointer,
           :gtk_reserved0, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_type, :gtk_entry_completion_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_new()
  # @return [GtkEntryCompletion] 
  # @scope class
  attach_function :gtk_entry_completion_new, :gtk_entry_completion_new, [], GtkEntryCompletion
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_new_with_area(area)
  # @param [GtkCellArea] area 
  # @return [GtkEntryCompletion] 
  # @scope class
  attach_function :gtk_entry_completion_new_with_area, :gtk_entry_completion_new_with_area, [GtkCellArea], GtkEntryCompletion
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_entry(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_entry_completion_get_entry, :gtk_entry_completion_get_entry, [GtkEntryCompletion], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_model(completion, model)
  # @param [GtkEntryCompletion] completion 
  # @param [GtkTreeModel] model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_model, :gtk_entry_completion_set_model, [GtkEntryCompletion, GtkTreeModel], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_model(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_entry_completion_get_model, :gtk_entry_completion_get_model, [GtkEntryCompletion], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_match_func(completion, func, func_data, func_notify)
  # @param [GtkEntryCompletion] completion 
  # @param [Proc(_callback_gtk_entry_completion_match_func_)] func 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @param [FFI::Pointer(GDestroyNotify)] func_notify 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_match_func, :gtk_entry_completion_set_match_func, [GtkEntryCompletion, :gtk_entry_completion_match_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_minimum_key_length(completion, length)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] length 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_minimum_key_length, :gtk_entry_completion_set_minimum_key_length, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_minimum_key_length(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_minimum_key_length, :gtk_entry_completion_get_minimum_key_length, [GtkEntryCompletion], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_compute_prefix(completion, key)
  # @param [GtkEntryCompletion] completion 
  # @param [String] key 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_completion_compute_prefix, :gtk_entry_completion_compute_prefix, [GtkEntryCompletion, :string], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_complete(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_complete, :gtk_entry_completion_complete, [GtkEntryCompletion], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_insert_prefix(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_insert_prefix, :gtk_entry_completion_insert_prefix, [GtkEntryCompletion], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_insert_action_text(completion, index, text)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] index 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_insert_action_text, :gtk_entry_completion_insert_action_text, [GtkEntryCompletion, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_insert_action_markup(completion, index, markup)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] index 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_insert_action_markup, :gtk_entry_completion_insert_action_markup, [GtkEntryCompletion, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_delete_action(completion, index)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_delete_action, :gtk_entry_completion_delete_action, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_inline_completion(completion, inline_completion)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] inline_completion 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_inline_completion, :gtk_entry_completion_set_inline_completion, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_inline_completion(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_inline_completion, :gtk_entry_completion_get_inline_completion, [GtkEntryCompletion], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_inline_selection(completion, inline_selection)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] inline_selection 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_inline_selection, :gtk_entry_completion_set_inline_selection, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_inline_selection(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_inline_selection, :gtk_entry_completion_get_inline_selection, [GtkEntryCompletion], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_popup_completion(completion, popup_completion)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] popup_completion 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_popup_completion, :gtk_entry_completion_set_popup_completion, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_popup_completion(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_popup_completion, :gtk_entry_completion_get_popup_completion, [GtkEntryCompletion], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_popup_set_width(completion, popup_set_width)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] popup_set_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_popup_set_width, :gtk_entry_completion_set_popup_set_width, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_popup_set_width(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_popup_set_width, :gtk_entry_completion_get_popup_set_width, [GtkEntryCompletion], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_popup_single_match(completion, popup_single_match)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] popup_single_match 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_popup_single_match, :gtk_entry_completion_set_popup_single_match, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_popup_single_match(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_popup_single_match, :gtk_entry_completion_get_popup_single_match, [GtkEntryCompletion], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_completion_prefix(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_completion_get_completion_prefix, :gtk_entry_completion_get_completion_prefix, [GtkEntryCompletion], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_set_text_column(completion, column)
  # @param [GtkEntryCompletion] completion 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_completion_set_text_column, :gtk_entry_completion_set_text_column, [GtkEntryCompletion, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_completion_get_text_column(completion)
  # @param [GtkEntryCompletion] completion 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_completion_get_text_column, :gtk_entry_completion_get_text_column, [GtkEntryCompletion], :int
  
  # (Not documented)
  class GtkImagePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_image_type).</em>
  # 
  # === Options:
  # :empty ::
  #   
  # :pixbuf ::
  #   
  # :stock ::
  #   
  # :icon_set ::
  #   
  # :animation ::
  #   
  # :icon_name ::
  #   
  # :gicon ::
  #   
  # 
  # @method _enum_gtk_image_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_image_type, [
    :empty, 0,
    :pixbuf, 1,
    :stock, 2,
    :icon_set, 3,
    :animation, 4,
    :icon_name, 5,
    :gicon, 6
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :misc ::
  #   (GtkMisc) 
  # :priv ::
  #   (GtkImagePrivate) < private >
  module GtkImageWrappers
    # @return [nil] 
    def clear()
      Gtk.gtk_image_clear(self)
    end
    
    # @param [String] filename 
    # @return [nil] 
    def set_from_file(filename)
      Gtk.gtk_image_set_from_file(self, filename)
    end
    
    # @param [String] resource_path 
    # @return [nil] 
    def set_from_resource(resource_path)
      Gtk.gtk_image_set_from_resource(self, resource_path)
    end
    
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_from_pixbuf(pixbuf)
      Gtk.gtk_image_set_from_pixbuf(self, pixbuf)
    end
    
    # @param [String] stock_id 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_from_stock(stock_id, size)
      Gtk.gtk_image_set_from_stock(self, stock_id, size)
    end
    
    # @param [GtkIconSet] icon_set 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_from_icon_set(icon_set, size)
      Gtk.gtk_image_set_from_icon_set(self, icon_set, size)
    end
    
    # @param [FFI::Pointer(*GdkPixbufAnimation)] animation 
    # @return [nil] 
    def set_from_animation(animation)
      Gtk.gtk_image_set_from_animation(self, animation)
    end
    
    # @param [String] icon_name 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_from_icon_name(icon_name, size)
      Gtk.gtk_image_set_from_icon_name(self, icon_name, size)
    end
    
    # @param [FFI::Pointer(*GIcon)] icon 
    # @param [Symbol from _enum_gtk_icon_size_] size 
    # @return [nil] 
    def set_from_gicon(icon, size)
      Gtk.gtk_image_set_from_gicon(self, icon, size)
    end
    
    # @param [Integer] pixel_size 
    # @return [nil] 
    def set_pixel_size(pixel_size)
      Gtk.gtk_image_set_pixel_size(self, pixel_size)
    end
    
    # @return [Symbol from _enum_gtk_image_type_] 
    def get_storage_type()
      Gtk.gtk_image_get_storage_type(self)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_pixbuf()
      Gtk.gtk_image_get_pixbuf(self)
    end
    
    # @param [FFI::Pointer(**Gchar)] stock_id 
    # @param [FFI::Pointer(*GtkIconSize)] size 
    # @return [nil] 
    def get_stock(stock_id, size)
      Gtk.gtk_image_get_stock(self, stock_id, size)
    end
    
    # @param [FFI::Pointer(**GtkIconSet)] icon_set 
    # @param [FFI::Pointer(*GtkIconSize)] size 
    # @return [nil] 
    def get_icon_set(icon_set, size)
      Gtk.gtk_image_get_icon_set(self, icon_set, size)
    end
    
    # @return [FFI::Pointer(*GdkPixbufAnimation)] 
    def get_animation()
      Gtk.gtk_image_get_animation(self)
    end
    
    # @param [FFI::Pointer(**Gchar)] icon_name 
    # @param [FFI::Pointer(*GtkIconSize)] size 
    # @return [nil] 
    def get_icon_name(icon_name, size)
      Gtk.gtk_image_get_icon_name(self, icon_name, size)
    end
    
    # @param [FFI::Pointer(**GIcon)] gicon 
    # @param [FFI::Pointer(*GtkIconSize)] size 
    # @return [nil] 
    def get_gicon(gicon, size)
      Gtk.gtk_image_get_gicon(self, gicon, size)
    end
    
    # @return [Integer] 
    def get_pixel_size()
      Gtk.gtk_image_get_pixel_size(self)
    end
  end
  
  class GtkImage < FFI::Struct
    include GtkImageWrappers
    layout :misc, GtkMisc.by_value,
           :priv, GtkImagePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMiscClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkImageClass < FFI::Struct
    layout :parent_class, GtkMiscClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_image_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_image_get_type, :gtk_image_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_image_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new, :gtk_image_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_file(filename)
  # @param [String] filename 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_file, :gtk_image_new_from_file, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_resource(resource_path)
  # @param [String] resource_path 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_resource, :gtk_image_new_from_resource, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_pixbuf(pixbuf)
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_pixbuf, :gtk_image_new_from_pixbuf, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_stock(stock_id, size)
  # @param [String] stock_id 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_stock, :gtk_image_new_from_stock, [:string, :gtk_icon_size], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_icon_set(icon_set, size)
  # @param [GtkIconSet] icon_set 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_icon_set, :gtk_image_new_from_icon_set, [GtkIconSet, :gtk_icon_size], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_animation(animation)
  # @param [FFI::Pointer(*GdkPixbufAnimation)] animation 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_animation, :gtk_image_new_from_animation, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_icon_name(icon_name, size)
  # @param [String] icon_name 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_icon_name, :gtk_image_new_from_icon_name, [:string, :gtk_icon_size], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_new_from_gicon(icon, size)
  # @param [FFI::Pointer(*GIcon)] icon 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_new_from_gicon, :gtk_image_new_from_gicon, [:pointer, :gtk_icon_size], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_clear(image)
  # @param [GtkImage] image 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_clear, :gtk_image_clear, [GtkImage], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_file(image, filename)
  # @param [GtkImage] image 
  # @param [String] filename 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_file, :gtk_image_set_from_file, [GtkImage, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_resource(image, resource_path)
  # @param [GtkImage] image 
  # @param [String] resource_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_resource, :gtk_image_set_from_resource, [GtkImage, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_pixbuf(image, pixbuf)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_pixbuf, :gtk_image_set_from_pixbuf, [GtkImage, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_stock(image, stock_id, size)
  # @param [GtkImage] image 
  # @param [String] stock_id 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_stock, :gtk_image_set_from_stock, [GtkImage, :string, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_icon_set(image, icon_set, size)
  # @param [GtkImage] image 
  # @param [GtkIconSet] icon_set 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_icon_set, :gtk_image_set_from_icon_set, [GtkImage, GtkIconSet, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_animation(image, animation)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(*GdkPixbufAnimation)] animation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_animation, :gtk_image_set_from_animation, [GtkImage, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_icon_name(image, icon_name, size)
  # @param [GtkImage] image 
  # @param [String] icon_name 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_icon_name, :gtk_image_set_from_icon_name, [GtkImage, :string, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_from_gicon(image, icon, size)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_from_gicon, :gtk_image_set_from_gicon, [GtkImage, :pointer, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_image_set_pixel_size(image, pixel_size)
  # @param [GtkImage] image 
  # @param [Integer] pixel_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_set_pixel_size, :gtk_image_set_pixel_size, [GtkImage, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_image_get_storage_type(image)
  # @param [GtkImage] image 
  # @return [Symbol from _enum_gtk_image_type_] 
  # @scope class
  attach_function :gtk_image_get_storage_type, :gtk_image_get_storage_type, [GtkImage], :gtk_image_type
  
  # (Not documented)
  # 
  # @method gtk_image_get_pixbuf(image)
  # @param [GtkImage] image 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_image_get_pixbuf, :gtk_image_get_pixbuf, [GtkImage], :pointer
  
  # (Not documented)
  # 
  # @method gtk_image_get_stock(image, stock_id, size)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(**Gchar)] stock_id 
  # @param [FFI::Pointer(*GtkIconSize)] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_get_stock, :gtk_image_get_stock, [GtkImage, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_image_get_icon_set(image, icon_set, size)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(**GtkIconSet)] icon_set 
  # @param [FFI::Pointer(*GtkIconSize)] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_get_icon_set, :gtk_image_get_icon_set, [GtkImage, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_image_get_animation(image)
  # @param [GtkImage] image 
  # @return [FFI::Pointer(*GdkPixbufAnimation)] 
  # @scope class
  attach_function :gtk_image_get_animation, :gtk_image_get_animation, [GtkImage], :pointer
  
  # (Not documented)
  # 
  # @method gtk_image_get_icon_name(image, icon_name, size)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(**Gchar)] icon_name 
  # @param [FFI::Pointer(*GtkIconSize)] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_get_icon_name, :gtk_image_get_icon_name, [GtkImage, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_image_get_gicon(image, gicon, size)
  # @param [GtkImage] image 
  # @param [FFI::Pointer(**GIcon)] gicon 
  # @param [FFI::Pointer(*GtkIconSize)] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_get_gicon, :gtk_image_get_gicon, [GtkImage, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_image_get_pixel_size(image)
  # @param [GtkImage] image 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_image_get_pixel_size, :gtk_image_get_pixel_size, [GtkImage], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_entry_icon_position).</em>
  # 
  # === Options:
  # :primary ::
  #   
  # :secondary ::
  #   
  # 
  # @method _enum_gtk_entry_icon_position_
  # @return [Symbol]
  # @scope class
  enum :gtk_entry_icon_position, [
    :primary, 0,
    :secondary, 1
  ]
  
  # (Not documented)
  class GtkEntryPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkWidget) < private >
  # :priv ::
  #   (GtkEntryPrivate) 
  module GtkEntryWrappers
    # @return [GtkEntryBuffer] 
    def get_buffer()
      GtkEntryBuffer.new Gtk.gtk_entry_get_buffer(self)
    end
    
    # @param [GtkEntryBuffer] buffer 
    # @return [nil] 
    def set_buffer(buffer)
      Gtk.gtk_entry_set_buffer(self, buffer)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] text_area 
    # @return [nil] 
    def get_text_area(text_area)
      Gtk.gtk_entry_get_text_area(self, text_area)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visibility(visible)
      Gtk.gtk_entry_set_visibility(self, visible)
    end
    
    # @return [Integer] 
    def get_visibility()
      Gtk.gtk_entry_get_visibility(self)
    end
    
    # @param [Integer] ch 
    # @return [nil] 
    def set_invisible_char(ch)
      Gtk.gtk_entry_set_invisible_char(self, ch)
    end
    
    # @return [Integer] 
    def get_invisible_char()
      Gtk.gtk_entry_get_invisible_char(self)
    end
    
    # @return [nil] 
    def unset_invisible_char()
      Gtk.gtk_entry_unset_invisible_char(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_has_frame(setting)
      Gtk.gtk_entry_set_has_frame(self, setting)
    end
    
    # @return [Integer] 
    def get_has_frame()
      Gtk.gtk_entry_get_has_frame(self)
    end
    
    # @param [GtkBorder] border 
    # @return [nil] 
    def set_inner_border(border)
      Gtk.gtk_entry_set_inner_border(self, border)
    end
    
    # @return [GtkBorder] 
    def get_inner_border()
      GtkBorder.new Gtk.gtk_entry_get_inner_border(self)
    end
    
    # @param [Integer] overwrite 
    # @return [nil] 
    def set_overwrite_mode(overwrite)
      Gtk.gtk_entry_set_overwrite_mode(self, overwrite)
    end
    
    # @return [Integer] 
    def get_overwrite_mode()
      Gtk.gtk_entry_get_overwrite_mode(self)
    end
    
    # @param [Integer] max 
    # @return [nil] 
    def set_max_length(max)
      Gtk.gtk_entry_set_max_length(self, max)
    end
    
    # @return [Integer] 
    def get_max_length()
      Gtk.gtk_entry_get_max_length(self)
    end
    
    # @return [Integer] 
    def get_text_length()
      Gtk.gtk_entry_get_text_length(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_activates_default(setting)
      Gtk.gtk_entry_set_activates_default(self, setting)
    end
    
    # @return [Integer] 
    def get_activates_default()
      Gtk.gtk_entry_get_activates_default(self)
    end
    
    # @param [Integer] n_chars 
    # @return [nil] 
    def set_width_chars(n_chars)
      Gtk.gtk_entry_set_width_chars(self, n_chars)
    end
    
    # @return [Integer] 
    def get_width_chars()
      Gtk.gtk_entry_get_width_chars(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_text(text)
      Gtk.gtk_entry_set_text(self, text)
    end
    
    # @return [String] 
    def get_text()
      Gtk.gtk_entry_get_text(self)
    end
    
    # @return [FFI::Pointer(*PangoLayout)] 
    def get_layout()
      Gtk.gtk_entry_get_layout(self)
    end
    
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] y 
    # @return [nil] 
    def get_layout_offsets(x, y)
      Gtk.gtk_entry_get_layout_offsets(self, x, y)
    end
    
    # @param [Float] xalign 
    # @return [nil] 
    def set_alignment(xalign)
      Gtk.gtk_entry_set_alignment(self, xalign)
    end
    
    # @return [Float] 
    def get_alignment()
      Gtk.gtk_entry_get_alignment(self)
    end
    
    # @param [GtkEntryCompletion] completion 
    # @return [nil] 
    def set_completion(completion)
      Gtk.gtk_entry_set_completion(self, completion)
    end
    
    # @return [GtkEntryCompletion] 
    def get_completion()
      GtkEntryCompletion.new Gtk.gtk_entry_get_completion(self)
    end
    
    # @param [Integer] layout_index 
    # @return [Integer] 
    def layout_index_to_text_index(layout_index)
      Gtk.gtk_entry_layout_index_to_text_index(self, layout_index)
    end
    
    # @param [Integer] text_index 
    # @return [Integer] 
    def text_index_to_layout_index(text_index)
      Gtk.gtk_entry_text_index_to_layout_index(self, text_index)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_cursor_hadjustment(adjustment)
      Gtk.gtk_entry_set_cursor_hadjustment(self, adjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_cursor_hadjustment()
      GtkAdjustment.new Gtk.gtk_entry_get_cursor_hadjustment(self)
    end
    
    # @param [Float] fraction 
    # @return [nil] 
    def set_progress_fraction(fraction)
      Gtk.gtk_entry_set_progress_fraction(self, fraction)
    end
    
    # @return [Float] 
    def get_progress_fraction()
      Gtk.gtk_entry_get_progress_fraction(self)
    end
    
    # @param [Float] fraction 
    # @return [nil] 
    def set_progress_pulse_step(fraction)
      Gtk.gtk_entry_set_progress_pulse_step(self, fraction)
    end
    
    # @return [Float] 
    def get_progress_pulse_step()
      Gtk.gtk_entry_get_progress_pulse_step(self)
    end
    
    # @return [nil] 
    def progress_pulse()
      Gtk.gtk_entry_progress_pulse(self)
    end
    
    # @return [String] 
    def get_placeholder_text()
      Gtk.gtk_entry_get_placeholder_text(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_placeholder_text(text)
      Gtk.gtk_entry_set_placeholder_text(self, text)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_icon_from_pixbuf(icon_pos, pixbuf)
      Gtk.gtk_entry_set_icon_from_pixbuf(self, icon_pos, pixbuf)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [String] stock_id 
    # @return [nil] 
    def set_icon_from_stock(icon_pos, stock_id)
      Gtk.gtk_entry_set_icon_from_stock(self, icon_pos, stock_id)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [String] icon_name 
    # @return [nil] 
    def set_icon_from_icon_name(icon_pos, icon_name)
      Gtk.gtk_entry_set_icon_from_icon_name(self, icon_pos, icon_name)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [FFI::Pointer(*GIcon)] icon 
    # @return [nil] 
    def set_icon_from_gicon(icon_pos, icon)
      Gtk.gtk_entry_set_icon_from_gicon(self, icon_pos, icon)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [Symbol from _enum_gtk_image_type_] 
    def get_icon_storage_type(icon_pos)
      Gtk.gtk_entry_get_icon_storage_type(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_icon_pixbuf(icon_pos)
      Gtk.gtk_entry_get_icon_pixbuf(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [String] 
    def get_icon_stock(icon_pos)
      Gtk.gtk_entry_get_icon_stock(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [String] 
    def get_icon_name(icon_pos)
      Gtk.gtk_entry_get_icon_name(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [FFI::Pointer(*GIcon)] 
    def get_icon_gicon(icon_pos)
      Gtk.gtk_entry_get_icon_gicon(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [Integer] activatable 
    # @return [nil] 
    def set_icon_activatable(icon_pos, activatable)
      Gtk.gtk_entry_set_icon_activatable(self, icon_pos, activatable)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [Integer] 
    def get_icon_activatable(icon_pos)
      Gtk.gtk_entry_get_icon_activatable(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [Integer] sensitive 
    # @return [nil] 
    def set_icon_sensitive(icon_pos, sensitive)
      Gtk.gtk_entry_set_icon_sensitive(self, icon_pos, sensitive)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [Integer] 
    def get_icon_sensitive(icon_pos)
      Gtk.gtk_entry_get_icon_sensitive(self, icon_pos)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [Integer] 
    def get_icon_at_pos(x, y)
      Gtk.gtk_entry_get_icon_at_pos(self, x, y)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [String] tooltip 
    # @return [nil] 
    def set_icon_tooltip_text(icon_pos, tooltip)
      Gtk.gtk_entry_set_icon_tooltip_text(self, icon_pos, tooltip)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [String] 
    def get_icon_tooltip_text(icon_pos)
      Gtk.gtk_entry_get_icon_tooltip_text(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [String] tooltip 
    # @return [nil] 
    def set_icon_tooltip_markup(icon_pos, tooltip)
      Gtk.gtk_entry_set_icon_tooltip_markup(self, icon_pos, tooltip)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @return [String] 
    def get_icon_tooltip_markup(icon_pos)
      Gtk.gtk_entry_get_icon_tooltip_markup(self, icon_pos)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [GtkTargetList] target_list 
    # @param [unknown] actions 
    # @return [nil] 
    def set_icon_drag_source(icon_pos, target_list, actions)
      Gtk.gtk_entry_set_icon_drag_source(self, icon_pos, target_list, actions)
    end
    
    # @return [Integer] 
    def get_current_icon_drag_source()
      Gtk.gtk_entry_get_current_icon_drag_source(self)
    end
    
    # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
    # @param [FFI::Pointer(*GdkRectangle)] icon_area 
    # @return [nil] 
    def get_icon_area(icon_pos, icon_area)
      Gtk.gtk_entry_get_icon_area(self, icon_pos, icon_area)
    end
    
    # @param [FFI::Pointer(*GdkEventKey)] event 
    # @return [Integer] 
    def im_context_filter_keypress(event)
      Gtk.gtk_entry_im_context_filter_keypress(self, event)
    end
    
    # @return [nil] 
    def reset_im_context()
      Gtk.gtk_entry_reset_im_context(self)
    end
    
    # @param [Symbol from _enum_gtk_input_purpose_] purpose 
    # @return [nil] 
    def set_input_purpose(purpose)
      Gtk.gtk_entry_set_input_purpose(self, purpose)
    end
    
    # @return [Symbol from _enum_gtk_input_purpose_] 
    def get_input_purpose()
      Gtk.gtk_entry_get_input_purpose(self)
    end
    
    # @param [Symbol from _enum_gtk_input_hints_] hints 
    # @return [nil] 
    def set_input_hints(hints)
      Gtk.gtk_entry_set_input_hints(self, hints)
    end
    
    # @return [Symbol from _enum_gtk_input_hints_] 
    def get_input_hints()
      Gtk.gtk_entry_get_input_hints(self)
    end
    
    # @param [FFI::Pointer(*PangoAttrList)] attrs 
    # @return [nil] 
    def set_attributes(attrs)
      Gtk.gtk_entry_set_attributes(self, attrs)
    end
    
    # @return [FFI::Pointer(*PangoAttrList)] 
    def get_attributes()
      Gtk.gtk_entry_get_attributes(self)
    end
  end
  
  class GtkEntry < FFI::Struct
    include GtkEntryWrappers
    layout :parent_instance, GtkWidget.by_value,
           :priv, GtkEntryPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :populate_popup ::
  #   (FFI::Pointer(*)) Hook to customize right-click popup
  # :activate ::
  #   (FFI::Pointer(*)) Action signals
  # :move_cursor ::
  #   (FFI::Pointer(*)) 
  # :insert_at_cursor ::
  #   (FFI::Pointer(*)) 
  # :delete_from_cursor ::
  #   (FFI::Pointer(*)) 
  # :backspace ::
  #   (FFI::Pointer(*)) 
  # :cut_clipboard ::
  #   (FFI::Pointer(*)) 
  # :copy_clipboard ::
  #   (FFI::Pointer(*)) 
  # :paste_clipboard ::
  #   (FFI::Pointer(*)) 
  # :toggle_overwrite ::
  #   (FFI::Pointer(*)) 
  # :get_text_area_size ::
  #   (FFI::Pointer(*)) hooks to add other objects beside the entry (like in GtkSpinButton)
  # :get_frame_size ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  class GtkEntryClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :populate_popup, :pointer,
           :activate, :pointer,
           :move_cursor, :pointer,
           :insert_at_cursor, :pointer,
           :delete_from_cursor, :pointer,
           :backspace, :pointer,
           :cut_clipboard, :pointer,
           :copy_clipboard, :pointer,
           :paste_clipboard, :pointer,
           :toggle_overwrite, :pointer,
           :get_text_area_size, :pointer,
           :get_frame_size, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_entry_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_type, :gtk_entry_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_entry_new, :gtk_entry_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_entry_new_with_buffer(buffer)
  # @param [GtkEntryBuffer] buffer 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_entry_new_with_buffer, :gtk_entry_new_with_buffer, [GtkEntryBuffer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_entry_get_buffer(entry)
  # @param [GtkEntry] entry 
  # @return [GtkEntryBuffer] 
  # @scope class
  attach_function :gtk_entry_get_buffer, :gtk_entry_get_buffer, [GtkEntry], GtkEntryBuffer
  
  # (Not documented)
  # 
  # @method gtk_entry_set_buffer(entry, buffer)
  # @param [GtkEntry] entry 
  # @param [GtkEntryBuffer] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_buffer, :gtk_entry_set_buffer, [GtkEntry, GtkEntryBuffer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_text_area(entry, text_area)
  # @param [GtkEntry] entry 
  # @param [FFI::Pointer(*GdkRectangle)] text_area 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_get_text_area, :gtk_entry_get_text_area, [GtkEntry, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_visibility(entry, visible)
  # @param [GtkEntry] entry 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_visibility, :gtk_entry_set_visibility, [GtkEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_visibility(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_visibility, :gtk_entry_get_visibility, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_invisible_char(entry, ch)
  # @param [GtkEntry] entry 
  # @param [Integer] ch 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_invisible_char, :gtk_entry_set_invisible_char, [GtkEntry, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_invisible_char(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_invisible_char, :gtk_entry_get_invisible_char, [GtkEntry], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_unset_invisible_char(entry)
  # @param [GtkEntry] entry 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_unset_invisible_char, :gtk_entry_unset_invisible_char, [GtkEntry], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_has_frame(entry, setting)
  # @param [GtkEntry] entry 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_has_frame, :gtk_entry_set_has_frame, [GtkEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_has_frame(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_has_frame, :gtk_entry_get_has_frame, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_inner_border(entry, border)
  # @param [GtkEntry] entry 
  # @param [GtkBorder] border 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_inner_border, :gtk_entry_set_inner_border, [GtkEntry, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_inner_border(entry)
  # @param [GtkEntry] entry 
  # @return [GtkBorder] 
  # @scope class
  attach_function :gtk_entry_get_inner_border, :gtk_entry_get_inner_border, [GtkEntry], GtkBorder
  
  # (Not documented)
  # 
  # @method gtk_entry_set_overwrite_mode(entry, overwrite)
  # @param [GtkEntry] entry 
  # @param [Integer] overwrite 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_overwrite_mode, :gtk_entry_set_overwrite_mode, [GtkEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_overwrite_mode(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_overwrite_mode, :gtk_entry_get_overwrite_mode, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_max_length(entry, max)
  # @param [GtkEntry] entry 
  # @param [Integer] max 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_max_length, :gtk_entry_set_max_length, [GtkEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_max_length(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_max_length, :gtk_entry_get_max_length, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_get_text_length(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_text_length, :gtk_entry_get_text_length, [GtkEntry], :ushort
  
  # (Not documented)
  # 
  # @method gtk_entry_set_activates_default(entry, setting)
  # @param [GtkEntry] entry 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_activates_default, :gtk_entry_set_activates_default, [GtkEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_activates_default(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_activates_default, :gtk_entry_get_activates_default, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_width_chars(entry, n_chars)
  # @param [GtkEntry] entry 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_width_chars, :gtk_entry_set_width_chars, [GtkEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_width_chars(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_width_chars, :gtk_entry_get_width_chars, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_text(entry, text)
  # @param [GtkEntry] entry 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_text, :gtk_entry_set_text, [GtkEntry, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_text(entry)
  # @param [GtkEntry] entry 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_get_text, :gtk_entry_get_text, [GtkEntry], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_get_layout(entry)
  # @param [GtkEntry] entry 
  # @return [FFI::Pointer(*PangoLayout)] 
  # @scope class
  attach_function :gtk_entry_get_layout, :gtk_entry_get_layout, [GtkEntry], :pointer
  
  # (Not documented)
  # 
  # @method gtk_entry_get_layout_offsets(entry, x, y)
  # @param [GtkEntry] entry 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_get_layout_offsets, :gtk_entry_get_layout_offsets, [GtkEntry, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_alignment(entry, xalign)
  # @param [GtkEntry] entry 
  # @param [Float] xalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_alignment, :gtk_entry_set_alignment, [GtkEntry, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_alignment(entry)
  # @param [GtkEntry] entry 
  # @return [Float] 
  # @scope class
  attach_function :gtk_entry_get_alignment, :gtk_entry_get_alignment, [GtkEntry], :float
  
  # (Not documented)
  # 
  # @method gtk_entry_set_completion(entry, completion)
  # @param [GtkEntry] entry 
  # @param [GtkEntryCompletion] completion 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_completion, :gtk_entry_set_completion, [GtkEntry, GtkEntryCompletion], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_completion(entry)
  # @param [GtkEntry] entry 
  # @return [GtkEntryCompletion] 
  # @scope class
  attach_function :gtk_entry_get_completion, :gtk_entry_get_completion, [GtkEntry], GtkEntryCompletion
  
  # (Not documented)
  # 
  # @method gtk_entry_layout_index_to_text_index(entry, layout_index)
  # @param [GtkEntry] entry 
  # @param [Integer] layout_index 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_layout_index_to_text_index, :gtk_entry_layout_index_to_text_index, [GtkEntry, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_text_index_to_layout_index(entry, text_index)
  # @param [GtkEntry] entry 
  # @param [Integer] text_index 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_text_index_to_layout_index, :gtk_entry_text_index_to_layout_index, [GtkEntry, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_cursor_hadjustment(entry, adjustment)
  # @param [GtkEntry] entry 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_cursor_hadjustment, :gtk_entry_set_cursor_hadjustment, [GtkEntry, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_cursor_hadjustment(entry)
  # @param [GtkEntry] entry 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_entry_get_cursor_hadjustment, :gtk_entry_get_cursor_hadjustment, [GtkEntry], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_entry_set_progress_fraction(entry, fraction)
  # @param [GtkEntry] entry 
  # @param [Float] fraction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_progress_fraction, :gtk_entry_set_progress_fraction, [GtkEntry, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_progress_fraction(entry)
  # @param [GtkEntry] entry 
  # @return [Float] 
  # @scope class
  attach_function :gtk_entry_get_progress_fraction, :gtk_entry_get_progress_fraction, [GtkEntry], :double
  
  # (Not documented)
  # 
  # @method gtk_entry_set_progress_pulse_step(entry, fraction)
  # @param [GtkEntry] entry 
  # @param [Float] fraction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_progress_pulse_step, :gtk_entry_set_progress_pulse_step, [GtkEntry, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_progress_pulse_step(entry)
  # @param [GtkEntry] entry 
  # @return [Float] 
  # @scope class
  attach_function :gtk_entry_get_progress_pulse_step, :gtk_entry_get_progress_pulse_step, [GtkEntry], :double
  
  # (Not documented)
  # 
  # @method gtk_entry_progress_pulse(entry)
  # @param [GtkEntry] entry 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_progress_pulse, :gtk_entry_progress_pulse, [GtkEntry], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_placeholder_text(entry)
  # @param [GtkEntry] entry 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_get_placeholder_text, :gtk_entry_get_placeholder_text, [GtkEntry], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_set_placeholder_text(entry, text)
  # @param [GtkEntry] entry 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_placeholder_text, :gtk_entry_set_placeholder_text, [GtkEntry, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_from_pixbuf(entry, icon_pos, pixbuf)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_from_pixbuf, :gtk_entry_set_icon_from_pixbuf, [GtkEntry, :gtk_entry_icon_position, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_from_stock(entry, icon_pos, stock_id)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [String] stock_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_from_stock, :gtk_entry_set_icon_from_stock, [GtkEntry, :gtk_entry_icon_position, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_from_icon_name(entry, icon_pos, icon_name)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_from_icon_name, :gtk_entry_set_icon_from_icon_name, [GtkEntry, :gtk_entry_icon_position, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_from_gicon(entry, icon_pos, icon)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_from_gicon, :gtk_entry_set_icon_from_gicon, [GtkEntry, :gtk_entry_icon_position, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_storage_type(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [Symbol from _enum_gtk_image_type_] 
  # @scope class
  attach_function :gtk_entry_get_icon_storage_type, :gtk_entry_get_icon_storage_type, [GtkEntry, :gtk_entry_icon_position], :gtk_image_type
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_pixbuf(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_entry_get_icon_pixbuf, :gtk_entry_get_icon_pixbuf, [GtkEntry, :gtk_entry_icon_position], :pointer
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_stock(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_get_icon_stock, :gtk_entry_get_icon_stock, [GtkEntry, :gtk_entry_icon_position], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_name(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_get_icon_name, :gtk_entry_get_icon_name, [GtkEntry, :gtk_entry_icon_position], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_gicon(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_entry_get_icon_gicon, :gtk_entry_get_icon_gicon, [GtkEntry, :gtk_entry_icon_position], :pointer
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_activatable(entry, icon_pos, activatable)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [Integer] activatable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_activatable, :gtk_entry_set_icon_activatable, [GtkEntry, :gtk_entry_icon_position, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_activatable(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_icon_activatable, :gtk_entry_get_icon_activatable, [GtkEntry, :gtk_entry_icon_position], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_sensitive(entry, icon_pos, sensitive)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [Integer] sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_sensitive, :gtk_entry_set_icon_sensitive, [GtkEntry, :gtk_entry_icon_position, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_sensitive(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_icon_sensitive, :gtk_entry_get_icon_sensitive, [GtkEntry, :gtk_entry_icon_position], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_at_pos(entry, x, y)
  # @param [GtkEntry] entry 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_icon_at_pos, :gtk_entry_get_icon_at_pos, [GtkEntry, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_tooltip_text(entry, icon_pos, tooltip)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [String] tooltip 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_tooltip_text, :gtk_entry_set_icon_tooltip_text, [GtkEntry, :gtk_entry_icon_position, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_tooltip_text(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_get_icon_tooltip_text, :gtk_entry_get_icon_tooltip_text, [GtkEntry, :gtk_entry_icon_position], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_tooltip_markup(entry, icon_pos, tooltip)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [String] tooltip 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_tooltip_markup, :gtk_entry_set_icon_tooltip_markup, [GtkEntry, :gtk_entry_icon_position, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_tooltip_markup(entry, icon_pos)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @return [String] 
  # @scope class
  attach_function :gtk_entry_get_icon_tooltip_markup, :gtk_entry_get_icon_tooltip_markup, [GtkEntry, :gtk_entry_icon_position], :string
  
  # (Not documented)
  # 
  # @method gtk_entry_set_icon_drag_source(entry, icon_pos, target_list, actions)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [GtkTargetList] target_list 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_icon_drag_source, :gtk_entry_set_icon_drag_source, [GtkEntry, :gtk_entry_icon_position, GtkTargetList, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_current_icon_drag_source(entry)
  # @param [GtkEntry] entry 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_get_current_icon_drag_source, :gtk_entry_get_current_icon_drag_source, [GtkEntry], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_get_icon_area(entry, icon_pos, icon_area)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_entry_icon_position_] icon_pos 
  # @param [FFI::Pointer(*GdkRectangle)] icon_area 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_get_icon_area, :gtk_entry_get_icon_area, [GtkEntry, :gtk_entry_icon_position, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_im_context_filter_keypress(entry, event)
  # @param [GtkEntry] entry 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_im_context_filter_keypress, :gtk_entry_im_context_filter_keypress, [GtkEntry, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_entry_reset_im_context(entry)
  # @param [GtkEntry] entry 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_reset_im_context, :gtk_entry_reset_im_context, [GtkEntry], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_set_input_purpose(entry, purpose)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_input_purpose_] purpose 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_input_purpose, :gtk_entry_set_input_purpose, [GtkEntry, :gtk_input_purpose], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_input_purpose(entry)
  # @param [GtkEntry] entry 
  # @return [Symbol from _enum_gtk_input_purpose_] 
  # @scope class
  attach_function :gtk_entry_get_input_purpose, :gtk_entry_get_input_purpose, [GtkEntry], :gtk_input_purpose
  
  # (Not documented)
  # 
  # @method gtk_entry_set_input_hints(entry, hints)
  # @param [GtkEntry] entry 
  # @param [Symbol from _enum_gtk_input_hints_] hints 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_input_hints, :gtk_entry_set_input_hints, [GtkEntry, :gtk_input_hints], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_input_hints(entry)
  # @param [GtkEntry] entry 
  # @return [Symbol from _enum_gtk_input_hints_] 
  # @scope class
  attach_function :gtk_entry_get_input_hints, :gtk_entry_get_input_hints, [GtkEntry], :gtk_input_hints
  
  # (Not documented)
  # 
  # @method gtk_entry_set_attributes(entry, attrs)
  # @param [GtkEntry] entry 
  # @param [FFI::Pointer(*PangoAttrList)] attrs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_entry_set_attributes, :gtk_entry_set_attributes, [GtkEntry, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_entry_get_attributes(entry)
  # @param [GtkEntry] entry 
  # @return [FFI::Pointer(*PangoAttrList)] 
  # @scope class
  attach_function :gtk_entry_get_attributes, :gtk_entry_get_attributes, [GtkEntry], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_tree_view_drop_position).</em>
  # 
  # === Options:
  # :before ::
  #   drop before/after this row
  # :after ::
  #   
  # :into_or_before ::
  #   drop as a child of this row (with fallback to before or after
  #   if into is not possible)
  # :into_or_after ::
  #   
  # 
  # @method _enum_gtk_tree_view_drop_position_
  # @return [Symbol]
  # @scope class
  enum :gtk_tree_view_drop_position, [
    :before, 0,
    :after, 1,
    :into_or_before, 2,
    :into_or_after, 3
  ]
  
  # (Not documented)
  class GtkTreeViewPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkTreeViewPrivate) < private >
  module GtkTreeViewWrappers
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_tree_view_get_model(self)
    end
    
    # @param [GtkTreeModel] model 
    # @return [nil] 
    def set_model(model)
      Gtk.gtk_tree_view_set_model(self, model)
    end
    
    # @return [GtkTreeSelection] 
    def get_selection()
      GtkTreeSelection.new Gtk.gtk_tree_view_get_selection(self)
    end
    
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_tree_view_get_hadjustment(self)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_hadjustment(adjustment)
      Gtk.gtk_tree_view_set_hadjustment(self, adjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_tree_view_get_vadjustment(self)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_vadjustment(adjustment)
      Gtk.gtk_tree_view_set_vadjustment(self, adjustment)
    end
    
    # @return [Integer] 
    def get_headers_visible()
      Gtk.gtk_tree_view_get_headers_visible(self)
    end
    
    # @param [Integer] headers_visible 
    # @return [nil] 
    def set_headers_visible(headers_visible)
      Gtk.gtk_tree_view_set_headers_visible(self, headers_visible)
    end
    
    # @return [nil] 
    def columns_autosize()
      Gtk.gtk_tree_view_columns_autosize(self)
    end
    
    # @return [Integer] 
    def get_headers_clickable()
      Gtk.gtk_tree_view_get_headers_clickable(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_headers_clickable(setting)
      Gtk.gtk_tree_view_set_headers_clickable(self, setting)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_rules_hint(setting)
      Gtk.gtk_tree_view_set_rules_hint(self, setting)
    end
    
    # @return [Integer] 
    def get_rules_hint()
      Gtk.gtk_tree_view_get_rules_hint(self)
    end
    
    # @param [GtkTreeViewColumn] column 
    # @return [Integer] 
    def append_column(column)
      Gtk.gtk_tree_view_append_column(self, column)
    end
    
    # @param [GtkTreeViewColumn] column 
    # @return [Integer] 
    def remove_column(column)
      Gtk.gtk_tree_view_remove_column(self, column)
    end
    
    # @param [GtkTreeViewColumn] column 
    # @param [Integer] position 
    # @return [Integer] 
    def insert_column(column, position)
      Gtk.gtk_tree_view_insert_column(self, column, position)
    end
    
    # @param [Integer] position 
    # @param [String] title 
    # @param [GtkCellRenderer] cell 
    # @return [Integer] 
    def insert_column_with_attributes(position, title, cell)
      Gtk.gtk_tree_view_insert_column_with_attributes(self, position, title, cell)
    end
    
    # @param [Integer] position 
    # @param [String] title 
    # @param [GtkCellRenderer] cell 
    # @param [Proc(_callback_gtk_tree_cell_data_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] dnotify 
    # @return [Integer] 
    def insert_column_with_data_func(position, title, cell, func, data, dnotify)
      Gtk.gtk_tree_view_insert_column_with_data_func(self, position, title, cell, func, data, dnotify)
    end
    
    # @return [Integer] 
    def get_n_columns()
      Gtk.gtk_tree_view_get_n_columns(self)
    end
    
    # @param [Integer] n 
    # @return [GtkTreeViewColumn] 
    def get_column(n)
      GtkTreeViewColumn.new Gtk.gtk_tree_view_get_column(self, n)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_columns()
      Gtk.gtk_tree_view_get_columns(self)
    end
    
    # @param [GtkTreeViewColumn] column 
    # @param [GtkTreeViewColumn] base_column 
    # @return [nil] 
    def move_column_after(column, base_column)
      Gtk.gtk_tree_view_move_column_after(self, column, base_column)
    end
    
    # @param [GtkTreeViewColumn] column 
    # @return [nil] 
    def set_expander_column(column)
      Gtk.gtk_tree_view_set_expander_column(self, column)
    end
    
    # @return [GtkTreeViewColumn] 
    def get_expander_column()
      GtkTreeViewColumn.new Gtk.gtk_tree_view_get_expander_column(self)
    end
    
    # @param [Proc(_callback_gtk_tree_view_column_drop_func_)] func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_column_drag_function(func, user_data, destroy)
      Gtk.gtk_tree_view_set_column_drag_function(self, func, user_data, destroy)
    end
    
    # @param [Integer] tree_x 
    # @param [Integer] tree_y 
    # @return [nil] 
    def scroll_to_point(tree_x, tree_y)
      Gtk.gtk_tree_view_scroll_to_point(self, tree_x, tree_y)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] column 
    # @param [Integer] use_align 
    # @param [Float] row_align 
    # @param [Float] col_align 
    # @return [nil] 
    def scroll_to_cell(path, column, use_align, row_align, col_align)
      Gtk.gtk_tree_view_scroll_to_cell(self, path, column, use_align, row_align, col_align)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] column 
    # @return [nil] 
    def row_activated(path, column)
      Gtk.gtk_tree_view_row_activated(self, path, column)
    end
    
    # @return [nil] 
    def expand_all()
      Gtk.gtk_tree_view_expand_all(self)
    end
    
    # @return [nil] 
    def collapse_all()
      Gtk.gtk_tree_view_collapse_all(self)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def expand_to_path(path)
      Gtk.gtk_tree_view_expand_to_path(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @param [Integer] open_all 
    # @return [Integer] 
    def expand_row(path, open_all)
      Gtk.gtk_tree_view_expand_row(self, path, open_all)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def collapse_row(path)
      Gtk.gtk_tree_view_collapse_row(self, path)
    end
    
    # @param [Proc(_callback_gtk_tree_view_mapping_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def map_expanded_rows(func, data)
      Gtk.gtk_tree_view_map_expanded_rows(self, func, data)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def row_expanded(path)
      Gtk.gtk_tree_view_row_expanded(self, path)
    end
    
    # @param [Integer] reorderable 
    # @return [nil] 
    def set_reorderable(reorderable)
      Gtk.gtk_tree_view_set_reorderable(self, reorderable)
    end
    
    # @return [Integer] 
    def get_reorderable()
      Gtk.gtk_tree_view_get_reorderable(self)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] focus_column 
    # @param [Integer] start_editing 
    # @return [nil] 
    def set_cursor(path, focus_column, start_editing)
      Gtk.gtk_tree_view_set_cursor(self, path, focus_column, start_editing)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] focus_column 
    # @param [GtkCellRenderer] focus_cell 
    # @param [Integer] start_editing 
    # @return [nil] 
    def set_cursor_on_cell(path, focus_column, focus_cell, start_editing)
      Gtk.gtk_tree_view_set_cursor_on_cell(self, path, focus_column, focus_cell, start_editing)
    end
    
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(**GtkTreeViewColumn)] focus_column 
    # @return [nil] 
    def get_cursor(path, focus_column)
      Gtk.gtk_tree_view_get_cursor(self, path, focus_column)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_bin_window()
      Gtk.gtk_tree_view_get_bin_window(self)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(**GtkTreeViewColumn)] column 
    # @param [FFI::Pointer(*Gint)] cell_x 
    # @param [FFI::Pointer(*Gint)] cell_y 
    # @return [Integer] 
    def get_path_at_pos(x, y, path, column, cell_x, cell_y)
      Gtk.gtk_tree_view_get_path_at_pos(self, x, y, path, column, cell_x, cell_y)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] column 
    # @param [FFI::Pointer(*GdkRectangle)] rect 
    # @return [nil] 
    def get_cell_area(path, column, rect)
      Gtk.gtk_tree_view_get_cell_area(self, path, column, rect)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] column 
    # @param [FFI::Pointer(*GdkRectangle)] rect 
    # @return [nil] 
    def get_background_area(path, column, rect)
      Gtk.gtk_tree_view_get_background_area(self, path, column, rect)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] visible_rect 
    # @return [nil] 
    def get_visible_rect(visible_rect)
      Gtk.gtk_tree_view_get_visible_rect(self, visible_rect)
    end
    
    # @param [FFI::Pointer(**GtkTreePath)] start_path 
    # @param [FFI::Pointer(**GtkTreePath)] end_path 
    # @return [Integer] 
    def get_visible_range(start_path, end_path)
      Gtk.gtk_tree_view_get_visible_range(self, start_path, end_path)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(**GtkTreeViewColumn)] column 
    # @param [FFI::Pointer(*Gint)] cell_x 
    # @param [FFI::Pointer(*Gint)] cell_y 
    # @return [Integer] 
    def is_blank_at_pos(x, y, path, column, cell_x, cell_y)
      Gtk.gtk_tree_view_is_blank_at_pos(self, x, y, path, column, cell_x, cell_y)
    end
    
    # @param [unknown] start_button_mask 
    # @param [GtkTargetEntry] targets 
    # @param [Integer] n_targets 
    # @param [unknown] actions 
    # @return [nil] 
    def enable_model_drag_source(start_button_mask, targets, n_targets, actions)
      Gtk.gtk_tree_view_enable_model_drag_source(self, start_button_mask, targets, n_targets, actions)
    end
    
    # @param [GtkTargetEntry] targets 
    # @param [Integer] n_targets 
    # @param [unknown] actions 
    # @return [nil] 
    def enable_model_drag_dest(targets, n_targets, actions)
      Gtk.gtk_tree_view_enable_model_drag_dest(self, targets, n_targets, actions)
    end
    
    # @return [nil] 
    def unset_rows_drag_source()
      Gtk.gtk_tree_view_unset_rows_drag_source(self)
    end
    
    # @return [nil] 
    def unset_rows_drag_dest()
      Gtk.gtk_tree_view_unset_rows_drag_dest(self)
    end
    
    # @param [GtkTreePath] path 
    # @param [Symbol from _enum_gtk_tree_view_drop_position_] pos 
    # @return [nil] 
    def set_drag_dest_row(path, pos)
      Gtk.gtk_tree_view_set_drag_dest_row(self, path, pos)
    end
    
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(*GtkTreeViewDropPosition)] pos 
    # @return [nil] 
    def get_drag_dest_row(path, pos)
      Gtk.gtk_tree_view_get_drag_dest_row(self, path, pos)
    end
    
    # @param [Integer] drag_x 
    # @param [Integer] drag_y 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(*GtkTreeViewDropPosition)] pos 
    # @return [Integer] 
    def get_dest_row_at_pos(drag_x, drag_y, path, pos)
      Gtk.gtk_tree_view_get_dest_row_at_pos(self, drag_x, drag_y, path, pos)
    end
    
    # @param [GtkTreePath] path 
    # @return [FFI::Pointer(*CairoSurfaceT)] 
    def create_row_drag_icon(path)
      Gtk.gtk_tree_view_create_row_drag_icon(self, path)
    end
    
    # @param [Integer] enable_search 
    # @return [nil] 
    def set_enable_search(enable_search)
      Gtk.gtk_tree_view_set_enable_search(self, enable_search)
    end
    
    # @return [Integer] 
    def get_enable_search()
      Gtk.gtk_tree_view_get_enable_search(self)
    end
    
    # @return [Integer] 
    def get_search_column()
      Gtk.gtk_tree_view_get_search_column(self)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_search_column(column)
      Gtk.gtk_tree_view_set_search_column(self, column)
    end
    
    # @return [Proc(_callback_gtk_tree_view_search_equal_func_)] 
    def get_search_equal_func()
      Gtk.gtk_tree_view_get_search_equal_func(self)
    end
    
    # @param [Proc(_callback_gtk_tree_view_search_equal_func_)] search_equal_func 
    # @param [FFI::Pointer(Gpointer)] search_user_data 
    # @param [FFI::Pointer(GDestroyNotify)] search_destroy 
    # @return [nil] 
    def set_search_equal_func(search_equal_func, search_user_data, search_destroy)
      Gtk.gtk_tree_view_set_search_equal_func(self, search_equal_func, search_user_data, search_destroy)
    end
    
    # @return [GtkEntry] 
    def get_search_entry()
      GtkEntry.new Gtk.gtk_tree_view_get_search_entry(self)
    end
    
    # @param [GtkEntry] entry 
    # @return [nil] 
    def set_search_entry(entry)
      Gtk.gtk_tree_view_set_search_entry(self, entry)
    end
    
    # @return [Proc(_callback_gtk_tree_view_search_position_func_)] 
    def get_search_position_func()
      Gtk.gtk_tree_view_get_search_position_func(self)
    end
    
    # @param [Proc(_callback_gtk_tree_view_search_position_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_search_position_func(func, data, destroy)
      Gtk.gtk_tree_view_set_search_position_func(self, func, data, destroy)
    end
    
    # @param [Integer] wx 
    # @param [Integer] wy 
    # @param [FFI::Pointer(*Gint)] tx 
    # @param [FFI::Pointer(*Gint)] ty 
    # @return [nil] 
    def convert_widget_to_tree_coords(wx, wy, tx, ty)
      Gtk.gtk_tree_view_convert_widget_to_tree_coords(self, wx, wy, tx, ty)
    end
    
    # @param [Integer] tx 
    # @param [Integer] ty 
    # @param [FFI::Pointer(*Gint)] wx 
    # @param [FFI::Pointer(*Gint)] wy 
    # @return [nil] 
    def convert_tree_to_widget_coords(tx, ty, wx, wy)
      Gtk.gtk_tree_view_convert_tree_to_widget_coords(self, tx, ty, wx, wy)
    end
    
    # @param [Integer] wx 
    # @param [Integer] wy 
    # @param [FFI::Pointer(*Gint)] bx 
    # @param [FFI::Pointer(*Gint)] by 
    # @return [nil] 
    def convert_widget_to_bin_window_coords(wx, wy, bx, by)
      Gtk.gtk_tree_view_convert_widget_to_bin_window_coords(self, wx, wy, bx, by)
    end
    
    # @param [Integer] bx 
    # @param [Integer] by 
    # @param [FFI::Pointer(*Gint)] wx 
    # @param [FFI::Pointer(*Gint)] wy 
    # @return [nil] 
    def convert_bin_window_to_widget_coords(bx, by, wx, wy)
      Gtk.gtk_tree_view_convert_bin_window_to_widget_coords(self, bx, by, wx, wy)
    end
    
    # @param [Integer] tx 
    # @param [Integer] ty 
    # @param [FFI::Pointer(*Gint)] bx 
    # @param [FFI::Pointer(*Gint)] by 
    # @return [nil] 
    def convert_tree_to_bin_window_coords(tx, ty, bx, by)
      Gtk.gtk_tree_view_convert_tree_to_bin_window_coords(self, tx, ty, bx, by)
    end
    
    # @param [Integer] bx 
    # @param [Integer] by 
    # @param [FFI::Pointer(*Gint)] tx 
    # @param [FFI::Pointer(*Gint)] ty 
    # @return [nil] 
    def convert_bin_window_to_tree_coords(bx, by, tx, ty)
      Gtk.gtk_tree_view_convert_bin_window_to_tree_coords(self, bx, by, tx, ty)
    end
    
    # @param [Proc(_callback_gtk_tree_destroy_count_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_destroy_count_func(func, data, destroy)
      Gtk.gtk_tree_view_set_destroy_count_func(self, func, data, destroy)
    end
    
    # @param [Integer] enable 
    # @return [nil] 
    def set_fixed_height_mode(enable)
      Gtk.gtk_tree_view_set_fixed_height_mode(self, enable)
    end
    
    # @return [Integer] 
    def get_fixed_height_mode()
      Gtk.gtk_tree_view_get_fixed_height_mode(self)
    end
    
    # @param [Integer] hover 
    # @return [nil] 
    def set_hover_selection(hover)
      Gtk.gtk_tree_view_set_hover_selection(self, hover)
    end
    
    # @return [Integer] 
    def get_hover_selection()
      Gtk.gtk_tree_view_get_hover_selection(self)
    end
    
    # @param [Integer] expand 
    # @return [nil] 
    def set_hover_expand(expand)
      Gtk.gtk_tree_view_set_hover_expand(self, expand)
    end
    
    # @return [Integer] 
    def get_hover_expand()
      Gtk.gtk_tree_view_get_hover_expand(self)
    end
    
    # @param [Integer] enable 
    # @return [nil] 
    def set_rubber_banding(enable)
      Gtk.gtk_tree_view_set_rubber_banding(self, enable)
    end
    
    # @return [Integer] 
    def get_rubber_banding()
      Gtk.gtk_tree_view_get_rubber_banding(self)
    end
    
    # @return [Integer] 
    def is_rubber_banding_active()
      Gtk.gtk_tree_view_is_rubber_banding_active(self)
    end
    
    # @return [Proc(_callback_gtk_tree_view_row_separator_func_)] 
    def get_row_separator_func()
      Gtk.gtk_tree_view_get_row_separator_func(self)
    end
    
    # @param [Proc(_callback_gtk_tree_view_row_separator_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_row_separator_func(func, data, destroy)
      Gtk.gtk_tree_view_set_row_separator_func(self, func, data, destroy)
    end
    
    # @return [Symbol from _enum_gtk_tree_view_grid_lines_] 
    def get_grid_lines()
      Gtk.gtk_tree_view_get_grid_lines(self)
    end
    
    # @param [Symbol from _enum_gtk_tree_view_grid_lines_] grid_lines 
    # @return [nil] 
    def set_grid_lines(grid_lines)
      Gtk.gtk_tree_view_set_grid_lines(self, grid_lines)
    end
    
    # @return [Integer] 
    def get_enable_tree_lines()
      Gtk.gtk_tree_view_get_enable_tree_lines(self)
    end
    
    # @param [Integer] enabled 
    # @return [nil] 
    def set_enable_tree_lines(enabled)
      Gtk.gtk_tree_view_set_enable_tree_lines(self, enabled)
    end
    
    # @param [Integer] enabled 
    # @return [nil] 
    def set_show_expanders(enabled)
      Gtk.gtk_tree_view_set_show_expanders(self, enabled)
    end
    
    # @return [Integer] 
    def get_show_expanders()
      Gtk.gtk_tree_view_get_show_expanders(self)
    end
    
    # @param [Integer] indentation 
    # @return [nil] 
    def set_level_indentation(indentation)
      Gtk.gtk_tree_view_set_level_indentation(self, indentation)
    end
    
    # @return [Integer] 
    def get_level_indentation()
      Gtk.gtk_tree_view_get_level_indentation(self)
    end
    
    # @param [GtkTooltip] tooltip 
    # @param [GtkTreePath] path 
    # @return [nil] 
    def set_tooltip_row(tooltip, path)
      Gtk.gtk_tree_view_set_tooltip_row(self, tooltip, path)
    end
    
    # @param [GtkTooltip] tooltip 
    # @param [GtkTreePath] path 
    # @param [GtkTreeViewColumn] column 
    # @param [GtkCellRenderer] cell 
    # @return [nil] 
    def set_tooltip_cell(tooltip, path, column, cell)
      Gtk.gtk_tree_view_set_tooltip_cell(self, tooltip, path, column, cell)
    end
    
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] y 
    # @param [Integer] keyboard_tip 
    # @param [FFI::Pointer(**GtkTreeModel)] model 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def get_tooltip_context(x, y, keyboard_tip, model, path, iter)
      Gtk.gtk_tree_view_get_tooltip_context(self, x, y, keyboard_tip, model, path, iter)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_tooltip_column(column)
      Gtk.gtk_tree_view_set_tooltip_column(self, column)
    end
    
    # @return [Integer] 
    def get_tooltip_column()
      Gtk.gtk_tree_view_get_tooltip_column(self)
    end
  end
  
  class GtkTreeView < FFI::Struct
    include GtkTreeViewWrappers
    layout :parent, GtkContainer.by_value,
           :priv, GtkTreeViewPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :row_activated ::
  #   (FFI::Pointer(*)) 
  # :test_expand_row ::
  #   (FFI::Pointer(*)) 
  # :test_collapse_row ::
  #   (FFI::Pointer(*)) 
  # :row_expanded ::
  #   (FFI::Pointer(*)) 
  # :row_collapsed ::
  #   (FFI::Pointer(*)) 
  # :columns_changed ::
  #   (FFI::Pointer(*)) 
  # :cursor_changed ::
  #   (FFI::Pointer(*)) 
  # :move_cursor ::
  #   (FFI::Pointer(*)) Key Binding signals
  # :select_all ::
  #   (FFI::Pointer(*)) 
  # :unselect_all ::
  #   (FFI::Pointer(*)) 
  # :select_cursor_row ::
  #   (FFI::Pointer(*)) 
  # :toggle_cursor_row ::
  #   (FFI::Pointer(*)) 
  # :expand_collapse_cursor_row ::
  #   (FFI::Pointer(*)) 
  # :select_cursor_parent ::
  #   (FFI::Pointer(*)) 
  # :start_interactive_search ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkTreeViewClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :row_activated, :pointer,
           :test_expand_row, :pointer,
           :test_collapse_row, :pointer,
           :row_expanded, :pointer,
           :row_collapsed, :pointer,
           :columns_changed, :pointer,
           :cursor_changed, :pointer,
           :move_cursor, :pointer,
           :select_all, :pointer,
           :unselect_all, :pointer,
           :select_cursor_row, :pointer,
           :toggle_cursor_row, :pointer,
           :expand_collapse_cursor_row, :pointer,
           :select_cursor_parent, :pointer,
           :start_interactive_search, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_view_column_drop_func_(tree_view, column, prev_column, next_column, data)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeViewColumn] column 
  # @param [GtkTreeViewColumn] prev_column 
  # @param [GtkTreeViewColumn] next_column 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_view_column_drop_func, [GtkTreeView, GtkTreeViewColumn, GtkTreeViewColumn, GtkTreeViewColumn, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_view_mapping_func_(path, user_data)
  # @param [GtkTreePath] path 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [GtkTreeView] 
  # @scope class
  callback :gtk_tree_view_mapping_func, [GtkTreePath, :pointer], GtkTreeView
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_view_search_equal_func_(model, column, key, iter, search_data)
  # @param [GtkTreeModel] model 
  # @param [Integer] column 
  # @param [String] key 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] search_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_view_search_equal_func, [GtkTreeModel, :int, :string, GtkTreeIter, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_view_row_separator_func_(model, iter, data)
  # @param [GtkTreeModel] model 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_view_row_separator_func, [GtkTreeModel, GtkTreeIter, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_view_search_position_func_(search_dialog, user_data)
  # @param [GtkWidget] search_dialog 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [GtkTreeView] 
  # @scope class
  callback :gtk_tree_view_search_position_func, [GtkWidget, :pointer], GtkTreeView
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_type, :gtk_tree_view_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_view_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tree_view_new, :gtk_tree_view_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tree_view_new_with_model(model)
  # @param [GtkTreeModel] model 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tree_view_new_with_model, :gtk_tree_view_new_with_model, [GtkTreeModel], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_model(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_tree_view_get_model, :gtk_tree_view_get_model, [GtkTreeView], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_model(tree_view, model)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeModel] model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_model, :gtk_tree_view_set_model, [GtkTreeView, GtkTreeModel], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_selection(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [FFI::Pointer(*GtkTreeSelection)] 
  # @scope class
  attach_function :gtk_tree_view_get_selection, :gtk_tree_view_get_selection, [GtkTreeView], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_hadjustment(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_tree_view_get_hadjustment, :gtk_tree_view_get_hadjustment, [GtkTreeView], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_hadjustment(tree_view, adjustment)
  # @param [GtkTreeView] tree_view 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_hadjustment, :gtk_tree_view_set_hadjustment, [GtkTreeView, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_vadjustment(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_tree_view_get_vadjustment, :gtk_tree_view_get_vadjustment, [GtkTreeView], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_vadjustment(tree_view, adjustment)
  # @param [GtkTreeView] tree_view 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_vadjustment, :gtk_tree_view_set_vadjustment, [GtkTreeView, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_headers_visible(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_headers_visible, :gtk_tree_view_get_headers_visible, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_headers_visible(tree_view, headers_visible)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] headers_visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_headers_visible, :gtk_tree_view_set_headers_visible, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_columns_autosize(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_columns_autosize, :gtk_tree_view_columns_autosize, [GtkTreeView], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_headers_clickable(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_headers_clickable, :gtk_tree_view_get_headers_clickable, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_headers_clickable(tree_view, setting)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_headers_clickable, :gtk_tree_view_set_headers_clickable, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_rules_hint(tree_view, setting)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_rules_hint, :gtk_tree_view_set_rules_hint, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_rules_hint(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_rules_hint, :gtk_tree_view_get_rules_hint, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_append_column(tree_view, column)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeViewColumn] column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_append_column, :gtk_tree_view_append_column, [GtkTreeView, GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_remove_column(tree_view, column)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeViewColumn] column 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_remove_column, :gtk_tree_view_remove_column, [GtkTreeView, GtkTreeViewColumn], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_insert_column(tree_view, column, position)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeViewColumn] column 
  # @param [Integer] position 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_insert_column, :gtk_tree_view_insert_column, [GtkTreeView, GtkTreeViewColumn, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_insert_column_with_attributes(tree_view, position, title, cell)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] position 
  # @param [String] title 
  # @param [GtkCellRenderer] cell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_insert_column_with_attributes, :gtk_tree_view_insert_column_with_attributes, [GtkTreeView, :int, :string, GtkCellRenderer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_insert_column_with_data_func(tree_view, position, title, cell, func, data, dnotify)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] position 
  # @param [String] title 
  # @param [GtkCellRenderer] cell 
  # @param [Proc(_callback_gtk_tree_cell_data_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] dnotify 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_insert_column_with_data_func, :gtk_tree_view_insert_column_with_data_func, [GtkTreeView, :int, :string, GtkCellRenderer, :gtk_tree_cell_data_func, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_n_columns(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_n_columns, :gtk_tree_view_get_n_columns, [GtkTreeView], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_column(tree_view, n)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] n 
  # @return [GtkTreeViewColumn] 
  # @scope class
  attach_function :gtk_tree_view_get_column, :gtk_tree_view_get_column, [GtkTreeView, :int], GtkTreeViewColumn
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_columns(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_tree_view_get_columns, :gtk_tree_view_get_columns, [GtkTreeView], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_view_move_column_after(tree_view, column, base_column)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeViewColumn] column 
  # @param [GtkTreeViewColumn] base_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_move_column_after, :gtk_tree_view_move_column_after, [GtkTreeView, GtkTreeViewColumn, GtkTreeViewColumn], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_expander_column(tree_view, column)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreeViewColumn] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_expander_column, :gtk_tree_view_set_expander_column, [GtkTreeView, GtkTreeViewColumn], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_expander_column(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [GtkTreeViewColumn] 
  # @scope class
  attach_function :gtk_tree_view_get_expander_column, :gtk_tree_view_get_expander_column, [GtkTreeView], GtkTreeViewColumn
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_column_drag_function(tree_view, func, user_data, destroy)
  # @param [GtkTreeView] tree_view 
  # @param [Proc(_callback_gtk_tree_view_column_drop_func_)] func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_column_drag_function, :gtk_tree_view_set_column_drag_function, [GtkTreeView, :gtk_tree_view_column_drop_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_scroll_to_point(tree_view, tree_x, tree_y)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] tree_x 
  # @param [Integer] tree_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_scroll_to_point, :gtk_tree_view_scroll_to_point, [GtkTreeView, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_scroll_to_cell(tree_view, path, column, use_align, row_align, col_align)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] column 
  # @param [Integer] use_align 
  # @param [Float] row_align 
  # @param [Float] col_align 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_scroll_to_cell, :gtk_tree_view_scroll_to_cell, [GtkTreeView, GtkTreePath, GtkTreeViewColumn, :int, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_row_activated(tree_view, path, column)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_row_activated, :gtk_tree_view_row_activated, [GtkTreeView, GtkTreePath, GtkTreeViewColumn], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_expand_all(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_expand_all, :gtk_tree_view_expand_all, [GtkTreeView], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_collapse_all(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_collapse_all, :gtk_tree_view_collapse_all, [GtkTreeView], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_expand_to_path(tree_view, path)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_expand_to_path, :gtk_tree_view_expand_to_path, [GtkTreeView, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_expand_row(tree_view, path, open_all)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [Integer] open_all 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_expand_row, :gtk_tree_view_expand_row, [GtkTreeView, GtkTreePath, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_collapse_row(tree_view, path)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_collapse_row, :gtk_tree_view_collapse_row, [GtkTreeView, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_map_expanded_rows(tree_view, func, data)
  # @param [GtkTreeView] tree_view 
  # @param [Proc(_callback_gtk_tree_view_mapping_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_map_expanded_rows, :gtk_tree_view_map_expanded_rows, [GtkTreeView, :gtk_tree_view_mapping_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_row_expanded(tree_view, path)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_row_expanded, :gtk_tree_view_row_expanded, [GtkTreeView, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_reorderable(tree_view, reorderable)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] reorderable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_reorderable, :gtk_tree_view_set_reorderable, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_reorderable(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_reorderable, :gtk_tree_view_get_reorderable, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_cursor(tree_view, path, focus_column, start_editing)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] focus_column 
  # @param [Integer] start_editing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_cursor, :gtk_tree_view_set_cursor, [GtkTreeView, GtkTreePath, GtkTreeViewColumn, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_cursor_on_cell(tree_view, path, focus_column, focus_cell, start_editing)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] focus_column 
  # @param [GtkCellRenderer] focus_cell 
  # @param [Integer] start_editing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_cursor_on_cell, :gtk_tree_view_set_cursor_on_cell, [GtkTreeView, GtkTreePath, GtkTreeViewColumn, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_cursor(tree_view, path, focus_column)
  # @param [GtkTreeView] tree_view 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(**GtkTreeViewColumn)] focus_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_get_cursor, :gtk_tree_view_get_cursor, [GtkTreeView, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_bin_window(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_tree_view_get_bin_window, :gtk_tree_view_get_bin_window, [GtkTreeView], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_path_at_pos(tree_view, x, y, path, column, cell_x, cell_y)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(**GtkTreeViewColumn)] column 
  # @param [FFI::Pointer(*Gint)] cell_x 
  # @param [FFI::Pointer(*Gint)] cell_y 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_path_at_pos, :gtk_tree_view_get_path_at_pos, [GtkTreeView, :int, :int, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_cell_area(tree_view, path, column, rect)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] column 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_get_cell_area, :gtk_tree_view_get_cell_area, [GtkTreeView, GtkTreePath, GtkTreeViewColumn, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_background_area(tree_view, path, column, rect)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] column 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_get_background_area, :gtk_tree_view_get_background_area, [GtkTreeView, GtkTreePath, GtkTreeViewColumn, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_visible_rect(tree_view, visible_rect)
  # @param [GtkTreeView] tree_view 
  # @param [FFI::Pointer(*GdkRectangle)] visible_rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_get_visible_rect, :gtk_tree_view_get_visible_rect, [GtkTreeView, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_visible_range(tree_view, start_path, end_path)
  # @param [GtkTreeView] tree_view 
  # @param [FFI::Pointer(**GtkTreePath)] start_path 
  # @param [FFI::Pointer(**GtkTreePath)] end_path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_visible_range, :gtk_tree_view_get_visible_range, [GtkTreeView, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_is_blank_at_pos(tree_view, x, y, path, column, cell_x, cell_y)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(**GtkTreeViewColumn)] column 
  # @param [FFI::Pointer(*Gint)] cell_x 
  # @param [FFI::Pointer(*Gint)] cell_y 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_is_blank_at_pos, :gtk_tree_view_is_blank_at_pos, [GtkTreeView, :int, :int, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_enable_model_drag_source(tree_view, start_button_mask, targets, n_targets, actions)
  # @param [GtkTreeView] tree_view 
  # @param [unknown] start_button_mask 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_enable_model_drag_source, :gtk_tree_view_enable_model_drag_source, [GtkTreeView, :char, GtkTargetEntry, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_enable_model_drag_dest(tree_view, targets, n_targets, actions)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_enable_model_drag_dest, :gtk_tree_view_enable_model_drag_dest, [GtkTreeView, GtkTargetEntry, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_unset_rows_drag_source(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_unset_rows_drag_source, :gtk_tree_view_unset_rows_drag_source, [GtkTreeView], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_unset_rows_drag_dest(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_unset_rows_drag_dest, :gtk_tree_view_unset_rows_drag_dest, [GtkTreeView], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_drag_dest_row(tree_view, path, pos)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @param [Symbol from _enum_gtk_tree_view_drop_position_] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_drag_dest_row, :gtk_tree_view_set_drag_dest_row, [GtkTreeView, GtkTreePath, :gtk_tree_view_drop_position], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_drag_dest_row(tree_view, path, pos)
  # @param [GtkTreeView] tree_view 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(*GtkTreeViewDropPosition)] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_get_drag_dest_row, :gtk_tree_view_get_drag_dest_row, [GtkTreeView, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_dest_row_at_pos(tree_view, drag_x, drag_y, path, pos)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] drag_x 
  # @param [Integer] drag_y 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(*GtkTreeViewDropPosition)] pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_dest_row_at_pos, :gtk_tree_view_get_dest_row_at_pos, [GtkTreeView, :int, :int, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_create_row_drag_icon(tree_view, path)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTreePath] path 
  # @return [FFI::Pointer(*CairoSurfaceT)] 
  # @scope class
  attach_function :gtk_tree_view_create_row_drag_icon, :gtk_tree_view_create_row_drag_icon, [GtkTreeView, GtkTreePath], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_enable_search(tree_view, enable_search)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] enable_search 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_enable_search, :gtk_tree_view_set_enable_search, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_enable_search(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_enable_search, :gtk_tree_view_get_enable_search, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_search_column(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_search_column, :gtk_tree_view_get_search_column, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_search_column(tree_view, column)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_search_column, :gtk_tree_view_set_search_column, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_search_equal_func(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Proc(_callback_gtk_tree_view_search_equal_func_)] 
  # @scope class
  attach_function :gtk_tree_view_get_search_equal_func, :gtk_tree_view_get_search_equal_func, [GtkTreeView], :gtk_tree_view_search_equal_func
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_search_equal_func(tree_view, search_equal_func, search_user_data, search_destroy)
  # @param [GtkTreeView] tree_view 
  # @param [Proc(_callback_gtk_tree_view_search_equal_func_)] search_equal_func 
  # @param [FFI::Pointer(Gpointer)] search_user_data 
  # @param [FFI::Pointer(GDestroyNotify)] search_destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_search_equal_func, :gtk_tree_view_set_search_equal_func, [GtkTreeView, :gtk_tree_view_search_equal_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_search_entry(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [GtkEntry] 
  # @scope class
  attach_function :gtk_tree_view_get_search_entry, :gtk_tree_view_get_search_entry, [GtkTreeView], GtkEntry
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_search_entry(tree_view, entry)
  # @param [GtkTreeView] tree_view 
  # @param [GtkEntry] entry 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_search_entry, :gtk_tree_view_set_search_entry, [GtkTreeView, GtkEntry], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_search_position_func(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Proc(_callback_gtk_tree_view_search_position_func_)] 
  # @scope class
  attach_function :gtk_tree_view_get_search_position_func, :gtk_tree_view_get_search_position_func, [GtkTreeView], :gtk_tree_view_search_position_func
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_search_position_func(tree_view, func, data, destroy)
  # @param [GtkTreeView] tree_view 
  # @param [Proc(_callback_gtk_tree_view_search_position_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_search_position_func, :gtk_tree_view_set_search_position_func, [GtkTreeView, :gtk_tree_view_search_position_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_convert_widget_to_tree_coords(tree_view, wx, wy, tx, ty)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] wx 
  # @param [Integer] wy 
  # @param [FFI::Pointer(*Gint)] tx 
  # @param [FFI::Pointer(*Gint)] ty 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_convert_widget_to_tree_coords, :gtk_tree_view_convert_widget_to_tree_coords, [GtkTreeView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_convert_tree_to_widget_coords(tree_view, tx, ty, wx, wy)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] tx 
  # @param [Integer] ty 
  # @param [FFI::Pointer(*Gint)] wx 
  # @param [FFI::Pointer(*Gint)] wy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_convert_tree_to_widget_coords, :gtk_tree_view_convert_tree_to_widget_coords, [GtkTreeView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_convert_widget_to_bin_window_coords(tree_view, wx, wy, bx, by)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] wx 
  # @param [Integer] wy 
  # @param [FFI::Pointer(*Gint)] bx 
  # @param [FFI::Pointer(*Gint)] by 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_convert_widget_to_bin_window_coords, :gtk_tree_view_convert_widget_to_bin_window_coords, [GtkTreeView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_convert_bin_window_to_widget_coords(tree_view, bx, by, wx, wy)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] bx 
  # @param [Integer] by 
  # @param [FFI::Pointer(*Gint)] wx 
  # @param [FFI::Pointer(*Gint)] wy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_convert_bin_window_to_widget_coords, :gtk_tree_view_convert_bin_window_to_widget_coords, [GtkTreeView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_convert_tree_to_bin_window_coords(tree_view, tx, ty, bx, by)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] tx 
  # @param [Integer] ty 
  # @param [FFI::Pointer(*Gint)] bx 
  # @param [FFI::Pointer(*Gint)] by 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_convert_tree_to_bin_window_coords, :gtk_tree_view_convert_tree_to_bin_window_coords, [GtkTreeView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_convert_bin_window_to_tree_coords(tree_view, bx, by, tx, ty)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] bx 
  # @param [Integer] by 
  # @param [FFI::Pointer(*Gint)] tx 
  # @param [FFI::Pointer(*Gint)] ty 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_convert_bin_window_to_tree_coords, :gtk_tree_view_convert_bin_window_to_tree_coords, [GtkTreeView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_destroy_count_func_(path, children, user_data)
  # @param [GtkTreePath] path 
  # @param [Integer] children 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [GtkTreeView] 
  # @scope class
  callback :gtk_tree_destroy_count_func, [GtkTreePath, :int, :pointer], GtkTreeView
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_destroy_count_func(tree_view, func, data, destroy)
  # @param [GtkTreeView] tree_view 
  # @param [Proc(_callback_gtk_tree_destroy_count_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_destroy_count_func, :gtk_tree_view_set_destroy_count_func, [GtkTreeView, :gtk_tree_destroy_count_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_fixed_height_mode(tree_view, enable)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] enable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_fixed_height_mode, :gtk_tree_view_set_fixed_height_mode, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_fixed_height_mode(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_fixed_height_mode, :gtk_tree_view_get_fixed_height_mode, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_hover_selection(tree_view, hover)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] hover 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_hover_selection, :gtk_tree_view_set_hover_selection, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_hover_selection(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_hover_selection, :gtk_tree_view_get_hover_selection, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_hover_expand(tree_view, expand)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_hover_expand, :gtk_tree_view_set_hover_expand, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_hover_expand(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_hover_expand, :gtk_tree_view_get_hover_expand, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_rubber_banding(tree_view, enable)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] enable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_rubber_banding, :gtk_tree_view_set_rubber_banding, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_rubber_banding(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_rubber_banding, :gtk_tree_view_get_rubber_banding, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_is_rubber_banding_active(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_is_rubber_banding_active, :gtk_tree_view_is_rubber_banding_active, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_row_separator_func(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Proc(_callback_gtk_tree_view_row_separator_func_)] 
  # @scope class
  attach_function :gtk_tree_view_get_row_separator_func, :gtk_tree_view_get_row_separator_func, [GtkTreeView], :gtk_tree_view_row_separator_func
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_row_separator_func(tree_view, func, data, destroy)
  # @param [GtkTreeView] tree_view 
  # @param [Proc(_callback_gtk_tree_view_row_separator_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_row_separator_func, :gtk_tree_view_set_row_separator_func, [GtkTreeView, :gtk_tree_view_row_separator_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_grid_lines(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Symbol from _enum_gtk_tree_view_grid_lines_] 
  # @scope class
  attach_function :gtk_tree_view_get_grid_lines, :gtk_tree_view_get_grid_lines, [GtkTreeView], :gtk_tree_view_grid_lines
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_grid_lines(tree_view, grid_lines)
  # @param [GtkTreeView] tree_view 
  # @param [Symbol from _enum_gtk_tree_view_grid_lines_] grid_lines 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_grid_lines, :gtk_tree_view_set_grid_lines, [GtkTreeView, :gtk_tree_view_grid_lines], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_enable_tree_lines(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_enable_tree_lines, :gtk_tree_view_get_enable_tree_lines, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_enable_tree_lines(tree_view, enabled)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] enabled 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_enable_tree_lines, :gtk_tree_view_set_enable_tree_lines, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_show_expanders(tree_view, enabled)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] enabled 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_show_expanders, :gtk_tree_view_set_show_expanders, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_show_expanders(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_show_expanders, :gtk_tree_view_get_show_expanders, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_level_indentation(tree_view, indentation)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] indentation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_level_indentation, :gtk_tree_view_set_level_indentation, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_level_indentation(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_level_indentation, :gtk_tree_view_get_level_indentation, [GtkTreeView], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_tooltip_row(tree_view, tooltip, path)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTooltip] tooltip 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_tooltip_row, :gtk_tree_view_set_tooltip_row, [GtkTreeView, GtkTooltip, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_tooltip_cell(tree_view, tooltip, path, column, cell)
  # @param [GtkTreeView] tree_view 
  # @param [GtkTooltip] tooltip 
  # @param [GtkTreePath] path 
  # @param [GtkTreeViewColumn] column 
  # @param [GtkCellRenderer] cell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_tooltip_cell, :gtk_tree_view_set_tooltip_cell, [GtkTreeView, GtkTooltip, GtkTreePath, GtkTreeViewColumn, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_tooltip_context(tree_view, x, y, keyboard_tip, model, path, iter)
  # @param [GtkTreeView] tree_view 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @param [Integer] keyboard_tip 
  # @param [FFI::Pointer(**GtkTreeModel)] model 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_tooltip_context, :gtk_tree_view_get_tooltip_context, [GtkTreeView, :pointer, :pointer, :int, :pointer, :pointer, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_view_set_tooltip_column(tree_view, column)
  # @param [GtkTreeView] tree_view 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_view_set_tooltip_column, :gtk_tree_view_set_tooltip_column, [GtkTreeView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_view_get_tooltip_column(tree_view)
  # @param [GtkTreeView] tree_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_get_tooltip_column, :gtk_tree_view_get_tooltip_column, [GtkTreeView], :int
  
  # (Not documented)
  class GtkComboBoxPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkComboBoxPrivate) < private >
  module GtkComboBoxWrappers
    # @return [Integer] 
    def get_wrap_width()
      Gtk.gtk_combo_box_get_wrap_width(self)
    end
    
    # @param [Integer] width 
    # @return [nil] 
    def set_wrap_width(width)
      Gtk.gtk_combo_box_set_wrap_width(self, width)
    end
    
    # @return [Integer] 
    def get_row_span_column()
      Gtk.gtk_combo_box_get_row_span_column(self)
    end
    
    # @param [Integer] row_span 
    # @return [nil] 
    def set_row_span_column(row_span)
      Gtk.gtk_combo_box_set_row_span_column(self, row_span)
    end
    
    # @return [Integer] 
    def get_column_span_column()
      Gtk.gtk_combo_box_get_column_span_column(self)
    end
    
    # @param [Integer] column_span 
    # @return [nil] 
    def set_column_span_column(column_span)
      Gtk.gtk_combo_box_set_column_span_column(self, column_span)
    end
    
    # @return [Integer] 
    def get_add_tearoffs()
      Gtk.gtk_combo_box_get_add_tearoffs(self)
    end
    
    # @param [Integer] add_tearoffs 
    # @return [nil] 
    def set_add_tearoffs(add_tearoffs)
      Gtk.gtk_combo_box_set_add_tearoffs(self, add_tearoffs)
    end
    
    # @return [String] 
    def get_title()
      Gtk.gtk_combo_box_get_title(self)
    end
    
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_combo_box_set_title(self, title)
    end
    
    # @return [Integer] 
    def get_focus_on_click()
      Gtk.gtk_combo_box_get_focus_on_click(self)
    end
    
    # @param [Integer] focus_on_click 
    # @return [nil] 
    def set_focus_on_click(focus_on_click)
      Gtk.gtk_combo_box_set_focus_on_click(self, focus_on_click)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_combo_box_get_active(self)
    end
    
    # @param [Integer] index 
    # @return [nil] 
    def set_active(index)
      Gtk.gtk_combo_box_set_active(self, index)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def get_active_iter(iter)
      Gtk.gtk_combo_box_get_active_iter(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def set_active_iter(iter)
      Gtk.gtk_combo_box_set_active_iter(self, iter)
    end
    
    # @param [GtkTreeModel] model 
    # @return [nil] 
    def set_model(model)
      Gtk.gtk_combo_box_set_model(self, model)
    end
    
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_combo_box_get_model(self)
    end
    
    # @return [Proc(_callback_gtk_tree_view_row_separator_func_)] 
    def get_row_separator_func()
      Gtk.gtk_combo_box_get_row_separator_func(self)
    end
    
    # @param [Proc(_callback_gtk_tree_view_row_separator_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_row_separator_func(func, data, destroy)
      Gtk.gtk_combo_box_set_row_separator_func(self, func, data, destroy)
    end
    
    # @param [Symbol from _enum_gtk_sensitivity_type_] sensitivity 
    # @return [nil] 
    def set_button_sensitivity(sensitivity)
      Gtk.gtk_combo_box_set_button_sensitivity(self, sensitivity)
    end
    
    # @return [Symbol from _enum_gtk_sensitivity_type_] 
    def get_button_sensitivity()
      Gtk.gtk_combo_box_get_button_sensitivity(self)
    end
    
    # @return [Integer] 
    def get_has_entry()
      Gtk.gtk_combo_box_get_has_entry(self)
    end
    
    # @param [Integer] text_column 
    # @return [nil] 
    def set_entry_text_column(text_column)
      Gtk.gtk_combo_box_set_entry_text_column(self, text_column)
    end
    
    # @return [Integer] 
    def get_entry_text_column()
      Gtk.gtk_combo_box_get_entry_text_column(self)
    end
    
    # @param [Integer] fixed 
    # @return [nil] 
    def set_popup_fixed_width(fixed)
      Gtk.gtk_combo_box_set_popup_fixed_width(self, fixed)
    end
    
    # @return [Integer] 
    def get_popup_fixed_width()
      Gtk.gtk_combo_box_get_popup_fixed_width(self)
    end
    
    # @return [nil] 
    def popup()
      Gtk.gtk_combo_box_popup(self)
    end
    
    # @param [FFI::Pointer(*GdkDevice)] device 
    # @return [nil] 
    def popup_for_device(device)
      Gtk.gtk_combo_box_popup_for_device(self, device)
    end
    
    # @return [nil] 
    def popdown()
      Gtk.gtk_combo_box_popdown(self)
    end
    
    # @return [FFI::Pointer(*AtkObject)] 
    def get_popup_accessible()
      Gtk.gtk_combo_box_get_popup_accessible(self)
    end
    
    # @return [Integer] 
    def get_id_column()
      Gtk.gtk_combo_box_get_id_column(self)
    end
    
    # @param [Integer] id_column 
    # @return [nil] 
    def set_id_column(id_column)
      Gtk.gtk_combo_box_set_id_column(self, id_column)
    end
    
    # @return [String] 
    def get_active_id()
      Gtk.gtk_combo_box_get_active_id(self)
    end
    
    # @param [String] active_id 
    # @return [Integer] 
    def set_active_id(active_id)
      Gtk.gtk_combo_box_set_active_id(self, active_id)
    end
  end
  
  class GtkComboBox < FFI::Struct
    include GtkComboBoxWrappers
    layout :parent_instance, GtkBin.by_value,
           :priv, GtkComboBoxPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :changed ::
  #   (FFI::Pointer(*)) signals
  # :format_entry_text ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  class GtkComboBoxClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :changed, :pointer,
           :format_entry_text, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_type, :gtk_combo_box_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_combo_box_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_new, :gtk_combo_box_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_new_with_area(area)
  # @param [GtkCellArea] area 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_new_with_area, :gtk_combo_box_new_with_area, [GtkCellArea], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_new_with_area_and_entry(area)
  # @param [GtkCellArea] area 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_new_with_area_and_entry, :gtk_combo_box_new_with_area_and_entry, [GtkCellArea], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_new_with_entry()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_new_with_entry, :gtk_combo_box_new_with_entry, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_new_with_model(model)
  # @param [GtkTreeModel] model 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_new_with_model, :gtk_combo_box_new_with_model, [GtkTreeModel], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_new_with_model_and_entry(model)
  # @param [GtkTreeModel] model 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_new_with_model_and_entry, :gtk_combo_box_new_with_model_and_entry, [GtkTreeModel], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_wrap_width(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_wrap_width, :gtk_combo_box_get_wrap_width, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_wrap_width(combo_box, width)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_wrap_width, :gtk_combo_box_set_wrap_width, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_row_span_column(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_row_span_column, :gtk_combo_box_get_row_span_column, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_row_span_column(combo_box, row_span)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] row_span 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_row_span_column, :gtk_combo_box_set_row_span_column, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_column_span_column(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_column_span_column, :gtk_combo_box_get_column_span_column, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_column_span_column(combo_box, column_span)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] column_span 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_column_span_column, :gtk_combo_box_set_column_span_column, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_add_tearoffs(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_add_tearoffs, :gtk_combo_box_get_add_tearoffs, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_add_tearoffs(combo_box, add_tearoffs)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] add_tearoffs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_add_tearoffs, :gtk_combo_box_set_add_tearoffs, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_title(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [String] 
  # @scope class
  attach_function :gtk_combo_box_get_title, :gtk_combo_box_get_title, [GtkComboBox], :string
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_title(combo_box, title)
  # @param [GtkComboBox] combo_box 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_title, :gtk_combo_box_set_title, [GtkComboBox, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_focus_on_click(combo)
  # @param [GtkComboBox] combo 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_focus_on_click, :gtk_combo_box_get_focus_on_click, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_focus_on_click(combo, focus_on_click)
  # @param [GtkComboBox] combo 
  # @param [Integer] focus_on_click 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_focus_on_click, :gtk_combo_box_set_focus_on_click, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_active(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_active, :gtk_combo_box_get_active, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_active(combo_box, index)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_active, :gtk_combo_box_set_active, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_active_iter(combo_box, iter)
  # @param [GtkComboBox] combo_box 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_active_iter, :gtk_combo_box_get_active_iter, [GtkComboBox, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_active_iter(combo_box, iter)
  # @param [GtkComboBox] combo_box 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_active_iter, :gtk_combo_box_set_active_iter, [GtkComboBox, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_model(combo_box, model)
  # @param [GtkComboBox] combo_box 
  # @param [GtkTreeModel] model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_model, :gtk_combo_box_set_model, [GtkComboBox, GtkTreeModel], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_model(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_combo_box_get_model, :gtk_combo_box_get_model, [GtkComboBox], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_row_separator_func(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Proc(_callback_gtk_tree_view_row_separator_func_)] 
  # @scope class
  attach_function :gtk_combo_box_get_row_separator_func, :gtk_combo_box_get_row_separator_func, [GtkComboBox], :gtk_tree_view_row_separator_func
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_row_separator_func(combo_box, func, data, destroy)
  # @param [GtkComboBox] combo_box 
  # @param [Proc(_callback_gtk_tree_view_row_separator_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_row_separator_func, :gtk_combo_box_set_row_separator_func, [GtkComboBox, :gtk_tree_view_row_separator_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_button_sensitivity(combo_box, sensitivity)
  # @param [GtkComboBox] combo_box 
  # @param [Symbol from _enum_gtk_sensitivity_type_] sensitivity 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_button_sensitivity, :gtk_combo_box_set_button_sensitivity, [GtkComboBox, :gtk_sensitivity_type], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_button_sensitivity(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Symbol from _enum_gtk_sensitivity_type_] 
  # @scope class
  attach_function :gtk_combo_box_get_button_sensitivity, :gtk_combo_box_get_button_sensitivity, [GtkComboBox], :gtk_sensitivity_type
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_has_entry(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_has_entry, :gtk_combo_box_get_has_entry, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_entry_text_column(combo_box, text_column)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] text_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_entry_text_column, :gtk_combo_box_set_entry_text_column, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_entry_text_column(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_entry_text_column, :gtk_combo_box_get_entry_text_column, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_popup_fixed_width(combo_box, fixed)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] fixed 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_popup_fixed_width, :gtk_combo_box_set_popup_fixed_width, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_popup_fixed_width(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_popup_fixed_width, :gtk_combo_box_get_popup_fixed_width, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_popup(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_popup, :gtk_combo_box_popup, [GtkComboBox], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_popup_for_device(combo_box, device)
  # @param [GtkComboBox] combo_box 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_popup_for_device, :gtk_combo_box_popup_for_device, [GtkComboBox, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_popdown(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_popdown, :gtk_combo_box_popdown, [GtkComboBox], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_popup_accessible(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [FFI::Pointer(*AtkObject)] 
  # @scope class
  attach_function :gtk_combo_box_get_popup_accessible, :gtk_combo_box_get_popup_accessible, [GtkComboBox], :pointer
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_id_column(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_get_id_column, :gtk_combo_box_get_id_column, [GtkComboBox], :int
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_id_column(combo_box, id_column)
  # @param [GtkComboBox] combo_box 
  # @param [Integer] id_column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_set_id_column, :gtk_combo_box_set_id_column, [GtkComboBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_get_active_id(combo_box)
  # @param [GtkComboBox] combo_box 
  # @return [String] 
  # @scope class
  attach_function :gtk_combo_box_get_active_id, :gtk_combo_box_get_active_id, [GtkComboBox], :string
  
  # (Not documented)
  # 
  # @method gtk_combo_box_set_active_id(combo_box, active_id)
  # @param [GtkComboBox] combo_box 
  # @param [String] active_id 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_set_active_id, :gtk_combo_box_set_active_id, [GtkComboBox, :string], :int
  
  # (Not documented)
  class GtkAppChooserButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkComboBox) 
  # :priv ::
  #   (GtkAppChooserButtonPrivate) < private >
  module GtkAppChooserButtonWrappers
    # @return [nil] 
    def append_separator()
      Gtk.gtk_app_chooser_button_append_separator(self)
    end
    
    # @param [String] name 
    # @param [String] label 
    # @param [FFI::Pointer(*GIcon)] icon 
    # @return [nil] 
    def append_custom_item(name, label, icon)
      Gtk.gtk_app_chooser_button_append_custom_item(self, name, label, icon)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_active_custom_item(name)
      Gtk.gtk_app_chooser_button_set_active_custom_item(self, name)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_dialog_item(setting)
      Gtk.gtk_app_chooser_button_set_show_dialog_item(self, setting)
    end
    
    # @return [Integer] 
    def get_show_dialog_item()
      Gtk.gtk_app_chooser_button_get_show_dialog_item(self)
    end
    
    # @param [String] heading 
    # @return [nil] 
    def set_heading(heading)
      Gtk.gtk_app_chooser_button_set_heading(self, heading)
    end
    
    # @return [String] 
    def get_heading()
      Gtk.gtk_app_chooser_button_get_heading(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_show_default_item(setting)
      Gtk.gtk_app_chooser_button_set_show_default_item(self, setting)
    end
    
    # @return [Integer] 
    def get_show_default_item()
      Gtk.gtk_app_chooser_button_get_show_default_item(self)
    end
  end
  
  class GtkAppChooserButton < FFI::Struct
    include GtkAppChooserButtonWrappers
    layout :parent, GtkComboBox.by_value,
           :priv, GtkAppChooserButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkComboBoxClass) 
  # :custom_item_activated ::
  #   (FFI::Pointer(*)) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) padding for future class expansion
  class GtkAppChooserButtonClass < FFI::Struct
    layout :parent_class, GtkComboBoxClass.by_value,
           :custom_item_activated, :pointer,
           :padding, [:pointer, 16]
  end
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_button_get_type, :gtk_app_chooser_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_new(content_type)
  # @param [String] content_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_app_chooser_button_new, :gtk_app_chooser_button_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_append_separator(self_)
  # @param [GtkAppChooserButton] self_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_button_append_separator, :gtk_app_chooser_button_append_separator, [GtkAppChooserButton], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_append_custom_item(self_, name, label, icon)
  # @param [GtkAppChooserButton] self_ 
  # @param [String] name 
  # @param [String] label 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_button_append_custom_item, :gtk_app_chooser_button_append_custom_item, [GtkAppChooserButton, :string, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_set_active_custom_item(self_, name)
  # @param [GtkAppChooserButton] self_ 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_button_set_active_custom_item, :gtk_app_chooser_button_set_active_custom_item, [GtkAppChooserButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_set_show_dialog_item(self_, setting)
  # @param [GtkAppChooserButton] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_button_set_show_dialog_item, :gtk_app_chooser_button_set_show_dialog_item, [GtkAppChooserButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_get_show_dialog_item(self_)
  # @param [GtkAppChooserButton] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_button_get_show_dialog_item, :gtk_app_chooser_button_get_show_dialog_item, [GtkAppChooserButton], :int
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_set_heading(self_, heading)
  # @param [GtkAppChooserButton] self_ 
  # @param [String] heading 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_button_set_heading, :gtk_app_chooser_button_set_heading, [GtkAppChooserButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_get_heading(self_)
  # @param [GtkAppChooserButton] self_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_app_chooser_button_get_heading, :gtk_app_chooser_button_get_heading, [GtkAppChooserButton], :string
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_set_show_default_item(self_, setting)
  # @param [GtkAppChooserButton] self_ 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_app_chooser_button_set_show_default_item, :gtk_app_chooser_button_set_show_default_item, [GtkAppChooserButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_app_chooser_button_get_show_default_item(self_)
  # @param [GtkAppChooserButton] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_app_chooser_button_get_show_default_item, :gtk_app_chooser_button_get_show_default_item, [GtkAppChooserButton], :int
  
  # (Not documented)
  class GtkApplicationWindowPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkWindow) 
  # :priv ::
  #   (GtkApplicationWindowPrivate) < private >
  module GtkApplicationWindowWrappers
    # @param [Integer] show_menubar 
    # @return [nil] 
    def set_show_menubar(show_menubar)
      Gtk.gtk_application_window_set_show_menubar(self, show_menubar)
    end
    
    # @return [Integer] 
    def get_show_menubar()
      Gtk.gtk_application_window_get_show_menubar(self)
    end
    
    # @return [Integer] 
    def get_id()
      Gtk.gtk_application_window_get_id(self)
    end
  end
  
  class GtkApplicationWindow < FFI::Struct
    include GtkApplicationWindowWrappers
    layout :parent_instance, GtkWindow.by_value,
           :priv, GtkApplicationWindowPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWindowClass) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) < private >
  class GtkApplicationWindowClass < FFI::Struct
    layout :parent_class, GtkWindowClass.by_value,
           :padding, [:pointer, 14]
  end
  
  # (Not documented)
  # 
  # @method gtk_application_window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_window_get_type, :gtk_application_window_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_application_window_new(application)
  # @param [GtkApplication] application 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_application_window_new, :gtk_application_window_new, [GtkApplication], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_application_window_set_show_menubar(window, show_menubar)
  # @param [GtkApplicationWindow] window 
  # @param [Integer] show_menubar 
  # @return [nil] 
  # @scope class
  attach_function :gtk_application_window_set_show_menubar, :gtk_application_window_set_show_menubar, [GtkApplicationWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_application_window_get_show_menubar(window)
  # @param [GtkApplicationWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_window_get_show_menubar, :gtk_application_window_get_show_menubar, [GtkApplicationWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_application_window_get_id(window)
  # @param [GtkApplicationWindow] window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_window_get_id, :gtk_application_window_get_id, [GtkApplicationWindow], :uint
  
  # (Not documented)
  class GtkArrowPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :misc ::
  #   (GtkMisc) 
  # :priv ::
  #   (GtkArrowPrivate) < private >
  module GtkArrowWrappers
    # @param [Symbol from _enum_gtk_arrow_type_] arrow_type 
    # @param [Symbol from _enum_gtk_shadow_type_] shadow_type 
    # @return [nil] 
    def set(arrow_type, shadow_type)
      Gtk.gtk_arrow_set(self, arrow_type, shadow_type)
    end
  end
  
  class GtkArrow < FFI::Struct
    include GtkArrowWrappers
    layout :misc, GtkMisc.by_value,
           :priv, GtkArrowPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMiscClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkArrowClass < FFI::Struct
    layout :parent_class, GtkMiscClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_arrow_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_arrow_get_type, :gtk_arrow_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_arrow_new(arrow_type, shadow_type)
  # @param [Symbol from _enum_gtk_arrow_type_] arrow_type 
  # @param [Symbol from _enum_gtk_shadow_type_] shadow_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_arrow_new, :gtk_arrow_new, [:gtk_arrow_type, :gtk_shadow_type], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_arrow_set(arrow, arrow_type, shadow_type)
  # @param [GtkArrow] arrow 
  # @param [Symbol from _enum_gtk_arrow_type_] arrow_type 
  # @param [Symbol from _enum_gtk_shadow_type_] shadow_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_arrow_set, :gtk_arrow_set, [GtkArrow, :gtk_arrow_type, :gtk_shadow_type], :void
  
  # (Not documented)
  class GtkFramePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkFramePrivate) < private >
  module GtkFrameWrappers
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_frame_set_label(self, label)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_frame_get_label(self)
    end
    
    # @param [GtkWidget] label_widget 
    # @return [nil] 
    def set_label_widget(label_widget)
      Gtk.gtk_frame_set_label_widget(self, label_widget)
    end
    
    # @return [GtkWidget] 
    def get_label_widget()
      GtkWidget.new Gtk.gtk_frame_get_label_widget(self)
    end
    
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @return [nil] 
    def set_label_align(xalign, yalign)
      Gtk.gtk_frame_set_label_align(self, xalign, yalign)
    end
    
    # @param [FFI::Pointer(*Gfloat)] xalign 
    # @param [FFI::Pointer(*Gfloat)] yalign 
    # @return [nil] 
    def get_label_align(xalign, yalign)
      Gtk.gtk_frame_get_label_align(self, xalign, yalign)
    end
    
    # @param [Symbol from _enum_gtk_shadow_type_] type 
    # @return [nil] 
    def set_shadow_type(type)
      Gtk.gtk_frame_set_shadow_type(self, type)
    end
    
    # @return [Symbol from _enum_gtk_shadow_type_] 
    def get_shadow_type()
      Gtk.gtk_frame_get_shadow_type(self)
    end
  end
  
  class GtkFrame < FFI::Struct
    include GtkFrameWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkFramePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :compute_child_allocation ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFrameClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :compute_child_allocation, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_frame_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_frame_get_type, :gtk_frame_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_frame_new(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_frame_new, :gtk_frame_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_frame_set_label(frame, label)
  # @param [GtkFrame] frame 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_frame_set_label, :gtk_frame_set_label, [GtkFrame, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_frame_get_label(frame)
  # @param [GtkFrame] frame 
  # @return [String] 
  # @scope class
  attach_function :gtk_frame_get_label, :gtk_frame_get_label, [GtkFrame], :string
  
  # (Not documented)
  # 
  # @method gtk_frame_set_label_widget(frame, label_widget)
  # @param [GtkFrame] frame 
  # @param [GtkWidget] label_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_frame_set_label_widget, :gtk_frame_set_label_widget, [GtkFrame, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_frame_get_label_widget(frame)
  # @param [GtkFrame] frame 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_frame_get_label_widget, :gtk_frame_get_label_widget, [GtkFrame], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_frame_set_label_align(frame, xalign, yalign)
  # @param [GtkFrame] frame 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_frame_set_label_align, :gtk_frame_set_label_align, [GtkFrame, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_frame_get_label_align(frame, xalign, yalign)
  # @param [GtkFrame] frame 
  # @param [FFI::Pointer(*Gfloat)] xalign 
  # @param [FFI::Pointer(*Gfloat)] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_frame_get_label_align, :gtk_frame_get_label_align, [GtkFrame, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_frame_set_shadow_type(frame, type)
  # @param [GtkFrame] frame 
  # @param [Symbol from _enum_gtk_shadow_type_] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_frame_set_shadow_type, :gtk_frame_set_shadow_type, [GtkFrame, :gtk_shadow_type], :void
  
  # (Not documented)
  # 
  # @method gtk_frame_get_shadow_type(frame)
  # @param [GtkFrame] frame 
  # @return [Symbol from _enum_gtk_shadow_type_] 
  # @scope class
  attach_function :gtk_frame_get_shadow_type, :gtk_frame_get_shadow_type, [GtkFrame], :gtk_shadow_type
  
  # (Not documented)
  class GtkAspectFramePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :frame ::
  #   (GtkFrame) 
  # :priv ::
  #   (GtkAspectFramePrivate) < private >
  module GtkAspectFrameWrappers
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @param [Float] ratio 
    # @param [Integer] obey_child 
    # @return [nil] 
    def set(xalign, yalign, ratio, obey_child)
      Gtk.gtk_aspect_frame_set(self, xalign, yalign, ratio, obey_child)
    end
  end
  
  class GtkAspectFrame < FFI::Struct
    include GtkAspectFrameWrappers
    layout :frame, GtkFrame.by_value,
           :priv, GtkAspectFramePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkFrameClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkAspectFrameClass < FFI::Struct
    layout :parent_class, GtkFrameClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_aspect_frame_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_aspect_frame_get_type, :gtk_aspect_frame_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_aspect_frame_new(label, xalign, yalign, ratio, obey_child)
  # @param [String] label 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @param [Float] ratio 
  # @param [Integer] obey_child 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_aspect_frame_new, :gtk_aspect_frame_new, [:string, :float, :float, :float, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_aspect_frame_set(aspect_frame, xalign, yalign, ratio, obey_child)
  # @param [GtkAspectFrame] aspect_frame 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @param [Float] ratio 
  # @param [Integer] obey_child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_aspect_frame_set, :gtk_aspect_frame_set, [GtkAspectFrame, :float, :float, :float, :int], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_assistant_page_type).</em>
  # 
  # === Options:
  # :content ::
  #   
  # :intro ::
  #   
  # :confirm ::
  #   
  # :summary ::
  #   
  # :progress ::
  #   
  # :custom ::
  #   
  # 
  # @method _enum_gtk_assistant_page_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_assistant_page_type, [
    :content, 0,
    :intro, 1,
    :confirm, 2,
    :summary, 3,
    :progress, 4,
    :custom, 5
  ]
  
  # (Not documented)
  class GtkAssistantPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkWindow) 
  # :priv ::
  #   (GtkAssistantPrivate) < private >
  module GtkAssistantWrappers
    # @return [nil] 
    def next_page()
      Gtk.gtk_assistant_next_page(self)
    end
    
    # @return [nil] 
    def previous_page()
      Gtk.gtk_assistant_previous_page(self)
    end
    
    # @return [Integer] 
    def get_current_page()
      Gtk.gtk_assistant_get_current_page(self)
    end
    
    # @param [Integer] page_num 
    # @return [nil] 
    def set_current_page(page_num)
      Gtk.gtk_assistant_set_current_page(self, page_num)
    end
    
    # @return [Integer] 
    def get_n_pages()
      Gtk.gtk_assistant_get_n_pages(self)
    end
    
    # @param [Integer] page_num 
    # @return [GtkWidget] 
    def get_nth_page(page_num)
      GtkWidget.new Gtk.gtk_assistant_get_nth_page(self, page_num)
    end
    
    # @param [GtkWidget] page 
    # @return [Integer] 
    def prepend_page(page)
      Gtk.gtk_assistant_prepend_page(self, page)
    end
    
    # @param [GtkWidget] page 
    # @return [Integer] 
    def append_page(page)
      Gtk.gtk_assistant_append_page(self, page)
    end
    
    # @param [GtkWidget] page 
    # @param [Integer] position 
    # @return [Integer] 
    def insert_page(page, position)
      Gtk.gtk_assistant_insert_page(self, page, position)
    end
    
    # @param [Integer] page_num 
    # @return [nil] 
    def remove_page(page_num)
      Gtk.gtk_assistant_remove_page(self, page_num)
    end
    
    # @param [Proc(_callback_gtk_assistant_page_func_)] page_func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_forward_page_func(page_func, data, destroy)
      Gtk.gtk_assistant_set_forward_page_func(self, page_func, data, destroy)
    end
    
    # @param [GtkWidget] page 
    # @param [Symbol from _enum_gtk_assistant_page_type_] type 
    # @return [nil] 
    def set_page_type(page, type)
      Gtk.gtk_assistant_set_page_type(self, page, type)
    end
    
    # @param [GtkWidget] page 
    # @return [Symbol from _enum_gtk_assistant_page_type_] 
    def get_page_type(page)
      Gtk.gtk_assistant_get_page_type(self, page)
    end
    
    # @param [GtkWidget] page 
    # @param [String] title 
    # @return [nil] 
    def set_page_title(page, title)
      Gtk.gtk_assistant_set_page_title(self, page, title)
    end
    
    # @param [GtkWidget] page 
    # @return [String] 
    def get_page_title(page)
      Gtk.gtk_assistant_get_page_title(self, page)
    end
    
    # @param [GtkWidget] page 
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_page_header_image(page, pixbuf)
      Gtk.gtk_assistant_set_page_header_image(self, page, pixbuf)
    end
    
    # @param [GtkWidget] page 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_page_header_image(page)
      Gtk.gtk_assistant_get_page_header_image(self, page)
    end
    
    # @param [GtkWidget] page 
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_page_side_image(page, pixbuf)
      Gtk.gtk_assistant_set_page_side_image(self, page, pixbuf)
    end
    
    # @param [GtkWidget] page 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_page_side_image(page)
      Gtk.gtk_assistant_get_page_side_image(self, page)
    end
    
    # @param [GtkWidget] page 
    # @param [Integer] complete 
    # @return [nil] 
    def set_page_complete(page, complete)
      Gtk.gtk_assistant_set_page_complete(self, page, complete)
    end
    
    # @param [GtkWidget] page 
    # @return [Integer] 
    def get_page_complete(page)
      Gtk.gtk_assistant_get_page_complete(self, page)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def add_action_widget(child)
      Gtk.gtk_assistant_add_action_widget(self, child)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def remove_action_widget(child)
      Gtk.gtk_assistant_remove_action_widget(self, child)
    end
    
    # @return [nil] 
    def update_buttons_state()
      Gtk.gtk_assistant_update_buttons_state(self)
    end
    
    # @return [nil] 
    def commit()
      Gtk.gtk_assistant_commit(self)
    end
  end
  
  class GtkAssistant < FFI::Struct
    include GtkAssistantWrappers
    layout :parent, GtkWindow.by_value,
           :priv, GtkAssistantPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWindowClass) 
  # :prepare ::
  #   (FFI::Pointer(*)) 
  # :apply ::
  #   (FFI::Pointer(*)) 
  # :close ::
  #   (FFI::Pointer(*)) 
  # :cancel ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  class GtkAssistantClass < FFI::Struct
    layout :parent_class, GtkWindowClass.by_value,
           :prepare, :pointer,
           :apply, :pointer,
           :close, :pointer,
           :cancel, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_assistant_page_func_(current_page, data)
  # @param [Integer] current_page 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_assistant_page_func, [:int, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_get_type, :gtk_assistant_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_assistant_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_assistant_new, :gtk_assistant_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_assistant_next_page(assistant)
  # @param [GtkAssistant] assistant 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_next_page, :gtk_assistant_next_page, [GtkAssistant], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_previous_page(assistant)
  # @param [GtkAssistant] assistant 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_previous_page, :gtk_assistant_previous_page, [GtkAssistant], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_current_page(assistant)
  # @param [GtkAssistant] assistant 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_get_current_page, :gtk_assistant_get_current_page, [GtkAssistant], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_current_page(assistant, page_num)
  # @param [GtkAssistant] assistant 
  # @param [Integer] page_num 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_current_page, :gtk_assistant_set_current_page, [GtkAssistant, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_n_pages(assistant)
  # @param [GtkAssistant] assistant 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_get_n_pages, :gtk_assistant_get_n_pages, [GtkAssistant], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_nth_page(assistant, page_num)
  # @param [GtkAssistant] assistant 
  # @param [Integer] page_num 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_assistant_get_nth_page, :gtk_assistant_get_nth_page, [GtkAssistant, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_assistant_prepend_page(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_prepend_page, :gtk_assistant_prepend_page, [GtkAssistant, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_append_page(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_append_page, :gtk_assistant_append_page, [GtkAssistant, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_insert_page(assistant, page, position)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @param [Integer] position 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_insert_page, :gtk_assistant_insert_page, [GtkAssistant, GtkWidget, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_remove_page(assistant, page_num)
  # @param [GtkAssistant] assistant 
  # @param [Integer] page_num 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_remove_page, :gtk_assistant_remove_page, [GtkAssistant, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_forward_page_func(assistant, page_func, data, destroy)
  # @param [GtkAssistant] assistant 
  # @param [Proc(_callback_gtk_assistant_page_func_)] page_func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_forward_page_func, :gtk_assistant_set_forward_page_func, [GtkAssistant, :gtk_assistant_page_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_page_type(assistant, page, type)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @param [Symbol from _enum_gtk_assistant_page_type_] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_page_type, :gtk_assistant_set_page_type, [GtkAssistant, GtkWidget, :gtk_assistant_page_type], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_page_type(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [Symbol from _enum_gtk_assistant_page_type_] 
  # @scope class
  attach_function :gtk_assistant_get_page_type, :gtk_assistant_get_page_type, [GtkAssistant, GtkWidget], :gtk_assistant_page_type
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_page_title(assistant, page, title)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_page_title, :gtk_assistant_set_page_title, [GtkAssistant, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_page_title(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [String] 
  # @scope class
  attach_function :gtk_assistant_get_page_title, :gtk_assistant_get_page_title, [GtkAssistant, GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_page_header_image(assistant, page, pixbuf)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_page_header_image, :gtk_assistant_set_page_header_image, [GtkAssistant, GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_page_header_image(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_assistant_get_page_header_image, :gtk_assistant_get_page_header_image, [GtkAssistant, GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_page_side_image(assistant, page, pixbuf)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_page_side_image, :gtk_assistant_set_page_side_image, [GtkAssistant, GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_page_side_image(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_assistant_get_page_side_image, :gtk_assistant_get_page_side_image, [GtkAssistant, GtkWidget], :pointer
  
  # (Not documented)
  # 
  # @method gtk_assistant_set_page_complete(assistant, page, complete)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @param [Integer] complete 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_set_page_complete, :gtk_assistant_set_page_complete, [GtkAssistant, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_get_page_complete(assistant, page)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] page 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_get_page_complete, :gtk_assistant_get_page_complete, [GtkAssistant, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_assistant_add_action_widget(assistant, child)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_add_action_widget, :gtk_assistant_add_action_widget, [GtkAssistant, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_remove_action_widget(assistant, child)
  # @param [GtkAssistant] assistant 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_remove_action_widget, :gtk_assistant_remove_action_widget, [GtkAssistant, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_update_buttons_state(assistant)
  # @param [GtkAssistant] assistant 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_update_buttons_state, :gtk_assistant_update_buttons_state, [GtkAssistant], :void
  
  # (Not documented)
  # 
  # @method gtk_assistant_commit(assistant)
  # @param [GtkAssistant] assistant 
  # @return [nil] 
  # @scope class
  attach_function :gtk_assistant_commit, :gtk_assistant_commit, [GtkAssistant], :void
  
  # (Not documented)
  class GtkButtonBoxPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :box ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkButtonBoxPrivate) < private >
  module GtkButtonBoxWrappers
    # @return [Symbol from _enum_gtk_button_box_style_] 
    def get_layout()
      Gtk.gtk_button_box_get_layout(self)
    end
    
    # @param [Symbol from _enum_gtk_button_box_style_] layout_style 
    # @return [nil] 
    def set_layout(layout_style)
      Gtk.gtk_button_box_set_layout(self, layout_style)
    end
    
    # @param [GtkWidget] child 
    # @return [Integer] 
    def get_child_secondary(child)
      Gtk.gtk_button_box_get_child_secondary(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] is_secondary 
    # @return [nil] 
    def set_child_secondary(child, is_secondary)
      Gtk.gtk_button_box_set_child_secondary(self, child, is_secondary)
    end
    
    # @param [GtkWidget] child 
    # @return [Integer] 
    def get_child_non_homogeneous(child)
      Gtk.gtk_button_box_get_child_non_homogeneous(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] non_homogeneous 
    # @return [nil] 
    def set_child_non_homogeneous(child, non_homogeneous)
      Gtk.gtk_button_box_set_child_non_homogeneous(self, child, non_homogeneous)
    end
  end
  
  class GtkButtonBox < FFI::Struct
    include GtkButtonBoxWrappers
    layout :box, GtkBox.by_value,
           :priv, GtkButtonBoxPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkButtonBoxClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_button_box_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_box_get_type, :gtk_button_box_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_button_box_new(orientation)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_button_box_new, :gtk_button_box_new, [:gtk_orientation], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_button_box_get_layout(widget)
  # @param [GtkButtonBox] widget 
  # @return [Symbol from _enum_gtk_button_box_style_] 
  # @scope class
  attach_function :gtk_button_box_get_layout, :gtk_button_box_get_layout, [GtkButtonBox], :gtk_button_box_style
  
  # (Not documented)
  # 
  # @method gtk_button_box_set_layout(widget, layout_style)
  # @param [GtkButtonBox] widget 
  # @param [Symbol from _enum_gtk_button_box_style_] layout_style 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_box_set_layout, :gtk_button_box_set_layout, [GtkButtonBox, :gtk_button_box_style], :void
  
  # (Not documented)
  # 
  # @method gtk_button_box_get_child_secondary(widget, child)
  # @param [GtkButtonBox] widget 
  # @param [GtkWidget] child 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_box_get_child_secondary, :gtk_button_box_get_child_secondary, [GtkButtonBox, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_button_box_set_child_secondary(widget, child, is_secondary)
  # @param [GtkButtonBox] widget 
  # @param [GtkWidget] child 
  # @param [Integer] is_secondary 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_box_set_child_secondary, :gtk_button_box_set_child_secondary, [GtkButtonBox, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_button_box_get_child_non_homogeneous(widget, child)
  # @param [GtkButtonBox] widget 
  # @param [GtkWidget] child 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_box_get_child_non_homogeneous, :gtk_button_box_get_child_non_homogeneous, [GtkButtonBox, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_button_box_set_child_non_homogeneous(widget, child, non_homogeneous)
  # @param [GtkButtonBox] widget 
  # @param [GtkWidget] child 
  # @param [Integer] non_homogeneous 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_box_set_child_non_homogeneous, :gtk_button_box_set_child_non_homogeneous, [GtkButtonBox, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :set_name ::
  #   (String) 
  # :priority ::
  #   (Integer) 
  # :widget_path_pspecs ::
  #   (FFI::Pointer(*GSList)) 
  # :widget_class_pspecs ::
  #   (FFI::Pointer(*GSList)) 
  # :class_branch_pspecs ::
  #   (FFI::Pointer(*GSList)) 
  # :entries ::
  #   (FFI::Pointer(*GtkBindingEntry)) 
  # :current ::
  #   (FFI::Pointer(*GtkBindingEntry)) 
  # :parsed ::
  #   (Integer) 
  module GtkBindingSetWrappers
    # @param [Integer] keyval 
    # @param [unknown] modifiers 
    # @param [FFI::Pointer(*GObject)] object 
    # @return [Integer] 
    def activate(keyval, modifiers, object)
      Gtk.gtk_binding_set_activate(self, keyval, modifiers, object)
    end
    
    # @param [Symbol from _enum_gtk_path_type_] path_type 
    # @param [String] path_pattern 
    # @param [Symbol from _enum_gtk_path_priority_type_] priority 
    # @return [nil] 
    def add_path(path_type, path_pattern, priority)
      Gtk.gtk_binding_set_add_path(self, path_type, path_pattern, priority)
    end
  end
  
  class GtkBindingSet < FFI::Struct
    include GtkBindingSetWrappers
    layout :set_name, :string,
           :priority, :int,
           :widget_path_pspecs, :pointer,
           :widget_class_pspecs, :pointer,
           :class_branch_pspecs, :pointer,
           :entries, :pointer,
           :current, :pointer,
           :parsed, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :keyval ::
  #   (Integer) key portion
  # :modifiers ::
  #   (unknown) 
  # :binding_set ::
  #   (GtkBindingSet) 
  # :destroyed ::
  #   (Integer) 
  # :in_emission ::
  #   (Integer) 
  # :marks_unbound ::
  #   (Integer) 
  # :set_next ::
  #   (FFI::Pointer(*GtkBindingEntry)) 
  # :hash_next ::
  #   (FFI::Pointer(*GtkBindingEntry)) 
  # :signals ::
  #   (FFI::Pointer(*GtkBindingSignal)) 
  class GtkBindingEntry < FFI::Struct
    layout :keyval, :uint,
           :modifiers, :char,
           :binding_set, GtkBindingSet,
           :destroyed, :uint,
           :in_emission, :uint,
           :marks_unbound, :uint,
           :set_next, :pointer,
           :hash_next, :pointer,
           :signals, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :long_data ::
  #   (Integer) 
  # :double_data ::
  #   (Float) 
  # :string_data ::
  #   (String) 
  class GtkBindingArgD < FFI::Union
    layout :long_data, :long,
           :double_data, :double,
           :string_data, :string
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :arg_type ::
  #   (Integer) 
  # :d ::
  #   (GtkBindingArgD) 
  class GtkBindingArg < FFI::Struct
    layout :arg_type, :uint,
           :d, GtkBindingArgD.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :next_ ::
  #   (FFI::Pointer(*GtkBindingSignal)) 
  # :signal_name ::
  #   (String) 
  # :n_args ::
  #   (Integer) 
  # :args ::
  #   (GtkBindingArg) 
  class GtkBindingSignal < FFI::Struct
    layout :next_, :pointer,
           :signal_name, :string,
           :n_args, :uint,
           :args, GtkBindingArg
  end
  
  # (Not documented)
  # 
  # @method gtk_binding_set_new(set_name)
  # @param [String] set_name 
  # @return [GtkBindingSet] 
  # @scope class
  attach_function :gtk_binding_set_new, :gtk_binding_set_new, [:string], GtkBindingSet
  
  # (Not documented)
  # 
  # @method gtk_binding_set_by_class(object_class)
  # @param [FFI::Pointer(Gpointer)] object_class 
  # @return [GtkBindingSet] 
  # @scope class
  attach_function :gtk_binding_set_by_class, :gtk_binding_set_by_class, [:pointer], GtkBindingSet
  
  # (Not documented)
  # 
  # @method gtk_binding_set_find(set_name)
  # @param [String] set_name 
  # @return [GtkBindingSet] 
  # @scope class
  attach_function :gtk_binding_set_find, :gtk_binding_set_find, [:string], GtkBindingSet
  
  # (Not documented)
  # 
  # @method gtk_bindings_activate(object, keyval, modifiers)
  # @param [FFI::Pointer(*GObject)] object 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_bindings_activate, :gtk_bindings_activate, [:pointer, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_bindings_activate_event(object, event)
  # @param [FFI::Pointer(*GObject)] object 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_bindings_activate_event, :gtk_bindings_activate_event, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_binding_set_activate(binding_set, keyval, modifiers, object)
  # @param [GtkBindingSet] binding_set 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @param [FFI::Pointer(*GObject)] object 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_binding_set_activate, :gtk_binding_set_activate, [GtkBindingSet, :uint, :char, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_binding_entry_skip(binding_set, keyval, modifiers)
  # @param [GtkBindingSet] binding_set 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @return [nil] 
  # @scope class
  attach_function :gtk_binding_entry_skip, :gtk_binding_entry_skip, [GtkBindingSet, :uint, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_binding_entry_add_signal(binding_set, keyval, modifiers, signal_name, n_args)
  # @param [GtkBindingSet] binding_set 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @param [String] signal_name 
  # @param [Integer] n_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_binding_entry_add_signal, :gtk_binding_entry_add_signal, [GtkBindingSet, :uint, :char, :string, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_binding_entry_add_signall(binding_set, keyval, modifiers, signal_name, binding_args)
  # @param [GtkBindingSet] binding_set 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @param [String] signal_name 
  # @param [FFI::Pointer(*GSList)] binding_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_binding_entry_add_signall, :gtk_binding_entry_add_signall, [GtkBindingSet, :uint, :char, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_binding_entry_add_signal_from_string(binding_set, signal_desc)
  # @param [GtkBindingSet] binding_set 
  # @param [String] signal_desc 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_binding_entry_add_signal_from_string, :gtk_binding_entry_add_signal_from_string, [GtkBindingSet, :string], :char
  
  # (Not documented)
  # 
  # @method gtk_binding_entry_remove(binding_set, keyval, modifiers)
  # @param [GtkBindingSet] binding_set 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @return [nil] 
  # @scope class
  attach_function :gtk_binding_entry_remove, :gtk_binding_entry_remove, [GtkBindingSet, :uint, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_binding_set_add_path(binding_set, path_type, path_pattern, priority)
  # @param [GtkBindingSet] binding_set 
  # @param [Symbol from _enum_gtk_path_type_] path_type 
  # @param [String] path_pattern 
  # @param [Symbol from _enum_gtk_path_priority_type_] priority 
  # @return [nil] 
  # @scope class
  attach_function :gtk_binding_set_add_path, :gtk_binding_set_add_path, [GtkBindingSet, :gtk_path_type, :string, :gtk_path_priority_type], :void
  
  # (Not documented)
  class GtkBuilderPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_builder_error).</em>
  # 
  # === Options:
  # :invalid_type_function ::
  #   
  # :unhandled_tag ::
  #   
  # :missing_attribute ::
  #   
  # :invalid_attribute ::
  #   
  # :invalid_tag ::
  #   
  # :missing_property_value ::
  #   
  # :invalid_value ::
  #   
  # :version_mismatch ::
  #   
  # :duplicate_id ::
  #   
  # 
  # @method _enum_gtk_builder_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_builder_error, [
    :invalid_type_function, 0,
    :unhandled_tag, 1,
    :missing_attribute, 2,
    :invalid_attribute, 3,
    :invalid_tag, 4,
    :missing_property_value, 5,
    :invalid_value, 6,
    :version_mismatch, 7,
    :duplicate_id, 8
  ]
  
  # (Not documented)
  # 
  # @method gtk_builder_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_error_quark, :gtk_builder_error_quark, [], :uint
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkBuilderPrivate) 
  module GtkBuilderWrappers
    # @param [String] filename 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_from_file(filename, error)
      Gtk.gtk_builder_add_from_file(self, filename, error)
    end
    
    # @param [String] resource_path 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_from_resource(resource_path, error)
      Gtk.gtk_builder_add_from_resource(self, resource_path, error)
    end
    
    # @param [String] buffer 
    # @param [Integer] length 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_from_string(buffer, length, error)
      Gtk.gtk_builder_add_from_string(self, buffer, length, error)
    end
    
    # @param [String] filename 
    # @param [FFI::Pointer(**Gchar)] object_ids 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_objects_from_file(filename, object_ids, error)
      Gtk.gtk_builder_add_objects_from_file(self, filename, object_ids, error)
    end
    
    # @param [String] resource_path 
    # @param [FFI::Pointer(**Gchar)] object_ids 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_objects_from_resource(resource_path, object_ids, error)
      Gtk.gtk_builder_add_objects_from_resource(self, resource_path, object_ids, error)
    end
    
    # @param [String] buffer 
    # @param [Integer] length 
    # @param [FFI::Pointer(**Gchar)] object_ids 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_objects_from_string(buffer, length, object_ids, error)
      Gtk.gtk_builder_add_objects_from_string(self, buffer, length, object_ids, error)
    end
    
    # @param [String] name 
    # @return [FFI::Pointer(*GObject)] 
    def get_object(name)
      Gtk.gtk_builder_get_object(self, name)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_objects()
      Gtk.gtk_builder_get_objects(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def connect_signals(user_data)
      Gtk.gtk_builder_connect_signals(self, user_data)
    end
    
    # @param [Proc(_callback_gtk_builder_connect_func_)] func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def connect_signals_full(func, user_data)
      Gtk.gtk_builder_connect_signals_full(self, func, user_data)
    end
    
    # @param [String] domain 
    # @return [nil] 
    def set_translation_domain(domain)
      Gtk.gtk_builder_set_translation_domain(self, domain)
    end
    
    # @return [String] 
    def get_translation_domain()
      Gtk.gtk_builder_get_translation_domain(self)
    end
    
    # @param [String] type_name 
    # @return [Integer] 
    def get_type_from_name(type_name)
      Gtk.gtk_builder_get_type_from_name(self, type_name)
    end
    
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @param [String] string 
    # @param [FFI::Pointer(*GValue)] value 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def value_from_string(pspec, string, value, error)
      Gtk.gtk_builder_value_from_string(self, pspec, string, value, error)
    end
    
    # @param [Integer] type 
    # @param [String] string 
    # @param [FFI::Pointer(*GValue)] value 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def value_from_string_type(type, string, value, error)
      Gtk.gtk_builder_value_from_string_type(self, type, string, value, error)
    end
  end
  
  class GtkBuilder < FFI::Struct
    include GtkBuilderWrappers
    layout :parent_instance, :char,
           :priv, GtkBuilderPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :get_type_from_name ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkBuilderClass < FFI::Struct
    layout :parent_class, :char,
           :get_type_from_name, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_builder_connect_func_(object, signal_name, handler_name, connect_object, flags, user_data)
  # @param [FFI::Pointer(*GObject)] object 
  # @param [String] signal_name 
  # @param [String] handler_name 
  # @param [FFI::Pointer(*GObject)] connect_object 
  # @param [unknown] flags 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [GtkBuilder] 
  # @scope class
  callback :gtk_builder_connect_func, [:pointer, :string, :string, :pointer, :char, :pointer], GtkBuilder
  
  # (Not documented)
  # 
  # @method gtk_builder_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_get_type, :gtk_builder_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_new()
  # @return [GtkBuilder] 
  # @scope class
  attach_function :gtk_builder_new, :gtk_builder_new, [], GtkBuilder
  
  # (Not documented)
  # 
  # @method gtk_builder_add_from_file(builder, filename, error)
  # @param [GtkBuilder] builder 
  # @param [String] filename 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_add_from_file, :gtk_builder_add_from_file, [GtkBuilder, :string, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_add_from_resource(builder, resource_path, error)
  # @param [GtkBuilder] builder 
  # @param [String] resource_path 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_add_from_resource, :gtk_builder_add_from_resource, [GtkBuilder, :string, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_add_from_string(builder, buffer, length, error)
  # @param [GtkBuilder] builder 
  # @param [String] buffer 
  # @param [Integer] length 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_add_from_string, :gtk_builder_add_from_string, [GtkBuilder, :string, :uint, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_add_objects_from_file(builder, filename, object_ids, error)
  # @param [GtkBuilder] builder 
  # @param [String] filename 
  # @param [FFI::Pointer(**Gchar)] object_ids 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_add_objects_from_file, :gtk_builder_add_objects_from_file, [GtkBuilder, :string, :pointer, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_add_objects_from_resource(builder, resource_path, object_ids, error)
  # @param [GtkBuilder] builder 
  # @param [String] resource_path 
  # @param [FFI::Pointer(**Gchar)] object_ids 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_add_objects_from_resource, :gtk_builder_add_objects_from_resource, [GtkBuilder, :string, :pointer, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_add_objects_from_string(builder, buffer, length, object_ids, error)
  # @param [GtkBuilder] builder 
  # @param [String] buffer 
  # @param [Integer] length 
  # @param [FFI::Pointer(**Gchar)] object_ids 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_add_objects_from_string, :gtk_builder_add_objects_from_string, [GtkBuilder, :string, :uint, :pointer, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_get_object(builder, name)
  # @param [GtkBuilder] builder 
  # @param [String] name 
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  attach_function :gtk_builder_get_object, :gtk_builder_get_object, [GtkBuilder, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_builder_get_objects(builder)
  # @param [GtkBuilder] builder 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_builder_get_objects, :gtk_builder_get_objects, [GtkBuilder], :pointer
  
  # (Not documented)
  # 
  # @method gtk_builder_connect_signals(builder, user_data)
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_builder_connect_signals, :gtk_builder_connect_signals, [GtkBuilder, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_builder_connect_signals_full(builder, func, user_data)
  # @param [GtkBuilder] builder 
  # @param [Proc(_callback_gtk_builder_connect_func_)] func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_builder_connect_signals_full, :gtk_builder_connect_signals_full, [GtkBuilder, :gtk_builder_connect_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_builder_set_translation_domain(builder, domain)
  # @param [GtkBuilder] builder 
  # @param [String] domain 
  # @return [nil] 
  # @scope class
  attach_function :gtk_builder_set_translation_domain, :gtk_builder_set_translation_domain, [GtkBuilder, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_builder_get_translation_domain(builder)
  # @param [GtkBuilder] builder 
  # @return [String] 
  # @scope class
  attach_function :gtk_builder_get_translation_domain, :gtk_builder_get_translation_domain, [GtkBuilder], :string
  
  # (Not documented)
  # 
  # @method gtk_builder_get_type_from_name(builder, type_name)
  # @param [GtkBuilder] builder 
  # @param [String] type_name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_get_type_from_name, :gtk_builder_get_type_from_name, [GtkBuilder, :string], :uint
  
  # (Not documented)
  # 
  # @method gtk_builder_value_from_string(builder, pspec, string, value, error)
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [String] string 
  # @param [FFI::Pointer(*GValue)] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_value_from_string, :gtk_builder_value_from_string, [GtkBuilder, :pointer, :string, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_builder_value_from_string_type(builder, type, string, value, error)
  # @param [GtkBuilder] builder 
  # @param [Integer] type 
  # @param [String] string 
  # @param [FFI::Pointer(*GValue)] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_value_from_string_type, :gtk_builder_value_from_string_type, [GtkBuilder, :uint, :string, :pointer, :pointer], :int
  
  # (Not documented)
  module GtkBuildableWrappers
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Gtk.gtk_buildable_set_name(self, name)
    end
    
    # @return [String] 
    def get_name()
      Gtk.gtk_buildable_get_name(self)
    end
    
    # @param [GtkBuilder] builder 
    # @param [FFI::Pointer(*GObject)] child 
    # @param [String] type 
    # @return [nil] 
    def add_child(builder, child, type)
      Gtk.gtk_buildable_add_child(self, builder, child, type)
    end
    
    # @param [GtkBuilder] builder 
    # @param [String] name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def set_buildable_property(builder, name, value)
      Gtk.gtk_buildable_set_buildable_property(self, builder, name, value)
    end
    
    # @param [GtkBuilder] builder 
    # @param [String] name 
    # @return [FFI::Pointer(*GObject)] 
    def construct_child(builder, name)
      Gtk.gtk_buildable_construct_child(self, builder, name)
    end
    
    # @param [GtkBuilder] builder 
    # @param [FFI::Pointer(*GObject)] child 
    # @param [String] tagname 
    # @param [FFI::Pointer(*GMarkupParser)] parser 
    # @param [FFI::Pointer(*Gpointer)] data 
    # @return [Integer] 
    def custom_tag_start(builder, child, tagname, parser, data)
      Gtk.gtk_buildable_custom_tag_start(self, builder, child, tagname, parser, data)
    end
    
    # @param [GtkBuilder] builder 
    # @param [FFI::Pointer(*GObject)] child 
    # @param [String] tagname 
    # @param [FFI::Pointer(*Gpointer)] data 
    # @return [nil] 
    def custom_tag_end(builder, child, tagname, data)
      Gtk.gtk_buildable_custom_tag_end(self, builder, child, tagname, data)
    end
    
    # @param [GtkBuilder] builder 
    # @param [FFI::Pointer(*GObject)] child 
    # @param [String] tagname 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def custom_finished(builder, child, tagname, data)
      Gtk.gtk_buildable_custom_finished(self, builder, child, tagname, data)
    end
    
    # @param [GtkBuilder] builder 
    # @return [nil] 
    def parser_finished(builder)
      Gtk.gtk_buildable_parser_finished(self, builder)
    end
    
    # @param [GtkBuilder] builder 
    # @param [String] childname 
    # @return [FFI::Pointer(*GObject)] 
    def get_internal_child(builder, childname)
      Gtk.gtk_buildable_get_internal_child(self, builder, childname)
    end
  end
  
  class GtkBuildable < FFI::Struct
    include GtkBuildableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :set_name ::
  #   (FFI::Pointer(*)) virtual table
  # :get_name ::
  #   (FFI::Pointer(*)) 
  # :add_child ::
  #   (FFI::Pointer(*)) 
  # :set_buildable_property ::
  #   (FFI::Pointer(*)) 
  # :construct_child ::
  #   (FFI::Pointer(*)) 
  # :custom_tag_start ::
  #   (FFI::Pointer(*)) 
  # :custom_tag_end ::
  #   (FFI::Pointer(*)) 
  # :custom_finished ::
  #   (FFI::Pointer(*)) 
  # :parser_finished ::
  #   (FFI::Pointer(*)) 
  # :get_internal_child ::
  #   (FFI::Pointer(*)) 
  class GtkBuildableIface < FFI::Struct
    layout :g_iface, :char,
           :set_name, :pointer,
           :get_name, :pointer,
           :add_child, :pointer,
           :set_buildable_property, :pointer,
           :construct_child, :pointer,
           :custom_tag_start, :pointer,
           :custom_tag_end, :pointer,
           :custom_finished, :pointer,
           :parser_finished, :pointer,
           :get_internal_child, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_buildable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_buildable_get_type, :gtk_buildable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_buildable_set_name(buildable, name)
  # @param [GtkBuildable] buildable 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_buildable_set_name, :gtk_buildable_set_name, [GtkBuildable, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_buildable_get_name(buildable)
  # @param [GtkBuildable] buildable 
  # @return [String] 
  # @scope class
  attach_function :gtk_buildable_get_name, :gtk_buildable_get_name, [GtkBuildable], :string
  
  # (Not documented)
  # 
  # @method gtk_buildable_add_child(buildable, builder, child, type)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_buildable_add_child, :gtk_buildable_add_child, [GtkBuildable, GtkBuilder, :pointer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_buildable_set_buildable_property(buildable, builder, name, value)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [String] name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_buildable_set_buildable_property, :gtk_buildable_set_buildable_property, [GtkBuildable, GtkBuilder, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_buildable_construct_child(buildable, builder, name)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [String] name 
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  attach_function :gtk_buildable_construct_child, :gtk_buildable_construct_child, [GtkBuildable, GtkBuilder, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_buildable_custom_tag_start(buildable, builder, child, tagname, parser, data)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] tagname 
  # @param [FFI::Pointer(*GMarkupParser)] parser 
  # @param [FFI::Pointer(*Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_buildable_custom_tag_start, :gtk_buildable_custom_tag_start, [GtkBuildable, GtkBuilder, :pointer, :string, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_buildable_custom_tag_end(buildable, builder, child, tagname, data)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] tagname 
  # @param [FFI::Pointer(*Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_buildable_custom_tag_end, :gtk_buildable_custom_tag_end, [GtkBuildable, GtkBuilder, :pointer, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_buildable_custom_finished(buildable, builder, child, tagname, data)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] tagname 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_buildable_custom_finished, :gtk_buildable_custom_finished, [GtkBuildable, GtkBuilder, :pointer, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_buildable_parser_finished(buildable, builder)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @return [nil] 
  # @scope class
  attach_function :gtk_buildable_parser_finished, :gtk_buildable_parser_finished, [GtkBuildable, GtkBuilder], :void
  
  # (Not documented)
  # 
  # @method gtk_buildable_get_internal_child(buildable, builder, childname)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [String] childname 
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  attach_function :gtk_buildable_get_internal_child, :gtk_buildable_get_internal_child, [GtkBuildable, GtkBuilder, :string], :pointer
  
  # (Not documented)
  class GtkButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) < private >
  # :priv ::
  #   (GtkButtonPrivate) 
  module GtkButtonWrappers
    # @return [nil] 
    def clicked()
      Gtk.gtk_button_clicked(self)
    end
    
    # @return [nil] 
    def pressed()
      Gtk.gtk_button_pressed(self)
    end
    
    # @return [nil] 
    def released()
      Gtk.gtk_button_released(self)
    end
    
    # @return [nil] 
    def enter()
      Gtk.gtk_button_enter(self)
    end
    
    # @return [nil] 
    def leave()
      Gtk.gtk_button_leave(self)
    end
    
    # @param [Symbol from _enum_gtk_relief_style_] newstyle 
    # @return [nil] 
    def set_relief(newstyle)
      Gtk.gtk_button_set_relief(self, newstyle)
    end
    
    # @return [Symbol from _enum_gtk_relief_style_] 
    def get_relief()
      Gtk.gtk_button_get_relief(self)
    end
    
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_button_set_label(self, label)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_button_get_label(self)
    end
    
    # @param [Integer] use_underline 
    # @return [nil] 
    def set_use_underline(use_underline)
      Gtk.gtk_button_set_use_underline(self, use_underline)
    end
    
    # @return [Integer] 
    def get_use_underline()
      Gtk.gtk_button_get_use_underline(self)
    end
    
    # @param [Integer] use_stock 
    # @return [nil] 
    def set_use_stock(use_stock)
      Gtk.gtk_button_set_use_stock(self, use_stock)
    end
    
    # @return [Integer] 
    def get_use_stock()
      Gtk.gtk_button_get_use_stock(self)
    end
    
    # @param [Integer] focus_on_click 
    # @return [nil] 
    def set_focus_on_click(focus_on_click)
      Gtk.gtk_button_set_focus_on_click(self, focus_on_click)
    end
    
    # @return [Integer] 
    def get_focus_on_click()
      Gtk.gtk_button_get_focus_on_click(self)
    end
    
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @return [nil] 
    def set_alignment(xalign, yalign)
      Gtk.gtk_button_set_alignment(self, xalign, yalign)
    end
    
    # @param [FFI::Pointer(*Gfloat)] xalign 
    # @param [FFI::Pointer(*Gfloat)] yalign 
    # @return [nil] 
    def get_alignment(xalign, yalign)
      Gtk.gtk_button_get_alignment(self, xalign, yalign)
    end
    
    # @param [GtkWidget] image 
    # @return [nil] 
    def set_image(image)
      Gtk.gtk_button_set_image(self, image)
    end
    
    # @return [GtkWidget] 
    def get_image()
      GtkWidget.new Gtk.gtk_button_get_image(self)
    end
    
    # @param [Symbol from _enum_gtk_position_type_] position 
    # @return [nil] 
    def set_image_position(position)
      Gtk.gtk_button_set_image_position(self, position)
    end
    
    # @return [Symbol from _enum_gtk_position_type_] 
    def get_image_position()
      Gtk.gtk_button_get_image_position(self)
    end
    
    # @param [Integer] always_show 
    # @return [nil] 
    def set_always_show_image(always_show)
      Gtk.gtk_button_set_always_show_image(self, always_show)
    end
    
    # @return [Integer] 
    def get_always_show_image()
      Gtk.gtk_button_get_always_show_image(self)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_event_window()
      Gtk.gtk_button_get_event_window(self)
    end
  end
  
  class GtkButton < FFI::Struct
    include GtkButtonWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :pressed ::
  #   (FFI::Pointer(*)) 
  # :released ::
  #   (FFI::Pointer(*)) 
  # :clicked ::
  #   (FFI::Pointer(*)) 
  # :enter ::
  #   (FFI::Pointer(*)) 
  # :leave ::
  #   (FFI::Pointer(*)) 
  # :activate ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkButtonClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :pressed, :pointer,
           :released, :pointer,
           :clicked, :pointer,
           :enter, :pointer,
           :leave, :pointer,
           :activate, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_get_type, :gtk_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_button_new, :gtk_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_button_new_with_label(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_button_new_with_label, :gtk_button_new_with_label, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_button_new_from_stock(stock_id)
  # @param [String] stock_id 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_button_new_from_stock, :gtk_button_new_from_stock, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_button_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_button_new_with_mnemonic, :gtk_button_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_button_clicked(button)
  # @param [GtkButton] button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_clicked, :gtk_button_clicked, [GtkButton], :void
  
  # (Not documented)
  # 
  # @method gtk_button_pressed(button)
  # @param [GtkButton] button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_pressed, :gtk_button_pressed, [GtkButton], :void
  
  # (Not documented)
  # 
  # @method gtk_button_released(button)
  # @param [GtkButton] button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_released, :gtk_button_released, [GtkButton], :void
  
  # (Not documented)
  # 
  # @method gtk_button_enter(button)
  # @param [GtkButton] button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_enter, :gtk_button_enter, [GtkButton], :void
  
  # (Not documented)
  # 
  # @method gtk_button_leave(button)
  # @param [GtkButton] button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_leave, :gtk_button_leave, [GtkButton], :void
  
  # (Not documented)
  # 
  # @method gtk_button_set_relief(button, newstyle)
  # @param [GtkButton] button 
  # @param [Symbol from _enum_gtk_relief_style_] newstyle 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_relief, :gtk_button_set_relief, [GtkButton, :gtk_relief_style], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_relief(button)
  # @param [GtkButton] button 
  # @return [Symbol from _enum_gtk_relief_style_] 
  # @scope class
  attach_function :gtk_button_get_relief, :gtk_button_get_relief, [GtkButton], :gtk_relief_style
  
  # (Not documented)
  # 
  # @method gtk_button_set_label(button, label)
  # @param [GtkButton] button 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_label, :gtk_button_set_label, [GtkButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_label(button)
  # @param [GtkButton] button 
  # @return [String] 
  # @scope class
  attach_function :gtk_button_get_label, :gtk_button_get_label, [GtkButton], :string
  
  # (Not documented)
  # 
  # @method gtk_button_set_use_underline(button, use_underline)
  # @param [GtkButton] button 
  # @param [Integer] use_underline 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_use_underline, :gtk_button_set_use_underline, [GtkButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_use_underline(button)
  # @param [GtkButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_get_use_underline, :gtk_button_get_use_underline, [GtkButton], :int
  
  # (Not documented)
  # 
  # @method gtk_button_set_use_stock(button, use_stock)
  # @param [GtkButton] button 
  # @param [Integer] use_stock 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_use_stock, :gtk_button_set_use_stock, [GtkButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_use_stock(button)
  # @param [GtkButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_get_use_stock, :gtk_button_get_use_stock, [GtkButton], :int
  
  # (Not documented)
  # 
  # @method gtk_button_set_focus_on_click(button, focus_on_click)
  # @param [GtkButton] button 
  # @param [Integer] focus_on_click 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_focus_on_click, :gtk_button_set_focus_on_click, [GtkButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_focus_on_click(button)
  # @param [GtkButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_get_focus_on_click, :gtk_button_get_focus_on_click, [GtkButton], :int
  
  # (Not documented)
  # 
  # @method gtk_button_set_alignment(button, xalign, yalign)
  # @param [GtkButton] button 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_alignment, :gtk_button_set_alignment, [GtkButton, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_alignment(button, xalign, yalign)
  # @param [GtkButton] button 
  # @param [FFI::Pointer(*Gfloat)] xalign 
  # @param [FFI::Pointer(*Gfloat)] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_get_alignment, :gtk_button_get_alignment, [GtkButton, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_button_set_image(button, image)
  # @param [GtkButton] button 
  # @param [GtkWidget] image 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_image, :gtk_button_set_image, [GtkButton, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_image(button)
  # @param [GtkButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_button_get_image, :gtk_button_get_image, [GtkButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_button_set_image_position(button, position)
  # @param [GtkButton] button 
  # @param [Symbol from _enum_gtk_position_type_] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_image_position, :gtk_button_set_image_position, [GtkButton, :gtk_position_type], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_image_position(button)
  # @param [GtkButton] button 
  # @return [Symbol from _enum_gtk_position_type_] 
  # @scope class
  attach_function :gtk_button_get_image_position, :gtk_button_get_image_position, [GtkButton], :gtk_position_type
  
  # (Not documented)
  # 
  # @method gtk_button_set_always_show_image(button, always_show)
  # @param [GtkButton] button 
  # @param [Integer] always_show 
  # @return [nil] 
  # @scope class
  attach_function :gtk_button_set_always_show_image, :gtk_button_set_always_show_image, [GtkButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_button_get_always_show_image(button)
  # @param [GtkButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_get_always_show_image, :gtk_button_get_always_show_image, [GtkButton], :int
  
  # (Not documented)
  # 
  # @method gtk_button_get_event_window(button)
  # @param [GtkButton] button 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_button_get_event_window, :gtk_button_get_event_window, [GtkButton], :pointer
  
  # (Not documented)
  class GtkCalendarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_calendar_display_options).</em>
  # 
  # === Options:
  # :show_heading ::
  #   
  # :show_day_names ::
  #   
  # :no_month_change ::
  #   
  # :show_week_numbers ::
  #   
  # :show_details ::
  #   
  # 
  # @method _enum_gtk_calendar_display_options_
  # @return [Symbol]
  # @scope class
  enum :gtk_calendar_display_options, [
    :show_heading, 1,
    :show_day_names, 2,
    :no_month_change, 4,
    :show_week_numbers, 8,
    :show_details, 32
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_calendar_detail_func_(calendar, year, month, day, user_data)
  # @param [FFI::Pointer(*GtkCalendar)] calendar 
  # @param [Integer] year 
  # @param [Integer] month 
  # @param [Integer] day 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_calendar_detail_func, [:pointer, :uint, :uint, :uint, :pointer], :char
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkCalendarPrivate) 
  module GtkCalendarWrappers
    # @param [Integer] month 
    # @param [Integer] year 
    # @return [nil] 
    def select_month(month, year)
      Gtk.gtk_calendar_select_month(self, month, year)
    end
    
    # @param [Integer] day 
    # @return [nil] 
    def select_day(day)
      Gtk.gtk_calendar_select_day(self, day)
    end
    
    # @param [Integer] day 
    # @return [nil] 
    def mark_day(day)
      Gtk.gtk_calendar_mark_day(self, day)
    end
    
    # @param [Integer] day 
    # @return [nil] 
    def unmark_day(day)
      Gtk.gtk_calendar_unmark_day(self, day)
    end
    
    # @return [nil] 
    def clear_marks()
      Gtk.gtk_calendar_clear_marks(self)
    end
    
    # @param [Symbol from _enum_gtk_calendar_display_options_] flags 
    # @return [nil] 
    def set_display_options(flags)
      Gtk.gtk_calendar_set_display_options(self, flags)
    end
    
    # @return [Symbol from _enum_gtk_calendar_display_options_] 
    def get_display_options()
      Gtk.gtk_calendar_get_display_options(self)
    end
    
    # @param [FFI::Pointer(*Guint)] year 
    # @param [FFI::Pointer(*Guint)] month 
    # @param [FFI::Pointer(*Guint)] day 
    # @return [nil] 
    def get_date(year, month, day)
      Gtk.gtk_calendar_get_date(self, year, month, day)
    end
    
    # @param [Proc(_callback_gtk_calendar_detail_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_detail_func(func, data, destroy)
      Gtk.gtk_calendar_set_detail_func(self, func, data, destroy)
    end
    
    # @param [Integer] chars 
    # @return [nil] 
    def set_detail_width_chars(chars)
      Gtk.gtk_calendar_set_detail_width_chars(self, chars)
    end
    
    # @param [Integer] rows 
    # @return [nil] 
    def set_detail_height_rows(rows)
      Gtk.gtk_calendar_set_detail_height_rows(self, rows)
    end
    
    # @return [Integer] 
    def get_detail_width_chars()
      Gtk.gtk_calendar_get_detail_width_chars(self)
    end
    
    # @return [Integer] 
    def get_detail_height_rows()
      Gtk.gtk_calendar_get_detail_height_rows(self)
    end
    
    # @param [Integer] day 
    # @return [Integer] 
    def get_day_is_marked(day)
      Gtk.gtk_calendar_get_day_is_marked(self, day)
    end
  end
  
  class GtkCalendar < FFI::Struct
    include GtkCalendarWrappers
    layout :widget, GtkWidget.by_value,
           :priv, GtkCalendarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :month_changed ::
  #   (FFI::Pointer(*)) Signal handlers
  # :day_selected ::
  #   (FFI::Pointer(*)) 
  # :day_selected_double_click ::
  #   (FFI::Pointer(*)) 
  # :prev_month ::
  #   (FFI::Pointer(*)) 
  # :next_month ::
  #   (FFI::Pointer(*)) 
  # :prev_year ::
  #   (FFI::Pointer(*)) 
  # :next_year ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCalendarClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :month_changed, :pointer,
           :day_selected, :pointer,
           :day_selected_double_click, :pointer,
           :prev_month, :pointer,
           :next_month, :pointer,
           :prev_year, :pointer,
           :next_year, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_calendar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_calendar_get_type, :gtk_calendar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_calendar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_calendar_new, :gtk_calendar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_calendar_select_month(calendar, month, year)
  # @param [GtkCalendar] calendar 
  # @param [Integer] month 
  # @param [Integer] year 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_select_month, :gtk_calendar_select_month, [GtkCalendar, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_select_day(calendar, day)
  # @param [GtkCalendar] calendar 
  # @param [Integer] day 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_select_day, :gtk_calendar_select_day, [GtkCalendar, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_mark_day(calendar, day)
  # @param [GtkCalendar] calendar 
  # @param [Integer] day 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_mark_day, :gtk_calendar_mark_day, [GtkCalendar, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_unmark_day(calendar, day)
  # @param [GtkCalendar] calendar 
  # @param [Integer] day 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_unmark_day, :gtk_calendar_unmark_day, [GtkCalendar, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_clear_marks(calendar)
  # @param [GtkCalendar] calendar 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_clear_marks, :gtk_calendar_clear_marks, [GtkCalendar], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_set_display_options(calendar, flags)
  # @param [GtkCalendar] calendar 
  # @param [Symbol from _enum_gtk_calendar_display_options_] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_set_display_options, :gtk_calendar_set_display_options, [GtkCalendar, :gtk_calendar_display_options], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_get_display_options(calendar)
  # @param [GtkCalendar] calendar 
  # @return [Symbol from _enum_gtk_calendar_display_options_] 
  # @scope class
  attach_function :gtk_calendar_get_display_options, :gtk_calendar_get_display_options, [GtkCalendar], :gtk_calendar_display_options
  
  # (Not documented)
  # 
  # @method gtk_calendar_get_date(calendar, year, month, day)
  # @param [GtkCalendar] calendar 
  # @param [FFI::Pointer(*Guint)] year 
  # @param [FFI::Pointer(*Guint)] month 
  # @param [FFI::Pointer(*Guint)] day 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_get_date, :gtk_calendar_get_date, [GtkCalendar, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_set_detail_func(calendar, func, data, destroy)
  # @param [GtkCalendar] calendar 
  # @param [Proc(_callback_gtk_calendar_detail_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_set_detail_func, :gtk_calendar_set_detail_func, [GtkCalendar, :gtk_calendar_detail_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_set_detail_width_chars(calendar, chars)
  # @param [GtkCalendar] calendar 
  # @param [Integer] chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_set_detail_width_chars, :gtk_calendar_set_detail_width_chars, [GtkCalendar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_set_detail_height_rows(calendar, rows)
  # @param [GtkCalendar] calendar 
  # @param [Integer] rows 
  # @return [nil] 
  # @scope class
  attach_function :gtk_calendar_set_detail_height_rows, :gtk_calendar_set_detail_height_rows, [GtkCalendar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_calendar_get_detail_width_chars(calendar)
  # @param [GtkCalendar] calendar 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_calendar_get_detail_width_chars, :gtk_calendar_get_detail_width_chars, [GtkCalendar], :int
  
  # (Not documented)
  # 
  # @method gtk_calendar_get_detail_height_rows(calendar)
  # @param [GtkCalendar] calendar 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_calendar_get_detail_height_rows, :gtk_calendar_get_detail_height_rows, [GtkCalendar], :int
  
  # (Not documented)
  # 
  # @method gtk_calendar_get_day_is_marked(calendar, day)
  # @param [GtkCalendar] calendar 
  # @param [Integer] day 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_calendar_get_day_is_marked, :gtk_calendar_get_day_is_marked, [GtkCalendar, :uint], :int
  
  # (Not documented)
  class GtkCellAreaBoxPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkCellArea) < private >
  # :priv ::
  #   (GtkCellAreaBoxPrivate) 
  module GtkCellAreaBoxWrappers
    # @param [GtkCellRenderer] renderer 
    # @param [Integer] expand 
    # @param [Integer] align 
    # @param [Integer] fixed 
    # @return [nil] 
    def pack_start(renderer, expand, align, fixed)
      Gtk.gtk_cell_area_box_pack_start(self, renderer, expand, align, fixed)
    end
    
    # @param [GtkCellRenderer] renderer 
    # @param [Integer] expand 
    # @param [Integer] align 
    # @param [Integer] fixed 
    # @return [nil] 
    def pack_end(renderer, expand, align, fixed)
      Gtk.gtk_cell_area_box_pack_end(self, renderer, expand, align, fixed)
    end
    
    # @return [Integer] 
    def get_spacing()
      Gtk.gtk_cell_area_box_get_spacing(self)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_spacing(spacing)
      Gtk.gtk_cell_area_box_set_spacing(self, spacing)
    end
    
    # @param [Integer] group_idx 
    # @return [Integer] 
    def group_visible(group_idx)
      Gtk.gtk_cell_area_box_group_visible(self, group_idx)
    end
  end
  
  class GtkCellAreaBox < FFI::Struct
    include GtkCellAreaBoxWrappers
    layout :parent_instance, GtkCellArea.by_value,
           :priv, GtkCellAreaBoxPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellAreaClass) < private >
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellAreaBoxClass < FFI::Struct
    layout :parent_class, GtkCellAreaClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_box_get_type, :gtk_cell_area_box_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_new()
  # @return [GtkCellArea] 
  # @scope class
  attach_function :gtk_cell_area_box_new, :gtk_cell_area_box_new, [], GtkCellArea
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_pack_start(box, renderer, expand, align, fixed)
  # @param [GtkCellAreaBox] box 
  # @param [GtkCellRenderer] renderer 
  # @param [Integer] expand 
  # @param [Integer] align 
  # @param [Integer] fixed 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_box_pack_start, :gtk_cell_area_box_pack_start, [GtkCellAreaBox, GtkCellRenderer, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_pack_end(box, renderer, expand, align, fixed)
  # @param [GtkCellAreaBox] box 
  # @param [GtkCellRenderer] renderer 
  # @param [Integer] expand 
  # @param [Integer] align 
  # @param [Integer] fixed 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_box_pack_end, :gtk_cell_area_box_pack_end, [GtkCellAreaBox, GtkCellRenderer, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_get_spacing(box)
  # @param [GtkCellAreaBox] box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_box_get_spacing, :gtk_cell_area_box_get_spacing, [GtkCellAreaBox], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_set_spacing(box, spacing)
  # @param [GtkCellAreaBox] box 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_box_set_spacing, :gtk_cell_area_box_set_spacing, [GtkCellAreaBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_box_group_visible(box, group_idx)
  # @param [GtkCellAreaBox] box 
  # @param [Integer] group_idx 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_box_group_visible, :_gtk_cell_area_box_group_visible, [GtkCellAreaBox, :int], :int
  
  # (Not documented)
  class GtkCellAreaContextPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) < private >
  # :priv ::
  #   (GtkCellAreaContextPrivate) 
  module GtkCellAreaContextWrappers
    # @return [GtkCellArea] 
    def get_area()
      GtkCellArea.new Gtk.gtk_cell_area_context_get_area(self)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def allocate(width, height)
      Gtk.gtk_cell_area_context_allocate(self, width, height)
    end
    
    # @return [nil] 
    def reset()
      Gtk.gtk_cell_area_context_reset(self)
    end
    
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width(minimum_width, natural_width)
      Gtk.gtk_cell_area_context_get_preferred_width(self, minimum_width, natural_width)
    end
    
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height(minimum_height, natural_height)
      Gtk.gtk_cell_area_context_get_preferred_height(self, minimum_height, natural_height)
    end
    
    # @param [Integer] width 
    # @param [FFI::Pointer(*Gint)] minimum_height 
    # @param [FFI::Pointer(*Gint)] natural_height 
    # @return [nil] 
    def get_preferred_height_for_width(width, minimum_height, natural_height)
      Gtk.gtk_cell_area_context_get_preferred_height_for_width(self, width, minimum_height, natural_height)
    end
    
    # @param [Integer] height 
    # @param [FFI::Pointer(*Gint)] minimum_width 
    # @param [FFI::Pointer(*Gint)] natural_width 
    # @return [nil] 
    def get_preferred_width_for_height(height, minimum_width, natural_width)
      Gtk.gtk_cell_area_context_get_preferred_width_for_height(self, height, minimum_width, natural_width)
    end
    
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_allocation(width, height)
      Gtk.gtk_cell_area_context_get_allocation(self, width, height)
    end
    
    # @param [Integer] minimum_width 
    # @param [Integer] natural_width 
    # @return [nil] 
    def push_preferred_width(minimum_width, natural_width)
      Gtk.gtk_cell_area_context_push_preferred_width(self, minimum_width, natural_width)
    end
    
    # @param [Integer] minimum_height 
    # @param [Integer] natural_height 
    # @return [nil] 
    def push_preferred_height(minimum_height, natural_height)
      Gtk.gtk_cell_area_context_push_preferred_height(self, minimum_height, natural_height)
    end
  end
  
  class GtkCellAreaContext < FFI::Struct
    include GtkCellAreaContextWrappers
    layout :parent_instance, :char,
           :priv, GtkCellAreaContextPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) < private >
  # :allocate ::
  #   (FFI::Pointer(*)) < public >
  # :reset ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_height_for_width ::
  #   (FFI::Pointer(*)) 
  # :get_preferred_width_for_height ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  class GtkCellAreaContextClass < FFI::Struct
    layout :parent_class, :char,
           :allocate, :pointer,
           :reset, :pointer,
           :get_preferred_height_for_width, :pointer,
           :get_preferred_width_for_height, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_area_context_get_type, :gtk_cell_area_context_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_area(context)
  # @param [GtkCellAreaContext] context 
  # @return [GtkCellArea] 
  # @scope class
  attach_function :gtk_cell_area_context_get_area, :gtk_cell_area_context_get_area, [GtkCellAreaContext], GtkCellArea
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_allocate(context, width, height)
  # @param [GtkCellAreaContext] context 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_allocate, :gtk_cell_area_context_allocate, [GtkCellAreaContext, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_reset(context)
  # @param [GtkCellAreaContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_reset, :gtk_cell_area_context_reset, [GtkCellAreaContext], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_preferred_width(context, minimum_width, natural_width)
  # @param [GtkCellAreaContext] context 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_get_preferred_width, :gtk_cell_area_context_get_preferred_width, [GtkCellAreaContext, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_preferred_height(context, minimum_height, natural_height)
  # @param [GtkCellAreaContext] context 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_get_preferred_height, :gtk_cell_area_context_get_preferred_height, [GtkCellAreaContext, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_preferred_height_for_width(context, width, minimum_height, natural_height)
  # @param [GtkCellAreaContext] context 
  # @param [Integer] width 
  # @param [FFI::Pointer(*Gint)] minimum_height 
  # @param [FFI::Pointer(*Gint)] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_get_preferred_height_for_width, :gtk_cell_area_context_get_preferred_height_for_width, [GtkCellAreaContext, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_preferred_width_for_height(context, height, minimum_width, natural_width)
  # @param [GtkCellAreaContext] context 
  # @param [Integer] height 
  # @param [FFI::Pointer(*Gint)] minimum_width 
  # @param [FFI::Pointer(*Gint)] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_get_preferred_width_for_height, :gtk_cell_area_context_get_preferred_width_for_height, [GtkCellAreaContext, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_get_allocation(context, width, height)
  # @param [GtkCellAreaContext] context 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_get_allocation, :gtk_cell_area_context_get_allocation, [GtkCellAreaContext, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_push_preferred_width(context, minimum_width, natural_width)
  # @param [GtkCellAreaContext] context 
  # @param [Integer] minimum_width 
  # @param [Integer] natural_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_push_preferred_width, :gtk_cell_area_context_push_preferred_width, [GtkCellAreaContext, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_area_context_push_preferred_height(context, minimum_height, natural_height)
  # @param [GtkCellAreaContext] context 
  # @param [Integer] minimum_height 
  # @param [Integer] natural_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_area_context_push_preferred_height, :gtk_cell_area_context_push_preferred_height, [GtkCellAreaContext, :int, :int], :void
  
  # (Not documented)
  module GtkCellLayoutWrappers
    # @param [GtkCellRenderer] cell 
    # @param [Integer] expand 
    # @return [nil] 
    def pack_start(cell, expand)
      Gtk.gtk_cell_layout_pack_start(self, cell, expand)
    end
    
    # @param [GtkCellRenderer] cell 
    # @param [Integer] expand 
    # @return [nil] 
    def pack_end(cell, expand)
      Gtk.gtk_cell_layout_pack_end(self, cell, expand)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_cells()
      Gtk.gtk_cell_layout_get_cells(self)
    end
    
    # @return [nil] 
    def clear()
      Gtk.gtk_cell_layout_clear(self)
    end
    
    # @param [GtkCellRenderer] cell 
    # @return [nil] 
    def set_attributes(cell)
      Gtk.gtk_cell_layout_set_attributes(self, cell)
    end
    
    # @param [GtkCellRenderer] cell 
    # @param [String] attribute 
    # @param [Integer] column 
    # @return [nil] 
    def add_attribute(cell, attribute, column)
      Gtk.gtk_cell_layout_add_attribute(self, cell, attribute, column)
    end
    
    # @param [GtkCellRenderer] cell 
    # @param [Proc(_callback_gtk_cell_layout_data_func_)] func 
    # @param [FFI::Pointer(Gpointer)] func_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_cell_data_func(cell, func, func_data, destroy)
      Gtk.gtk_cell_layout_set_cell_data_func(self, cell, func, func_data, destroy)
    end
    
    # @param [GtkCellRenderer] cell 
    # @return [nil] 
    def clear_attributes(cell)
      Gtk.gtk_cell_layout_clear_attributes(self, cell)
    end
    
    # @param [GtkCellRenderer] cell 
    # @param [Integer] position 
    # @return [nil] 
    def reorder(cell, position)
      Gtk.gtk_cell_layout_reorder(self, cell, position)
    end
    
    # @return [GtkCellArea] 
    def get_area()
      GtkCellArea.new Gtk.gtk_cell_layout_get_area(self)
    end
  end
  
  class GtkCellLayout < FFI::Struct
    include GtkCellLayoutWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_cell_layout_data_func_(cell, tree_model, iter, data)
  # @param [GtkCellRenderer] cell 
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkCellLayout] 
  # @scope class
  callback :gtk_cell_layout_data_func, [GtkCellRenderer, GtkTreeModel, GtkTreeIter, :pointer], GtkCellLayout
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :pack_start ::
  #   (FFI::Pointer(*)) Virtual Table
  # :pack_end ::
  #   (FFI::Pointer(*)) 
  # :clear ::
  #   (FFI::Pointer(*)) 
  # :add_attribute ::
  #   (FFI::Pointer(*)) 
  # :set_cell_data_func ::
  #   (FFI::Pointer(*)) 
  # :clear_attributes ::
  #   (FFI::Pointer(*)) 
  # :reorder ::
  #   (FFI::Pointer(*)) 
  # :get_cells ::
  #   (FFI::Pointer(*)) 
  # :get_area ::
  #   (FFI::Pointer(*)) 
  class GtkCellLayoutIface < FFI::Struct
    layout :g_iface, :char,
           :pack_start, :pointer,
           :pack_end, :pointer,
           :clear, :pointer,
           :add_attribute, :pointer,
           :set_cell_data_func, :pointer,
           :clear_attributes, :pointer,
           :reorder, :pointer,
           :get_cells, :pointer,
           :get_area, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_layout_get_type, :gtk_cell_layout_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_pack_start(cell_layout, cell, expand)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_pack_start, :gtk_cell_layout_pack_start, [GtkCellLayout, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_pack_end(cell_layout, cell, expand)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_pack_end, :gtk_cell_layout_pack_end, [GtkCellLayout, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_get_cells(cell_layout)
  # @param [GtkCellLayout] cell_layout 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_cell_layout_get_cells, :gtk_cell_layout_get_cells, [GtkCellLayout], :pointer
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_clear(cell_layout)
  # @param [GtkCellLayout] cell_layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_clear, :gtk_cell_layout_clear, [GtkCellLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_set_attributes(cell_layout, cell)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_set_attributes, :gtk_cell_layout_set_attributes, [GtkCellLayout, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_add_attribute(cell_layout, cell, attribute, column)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @param [String] attribute 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_add_attribute, :gtk_cell_layout_add_attribute, [GtkCellLayout, GtkCellRenderer, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_set_cell_data_func(cell_layout, cell, func, func_data, destroy)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @param [Proc(_callback_gtk_cell_layout_data_func_)] func 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_set_cell_data_func, :gtk_cell_layout_set_cell_data_func, [GtkCellLayout, GtkCellRenderer, :gtk_cell_layout_data_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_clear_attributes(cell_layout, cell)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_clear_attributes, :gtk_cell_layout_clear_attributes, [GtkCellLayout, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_reorder(cell_layout, cell, position)
  # @param [GtkCellLayout] cell_layout 
  # @param [GtkCellRenderer] cell 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_reorder, :gtk_cell_layout_reorder, [GtkCellLayout, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_get_area(cell_layout)
  # @param [GtkCellLayout] cell_layout 
  # @return [GtkCellArea] 
  # @scope class
  attach_function :gtk_cell_layout_get_area, :gtk_cell_layout_get_area, [GtkCellLayout], GtkCellArea
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_buildable_custom_tag_start(buildable, builder, child, tagname, parser, data)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] tagname 
  # @param [FFI::Pointer(*GMarkupParser)] parser 
  # @param [FFI::Pointer(*Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_layout_buildable_custom_tag_start, :_gtk_cell_layout_buildable_custom_tag_start, [GtkBuildable, GtkBuilder, :pointer, :string, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_buildable_custom_tag_end(buildable, builder, child, tagname, data)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] tagname 
  # @param [FFI::Pointer(*Gpointer)] data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_layout_buildable_custom_tag_end, :_gtk_cell_layout_buildable_custom_tag_end, [GtkBuildable, GtkBuilder, :pointer, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_layout_buildable_add_child(buildable, builder, child, type)
  # @param [GtkBuildable] buildable 
  # @param [GtkBuilder] builder 
  # @param [FFI::Pointer(*GObject)] child 
  # @param [String] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_layout_buildable_add_child, :_gtk_cell_layout_buildable_add_child, [GtkBuildable, GtkBuilder, :pointer, :string], :void
  
  # (Not documented)
  class GtkCellRendererTextPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRenderer) 
  # :priv ::
  #   (GtkCellRendererTextPrivate) < private >
  module GtkCellRendererTextWrappers
    # @param [Integer] number_of_rows 
    # @return [nil] 
    def set_fixed_height_from_font(number_of_rows)
      Gtk.gtk_cell_renderer_text_set_fixed_height_from_font(self, number_of_rows)
    end
  end
  
  class GtkCellRendererText < FFI::Struct
    include GtkCellRendererTextWrappers
    layout :parent, GtkCellRenderer.by_value,
           :priv, GtkCellRendererTextPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellRendererClass) 
  # :edited ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererTextClass < FFI::Struct
    layout :parent_class, GtkCellRendererClass.by_value,
           :edited, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_text_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_text_get_type, :gtk_cell_renderer_text_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_text_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_text_new, :gtk_cell_renderer_text_new, [], GtkCellRenderer
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_text_set_fixed_height_from_font(renderer, number_of_rows)
  # @param [GtkCellRendererText] renderer 
  # @param [Integer] number_of_rows 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_text_set_fixed_height_from_font, :gtk_cell_renderer_text_set_fixed_height_from_font, [GtkCellRendererText, :int], :void
  
  # (Not documented)
  class GtkCellRendererAccelPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_cell_renderer_accel_mode).</em>
  # 
  # === Options:
  # :gtk ::
  #   
  # :other ::
  #   
  # 
  # @method _enum_gtk_cell_renderer_accel_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_cell_renderer_accel_mode, [
    :gtk, 0,
    :other, 1
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRendererText) 
  # :priv ::
  #   (GtkCellRendererAccelPrivate) < private >
  class GtkCellRendererAccel < FFI::Struct
    layout :parent, GtkCellRendererText.by_value,
           :priv, GtkCellRendererAccelPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellRendererTextClass) 
  # :accel_edited ::
  #   (FFI::Pointer(*)) 
  # :accel_cleared ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved0 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererAccelClass < FFI::Struct
    layout :parent_class, GtkCellRendererTextClass.by_value,
           :accel_edited, :pointer,
           :accel_cleared, :pointer,
           :gtk_reserved0, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_accel_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_accel_get_type, :gtk_cell_renderer_accel_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_accel_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_accel_new, :gtk_cell_renderer_accel_new, [], GtkCellRenderer
  
  # (Not documented)
  class GtkCellRendererComboPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRendererText) 
  # :priv ::
  #   (GtkCellRendererComboPrivate) < private >
  class GtkCellRendererCombo < FFI::Struct
    layout :parent, GtkCellRendererText.by_value,
           :priv, GtkCellRendererComboPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRendererTextClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererComboClass < FFI::Struct
    layout :parent, GtkCellRendererTextClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_combo_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_combo_get_type, :gtk_cell_renderer_combo_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_combo_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_combo_new, :gtk_cell_renderer_combo_new, [], GtkCellRenderer
  
  # (Not documented)
  class GtkCellRendererPixbufPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRenderer) 
  # :priv ::
  #   (GtkCellRendererPixbufPrivate) < private >
  class GtkCellRendererPixbuf < FFI::Struct
    layout :parent, GtkCellRenderer.by_value,
           :priv, GtkCellRendererPixbufPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellRendererClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererPixbufClass < FFI::Struct
    layout :parent_class, GtkCellRendererClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_pixbuf_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_pixbuf_get_type, :gtk_cell_renderer_pixbuf_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_pixbuf_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_pixbuf_new, :gtk_cell_renderer_pixbuf_new, [], GtkCellRenderer
  
  # (Not documented)
  class GtkCellRendererProgressPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkCellRenderer) 
  # :priv ::
  #   (GtkCellRendererProgressPrivate) < private >
  class GtkCellRendererProgress < FFI::Struct
    layout :parent_instance, GtkCellRenderer.by_value,
           :priv, GtkCellRendererProgressPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellRendererClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererProgressClass < FFI::Struct
    layout :parent_class, GtkCellRendererClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_progress_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_progress_get_type, :gtk_cell_renderer_progress_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_progress_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_progress_new, :gtk_cell_renderer_progress_new, [], GtkCellRenderer
  
  # (Not documented)
  class GtkCellRendererSpinPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRendererText) 
  # :priv ::
  #   (GtkCellRendererSpinPrivate) < private >
  class GtkCellRendererSpin < FFI::Struct
    layout :parent, GtkCellRendererText.by_value,
           :priv, GtkCellRendererSpinPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRendererTextClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererSpinClass < FFI::Struct
    layout :parent, GtkCellRendererTextClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_spin_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_spin_get_type, :gtk_cell_renderer_spin_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_spin_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_spin_new, :gtk_cell_renderer_spin_new, [], GtkCellRenderer
  
  # (Not documented)
  class GtkCellRendererSpinnerPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRenderer) 
  # :priv ::
  #   (GtkCellRendererSpinnerPrivate) < private >
  class GtkCellRendererSpinner < FFI::Struct
    layout :parent, GtkCellRenderer.by_value,
           :priv, GtkCellRendererSpinnerPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellRendererClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererSpinnerClass < FFI::Struct
    layout :parent_class, GtkCellRendererClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_spinner_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_spinner_get_type, :gtk_cell_renderer_spinner_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_spinner_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_spinner_new, :gtk_cell_renderer_spinner_new, [], GtkCellRenderer
  
  # (Not documented)
  class GtkCellRendererTogglePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkCellRenderer) 
  # :priv ::
  #   (GtkCellRendererTogglePrivate) < private >
  module GtkCellRendererToggleWrappers
    # @return [Integer] 
    def get_radio()
      Gtk.gtk_cell_renderer_toggle_get_radio(self)
    end
    
    # @param [Integer] radio 
    # @return [nil] 
    def set_radio(radio)
      Gtk.gtk_cell_renderer_toggle_set_radio(self, radio)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_cell_renderer_toggle_get_active(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_active(setting)
      Gtk.gtk_cell_renderer_toggle_set_active(self, setting)
    end
    
    # @return [Integer] 
    def get_activatable()
      Gtk.gtk_cell_renderer_toggle_get_activatable(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_activatable(setting)
      Gtk.gtk_cell_renderer_toggle_set_activatable(self, setting)
    end
  end
  
  class GtkCellRendererToggle < FFI::Struct
    include GtkCellRendererToggleWrappers
    layout :parent, GtkCellRenderer.by_value,
           :priv, GtkCellRendererTogglePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCellRendererClass) 
  # :toggled ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellRendererToggleClass < FFI::Struct
    layout :parent_class, GtkCellRendererClass.by_value,
           :toggled, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_get_type, :gtk_cell_renderer_toggle_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_new()
  # @return [GtkCellRenderer] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_new, :gtk_cell_renderer_toggle_new, [], GtkCellRenderer
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_get_radio(toggle)
  # @param [GtkCellRendererToggle] toggle 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_get_radio, :gtk_cell_renderer_toggle_get_radio, [GtkCellRendererToggle], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_set_radio(toggle, radio)
  # @param [GtkCellRendererToggle] toggle 
  # @param [Integer] radio 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_set_radio, :gtk_cell_renderer_toggle_set_radio, [GtkCellRendererToggle, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_get_active(toggle)
  # @param [GtkCellRendererToggle] toggle 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_get_active, :gtk_cell_renderer_toggle_get_active, [GtkCellRendererToggle], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_set_active(toggle, setting)
  # @param [GtkCellRendererToggle] toggle 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_set_active, :gtk_cell_renderer_toggle_set_active, [GtkCellRendererToggle, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_get_activatable(toggle)
  # @param [GtkCellRendererToggle] toggle 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_get_activatable, :gtk_cell_renderer_toggle_get_activatable, [GtkCellRendererToggle], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_toggle_set_activatable(toggle, setting)
  # @param [GtkCellRendererToggle] toggle 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_renderer_toggle_set_activatable, :gtk_cell_renderer_toggle_set_activatable, [GtkCellRendererToggle, :int], :void
  
  # (Not documented)
  class GtkCellViewPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkCellViewPrivate) < private >
  module GtkCellViewWrappers
    # @param [GtkTreeModel] model 
    # @return [nil] 
    def set_model(model)
      Gtk.gtk_cell_view_set_model(self, model)
    end
    
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_cell_view_get_model(self)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def set_displayed_row(path)
      Gtk.gtk_cell_view_set_displayed_row(self, path)
    end
    
    # @return [GtkTreePath] 
    def get_displayed_row()
      GtkTreePath.new Gtk.gtk_cell_view_get_displayed_row(self)
    end
    
    # @param [FFI::Pointer(*GdkRGBA)] rgba 
    # @return [nil] 
    def set_background_rgba(rgba)
      Gtk.gtk_cell_view_set_background_rgba(self, rgba)
    end
    
    # @return [Integer] 
    def get_draw_sensitive()
      Gtk.gtk_cell_view_get_draw_sensitive(self)
    end
    
    # @param [Integer] draw_sensitive 
    # @return [nil] 
    def set_draw_sensitive(draw_sensitive)
      Gtk.gtk_cell_view_set_draw_sensitive(self, draw_sensitive)
    end
    
    # @return [Integer] 
    def get_fit_model()
      Gtk.gtk_cell_view_get_fit_model(self)
    end
    
    # @param [Integer] fit_model 
    # @return [nil] 
    def set_fit_model(fit_model)
      Gtk.gtk_cell_view_set_fit_model(self, fit_model)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkRequisition] requisition 
    # @return [Integer] 
    def get_size_of_row(path, requisition)
      Gtk.gtk_cell_view_get_size_of_row(self, path, requisition)
    end
    
    # @param [FFI::Pointer(*GdkColor)] color 
    # @return [nil] 
    def set_background_color(color)
      Gtk.gtk_cell_view_set_background_color(self, color)
    end
  end
  
  class GtkCellView < FFI::Struct
    include GtkCellViewWrappers
    layout :parent_instance, GtkWidget.by_value,
           :priv, GtkCellViewPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCellViewClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_cell_view_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_view_get_type, :gtk_cell_view_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_view_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_cell_view_new, :gtk_cell_view_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_cell_view_new_with_context(area, context)
  # @param [GtkCellArea] area 
  # @param [GtkCellAreaContext] context 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_cell_view_new_with_context, :gtk_cell_view_new_with_context, [GtkCellArea, GtkCellAreaContext], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_cell_view_new_with_text(text)
  # @param [String] text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_cell_view_new_with_text, :gtk_cell_view_new_with_text, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_cell_view_new_with_markup(markup)
  # @param [String] markup 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_cell_view_new_with_markup, :gtk_cell_view_new_with_markup, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_cell_view_new_with_pixbuf(pixbuf)
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_cell_view_new_with_pixbuf, :gtk_cell_view_new_with_pixbuf, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_cell_view_set_model(cell_view, model)
  # @param [GtkCellView] cell_view 
  # @param [GtkTreeModel] model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_view_set_model, :gtk_cell_view_set_model, [GtkCellView, GtkTreeModel], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_view_get_model(cell_view)
  # @param [GtkCellView] cell_view 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_cell_view_get_model, :gtk_cell_view_get_model, [GtkCellView], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_cell_view_set_displayed_row(cell_view, path)
  # @param [GtkCellView] cell_view 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_view_set_displayed_row, :gtk_cell_view_set_displayed_row, [GtkCellView, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_view_get_displayed_row(cell_view)
  # @param [GtkCellView] cell_view 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_cell_view_get_displayed_row, :gtk_cell_view_get_displayed_row, [GtkCellView], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_cell_view_set_background_rgba(cell_view, rgba)
  # @param [GtkCellView] cell_view 
  # @param [FFI::Pointer(*GdkRGBA)] rgba 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_view_set_background_rgba, :gtk_cell_view_set_background_rgba, [GtkCellView, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_view_get_draw_sensitive(cell_view)
  # @param [GtkCellView] cell_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_view_get_draw_sensitive, :gtk_cell_view_get_draw_sensitive, [GtkCellView], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_view_set_draw_sensitive(cell_view, draw_sensitive)
  # @param [GtkCellView] cell_view 
  # @param [Integer] draw_sensitive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_view_set_draw_sensitive, :gtk_cell_view_set_draw_sensitive, [GtkCellView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_view_get_fit_model(cell_view)
  # @param [GtkCellView] cell_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_view_get_fit_model, :gtk_cell_view_get_fit_model, [GtkCellView], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_view_set_fit_model(cell_view, fit_model)
  # @param [GtkCellView] cell_view 
  # @param [Integer] fit_model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_view_set_fit_model, :gtk_cell_view_set_fit_model, [GtkCellView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_cell_view_get_size_of_row(cell_view, path, requisition)
  # @param [GtkCellView] cell_view 
  # @param [GtkTreePath] path 
  # @param [GtkRequisition] requisition 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_view_get_size_of_row, :gtk_cell_view_get_size_of_row, [GtkCellView, GtkTreePath, GtkRequisition], :int
  
  # (Not documented)
  # 
  # @method gtk_cell_view_set_background_color(cell_view, color)
  # @param [GtkCellView] cell_view 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_cell_view_set_background_color, :gtk_cell_view_set_background_color, [GtkCellView, :pointer], :void
  
  # (Not documented)
  class GtkToggleButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :button ::
  #   (GtkButton) < private >
  # :priv ::
  #   (GtkToggleButtonPrivate) 
  module GtkToggleButtonWrappers
    # @param [Integer] draw_indicator 
    # @return [nil] 
    def set_mode(draw_indicator)
      Gtk.gtk_toggle_button_set_mode(self, draw_indicator)
    end
    
    # @return [Integer] 
    def get_mode()
      Gtk.gtk_toggle_button_get_mode(self)
    end
    
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_toggle_button_set_active(self, is_active)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_toggle_button_get_active(self)
    end
    
    # @return [nil] 
    def toggled()
      Gtk.gtk_toggle_button_toggled(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_inconsistent(setting)
      Gtk.gtk_toggle_button_set_inconsistent(self, setting)
    end
    
    # @return [Integer] 
    def get_inconsistent()
      Gtk.gtk_toggle_button_get_inconsistent(self)
    end
    
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_toggle_button_set_active(self, is_active)
    end
  end
  
  class GtkToggleButton < FFI::Struct
    include GtkToggleButtonWrappers
    layout :button, GtkButton.by_value,
           :priv, GtkToggleButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkButtonClass) 
  # :toggled ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToggleButtonClass < FFI::Struct
    layout :parent_class, GtkButtonClass.by_value,
           :toggled, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_button_get_type, :gtk_toggle_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_toggle_button_new, :gtk_toggle_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_new_with_label(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_toggle_button_new_with_label, :gtk_toggle_button_new_with_label, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_toggle_button_new_with_mnemonic, :gtk_toggle_button_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_set_mode(toggle_button, draw_indicator)
  # @param [GtkToggleButton] toggle_button 
  # @param [Integer] draw_indicator 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_button_set_mode, :gtk_toggle_button_set_mode, [GtkToggleButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_get_mode(toggle_button)
  # @param [GtkToggleButton] toggle_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_button_get_mode, :gtk_toggle_button_get_mode, [GtkToggleButton], :int
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_set_active(toggle_button, is_active)
  # @param [GtkToggleButton] toggle_button 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_button_set_active, :gtk_toggle_button_set_active, [GtkToggleButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_get_active(toggle_button)
  # @param [GtkToggleButton] toggle_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_button_get_active, :gtk_toggle_button_get_active, [GtkToggleButton], :int
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_toggled(toggle_button)
  # @param [GtkToggleButton] toggle_button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_button_toggled, :gtk_toggle_button_toggled, [GtkToggleButton], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_set_inconsistent(toggle_button, setting)
  # @param [GtkToggleButton] toggle_button 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_button_set_inconsistent, :gtk_toggle_button_set_inconsistent, [GtkToggleButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_get_inconsistent(toggle_button)
  # @param [GtkToggleButton] toggle_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_button_get_inconsistent, :gtk_toggle_button_get_inconsistent, [GtkToggleButton], :int
  
  # (Not documented)
  # 
  # @method gtk_toggle_button_set_active(toggle_button, is_active)
  # @param [GtkToggleButton] toggle_button 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_button_set_active, :_gtk_toggle_button_set_active, [GtkToggleButton, :int], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :toggle_button ::
  #   (GtkToggleButton) 
  module GtkCheckButtonWrappers
    # @param [FFI::Pointer(*Gint)] indicator_size 
    # @param [FFI::Pointer(*Gint)] indicator_spacing 
    # @return [nil] 
    def get_props(indicator_size, indicator_spacing)
      Gtk.gtk_check_button_get_props(self, indicator_size, indicator_spacing)
    end
  end
  
  class GtkCheckButton < FFI::Struct
    include GtkCheckButtonWrappers
    layout :toggle_button, GtkToggleButton.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToggleButtonClass) 
  # :draw_indicator ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCheckButtonClass < FFI::Struct
    layout :parent_class, GtkToggleButtonClass.by_value,
           :draw_indicator, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_check_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_check_button_get_type, :gtk_check_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_check_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_check_button_new, :gtk_check_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_check_button_new_with_label(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_check_button_new_with_label, :gtk_check_button_new_with_label, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_check_button_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_check_button_new_with_mnemonic, :gtk_check_button_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_check_button_get_props(check_button, indicator_size, indicator_spacing)
  # @param [GtkCheckButton] check_button 
  # @param [FFI::Pointer(*Gint)] indicator_size 
  # @param [FFI::Pointer(*Gint)] indicator_spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_check_button_get_props, :_gtk_check_button_get_props, [GtkCheckButton, :pointer, :pointer], :void
  
  # (Not documented)
  class GtkMenuItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkMenuItemPrivate) < private >
  module GtkMenuItemWrappers
    # @param [GtkWidget] submenu 
    # @return [nil] 
    def set_submenu(submenu)
      Gtk.gtk_menu_item_set_submenu(self, submenu)
    end
    
    # @return [GtkWidget] 
    def get_submenu()
      GtkWidget.new Gtk.gtk_menu_item_get_submenu(self)
    end
    
    # @return [nil] 
    def select()
      Gtk.gtk_menu_item_select(self)
    end
    
    # @return [nil] 
    def deselect()
      Gtk.gtk_menu_item_deselect(self)
    end
    
    # @return [nil] 
    def activate()
      Gtk.gtk_menu_item_activate(self)
    end
    
    # @param [FFI::Pointer(*Gint)] requisition 
    # @return [nil] 
    def toggle_size_request(requisition)
      Gtk.gtk_menu_item_toggle_size_request(self, requisition)
    end
    
    # @param [Integer] allocation 
    # @return [nil] 
    def toggle_size_allocate(allocation)
      Gtk.gtk_menu_item_toggle_size_allocate(self, allocation)
    end
    
    # @param [Integer] right_justified 
    # @return [nil] 
    def set_right_justified(right_justified)
      Gtk.gtk_menu_item_set_right_justified(self, right_justified)
    end
    
    # @return [Integer] 
    def get_right_justified()
      Gtk.gtk_menu_item_get_right_justified(self)
    end
    
    # @param [String] accel_path 
    # @return [nil] 
    def set_accel_path(accel_path)
      Gtk.gtk_menu_item_set_accel_path(self, accel_path)
    end
    
    # @return [String] 
    def get_accel_path()
      Gtk.gtk_menu_item_get_accel_path(self)
    end
    
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_menu_item_set_label(self, label)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_menu_item_get_label(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_use_underline(setting)
      Gtk.gtk_menu_item_set_use_underline(self, setting)
    end
    
    # @return [Integer] 
    def get_use_underline()
      Gtk.gtk_menu_item_get_use_underline(self)
    end
    
    # @param [Integer] reserve 
    # @return [nil] 
    def set_reserve_indicator(reserve)
      Gtk.gtk_menu_item_set_reserve_indicator(self, reserve)
    end
    
    # @return [Integer] 
    def get_reserve_indicator()
      Gtk.gtk_menu_item_get_reserve_indicator(self)
    end
  end
  
  class GtkMenuItem < FFI::Struct
    include GtkMenuItemWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkMenuItemPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :hide_on_activate ::
  #   (Integer) If the following flag is true, then we should always
  #   hide the menu when the MenuItem is activated. Otherwise,
  #   it is up to the caller. For instance, when navigating
  #   a menu with the keyboard, <Space> doesn't hide, but
  #   <Return> does.
  # :activate ::
  #   (FFI::Pointer(*)) 
  # :activate_item ::
  #   (FFI::Pointer(*)) 
  # :toggle_size_request ::
  #   (FFI::Pointer(*)) 
  # :toggle_size_allocate ::
  #   (FFI::Pointer(*)) 
  # :set_label ::
  #   (FFI::Pointer(*)) 
  # :get_label ::
  #   (FFI::Pointer(*)) 
  # :select ::
  #   (FFI::Pointer(*)) 
  # :deselect ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMenuItemClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :hide_on_activate, :uint,
           :activate, :pointer,
           :activate_item, :pointer,
           :toggle_size_request, :pointer,
           :toggle_size_allocate, :pointer,
           :set_label, :pointer,
           :get_label, :pointer,
           :select, :pointer,
           :deselect, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_item_get_type, :gtk_menu_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_item_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_item_new, :gtk_menu_item_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_item_new_with_label(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_item_new_with_label, :gtk_menu_item_new_with_label, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_item_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_item_new_with_mnemonic, :gtk_menu_item_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_item_set_submenu(menu_item, submenu)
  # @param [GtkMenuItem] menu_item 
  # @param [GtkWidget] submenu 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_set_submenu, :gtk_menu_item_set_submenu, [GtkMenuItem, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_submenu(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_item_get_submenu, :gtk_menu_item_get_submenu, [GtkMenuItem], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_item_select(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_select, :gtk_menu_item_select, [GtkMenuItem], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_deselect(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_deselect, :gtk_menu_item_deselect, [GtkMenuItem], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_activate(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_activate, :gtk_menu_item_activate, [GtkMenuItem], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_toggle_size_request(menu_item, requisition)
  # @param [GtkMenuItem] menu_item 
  # @param [FFI::Pointer(*Gint)] requisition 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_toggle_size_request, :gtk_menu_item_toggle_size_request, [GtkMenuItem, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_toggle_size_allocate(menu_item, allocation)
  # @param [GtkMenuItem] menu_item 
  # @param [Integer] allocation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_toggle_size_allocate, :gtk_menu_item_toggle_size_allocate, [GtkMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_set_right_justified(menu_item, right_justified)
  # @param [GtkMenuItem] menu_item 
  # @param [Integer] right_justified 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_set_right_justified, :gtk_menu_item_set_right_justified, [GtkMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_right_justified(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_item_get_right_justified, :gtk_menu_item_get_right_justified, [GtkMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_menu_item_set_accel_path(menu_item, accel_path)
  # @param [GtkMenuItem] menu_item 
  # @param [String] accel_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_set_accel_path, :gtk_menu_item_set_accel_path, [GtkMenuItem, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_accel_path(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [String] 
  # @scope class
  attach_function :gtk_menu_item_get_accel_path, :gtk_menu_item_get_accel_path, [GtkMenuItem], :string
  
  # (Not documented)
  # 
  # @method gtk_menu_item_set_label(menu_item, label)
  # @param [GtkMenuItem] menu_item 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_set_label, :gtk_menu_item_set_label, [GtkMenuItem, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_label(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [String] 
  # @scope class
  attach_function :gtk_menu_item_get_label, :gtk_menu_item_get_label, [GtkMenuItem], :string
  
  # (Not documented)
  # 
  # @method gtk_menu_item_set_use_underline(menu_item, setting)
  # @param [GtkMenuItem] menu_item 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_set_use_underline, :gtk_menu_item_set_use_underline, [GtkMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_use_underline(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_item_get_use_underline, :gtk_menu_item_get_use_underline, [GtkMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_menu_item_set_reserve_indicator(menu_item, reserve)
  # @param [GtkMenuItem] menu_item 
  # @param [Integer] reserve 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_item_set_reserve_indicator, :gtk_menu_item_set_reserve_indicator, [GtkMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_item_get_reserve_indicator(menu_item)
  # @param [GtkMenuItem] menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_item_get_reserve_indicator, :gtk_menu_item_get_reserve_indicator, [GtkMenuItem], :int
  
  # (Not documented)
  class GtkCheckMenuItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :menu_item ::
  #   (GtkMenuItem) 
  # :priv ::
  #   (GtkCheckMenuItemPrivate) < private >
  module GtkCheckMenuItemWrappers
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_check_menu_item_set_active(self, is_active)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_check_menu_item_get_active(self)
    end
    
    # @return [nil] 
    def toggled()
      Gtk.gtk_check_menu_item_toggled(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_inconsistent(setting)
      Gtk.gtk_check_menu_item_set_inconsistent(self, setting)
    end
    
    # @return [Integer] 
    def get_inconsistent()
      Gtk.gtk_check_menu_item_get_inconsistent(self)
    end
    
    # @param [Integer] draw_as_radio 
    # @return [nil] 
    def set_draw_as_radio(draw_as_radio)
      Gtk.gtk_check_menu_item_set_draw_as_radio(self, draw_as_radio)
    end
    
    # @return [Integer] 
    def get_draw_as_radio()
      Gtk.gtk_check_menu_item_get_draw_as_radio(self)
    end
    
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_check_menu_item_set_active(self, is_active)
    end
  end
  
  class GtkCheckMenuItem < FFI::Struct
    include GtkCheckMenuItemWrappers
    layout :menu_item, GtkMenuItem.by_value,
           :priv, GtkCheckMenuItemPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMenuItemClass) 
  # :toggled ::
  #   (FFI::Pointer(*)) 
  # :draw_indicator ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCheckMenuItemClass < FFI::Struct
    layout :parent_class, GtkMenuItemClass.by_value,
           :toggled, :pointer,
           :draw_indicator, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_check_menu_item_get_type, :gtk_check_menu_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_check_menu_item_new, :gtk_check_menu_item_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_new_with_label(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_check_menu_item_new_with_label, :gtk_check_menu_item_new_with_label, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_check_menu_item_new_with_mnemonic, :gtk_check_menu_item_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_set_active(check_menu_item, is_active)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_check_menu_item_set_active, :gtk_check_menu_item_set_active, [GtkCheckMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_get_active(check_menu_item)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_check_menu_item_get_active, :gtk_check_menu_item_get_active, [GtkCheckMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_toggled(check_menu_item)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_check_menu_item_toggled, :gtk_check_menu_item_toggled, [GtkCheckMenuItem], :void
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_set_inconsistent(check_menu_item, setting)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_check_menu_item_set_inconsistent, :gtk_check_menu_item_set_inconsistent, [GtkCheckMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_get_inconsistent(check_menu_item)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_check_menu_item_get_inconsistent, :gtk_check_menu_item_get_inconsistent, [GtkCheckMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_set_draw_as_radio(check_menu_item, draw_as_radio)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @param [Integer] draw_as_radio 
  # @return [nil] 
  # @scope class
  attach_function :gtk_check_menu_item_set_draw_as_radio, :gtk_check_menu_item_set_draw_as_radio, [GtkCheckMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_get_draw_as_radio(check_menu_item)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_check_menu_item_get_draw_as_radio, :gtk_check_menu_item_get_draw_as_radio, [GtkCheckMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_check_menu_item_set_active(check_menu_item, is_active)
  # @param [GtkCheckMenuItem] check_menu_item 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_check_menu_item_set_active, :_gtk_check_menu_item_set_active, [GtkCheckMenuItem, :int], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_received_func_(selection_data, data)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_received_func, [GtkSelectionData, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_text_received_func_(text, data)
  # @param [String] text 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_text_received_func, [:string, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_rich_text_received_func_(format, text, length, data)
  # @param [FFI::Pointer(GdkAtom)] format 
  # @param [FFI::Pointer(*Guint8)] text 
  # @param [Integer] length 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_rich_text_received_func, [:pointer, :pointer, :uint, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_image_received_func_(pixbuf, data)
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_image_received_func, [:pointer, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_uri_received_func_(uris, data)
  # @param [FFI::Pointer(**Gchar)] uris 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_uri_received_func, [:pointer, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_targets_received_func_(atoms, n_atoms, data)
  # @param [FFI::Pointer(*GdkAtom)] atoms 
  # @param [Integer] n_atoms 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_targets_received_func, [:pointer, :int, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_get_func_(selection_data, info, user_data_or_owner)
  # @param [GtkSelectionData] selection_data 
  # @param [Integer] info 
  # @param [FFI::Pointer(Gpointer)] user_data_or_owner 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_get_func, [GtkSelectionData, :uint, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_clipboard_clear_func_(user_data_or_owner)
  # @param [FFI::Pointer(Gpointer)] user_data_or_owner 
  # @return [GtkClipboard] 
  # @scope class
  callback :gtk_clipboard_clear_func, [:pointer], GtkClipboard
  
  # (Not documented)
  # 
  # @method gtk_clipboard_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_get_type, :gtk_clipboard_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_clipboard_get_for_display(display, selection)
  # @param [FFI::Pointer(*GdkDisplay)] display 
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @return [GtkClipboard] 
  # @scope class
  attach_function :gtk_clipboard_get_for_display, :gtk_clipboard_get_for_display, [:pointer, :pointer], GtkClipboard
  
  # (Not documented)
  # 
  # @method gtk_clipboard_get(selection)
  # @param [FFI::Pointer(GdkAtom)] selection 
  # @return [GtkClipboard] 
  # @scope class
  attach_function :gtk_clipboard_get, :gtk_clipboard_get, [:pointer], GtkClipboard
  
  # (Not documented)
  # 
  # @method gtk_clipboard_get_display(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [FFI::Pointer(*GdkDisplay)] 
  # @scope class
  attach_function :gtk_clipboard_get_display, :gtk_clipboard_get_display, [GtkClipboard], :pointer
  
  # (Not documented)
  # 
  # @method gtk_clipboard_set_with_data(clipboard, targets, n_targets, get_func, clear_func, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [Proc(_callback_gtk_clipboard_get_func_)] get_func 
  # @param [Proc(_callback_gtk_clipboard_clear_func_)] clear_func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_set_with_data, :gtk_clipboard_set_with_data, [GtkClipboard, GtkTargetEntry, :uint, :gtk_clipboard_get_func, :gtk_clipboard_clear_func, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_set_with_owner(clipboard, targets, n_targets, get_func, clear_func, owner)
  # @param [GtkClipboard] clipboard 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [Proc(_callback_gtk_clipboard_get_func_)] get_func 
  # @param [Proc(_callback_gtk_clipboard_clear_func_)] clear_func 
  # @param [FFI::Pointer(*GObject)] owner 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_set_with_owner, :gtk_clipboard_set_with_owner, [GtkClipboard, GtkTargetEntry, :uint, :gtk_clipboard_get_func, :gtk_clipboard_clear_func, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_get_owner(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [FFI::Pointer(*GObject)] 
  # @scope class
  attach_function :gtk_clipboard_get_owner, :gtk_clipboard_get_owner, [GtkClipboard], :pointer
  
  # (Not documented)
  # 
  # @method gtk_clipboard_clear(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_clear, :gtk_clipboard_clear, [GtkClipboard], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_set_text(clipboard, text, len)
  # @param [GtkClipboard] clipboard 
  # @param [String] text 
  # @param [Integer] len 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_set_text, :gtk_clipboard_set_text, [GtkClipboard, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_set_image(clipboard, pixbuf)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_set_image, :gtk_clipboard_set_image, [GtkClipboard, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_request_contents(clipboard, target, callback, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @param [Proc(_callback_gtk_clipboard_received_func_)] callback 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_request_contents, :gtk_clipboard_request_contents, [GtkClipboard, :pointer, :gtk_clipboard_received_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_request_text(clipboard, callback, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [Proc(_callback_gtk_clipboard_text_received_func_)] callback 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_request_text, :gtk_clipboard_request_text, [GtkClipboard, :gtk_clipboard_text_received_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_request_rich_text(clipboard, buffer, callback, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
  # @param [Proc(_callback_gtk_clipboard_rich_text_received_func_)] callback 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_request_rich_text, :gtk_clipboard_request_rich_text, [GtkClipboard, :pointer, :gtk_clipboard_rich_text_received_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_request_image(clipboard, callback, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [Proc(_callback_gtk_clipboard_image_received_func_)] callback 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_request_image, :gtk_clipboard_request_image, [GtkClipboard, :gtk_clipboard_image_received_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_request_uris(clipboard, callback, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [Proc(_callback_gtk_clipboard_uri_received_func_)] callback 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_request_uris, :gtk_clipboard_request_uris, [GtkClipboard, :gtk_clipboard_uri_received_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_request_targets(clipboard, callback, user_data)
  # @param [GtkClipboard] clipboard 
  # @param [Proc(_callback_gtk_clipboard_targets_received_func_)] callback 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_request_targets, :gtk_clipboard_request_targets, [GtkClipboard, :gtk_clipboard_targets_received_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_for_contents(clipboard, target)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @return [GtkSelectionData] 
  # @scope class
  attach_function :gtk_clipboard_wait_for_contents, :gtk_clipboard_wait_for_contents, [GtkClipboard, :pointer], GtkSelectionData
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_for_text(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [String] 
  # @scope class
  attach_function :gtk_clipboard_wait_for_text, :gtk_clipboard_wait_for_text, [GtkClipboard], :string
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_for_rich_text(clipboard, buffer, format, length)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
  # @param [FFI::Pointer(*GdkAtom)] format 
  # @param [FFI::Pointer(*Gsize)] length 
  # @return [FFI::Pointer(*Guint8)] 
  # @scope class
  attach_function :gtk_clipboard_wait_for_rich_text, :gtk_clipboard_wait_for_rich_text, [GtkClipboard, :pointer, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_for_image(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_clipboard_wait_for_image, :gtk_clipboard_wait_for_image, [GtkClipboard], :pointer
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_for_uris(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_clipboard_wait_for_uris, :gtk_clipboard_wait_for_uris, [GtkClipboard], :pointer
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_for_targets(clipboard, targets, n_targets)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(**GdkAtom)] targets 
  # @param [FFI::Pointer(*Gint)] n_targets 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_wait_for_targets, :gtk_clipboard_wait_for_targets, [GtkClipboard, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_is_text_available(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_wait_is_text_available, :gtk_clipboard_wait_is_text_available, [GtkClipboard], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_is_rich_text_available(clipboard, buffer)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(*GtkTextBuffer)] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_wait_is_rich_text_available, :gtk_clipboard_wait_is_rich_text_available, [GtkClipboard, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_is_image_available(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_wait_is_image_available, :gtk_clipboard_wait_is_image_available, [GtkClipboard], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_is_uris_available(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_wait_is_uris_available, :gtk_clipboard_wait_is_uris_available, [GtkClipboard], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_wait_is_target_available(clipboard, target)
  # @param [GtkClipboard] clipboard 
  # @param [FFI::Pointer(GdkAtom)] target 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_clipboard_wait_is_target_available, :gtk_clipboard_wait_is_target_available, [GtkClipboard, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_clipboard_set_can_store(clipboard, targets, n_targets)
  # @param [GtkClipboard] clipboard 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_set_can_store, :gtk_clipboard_set_can_store, [GtkClipboard, GtkTargetEntry, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_store(clipboard)
  # @param [GtkClipboard] clipboard 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_store, :gtk_clipboard_store, [GtkClipboard], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_handle_event(event)
  # @param [FFI::Pointer(*GdkEventOwnerChange)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_handle_event, :_gtk_clipboard_handle_event, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_clipboard_store_all()
  # @return [nil] 
  # @scope class
  attach_function :gtk_clipboard_store_all, :_gtk_clipboard_store_all, [], :void
  
  # (Not documented)
  class GtkColorButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :button ::
  #   (GtkButton) 
  # :priv ::
  #   (GtkColorButtonPrivate) < private >
  module GtkColorButtonWrappers
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_color_button_set_title(self, title)
    end
    
    # @return [String] 
    def get_title()
      Gtk.gtk_color_button_get_title(self)
    end
    
    # @param [FFI::Pointer(*GdkColor)] color 
    # @return [nil] 
    def set_color(color)
      Gtk.gtk_color_button_set_color(self, color)
    end
    
    # @param [FFI::Pointer(*GdkColor)] color 
    # @return [nil] 
    def get_color(color)
      Gtk.gtk_color_button_get_color(self, color)
    end
    
    # @param [Integer] alpha 
    # @return [nil] 
    def set_alpha(alpha)
      Gtk.gtk_color_button_set_alpha(self, alpha)
    end
    
    # @return [Integer] 
    def get_alpha()
      Gtk.gtk_color_button_get_alpha(self)
    end
    
    # @param [Integer] use_alpha 
    # @return [nil] 
    def set_use_alpha(use_alpha)
      Gtk.gtk_color_button_set_use_alpha(self, use_alpha)
    end
    
    # @return [Integer] 
    def get_use_alpha()
      Gtk.gtk_color_button_get_use_alpha(self)
    end
    
    # @param [FFI::Pointer(*GdkRGBA)] rgba 
    # @return [nil] 
    def set_rgba(rgba)
      Gtk.gtk_color_button_set_rgba(self, rgba)
    end
    
    # @param [FFI::Pointer(*GdkRGBA)] rgba 
    # @return [nil] 
    def get_rgba(rgba)
      Gtk.gtk_color_button_get_rgba(self, rgba)
    end
  end
  
  class GtkColorButton < FFI::Struct
    include GtkColorButtonWrappers
    layout :button, GtkButton.by_value,
           :priv, GtkColorButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkButtonClass) 
  # :color_set ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkColorButtonClass < FFI::Struct
    layout :parent_class, GtkButtonClass.by_value,
           :color_set, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_color_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_button_get_type, :gtk_color_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_color_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_color_button_new, :gtk_color_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_color_button_new_with_rgba(rgba)
  # @param [FFI::Pointer(*GdkRGBA)] rgba 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_color_button_new_with_rgba, :gtk_color_button_new_with_rgba, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_color_button_set_title(button, title)
  # @param [GtkColorButton] button 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_set_title, :gtk_color_button_set_title, [GtkColorButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_color_button_get_title(button)
  # @param [GtkColorButton] button 
  # @return [String] 
  # @scope class
  attach_function :gtk_color_button_get_title, :gtk_color_button_get_title, [GtkColorButton], :string
  
  # (Not documented)
  # 
  # @method gtk_color_button_new_with_color(color)
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_color_button_new_with_color, :gtk_color_button_new_with_color, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_color_button_set_color(button, color)
  # @param [GtkColorButton] button 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_set_color, :gtk_color_button_set_color, [GtkColorButton, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_color_button_get_color(button, color)
  # @param [GtkColorButton] button 
  # @param [FFI::Pointer(*GdkColor)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_get_color, :gtk_color_button_get_color, [GtkColorButton, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_color_button_set_alpha(button, alpha)
  # @param [GtkColorButton] button 
  # @param [Integer] alpha 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_set_alpha, :gtk_color_button_set_alpha, [GtkColorButton, :ushort], :void
  
  # (Not documented)
  # 
  # @method gtk_color_button_get_alpha(button)
  # @param [GtkColorButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_button_get_alpha, :gtk_color_button_get_alpha, [GtkColorButton], :ushort
  
  # (Not documented)
  # 
  # @method gtk_color_button_set_use_alpha(button, use_alpha)
  # @param [GtkColorButton] button 
  # @param [Integer] use_alpha 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_set_use_alpha, :gtk_color_button_set_use_alpha, [GtkColorButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_color_button_get_use_alpha(button)
  # @param [GtkColorButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_button_get_use_alpha, :gtk_color_button_get_use_alpha, [GtkColorButton], :int
  
  # (Not documented)
  # 
  # @method gtk_color_button_set_rgba(button, rgba)
  # @param [GtkColorButton] button 
  # @param [FFI::Pointer(*GdkRGBA)] rgba 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_set_rgba, :gtk_color_button_set_rgba, [GtkColorButton, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_color_button_get_rgba(button, rgba)
  # @param [GtkColorButton] button 
  # @param [FFI::Pointer(*GdkRGBA)] rgba 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_button_get_rgba, :gtk_color_button_get_rgba, [GtkColorButton, :pointer], :void
  
  # (Not documented)
  module GtkColorChooserWrappers
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_rgba(color)
      Gtk.gtk_color_chooser_get_rgba(self, color)
    end
    
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def set_rgba(color)
      Gtk.gtk_color_chooser_set_rgba(self, color)
    end
    
    # @return [Integer] 
    def get_use_alpha()
      Gtk.gtk_color_chooser_get_use_alpha(self)
    end
    
    # @param [Integer] use_alpha 
    # @return [nil] 
    def set_use_alpha(use_alpha)
      Gtk.gtk_color_chooser_set_use_alpha(self, use_alpha)
    end
    
    # @param [Symbol from _enum_gtk_orientation_] orientation 
    # @param [Integer] colors_per_line 
    # @param [Integer] n_colors 
    # @param [FFI::Pointer(*GdkRGBA)] colors 
    # @return [nil] 
    def add_palette(orientation, colors_per_line, n_colors, colors)
      Gtk.gtk_color_chooser_add_palette(self, orientation, colors_per_line, n_colors, colors)
    end
  end
  
  class GtkColorChooser < FFI::Struct
    include GtkColorChooserWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base_interface ::
  #   (unknown) 
  # :get_rgba ::
  #   (FFI::Pointer(*)) Methods
  # :set_rgba ::
  #   (FFI::Pointer(*)) 
  # :add_palette ::
  #   (FFI::Pointer(*)) 
  # :color_activated ::
  #   (FFI::Pointer(*)) Signals
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) Padding
  class GtkColorChooserInterface < FFI::Struct
    layout :base_interface, :char,
           :get_rgba, :pointer,
           :set_rgba, :pointer,
           :add_palette, :pointer,
           :color_activated, :pointer,
           :padding, [:pointer, 12]
  end
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_chooser_get_type, :gtk_color_chooser_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_get_rgba(chooser, color)
  # @param [GtkColorChooser] chooser 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_chooser_get_rgba, :gtk_color_chooser_get_rgba, [GtkColorChooser, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_set_rgba(chooser, color)
  # @param [GtkColorChooser] chooser 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_chooser_set_rgba, :gtk_color_chooser_set_rgba, [GtkColorChooser, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_get_use_alpha(chooser)
  # @param [GtkColorChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_chooser_get_use_alpha, :gtk_color_chooser_get_use_alpha, [GtkColorChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_set_use_alpha(chooser, use_alpha)
  # @param [GtkColorChooser] chooser 
  # @param [Integer] use_alpha 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_chooser_set_use_alpha, :gtk_color_chooser_set_use_alpha, [GtkColorChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_add_palette(chooser, orientation, colors_per_line, n_colors, colors)
  # @param [GtkColorChooser] chooser 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @param [Integer] colors_per_line 
  # @param [Integer] n_colors 
  # @param [FFI::Pointer(*GdkRGBA)] colors 
  # @return [nil] 
  # @scope class
  attach_function :gtk_color_chooser_add_palette, :gtk_color_chooser_add_palette, [GtkColorChooser, :gtk_orientation, :int, :int, :pointer], :void
  
  # (Not documented)
  class GtkColorChooserDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkColorChooserDialogPrivate) < private >
  class GtkColorChooserDialog < FFI::Struct
    layout :parent_instance, GtkDialog.by_value,
           :priv, GtkColorChooserDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkColorChooserDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_chooser_dialog_get_type, :gtk_color_chooser_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_dialog_new(title, parent)
  # @param [String] title 
  # @param [GtkWindow] parent 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_color_chooser_dialog_new, :gtk_color_chooser_dialog_new, [:string, GtkWindow], GtkWidget
  
  # (Not documented)
  class GtkColorChooserWidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkColorChooserWidgetPrivate) < private >
  class GtkColorChooserWidget < FFI::Struct
    layout :parent_instance, GtkBox.by_value,
           :priv, GtkColorChooserWidgetPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkColorChooserWidgetClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_color_chooser_widget_get_type, :gtk_color_chooser_widget_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_color_chooser_widget_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_color_chooser_widget_new, :gtk_color_chooser_widget_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_hsv_to_rgb(h, s, v, r, g, b)
  # @param [Float] h 
  # @param [Float] s 
  # @param [Float] v 
  # @param [FFI::Pointer(*Gdouble)] r 
  # @param [FFI::Pointer(*Gdouble)] g 
  # @param [FFI::Pointer(*Gdouble)] b 
  # @return [nil] 
  # @scope class
  attach_function :gtk_hsv_to_rgb, :gtk_hsv_to_rgb, [:double, :double, :double, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_rgb_to_hsv(r, g, b, h, s, v)
  # @param [Float] r 
  # @param [Float] g 
  # @param [Float] b 
  # @param [FFI::Pointer(*Gdouble)] h 
  # @param [FFI::Pointer(*Gdouble)] s 
  # @param [FFI::Pointer(*Gdouble)] v 
  # @return [nil] 
  # @scope class
  attach_function :gtk_rgb_to_hsv, :gtk_rgb_to_hsv, [:double, :double, :double, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  class GtkComboBoxTextPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkComboBox) < private >
  # :priv ::
  #   (GtkComboBoxTextPrivate) 
  module GtkComboBoxTextWrappers
    # @param [String] text 
    # @return [nil] 
    def append_text(text)
      Gtk.gtk_combo_box_text_append_text(self, text)
    end
    
    # @param [Integer] position 
    # @param [String] text 
    # @return [nil] 
    def insert_text(position, text)
      Gtk.gtk_combo_box_text_insert_text(self, position, text)
    end
    
    # @param [String] text 
    # @return [nil] 
    def prepend_text(text)
      Gtk.gtk_combo_box_text_prepend_text(self, text)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def remove(position)
      Gtk.gtk_combo_box_text_remove(self, position)
    end
    
    # @return [nil] 
    def remove_all()
      Gtk.gtk_combo_box_text_remove_all(self)
    end
    
    # @return [String] 
    def get_active_text()
      Gtk.gtk_combo_box_text_get_active_text(self)
    end
    
    # @param [Integer] position 
    # @param [String] id 
    # @param [String] text 
    # @return [nil] 
    def insert(position, id, text)
      Gtk.gtk_combo_box_text_insert(self, position, id, text)
    end
    
    # @param [String] id 
    # @param [String] text 
    # @return [nil] 
    def append(id, text)
      Gtk.gtk_combo_box_text_append(self, id, text)
    end
    
    # @param [String] id 
    # @param [String] text 
    # @return [nil] 
    def prepend(id, text)
      Gtk.gtk_combo_box_text_prepend(self, id, text)
    end
  end
  
  class GtkComboBoxText < FFI::Struct
    include GtkComboBoxTextWrappers
    layout :parent_instance, GtkComboBox.by_value,
           :priv, GtkComboBoxTextPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkComboBoxClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkComboBoxTextClass < FFI::Struct
    layout :parent_class, GtkComboBoxClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_combo_box_text_get_type, :gtk_combo_box_text_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_text_new, :gtk_combo_box_text_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_new_with_entry()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_combo_box_text_new_with_entry, :gtk_combo_box_text_new_with_entry, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_append_text(combo_box, text)
  # @param [GtkComboBoxText] combo_box 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_append_text, :gtk_combo_box_text_append_text, [GtkComboBoxText, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_insert_text(combo_box, position, text)
  # @param [GtkComboBoxText] combo_box 
  # @param [Integer] position 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_insert_text, :gtk_combo_box_text_insert_text, [GtkComboBoxText, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_prepend_text(combo_box, text)
  # @param [GtkComboBoxText] combo_box 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_prepend_text, :gtk_combo_box_text_prepend_text, [GtkComboBoxText, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_remove(combo_box, position)
  # @param [GtkComboBoxText] combo_box 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_remove, :gtk_combo_box_text_remove, [GtkComboBoxText, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_remove_all(combo_box)
  # @param [GtkComboBoxText] combo_box 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_remove_all, :gtk_combo_box_text_remove_all, [GtkComboBoxText], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_get_active_text(combo_box)
  # @param [GtkComboBoxText] combo_box 
  # @return [String] 
  # @scope class
  attach_function :gtk_combo_box_text_get_active_text, :gtk_combo_box_text_get_active_text, [GtkComboBoxText], :string
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_insert(combo_box, position, id, text)
  # @param [GtkComboBoxText] combo_box 
  # @param [Integer] position 
  # @param [String] id 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_insert, :gtk_combo_box_text_insert, [GtkComboBoxText, :int, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_append(combo_box, id, text)
  # @param [GtkComboBoxText] combo_box 
  # @param [String] id 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_append, :gtk_combo_box_text_append, [GtkComboBoxText, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_combo_box_text_prepend(combo_box, id, text)
  # @param [GtkComboBoxText] combo_box 
  # @param [String] id 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_combo_box_text_prepend, :gtk_combo_box_text_prepend, [GtkComboBoxText, :string, :string], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_css_section_type).</em>
  # 
  # === Options:
  # :document ::
  #   
  # :import ::
  #   
  # :color_definition ::
  #   
  # :binding_set ::
  #   
  # :ruleset ::
  #   
  # :selector ::
  #   
  # :declaration ::
  #   
  # :value ::
  #   
  # :keyframes ::
  #   
  # 
  # @method _enum_gtk_css_section_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_css_section_type, [
    :document, 0,
    :import, 1,
    :color_definition, 2,
    :binding_set, 3,
    :ruleset, 4,
    :selector, 5,
    :declaration, 6,
    :value, 7,
    :keyframes, 8
  ]
  
  # (Not documented)
  module GtkCssSectionWrappers
    # @return [GtkCssSection] 
    def ref()
      GtkCssSection.new Gtk.gtk_css_section_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_css_section_unref(self)
    end
    
    # @return [Symbol from _enum_gtk_css_section_type_] 
    def get_section_type()
      Gtk.gtk_css_section_get_section_type(self)
    end
    
    # @return [GtkCssSection] 
    def get_parent()
      GtkCssSection.new Gtk.gtk_css_section_get_parent(self)
    end
    
    # @return [FFI::Pointer(*GFile)] 
    def get_file()
      Gtk.gtk_css_section_get_file(self)
    end
    
    # @return [Integer] 
    def get_start_line()
      Gtk.gtk_css_section_get_start_line(self)
    end
    
    # @return [Integer] 
    def get_start_position()
      Gtk.gtk_css_section_get_start_position(self)
    end
    
    # @return [Integer] 
    def get_end_line()
      Gtk.gtk_css_section_get_end_line(self)
    end
    
    # @return [Integer] 
    def get_end_position()
      Gtk.gtk_css_section_get_end_position(self)
    end
  end
  
  class GtkCssSection < FFI::Struct
    include GtkCssSectionWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_section_get_type, :gtk_css_section_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_section_ref(section)
  # @param [GtkCssSection] section 
  # @return [GtkCssSection] 
  # @scope class
  attach_function :gtk_css_section_ref, :gtk_css_section_ref, [GtkCssSection], GtkCssSection
  
  # (Not documented)
  # 
  # @method gtk_css_section_unref(section)
  # @param [GtkCssSection] section 
  # @return [nil] 
  # @scope class
  attach_function :gtk_css_section_unref, :gtk_css_section_unref, [GtkCssSection], :void
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_section_type(section)
  # @param [GtkCssSection] section 
  # @return [Symbol from _enum_gtk_css_section_type_] 
  # @scope class
  attach_function :gtk_css_section_get_section_type, :gtk_css_section_get_section_type, [GtkCssSection], :gtk_css_section_type
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_parent(section)
  # @param [GtkCssSection] section 
  # @return [GtkCssSection] 
  # @scope class
  attach_function :gtk_css_section_get_parent, :gtk_css_section_get_parent, [GtkCssSection], GtkCssSection
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_file(section)
  # @param [GtkCssSection] section 
  # @return [FFI::Pointer(*GFile)] 
  # @scope class
  attach_function :gtk_css_section_get_file, :gtk_css_section_get_file, [GtkCssSection], :pointer
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_start_line(section)
  # @param [GtkCssSection] section 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_section_get_start_line, :gtk_css_section_get_start_line, [GtkCssSection], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_start_position(section)
  # @param [GtkCssSection] section 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_section_get_start_position, :gtk_css_section_get_start_position, [GtkCssSection], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_end_line(section)
  # @param [GtkCssSection] section 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_section_get_end_line, :gtk_css_section_get_end_line, [GtkCssSection], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_section_get_end_position(section)
  # @param [GtkCssSection] section 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_section_get_end_position, :gtk_css_section_get_end_position, [GtkCssSection], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_css_provider_error).</em>
  # 
  # === Options:
  # :failed ::
  #   
  # :syntax ::
  #   
  # :import ::
  #   
  # :name ::
  #   
  # :deprecated ::
  #   
  # :unknown_value ::
  #   
  # 
  # @method _enum_gtk_css_provider_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_css_provider_error, [
    :failed, 0,
    :syntax, 1,
    :import, 2,
    :name, 3,
    :deprecated, 4,
    :unknown_value, 5
  ]
  
  # (Not documented)
  # 
  # @method gtk_css_provider_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_provider_error_quark, :gtk_css_provider_error_quark, [], :uint
  
  # (Not documented)
  class GtkCssProviderPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkCssProviderPrivate) 
  module GtkCssProviderWrappers
    # @return [String] 
    def to_string()
      Gtk.gtk_css_provider_to_string(self)
    end
    
    # @param [String] data 
    # @param [Integer] length 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_from_data(data, length, error)
      Gtk.gtk_css_provider_load_from_data(self, data, length, error)
    end
    
    # @param [FFI::Pointer(*GFile)] file 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_from_file(file, error)
      Gtk.gtk_css_provider_load_from_file(self, file, error)
    end
    
    # @param [String] path 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_from_path(path, error)
      Gtk.gtk_css_provider_load_from_path(self, path, error)
    end
  end
  
  class GtkCssProvider < FFI::Struct
    include GtkCssProviderWrappers
    layout :parent_instance, :char,
           :priv, GtkCssProviderPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :parsing_error ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkCssProviderClass < FFI::Struct
    layout :parent_class, :char,
           :parsing_error, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_css_provider_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_provider_get_type, :gtk_css_provider_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_provider_new()
  # @return [GtkCssProvider] 
  # @scope class
  attach_function :gtk_css_provider_new, :gtk_css_provider_new, [], GtkCssProvider
  
  # (Not documented)
  # 
  # @method gtk_css_provider_to_string(provider)
  # @param [GtkCssProvider] provider 
  # @return [String] 
  # @scope class
  attach_function :gtk_css_provider_to_string, :gtk_css_provider_to_string, [GtkCssProvider], :string
  
  # (Not documented)
  # 
  # @method gtk_css_provider_load_from_data(css_provider, data, length, error)
  # @param [GtkCssProvider] css_provider 
  # @param [String] data 
  # @param [Integer] length 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_provider_load_from_data, :gtk_css_provider_load_from_data, [GtkCssProvider, :string, :int, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_css_provider_load_from_file(css_provider, file, error)
  # @param [GtkCssProvider] css_provider 
  # @param [FFI::Pointer(*GFile)] file 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_provider_load_from_file, :gtk_css_provider_load_from_file, [GtkCssProvider, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_css_provider_load_from_path(css_provider, path, error)
  # @param [GtkCssProvider] css_provider 
  # @param [String] path 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_provider_load_from_path, :gtk_css_provider_load_from_path, [GtkCssProvider, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_css_provider_get_default()
  # @return [GtkCssProvider] 
  # @scope class
  attach_function :gtk_css_provider_get_default, :gtk_css_provider_get_default, [], GtkCssProvider
  
  # (Not documented)
  # 
  # @method gtk_css_provider_get_named(name, variant)
  # @param [String] name 
  # @param [String] variant 
  # @return [GtkCssProvider] 
  # @scope class
  attach_function :gtk_css_provider_get_named, :gtk_css_provider_get_named, [:string, :string], GtkCssProvider
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_debug_flag).</em>
  # 
  # === Options:
  # :misc ::
  #   
  # :plugsocket ::
  #   
  # :text ::
  #   
  # :tree ::
  #   
  # :updates ::
  #   
  # :keybindings ::
  #   
  # :multihead ::
  #   
  # :modules ::
  #   
  # :geometry ::
  #   
  # :icontheme ::
  #   
  # :printing ::
  #   
  # :builder ::
  #   
  # :size_request ::
  #   
  # :no_css_cache ::
  #   
  # 
  # @method _enum_gtk_debug_flag_
  # @return [Symbol]
  # @scope class
  enum :gtk_debug_flag, [
    :misc, 1,
    :plugsocket, 2,
    :text, 4,
    :tree, 8,
    :updates, 16,
    :keybindings, 32,
    :multihead, 64,
    :modules, 128,
    :geometry, 256,
    :icontheme, 512,
    :printing, 1024,
    :builder, 2048,
    :size_request, 4096,
    :no_css_cache, 8192
  ]
  
  # (Not documented)
  # 
  # @method gtk_get_debug_flags()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_debug_flags, :gtk_get_debug_flags, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_set_debug_flags(flags)
  # @param [Integer] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_set_debug_flags, :gtk_set_debug_flags, [:uint], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :dummy ::
  #   (FFI::Pointer(Gpointer)) < private >
  class GtkDrawingArea < FFI::Struct
    layout :widget, GtkWidget.by_value,
           :dummy, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkDrawingAreaClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_drawing_area_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_drawing_area_get_type, :gtk_drawing_area_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_drawing_area_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_drawing_area_new, :gtk_drawing_area_new, [], GtkWidget
  
  # (Not documented)
  class GtkEventBoxPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkEventBoxPrivate) < private >
  module GtkEventBoxWrappers
    # @return [Integer] 
    def get_visible_window()
      Gtk.gtk_event_box_get_visible_window(self)
    end
    
    # @param [Integer] visible_window 
    # @return [nil] 
    def set_visible_window(visible_window)
      Gtk.gtk_event_box_set_visible_window(self, visible_window)
    end
    
    # @return [Integer] 
    def get_above_child()
      Gtk.gtk_event_box_get_above_child(self)
    end
    
    # @param [Integer] above_child 
    # @return [nil] 
    def set_above_child(above_child)
      Gtk.gtk_event_box_set_above_child(self, above_child)
    end
  end
  
  class GtkEventBox < FFI::Struct
    include GtkEventBoxWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkEventBoxPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkEventBoxClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_event_box_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_event_box_get_type, :gtk_event_box_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_event_box_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_event_box_new, :gtk_event_box_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_event_box_get_visible_window(event_box)
  # @param [GtkEventBox] event_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_event_box_get_visible_window, :gtk_event_box_get_visible_window, [GtkEventBox], :int
  
  # (Not documented)
  # 
  # @method gtk_event_box_set_visible_window(event_box, visible_window)
  # @param [GtkEventBox] event_box 
  # @param [Integer] visible_window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_event_box_set_visible_window, :gtk_event_box_set_visible_window, [GtkEventBox, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_event_box_get_above_child(event_box)
  # @param [GtkEventBox] event_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_event_box_get_above_child, :gtk_event_box_get_above_child, [GtkEventBox], :int
  
  # (Not documented)
  # 
  # @method gtk_event_box_set_above_child(event_box, above_child)
  # @param [GtkEventBox] event_box 
  # @param [Integer] above_child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_event_box_set_above_child, :gtk_event_box_set_above_child, [GtkEventBox, :int], :void
  
  # (Not documented)
  class GtkExpanderPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkExpanderPrivate) 
  module GtkExpanderWrappers
    # @param [Integer] expanded 
    # @return [nil] 
    def set_expanded(expanded)
      Gtk.gtk_expander_set_expanded(self, expanded)
    end
    
    # @return [Integer] 
    def get_expanded()
      Gtk.gtk_expander_get_expanded(self)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_spacing(spacing)
      Gtk.gtk_expander_set_spacing(self, spacing)
    end
    
    # @return [Integer] 
    def get_spacing()
      Gtk.gtk_expander_get_spacing(self)
    end
    
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_expander_set_label(self, label)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_expander_get_label(self)
    end
    
    # @param [Integer] use_underline 
    # @return [nil] 
    def set_use_underline(use_underline)
      Gtk.gtk_expander_set_use_underline(self, use_underline)
    end
    
    # @return [Integer] 
    def get_use_underline()
      Gtk.gtk_expander_get_use_underline(self)
    end
    
    # @param [Integer] use_markup 
    # @return [nil] 
    def set_use_markup(use_markup)
      Gtk.gtk_expander_set_use_markup(self, use_markup)
    end
    
    # @return [Integer] 
    def get_use_markup()
      Gtk.gtk_expander_get_use_markup(self)
    end
    
    # @param [GtkWidget] label_widget 
    # @return [nil] 
    def set_label_widget(label_widget)
      Gtk.gtk_expander_set_label_widget(self, label_widget)
    end
    
    # @return [GtkWidget] 
    def get_label_widget()
      GtkWidget.new Gtk.gtk_expander_get_label_widget(self)
    end
    
    # @param [Integer] label_fill 
    # @return [nil] 
    def set_label_fill(label_fill)
      Gtk.gtk_expander_set_label_fill(self, label_fill)
    end
    
    # @return [Integer] 
    def get_label_fill()
      Gtk.gtk_expander_get_label_fill(self)
    end
    
    # @param [Integer] resize_toplevel 
    # @return [nil] 
    def set_resize_toplevel(resize_toplevel)
      Gtk.gtk_expander_set_resize_toplevel(self, resize_toplevel)
    end
    
    # @return [Integer] 
    def get_resize_toplevel()
      Gtk.gtk_expander_get_resize_toplevel(self)
    end
  end
  
  class GtkExpander < FFI::Struct
    include GtkExpanderWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkExpanderPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :activate ::
  #   (FFI::Pointer(*)) Key binding signal; to get notification on the expansion
  #   state connect to notify:expanded.
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkExpanderClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :activate, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_expander_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_type, :gtk_expander_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_expander_new(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_expander_new, :gtk_expander_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_expander_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_expander_new_with_mnemonic, :gtk_expander_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_expander_set_expanded(expander, expanded)
  # @param [GtkExpander] expander 
  # @param [Integer] expanded 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_expanded, :gtk_expander_set_expanded, [GtkExpander, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_expanded(expander)
  # @param [GtkExpander] expander 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_expanded, :gtk_expander_get_expanded, [GtkExpander], :int
  
  # (Not documented)
  # 
  # @method gtk_expander_set_spacing(expander, spacing)
  # @param [GtkExpander] expander 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_spacing, :gtk_expander_set_spacing, [GtkExpander, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_spacing(expander)
  # @param [GtkExpander] expander 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_spacing, :gtk_expander_get_spacing, [GtkExpander], :int
  
  # (Not documented)
  # 
  # @method gtk_expander_set_label(expander, label)
  # @param [GtkExpander] expander 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_label, :gtk_expander_set_label, [GtkExpander, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_label(expander)
  # @param [GtkExpander] expander 
  # @return [String] 
  # @scope class
  attach_function :gtk_expander_get_label, :gtk_expander_get_label, [GtkExpander], :string
  
  # (Not documented)
  # 
  # @method gtk_expander_set_use_underline(expander, use_underline)
  # @param [GtkExpander] expander 
  # @param [Integer] use_underline 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_use_underline, :gtk_expander_set_use_underline, [GtkExpander, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_use_underline(expander)
  # @param [GtkExpander] expander 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_use_underline, :gtk_expander_get_use_underline, [GtkExpander], :int
  
  # (Not documented)
  # 
  # @method gtk_expander_set_use_markup(expander, use_markup)
  # @param [GtkExpander] expander 
  # @param [Integer] use_markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_use_markup, :gtk_expander_set_use_markup, [GtkExpander, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_use_markup(expander)
  # @param [GtkExpander] expander 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_use_markup, :gtk_expander_get_use_markup, [GtkExpander], :int
  
  # (Not documented)
  # 
  # @method gtk_expander_set_label_widget(expander, label_widget)
  # @param [GtkExpander] expander 
  # @param [GtkWidget] label_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_label_widget, :gtk_expander_set_label_widget, [GtkExpander, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_label_widget(expander)
  # @param [GtkExpander] expander 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_expander_get_label_widget, :gtk_expander_get_label_widget, [GtkExpander], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_expander_set_label_fill(expander, label_fill)
  # @param [GtkExpander] expander 
  # @param [Integer] label_fill 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_label_fill, :gtk_expander_set_label_fill, [GtkExpander, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_label_fill(expander)
  # @param [GtkExpander] expander 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_label_fill, :gtk_expander_get_label_fill, [GtkExpander], :int
  
  # (Not documented)
  # 
  # @method gtk_expander_set_resize_toplevel(expander, resize_toplevel)
  # @param [GtkExpander] expander 
  # @param [Integer] resize_toplevel 
  # @return [nil] 
  # @scope class
  attach_function :gtk_expander_set_resize_toplevel, :gtk_expander_set_resize_toplevel, [GtkExpander, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_expander_get_resize_toplevel(expander)
  # @param [GtkExpander] expander 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_get_resize_toplevel, :gtk_expander_get_resize_toplevel, [GtkExpander], :int
  
  # (Not documented)
  class GtkFixedPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkFixedPrivate) < private >
  module GtkFixedWrappers
    # @param [GtkWidget] widget 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def put(widget, x, y)
      Gtk.gtk_fixed_put(self, widget, x, y)
    end
    
    # @param [GtkWidget] widget 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def move(widget, x, y)
      Gtk.gtk_fixed_move(self, widget, x, y)
    end
  end
  
  class GtkFixed < FFI::Struct
    include GtkFixedWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkFixedPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFixedClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :x ::
  #   (Integer) 
  # :y ::
  #   (Integer) 
  class GtkFixedChild < FFI::Struct
    layout :widget, GtkWidget,
           :x, :int,
           :y, :int
  end
  
  # (Not documented)
  # 
  # @method gtk_fixed_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_fixed_get_type, :gtk_fixed_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_fixed_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_fixed_new, :gtk_fixed_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_fixed_put(fixed, widget, x, y)
  # @param [GtkFixed] fixed 
  # @param [GtkWidget] widget 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_fixed_put, :gtk_fixed_put, [GtkFixed, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_fixed_move(fixed, widget, x, y)
  # @param [GtkFixed] fixed 
  # @param [GtkWidget] widget 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_fixed_move, :gtk_fixed_move, [GtkFixed, GtkWidget, :int, :int], :void
  
  # (Not documented)
  module GtkFileFilterWrappers
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Gtk.gtk_file_filter_set_name(self, name)
    end
    
    # @return [String] 
    def get_name()
      Gtk.gtk_file_filter_get_name(self)
    end
    
    # @param [String] mime_type 
    # @return [nil] 
    def add_mime_type(mime_type)
      Gtk.gtk_file_filter_add_mime_type(self, mime_type)
    end
    
    # @param [String] pattern 
    # @return [nil] 
    def add_pattern(pattern)
      Gtk.gtk_file_filter_add_pattern(self, pattern)
    end
    
    # @return [nil] 
    def add_pixbuf_formats()
      Gtk.gtk_file_filter_add_pixbuf_formats(self)
    end
    
    # @param [Symbol from _enum_gtk_file_filter_flags_] needed 
    # @param [Proc(_callback_gtk_file_filter_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] notify 
    # @return [nil] 
    def add_custom(needed, func, data, notify)
      Gtk.gtk_file_filter_add_custom(self, needed, func, data, notify)
    end
    
    # @return [Symbol from _enum_gtk_file_filter_flags_] 
    def get_needed()
      Gtk.gtk_file_filter_get_needed(self)
    end
    
    # @param [FFI::Pointer(*GtkFileFilterInfo)] filter_info 
    # @return [Integer] 
    def filter(filter_info)
      Gtk.gtk_file_filter_filter(self, filter_info)
    end
  end
  
  class GtkFileFilter < FFI::Struct
    include GtkFileFilterWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_file_filter_flags).</em>
  # 
  # === Options:
  # :filename ::
  #   
  # :uri ::
  #   
  # :display_name ::
  #   
  # :mime_type ::
  #   
  # 
  # @method _enum_gtk_file_filter_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_file_filter_flags, [
    :filename, 1,
    :uri, 2,
    :display_name, 4,
    :mime_type, 8
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_file_filter_func_(filter_info, data)
  # @param [FFI::Pointer(*GtkFileFilterInfo)] filter_info 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_file_filter_func, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :contains ::
  #   (Symbol from _enum_gtk_file_filter_flags_) 
  # :filename ::
  #   (String) 
  # :uri ::
  #   (String) 
  # :display_name ::
  #   (String) 
  # :mime_type ::
  #   (String) 
  class GtkFileFilterInfo < FFI::Struct
    layout :contains, :gtk_file_filter_flags,
           :filename, :string,
           :uri, :string,
           :display_name, :string,
           :mime_type, :string
  end
  
  # (Not documented)
  # 
  # @method gtk_file_filter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_filter_get_type, :gtk_file_filter_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_filter_new()
  # @return [GtkFileFilter] 
  # @scope class
  attach_function :gtk_file_filter_new, :gtk_file_filter_new, [], GtkFileFilter
  
  # (Not documented)
  # 
  # @method gtk_file_filter_set_name(filter, name)
  # @param [GtkFileFilter] filter 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_filter_set_name, :gtk_file_filter_set_name, [GtkFileFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_filter_get_name(filter)
  # @param [GtkFileFilter] filter 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_filter_get_name, :gtk_file_filter_get_name, [GtkFileFilter], :string
  
  # (Not documented)
  # 
  # @method gtk_file_filter_add_mime_type(filter, mime_type)
  # @param [GtkFileFilter] filter 
  # @param [String] mime_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_filter_add_mime_type, :gtk_file_filter_add_mime_type, [GtkFileFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_filter_add_pattern(filter, pattern)
  # @param [GtkFileFilter] filter 
  # @param [String] pattern 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_filter_add_pattern, :gtk_file_filter_add_pattern, [GtkFileFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_filter_add_pixbuf_formats(filter)
  # @param [GtkFileFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_filter_add_pixbuf_formats, :gtk_file_filter_add_pixbuf_formats, [GtkFileFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_file_filter_add_custom(filter, needed, func, data, notify)
  # @param [GtkFileFilter] filter 
  # @param [Symbol from _enum_gtk_file_filter_flags_] needed 
  # @param [Proc(_callback_gtk_file_filter_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] notify 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_filter_add_custom, :gtk_file_filter_add_custom, [GtkFileFilter, :gtk_file_filter_flags, :gtk_file_filter_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_file_filter_get_needed(filter)
  # @param [GtkFileFilter] filter 
  # @return [Symbol from _enum_gtk_file_filter_flags_] 
  # @scope class
  attach_function :gtk_file_filter_get_needed, :gtk_file_filter_get_needed, [GtkFileFilter], :gtk_file_filter_flags
  
  # (Not documented)
  # 
  # @method gtk_file_filter_filter(filter, filter_info)
  # @param [GtkFileFilter] filter 
  # @param [GtkFileFilterInfo] filter_info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_filter_filter, :gtk_file_filter_filter, [GtkFileFilter, GtkFileFilterInfo], :int
  
  # (Not documented)
  module GtkFileChooserWrappers
    # @param [Symbol from _enum_gtk_file_chooser_action_] action 
    # @return [nil] 
    def set_action(action)
      Gtk.gtk_file_chooser_set_action(self, action)
    end
    
    # @return [Symbol from _enum_gtk_file_chooser_action_] 
    def get_action()
      Gtk.gtk_file_chooser_get_action(self)
    end
    
    # @param [Integer] local_only 
    # @return [nil] 
    def set_local_only(local_only)
      Gtk.gtk_file_chooser_set_local_only(self, local_only)
    end
    
    # @return [Integer] 
    def get_local_only()
      Gtk.gtk_file_chooser_get_local_only(self)
    end
    
    # @param [Integer] select_multiple 
    # @return [nil] 
    def set_select_multiple(select_multiple)
      Gtk.gtk_file_chooser_set_select_multiple(self, select_multiple)
    end
    
    # @return [Integer] 
    def get_select_multiple()
      Gtk.gtk_file_chooser_get_select_multiple(self)
    end
    
    # @param [Integer] show_hidden 
    # @return [nil] 
    def set_show_hidden(show_hidden)
      Gtk.gtk_file_chooser_set_show_hidden(self, show_hidden)
    end
    
    # @return [Integer] 
    def get_show_hidden()
      Gtk.gtk_file_chooser_get_show_hidden(self)
    end
    
    # @param [Integer] do_overwrite_confirmation 
    # @return [nil] 
    def set_do_overwrite_confirmation(do_overwrite_confirmation)
      Gtk.gtk_file_chooser_set_do_overwrite_confirmation(self, do_overwrite_confirmation)
    end
    
    # @return [Integer] 
    def get_do_overwrite_confirmation()
      Gtk.gtk_file_chooser_get_do_overwrite_confirmation(self)
    end
    
    # @param [Integer] create_folders 
    # @return [nil] 
    def set_create_folders(create_folders)
      Gtk.gtk_file_chooser_set_create_folders(self, create_folders)
    end
    
    # @return [Integer] 
    def get_create_folders()
      Gtk.gtk_file_chooser_get_create_folders(self)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_current_name(name)
      Gtk.gtk_file_chooser_set_current_name(self, name)
    end
    
    # @return [String] 
    def get_filename()
      Gtk.gtk_file_chooser_get_filename(self)
    end
    
    # @param [String] filename 
    # @return [Integer] 
    def set_filename(filename)
      Gtk.gtk_file_chooser_set_filename(self, filename)
    end
    
    # @param [String] filename 
    # @return [Integer] 
    def select_filename(filename)
      Gtk.gtk_file_chooser_select_filename(self, filename)
    end
    
    # @param [String] filename 
    # @return [nil] 
    def unselect_filename(filename)
      Gtk.gtk_file_chooser_unselect_filename(self, filename)
    end
    
    # @return [nil] 
    def select_all()
      Gtk.gtk_file_chooser_select_all(self)
    end
    
    # @return [nil] 
    def unselect_all()
      Gtk.gtk_file_chooser_unselect_all(self)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_filenames()
      Gtk.gtk_file_chooser_get_filenames(self)
    end
    
    # @param [String] filename 
    # @return [Integer] 
    def set_current_folder(filename)
      Gtk.gtk_file_chooser_set_current_folder(self, filename)
    end
    
    # @return [String] 
    def get_current_folder()
      Gtk.gtk_file_chooser_get_current_folder(self)
    end
    
    # @return [String] 
    def get_uri()
      Gtk.gtk_file_chooser_get_uri(self)
    end
    
    # @param [String] uri 
    # @return [Integer] 
    def set_uri(uri)
      Gtk.gtk_file_chooser_set_uri(self, uri)
    end
    
    # @param [String] uri 
    # @return [Integer] 
    def select_uri(uri)
      Gtk.gtk_file_chooser_select_uri(self, uri)
    end
    
    # @param [String] uri 
    # @return [nil] 
    def unselect_uri(uri)
      Gtk.gtk_file_chooser_unselect_uri(self, uri)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_uris()
      Gtk.gtk_file_chooser_get_uris(self)
    end
    
    # @param [String] uri 
    # @return [Integer] 
    def set_current_folder_uri(uri)
      Gtk.gtk_file_chooser_set_current_folder_uri(self, uri)
    end
    
    # @return [String] 
    def get_current_folder_uri()
      Gtk.gtk_file_chooser_get_current_folder_uri(self)
    end
    
    # @return [FFI::Pointer(*GFile)] 
    def get_file()
      Gtk.gtk_file_chooser_get_file(self)
    end
    
    # @param [FFI::Pointer(*GFile)] file 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def set_file(file, error)
      Gtk.gtk_file_chooser_set_file(self, file, error)
    end
    
    # @param [FFI::Pointer(*GFile)] file 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def select_file(file, error)
      Gtk.gtk_file_chooser_select_file(self, file, error)
    end
    
    # @param [FFI::Pointer(*GFile)] file 
    # @return [nil] 
    def unselect_file(file)
      Gtk.gtk_file_chooser_unselect_file(self, file)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_files()
      Gtk.gtk_file_chooser_get_files(self)
    end
    
    # @param [FFI::Pointer(*GFile)] file 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def set_current_folder_file(file, error)
      Gtk.gtk_file_chooser_set_current_folder_file(self, file, error)
    end
    
    # @return [FFI::Pointer(*GFile)] 
    def get_current_folder_file()
      Gtk.gtk_file_chooser_get_current_folder_file(self)
    end
    
    # @param [GtkWidget] preview_widget 
    # @return [nil] 
    def set_preview_widget(preview_widget)
      Gtk.gtk_file_chooser_set_preview_widget(self, preview_widget)
    end
    
    # @return [GtkWidget] 
    def get_preview_widget()
      GtkWidget.new Gtk.gtk_file_chooser_get_preview_widget(self)
    end
    
    # @param [Integer] active 
    # @return [nil] 
    def set_preview_widget_active(active)
      Gtk.gtk_file_chooser_set_preview_widget_active(self, active)
    end
    
    # @return [Integer] 
    def get_preview_widget_active()
      Gtk.gtk_file_chooser_get_preview_widget_active(self)
    end
    
    # @param [Integer] use_label 
    # @return [nil] 
    def set_use_preview_label(use_label)
      Gtk.gtk_file_chooser_set_use_preview_label(self, use_label)
    end
    
    # @return [Integer] 
    def get_use_preview_label()
      Gtk.gtk_file_chooser_get_use_preview_label(self)
    end
    
    # @return [String] 
    def get_preview_filename()
      Gtk.gtk_file_chooser_get_preview_filename(self)
    end
    
    # @return [String] 
    def get_preview_uri()
      Gtk.gtk_file_chooser_get_preview_uri(self)
    end
    
    # @return [FFI::Pointer(*GFile)] 
    def get_preview_file()
      Gtk.gtk_file_chooser_get_preview_file(self)
    end
    
    # @param [GtkWidget] extra_widget 
    # @return [nil] 
    def set_extra_widget(extra_widget)
      Gtk.gtk_file_chooser_set_extra_widget(self, extra_widget)
    end
    
    # @return [GtkWidget] 
    def get_extra_widget()
      GtkWidget.new Gtk.gtk_file_chooser_get_extra_widget(self)
    end
    
    # @param [GtkFileFilter] filter 
    # @return [nil] 
    def add_filter(filter)
      Gtk.gtk_file_chooser_add_filter(self, filter)
    end
    
    # @param [GtkFileFilter] filter 
    # @return [nil] 
    def remove_filter(filter)
      Gtk.gtk_file_chooser_remove_filter(self, filter)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def list_filters()
      Gtk.gtk_file_chooser_list_filters(self)
    end
    
    # @param [GtkFileFilter] filter 
    # @return [nil] 
    def set_filter(filter)
      Gtk.gtk_file_chooser_set_filter(self, filter)
    end
    
    # @return [GtkFileFilter] 
    def get_filter()
      GtkFileFilter.new Gtk.gtk_file_chooser_get_filter(self)
    end
    
    # @param [String] folder 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_shortcut_folder(folder, error)
      Gtk.gtk_file_chooser_add_shortcut_folder(self, folder, error)
    end
    
    # @param [String] folder 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def remove_shortcut_folder(folder, error)
      Gtk.gtk_file_chooser_remove_shortcut_folder(self, folder, error)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def list_shortcut_folders()
      Gtk.gtk_file_chooser_list_shortcut_folders(self)
    end
    
    # @param [String] uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_shortcut_folder_uri(uri, error)
      Gtk.gtk_file_chooser_add_shortcut_folder_uri(self, uri, error)
    end
    
    # @param [String] uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def remove_shortcut_folder_uri(uri, error)
      Gtk.gtk_file_chooser_remove_shortcut_folder_uri(self, uri, error)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def list_shortcut_folder_uris()
      Gtk.gtk_file_chooser_list_shortcut_folder_uris(self)
    end
  end
  
  class GtkFileChooser < FFI::Struct
    include GtkFileChooserWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_file_chooser_action).</em>
  # 
  # === Options:
  # :open ::
  #   
  # :save ::
  #   
  # :select_folder ::
  #   
  # :create_folder ::
  #   
  # 
  # @method _enum_gtk_file_chooser_action_
  # @return [Symbol]
  # @scope class
  enum :gtk_file_chooser_action, [
    :open, 0,
    :save, 1,
    :select_folder, 2,
    :create_folder, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_file_chooser_confirmation).</em>
  # 
  # === Options:
  # :confirm ::
  #   
  # :accept_filename ::
  #   
  # :select_again ::
  #   
  # 
  # @method _enum_gtk_file_chooser_confirmation_
  # @return [Symbol]
  # @scope class
  enum :gtk_file_chooser_confirmation, [
    :confirm, 0,
    :accept_filename, 1,
    :select_again, 2
  ]
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_type, :gtk_file_chooser_get_type, [], :uint
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_file_chooser_error).</em>
  # 
  # === Options:
  # :nonexistent ::
  #   
  # :bad_filename ::
  #   
  # :already_exists ::
  #   
  # :incomplete_hostname ::
  #   
  # 
  # @method _enum_gtk_file_chooser_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_file_chooser_error, [
    :nonexistent, 0,
    :bad_filename, 1,
    :already_exists, 2,
    :incomplete_hostname, 3
  ]
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_error_quark, :gtk_file_chooser_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_action(chooser, action)
  # @param [GtkFileChooser] chooser 
  # @param [Symbol from _enum_gtk_file_chooser_action_] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_action, :gtk_file_chooser_set_action, [GtkFileChooser, :gtk_file_chooser_action], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_action(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Symbol from _enum_gtk_file_chooser_action_] 
  # @scope class
  attach_function :gtk_file_chooser_get_action, :gtk_file_chooser_get_action, [GtkFileChooser], :gtk_file_chooser_action
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_local_only(chooser, local_only)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] local_only 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_local_only, :gtk_file_chooser_set_local_only, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_local_only(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_local_only, :gtk_file_chooser_get_local_only, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_select_multiple(chooser, select_multiple)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] select_multiple 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_select_multiple, :gtk_file_chooser_set_select_multiple, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_select_multiple(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_select_multiple, :gtk_file_chooser_get_select_multiple, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_show_hidden(chooser, show_hidden)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] show_hidden 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_show_hidden, :gtk_file_chooser_set_show_hidden, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_show_hidden(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_show_hidden, :gtk_file_chooser_get_show_hidden, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_do_overwrite_confirmation(chooser, do_overwrite_confirmation)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] do_overwrite_confirmation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_do_overwrite_confirmation, :gtk_file_chooser_set_do_overwrite_confirmation, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_do_overwrite_confirmation(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_do_overwrite_confirmation, :gtk_file_chooser_get_do_overwrite_confirmation, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_create_folders(chooser, create_folders)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] create_folders 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_create_folders, :gtk_file_chooser_set_create_folders, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_create_folders(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_create_folders, :gtk_file_chooser_get_create_folders, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_current_name(chooser, name)
  # @param [GtkFileChooser] chooser 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_current_name, :gtk_file_chooser_set_current_name, [GtkFileChooser, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_filename(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_get_filename, :gtk_file_chooser_get_filename, [GtkFileChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_filename(chooser, filename)
  # @param [GtkFileChooser] chooser 
  # @param [String] filename 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_set_filename, :gtk_file_chooser_set_filename, [GtkFileChooser, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_select_filename(chooser, filename)
  # @param [GtkFileChooser] chooser 
  # @param [String] filename 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_select_filename, :gtk_file_chooser_select_filename, [GtkFileChooser, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_unselect_filename(chooser, filename)
  # @param [GtkFileChooser] chooser 
  # @param [String] filename 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_unselect_filename, :gtk_file_chooser_unselect_filename, [GtkFileChooser, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_select_all(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_select_all, :gtk_file_chooser_select_all, [GtkFileChooser], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_unselect_all(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_unselect_all, :gtk_file_chooser_unselect_all, [GtkFileChooser], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_filenames(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_file_chooser_get_filenames, :gtk_file_chooser_get_filenames, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_current_folder(chooser, filename)
  # @param [GtkFileChooser] chooser 
  # @param [String] filename 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_set_current_folder, :gtk_file_chooser_set_current_folder, [GtkFileChooser, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_current_folder(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_get_current_folder, :gtk_file_chooser_get_current_folder, [GtkFileChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_uri(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_get_uri, :gtk_file_chooser_get_uri, [GtkFileChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_uri(chooser, uri)
  # @param [GtkFileChooser] chooser 
  # @param [String] uri 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_set_uri, :gtk_file_chooser_set_uri, [GtkFileChooser, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_select_uri(chooser, uri)
  # @param [GtkFileChooser] chooser 
  # @param [String] uri 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_select_uri, :gtk_file_chooser_select_uri, [GtkFileChooser, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_unselect_uri(chooser, uri)
  # @param [GtkFileChooser] chooser 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_unselect_uri, :gtk_file_chooser_unselect_uri, [GtkFileChooser, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_uris(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_file_chooser_get_uris, :gtk_file_chooser_get_uris, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_current_folder_uri(chooser, uri)
  # @param [GtkFileChooser] chooser 
  # @param [String] uri 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_set_current_folder_uri, :gtk_file_chooser_set_current_folder_uri, [GtkFileChooser, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_current_folder_uri(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_get_current_folder_uri, :gtk_file_chooser_get_current_folder_uri, [GtkFileChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_file(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GFile)] 
  # @scope class
  attach_function :gtk_file_chooser_get_file, :gtk_file_chooser_get_file, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_file(chooser, file, error)
  # @param [GtkFileChooser] chooser 
  # @param [FFI::Pointer(*GFile)] file 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_set_file, :gtk_file_chooser_set_file, [GtkFileChooser, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_select_file(chooser, file, error)
  # @param [GtkFileChooser] chooser 
  # @param [FFI::Pointer(*GFile)] file 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_select_file, :gtk_file_chooser_select_file, [GtkFileChooser, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_unselect_file(chooser, file)
  # @param [GtkFileChooser] chooser 
  # @param [FFI::Pointer(*GFile)] file 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_unselect_file, :gtk_file_chooser_unselect_file, [GtkFileChooser, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_files(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_file_chooser_get_files, :gtk_file_chooser_get_files, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_current_folder_file(chooser, file, error)
  # @param [GtkFileChooser] chooser 
  # @param [FFI::Pointer(*GFile)] file 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_set_current_folder_file, :gtk_file_chooser_set_current_folder_file, [GtkFileChooser, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_current_folder_file(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GFile)] 
  # @scope class
  attach_function :gtk_file_chooser_get_current_folder_file, :gtk_file_chooser_get_current_folder_file, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_preview_widget(chooser, preview_widget)
  # @param [GtkFileChooser] chooser 
  # @param [GtkWidget] preview_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_preview_widget, :gtk_file_chooser_set_preview_widget, [GtkFileChooser, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_preview_widget(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_file_chooser_get_preview_widget, :gtk_file_chooser_get_preview_widget, [GtkFileChooser], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_preview_widget_active(chooser, active)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_preview_widget_active, :gtk_file_chooser_set_preview_widget_active, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_preview_widget_active(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_preview_widget_active, :gtk_file_chooser_get_preview_widget_active, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_use_preview_label(chooser, use_label)
  # @param [GtkFileChooser] chooser 
  # @param [Integer] use_label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_use_preview_label, :gtk_file_chooser_set_use_preview_label, [GtkFileChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_use_preview_label(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_get_use_preview_label, :gtk_file_chooser_get_use_preview_label, [GtkFileChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_preview_filename(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_get_preview_filename, :gtk_file_chooser_get_preview_filename, [GtkFileChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_preview_uri(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_get_preview_uri, :gtk_file_chooser_get_preview_uri, [GtkFileChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_preview_file(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GFile)] 
  # @scope class
  attach_function :gtk_file_chooser_get_preview_file, :gtk_file_chooser_get_preview_file, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_extra_widget(chooser, extra_widget)
  # @param [GtkFileChooser] chooser 
  # @param [GtkWidget] extra_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_extra_widget, :gtk_file_chooser_set_extra_widget, [GtkFileChooser, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_extra_widget(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_file_chooser_get_extra_widget, :gtk_file_chooser_get_extra_widget, [GtkFileChooser], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_add_filter(chooser, filter)
  # @param [GtkFileChooser] chooser 
  # @param [GtkFileFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_add_filter, :gtk_file_chooser_add_filter, [GtkFileChooser, GtkFileFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_remove_filter(chooser, filter)
  # @param [GtkFileChooser] chooser 
  # @param [GtkFileFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_remove_filter, :gtk_file_chooser_remove_filter, [GtkFileChooser, GtkFileFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_list_filters(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_file_chooser_list_filters, :gtk_file_chooser_list_filters, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_set_filter(chooser, filter)
  # @param [GtkFileChooser] chooser 
  # @param [GtkFileFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_set_filter, :gtk_file_chooser_set_filter, [GtkFileChooser, GtkFileFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_get_filter(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [GtkFileFilter] 
  # @scope class
  attach_function :gtk_file_chooser_get_filter, :gtk_file_chooser_get_filter, [GtkFileChooser], GtkFileFilter
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_add_shortcut_folder(chooser, folder, error)
  # @param [GtkFileChooser] chooser 
  # @param [String] folder 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_add_shortcut_folder, :gtk_file_chooser_add_shortcut_folder, [GtkFileChooser, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_remove_shortcut_folder(chooser, folder, error)
  # @param [GtkFileChooser] chooser 
  # @param [String] folder 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_remove_shortcut_folder, :gtk_file_chooser_remove_shortcut_folder, [GtkFileChooser, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_list_shortcut_folders(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_file_chooser_list_shortcut_folders, :gtk_file_chooser_list_shortcut_folders, [GtkFileChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_add_shortcut_folder_uri(chooser, uri, error)
  # @param [GtkFileChooser] chooser 
  # @param [String] uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_add_shortcut_folder_uri, :gtk_file_chooser_add_shortcut_folder_uri, [GtkFileChooser, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_remove_shortcut_folder_uri(chooser, uri, error)
  # @param [GtkFileChooser] chooser 
  # @param [String] uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_remove_shortcut_folder_uri, :gtk_file_chooser_remove_shortcut_folder_uri, [GtkFileChooser, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_list_shortcut_folder_uris(chooser)
  # @param [GtkFileChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_file_chooser_list_shortcut_folder_uris, :gtk_file_chooser_list_shortcut_folder_uris, [GtkFileChooser], :pointer
  
  # (Not documented)
  class GtkFileChooserButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkFileChooserButtonPrivate) < private >
  module GtkFileChooserButtonWrappers
    # @return [String] 
    def get_title()
      Gtk.gtk_file_chooser_button_get_title(self)
    end
    
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_file_chooser_button_set_title(self, title)
    end
    
    # @return [Integer] 
    def get_width_chars()
      Gtk.gtk_file_chooser_button_get_width_chars(self)
    end
    
    # @param [Integer] n_chars 
    # @return [nil] 
    def set_width_chars(n_chars)
      Gtk.gtk_file_chooser_button_set_width_chars(self, n_chars)
    end
    
    # @return [Integer] 
    def get_focus_on_click()
      Gtk.gtk_file_chooser_button_get_focus_on_click(self)
    end
    
    # @param [Integer] focus_on_click 
    # @return [nil] 
    def set_focus_on_click(focus_on_click)
      Gtk.gtk_file_chooser_button_set_focus_on_click(self, focus_on_click)
    end
  end
  
  class GtkFileChooserButton < FFI::Struct
    include GtkFileChooserButtonWrappers
    layout :parent, GtkBox.by_value,
           :priv, GtkFileChooserButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) < private >
  # :file_set ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFileChooserButtonClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :file_set, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_button_get_type, :gtk_file_chooser_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_new(title, action)
  # @param [String] title 
  # @param [Symbol from _enum_gtk_file_chooser_action_] action 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_file_chooser_button_new, :gtk_file_chooser_button_new, [:string, :gtk_file_chooser_action], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_new_with_dialog(dialog)
  # @param [GtkWidget] dialog 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_file_chooser_button_new_with_dialog, :gtk_file_chooser_button_new_with_dialog, [GtkWidget], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_get_title(button)
  # @param [GtkFileChooserButton] button 
  # @return [String] 
  # @scope class
  attach_function :gtk_file_chooser_button_get_title, :gtk_file_chooser_button_get_title, [GtkFileChooserButton], :string
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_set_title(button, title)
  # @param [GtkFileChooserButton] button 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_button_set_title, :gtk_file_chooser_button_set_title, [GtkFileChooserButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_get_width_chars(button)
  # @param [GtkFileChooserButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_button_get_width_chars, :gtk_file_chooser_button_get_width_chars, [GtkFileChooserButton], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_set_width_chars(button, n_chars)
  # @param [GtkFileChooserButton] button 
  # @param [Integer] n_chars 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_button_set_width_chars, :gtk_file_chooser_button_set_width_chars, [GtkFileChooserButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_get_focus_on_click(button)
  # @param [GtkFileChooserButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_button_get_focus_on_click, :gtk_file_chooser_button_get_focus_on_click, [GtkFileChooserButton], :int
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_button_set_focus_on_click(button, focus_on_click)
  # @param [GtkFileChooserButton] button 
  # @param [Integer] focus_on_click 
  # @return [nil] 
  # @scope class
  attach_function :gtk_file_chooser_button_set_focus_on_click, :gtk_file_chooser_button_set_focus_on_click, [GtkFileChooserButton, :int], :void
  
  # (Not documented)
  class GtkFileChooserDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkFileChooserDialogPrivate) 
  class GtkFileChooserDialog < FFI::Struct
    layout :parent_instance, GtkDialog.by_value,
           :priv, GtkFileChooserDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFileChooserDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_dialog_get_type, :gtk_file_chooser_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_dialog_new(title, parent, action, first_button_text)
  # @param [String] title 
  # @param [GtkWindow] parent 
  # @param [Symbol from _enum_gtk_file_chooser_action_] action 
  # @param [String] first_button_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_file_chooser_dialog_new, :gtk_file_chooser_dialog_new, [:string, GtkWindow, :gtk_file_chooser_action, :string], GtkWidget
  
  # (Not documented)
  class GtkFileChooserWidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkFileChooserWidgetPrivate) 
  class GtkFileChooserWidget < FFI::Struct
    layout :parent_instance, GtkBox.by_value,
           :priv, GtkFileChooserWidgetPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFileChooserWidgetClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_widget_get_type, :gtk_file_chooser_widget_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_widget_new(action)
  # @param [Symbol from _enum_gtk_file_chooser_action_] action 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_file_chooser_widget_new, :gtk_file_chooser_widget_new, [:gtk_file_chooser_action], GtkWidget
  
  # (Not documented)
  class GtkFontButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :button ::
  #   (GtkButton) 
  # :priv ::
  #   (GtkFontButtonPrivate) < private >
  module GtkFontButtonWrappers
    # @return [String] 
    def get_title()
      Gtk.gtk_font_button_get_title(self)
    end
    
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_font_button_set_title(self, title)
    end
    
    # @return [Integer] 
    def get_use_font()
      Gtk.gtk_font_button_get_use_font(self)
    end
    
    # @param [Integer] use_font 
    # @return [nil] 
    def set_use_font(use_font)
      Gtk.gtk_font_button_set_use_font(self, use_font)
    end
    
    # @return [Integer] 
    def get_use_size()
      Gtk.gtk_font_button_get_use_size(self)
    end
    
    # @param [Integer] use_size 
    # @return [nil] 
    def set_use_size(use_size)
      Gtk.gtk_font_button_set_use_size(self, use_size)
    end
    
    # @return [String] 
    def get_font_name()
      Gtk.gtk_font_button_get_font_name(self)
    end
    
    # @param [String] fontname 
    # @return [Integer] 
    def set_font_name(fontname)
      Gtk.gtk_font_button_set_font_name(self, fontname)
    end
    
    # @return [Integer] 
    def get_show_style()
      Gtk.gtk_font_button_get_show_style(self)
    end
    
    # @param [Integer] show_style 
    # @return [nil] 
    def set_show_style(show_style)
      Gtk.gtk_font_button_set_show_style(self, show_style)
    end
    
    # @return [Integer] 
    def get_show_size()
      Gtk.gtk_font_button_get_show_size(self)
    end
    
    # @param [Integer] show_size 
    # @return [nil] 
    def set_show_size(show_size)
      Gtk.gtk_font_button_set_show_size(self, show_size)
    end
  end
  
  class GtkFontButton < FFI::Struct
    include GtkFontButtonWrappers
    layout :button, GtkButton.by_value,
           :priv, GtkFontButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkButtonClass) 
  # :font_set ::
  #   (FFI::Pointer(*)) font_set signal is emitted when font is chosen
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFontButtonClass < FFI::Struct
    layout :parent_class, GtkButtonClass.by_value,
           :font_set, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_button_get_type, :gtk_font_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_font_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_font_button_new, :gtk_font_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_font_button_new_with_font(fontname)
  # @param [String] fontname 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_font_button_new_with_font, :gtk_font_button_new_with_font, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_title(font_button)
  # @param [GtkFontButton] font_button 
  # @return [String] 
  # @scope class
  attach_function :gtk_font_button_get_title, :gtk_font_button_get_title, [GtkFontButton], :string
  
  # (Not documented)
  # 
  # @method gtk_font_button_set_title(font_button, title)
  # @param [GtkFontButton] font_button 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_button_set_title, :gtk_font_button_set_title, [GtkFontButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_use_font(font_button)
  # @param [GtkFontButton] font_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_button_get_use_font, :gtk_font_button_get_use_font, [GtkFontButton], :int
  
  # (Not documented)
  # 
  # @method gtk_font_button_set_use_font(font_button, use_font)
  # @param [GtkFontButton] font_button 
  # @param [Integer] use_font 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_button_set_use_font, :gtk_font_button_set_use_font, [GtkFontButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_use_size(font_button)
  # @param [GtkFontButton] font_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_button_get_use_size, :gtk_font_button_get_use_size, [GtkFontButton], :int
  
  # (Not documented)
  # 
  # @method gtk_font_button_set_use_size(font_button, use_size)
  # @param [GtkFontButton] font_button 
  # @param [Integer] use_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_button_set_use_size, :gtk_font_button_set_use_size, [GtkFontButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_font_name(font_button)
  # @param [GtkFontButton] font_button 
  # @return [String] 
  # @scope class
  attach_function :gtk_font_button_get_font_name, :gtk_font_button_get_font_name, [GtkFontButton], :string
  
  # (Not documented)
  # 
  # @method gtk_font_button_set_font_name(font_button, fontname)
  # @param [GtkFontButton] font_button 
  # @param [String] fontname 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_button_set_font_name, :gtk_font_button_set_font_name, [GtkFontButton, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_show_style(font_button)
  # @param [GtkFontButton] font_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_button_get_show_style, :gtk_font_button_get_show_style, [GtkFontButton], :int
  
  # (Not documented)
  # 
  # @method gtk_font_button_set_show_style(font_button, show_style)
  # @param [GtkFontButton] font_button 
  # @param [Integer] show_style 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_button_set_show_style, :gtk_font_button_set_show_style, [GtkFontButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_font_button_get_show_size(font_button)
  # @param [GtkFontButton] font_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_button_get_show_size, :gtk_font_button_get_show_size, [GtkFontButton], :int
  
  # (Not documented)
  # 
  # @method gtk_font_button_set_show_size(font_button, show_size)
  # @param [GtkFontButton] font_button 
  # @param [Integer] show_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_button_set_show_size, :gtk_font_button_set_show_size, [GtkFontButton, :int], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_font_filter_func_(family, face, data)
  # @param [FFI::Pointer(*PangoFontFamily)] family 
  # @param [FFI::Pointer(*PangoFontFace)] face 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_font_filter_func, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  module GtkFontChooserWrappers
    # @return [FFI::Pointer(*PangoFontFamily)] 
    def get_font_family()
      Gtk.gtk_font_chooser_get_font_family(self)
    end
    
    # @return [FFI::Pointer(*PangoFontFace)] 
    def get_font_face()
      Gtk.gtk_font_chooser_get_font_face(self)
    end
    
    # @return [Integer] 
    def get_font_size()
      Gtk.gtk_font_chooser_get_font_size(self)
    end
    
    # @return [FFI::Pointer(*PangoFontDescription)] 
    def get_font_desc()
      Gtk.gtk_font_chooser_get_font_desc(self)
    end
    
    # @param [FFI::Pointer(*PangoFontDescription)] font_desc 
    # @return [nil] 
    def set_font_desc(font_desc)
      Gtk.gtk_font_chooser_set_font_desc(self, font_desc)
    end
    
    # @return [String] 
    def get_font()
      Gtk.gtk_font_chooser_get_font(self)
    end
    
    # @param [String] fontname 
    # @return [nil] 
    def set_font(fontname)
      Gtk.gtk_font_chooser_set_font(self, fontname)
    end
    
    # @return [String] 
    def get_preview_text()
      Gtk.gtk_font_chooser_get_preview_text(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_preview_text(text)
      Gtk.gtk_font_chooser_set_preview_text(self, text)
    end
    
    # @return [Integer] 
    def get_show_preview_entry()
      Gtk.gtk_font_chooser_get_show_preview_entry(self)
    end
    
    # @param [Integer] show_preview_entry 
    # @return [nil] 
    def set_show_preview_entry(show_preview_entry)
      Gtk.gtk_font_chooser_set_show_preview_entry(self, show_preview_entry)
    end
    
    # @param [Proc(_callback_gtk_font_filter_func_)] filter 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_filter_func(filter, user_data, destroy)
      Gtk.gtk_font_chooser_set_filter_func(self, filter, user_data, destroy)
    end
  end
  
  class GtkFontChooser < FFI::Struct
    include GtkFontChooserWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base_iface ::
  #   (unknown) 
  # :get_font_family ::
  #   (FFI::Pointer(*)) Methods
  # :get_font_face ::
  #   (FFI::Pointer(*)) 
  # :get_font_size ::
  #   (FFI::Pointer(*)) 
  # :set_filter_func ::
  #   (FFI::Pointer(*)) 
  # :font_activated ::
  #   (FFI::Pointer(*)) Signals
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) Padding
  class GtkFontChooserIface < FFI::Struct
    layout :base_iface, :char,
           :get_font_family, :pointer,
           :get_font_face, :pointer,
           :get_font_size, :pointer,
           :set_filter_func, :pointer,
           :font_activated, :pointer,
           :padding, [:pointer, 12]
  end
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_chooser_get_type, :gtk_font_chooser_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_font_family(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [FFI::Pointer(*PangoFontFamily)] 
  # @scope class
  attach_function :gtk_font_chooser_get_font_family, :gtk_font_chooser_get_font_family, [GtkFontChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_font_face(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [FFI::Pointer(*PangoFontFace)] 
  # @scope class
  attach_function :gtk_font_chooser_get_font_face, :gtk_font_chooser_get_font_face, [GtkFontChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_font_size(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_chooser_get_font_size, :gtk_font_chooser_get_font_size, [GtkFontChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_font_desc(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [FFI::Pointer(*PangoFontDescription)] 
  # @scope class
  attach_function :gtk_font_chooser_get_font_desc, :gtk_font_chooser_get_font_desc, [GtkFontChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_set_font_desc(fontchooser, font_desc)
  # @param [GtkFontChooser] fontchooser 
  # @param [FFI::Pointer(*PangoFontDescription)] font_desc 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_chooser_set_font_desc, :gtk_font_chooser_set_font_desc, [GtkFontChooser, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_font(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_font_chooser_get_font, :gtk_font_chooser_get_font, [GtkFontChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_set_font(fontchooser, fontname)
  # @param [GtkFontChooser] fontchooser 
  # @param [String] fontname 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_chooser_set_font, :gtk_font_chooser_set_font, [GtkFontChooser, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_preview_text(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_font_chooser_get_preview_text, :gtk_font_chooser_get_preview_text, [GtkFontChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_set_preview_text(fontchooser, text)
  # @param [GtkFontChooser] fontchooser 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_chooser_set_preview_text, :gtk_font_chooser_set_preview_text, [GtkFontChooser, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_get_show_preview_entry(fontchooser)
  # @param [GtkFontChooser] fontchooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_chooser_get_show_preview_entry, :gtk_font_chooser_get_show_preview_entry, [GtkFontChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_set_show_preview_entry(fontchooser, show_preview_entry)
  # @param [GtkFontChooser] fontchooser 
  # @param [Integer] show_preview_entry 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_chooser_set_show_preview_entry, :gtk_font_chooser_set_show_preview_entry, [GtkFontChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_set_filter_func(fontchooser, filter, user_data, destroy)
  # @param [GtkFontChooser] fontchooser 
  # @param [Proc(_callback_gtk_font_filter_func_)] filter 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_font_chooser_set_filter_func, :gtk_font_chooser_set_filter_func, [GtkFontChooser, :gtk_font_filter_func, :pointer, :pointer], :void
  
  # (Not documented)
  class GtkFontChooserDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkFontChooserDialogPrivate) < private >
  class GtkFontChooserDialog < FFI::Struct
    layout :parent_instance, GtkDialog.by_value,
           :priv, GtkFontChooserDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkFontChooserDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_chooser_dialog_get_type, :gtk_font_chooser_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_dialog_new(title, parent)
  # @param [String] title 
  # @param [GtkWindow] parent 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_font_chooser_dialog_new, :gtk_font_chooser_dialog_new, [:string, GtkWindow], GtkWidget
  
  # (Not documented)
  class GtkFontChooserWidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkFontChooserWidgetPrivate) < private >
  class GtkFontChooserWidget < FFI::Struct
    layout :parent_instance, GtkBox.by_value,
           :priv, GtkFontChooserWidgetPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkFontChooserWidgetClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_font_chooser_widget_get_type, :gtk_font_chooser_widget_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_font_chooser_widget_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_font_chooser_widget_new, :gtk_font_chooser_widget_new, [], GtkWidget
  
  # (Not documented)
  class GtkIconFactoryPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkIconFactoryPrivate) < private >
  module GtkIconFactoryWrappers
    # @param [String] stock_id 
    # @param [GtkIconSet] icon_set 
    # @return [nil] 
    def add(stock_id, icon_set)
      Gtk.gtk_icon_factory_add(self, stock_id, icon_set)
    end
    
    # @param [String] stock_id 
    # @return [GtkIconSet] 
    def lookup(stock_id)
      GtkIconSet.new Gtk.gtk_icon_factory_lookup(self, stock_id)
    end
    
    # @return [nil] 
    def add_default()
      Gtk.gtk_icon_factory_add_default(self)
    end
    
    # @return [nil] 
    def remove_default()
      Gtk.gtk_icon_factory_remove_default(self)
    end
  end
  
  class GtkIconFactory < FFI::Struct
    include GtkIconFactoryWrappers
    layout :parent_instance, :char,
           :priv, GtkIconFactoryPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkIconFactoryClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_factory_get_type, :gtk_icon_factory_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_new()
  # @return [GtkIconFactory] 
  # @scope class
  attach_function :gtk_icon_factory_new, :gtk_icon_factory_new, [], GtkIconFactory
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_add(factory, stock_id, icon_set)
  # @param [GtkIconFactory] factory 
  # @param [String] stock_id 
  # @param [GtkIconSet] icon_set 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_factory_add, :gtk_icon_factory_add, [GtkIconFactory, :string, GtkIconSet], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_lookup(factory, stock_id)
  # @param [GtkIconFactory] factory 
  # @param [String] stock_id 
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_icon_factory_lookup, :gtk_icon_factory_lookup, [GtkIconFactory, :string], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_add_default(factory)
  # @param [GtkIconFactory] factory 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_factory_add_default, :gtk_icon_factory_add_default, [GtkIconFactory], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_remove_default(factory)
  # @param [GtkIconFactory] factory 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_factory_remove_default, :gtk_icon_factory_remove_default, [GtkIconFactory], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_lookup_default(stock_id)
  # @param [String] stock_id 
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_icon_factory_lookup_default, :gtk_icon_factory_lookup_default, [:string], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_size_lookup(size, width, height)
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_size_lookup, :gtk_icon_size_lookup, [:gtk_icon_size, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_size_lookup_for_settings(settings, size, width, height)
  # @param [FFI::Pointer(*GtkSettings)] settings 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_size_lookup_for_settings, :gtk_icon_size_lookup_for_settings, [:pointer, :gtk_icon_size, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_size_register(name, width, height)
  # @param [String] name 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_icon_size_register, :gtk_icon_size_register, [:string, :int, :int], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_icon_size_register_alias(alias_, target)
  # @param [String] alias_ 
  # @param [Symbol from _enum_gtk_icon_size_] target 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_size_register_alias, :gtk_icon_size_register_alias, [:string, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_size_from_name(name)
  # @param [String] name 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_icon_size_from_name, :gtk_icon_size_from_name, [:string], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_icon_size_get_name(size)
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [String] 
  # @scope class
  attach_function :gtk_icon_size_get_name, :gtk_icon_size_get_name, [:gtk_icon_size], :string
  
  # (Not documented)
  # 
  # @method gtk_icon_set_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_set_get_type, :gtk_icon_set_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_set_new()
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_icon_set_new, :gtk_icon_set_new, [], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_set_new_from_pixbuf(pixbuf)
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_icon_set_new_from_pixbuf, :gtk_icon_set_new_from_pixbuf, [:pointer], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_set_ref(icon_set)
  # @param [GtkIconSet] icon_set 
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_icon_set_ref, :gtk_icon_set_ref, [GtkIconSet], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_set_unref(icon_set)
  # @param [GtkIconSet] icon_set 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_set_unref, :gtk_icon_set_unref, [GtkIconSet], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_set_copy(icon_set)
  # @param [GtkIconSet] icon_set 
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_icon_set_copy, :gtk_icon_set_copy, [GtkIconSet], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_set_render_icon(icon_set, style, direction, state, size, widget, detail)
  # @param [GtkIconSet] icon_set 
  # @param [GtkStyle] style 
  # @param [Symbol from _enum_gtk_text_direction_] direction 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @param [GtkWidget] widget 
  # @param [String] detail 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_set_render_icon, :gtk_icon_set_render_icon, [GtkIconSet, GtkStyle, :gtk_text_direction, :gtk_state_type, :gtk_icon_size, GtkWidget, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_set_add_source(icon_set, source)
  # @param [GtkIconSet] icon_set 
  # @param [GtkIconSource] source 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_set_add_source, :gtk_icon_set_add_source, [GtkIconSet, GtkIconSource], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_set_get_sizes(icon_set, sizes, n_sizes)
  # @param [GtkIconSet] icon_set 
  # @param [FFI::Pointer(**GtkIconSize)] sizes 
  # @param [FFI::Pointer(*Gint)] n_sizes 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_set_get_sizes, :gtk_icon_set_get_sizes, [GtkIconSet, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_source_get_type, :gtk_icon_source_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_source_new()
  # @return [GtkIconSource] 
  # @scope class
  attach_function :gtk_icon_source_new, :gtk_icon_source_new, [], GtkIconSource
  
  # (Not documented)
  # 
  # @method gtk_icon_source_copy(source)
  # @param [GtkIconSource] source 
  # @return [GtkIconSource] 
  # @scope class
  attach_function :gtk_icon_source_copy, :gtk_icon_source_copy, [GtkIconSource], GtkIconSource
  
  # (Not documented)
  # 
  # @method gtk_icon_source_free(source)
  # @param [GtkIconSource] source 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_free, :gtk_icon_source_free, [GtkIconSource], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_filename(source, filename)
  # @param [GtkIconSource] source 
  # @param [String] filename 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_filename, :gtk_icon_source_set_filename, [GtkIconSource, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_icon_name(source, icon_name)
  # @param [GtkIconSource] source 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_icon_name, :gtk_icon_source_set_icon_name, [GtkIconSource, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_pixbuf(source, pixbuf)
  # @param [GtkIconSource] source 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_pixbuf, :gtk_icon_source_set_pixbuf, [GtkIconSource, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_filename(source)
  # @param [GtkIconSource] source 
  # @return [String] 
  # @scope class
  attach_function :gtk_icon_source_get_filename, :gtk_icon_source_get_filename, [GtkIconSource], :string
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_icon_name(source)
  # @param [GtkIconSource] source 
  # @return [String] 
  # @scope class
  attach_function :gtk_icon_source_get_icon_name, :gtk_icon_source_get_icon_name, [GtkIconSource], :string
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_pixbuf(source)
  # @param [GtkIconSource] source 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_source_get_pixbuf, :gtk_icon_source_get_pixbuf, [GtkIconSource], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_direction_wildcarded(source, setting)
  # @param [GtkIconSource] source 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_direction_wildcarded, :gtk_icon_source_set_direction_wildcarded, [GtkIconSource, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_state_wildcarded(source, setting)
  # @param [GtkIconSource] source 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_state_wildcarded, :gtk_icon_source_set_state_wildcarded, [GtkIconSource, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_size_wildcarded(source, setting)
  # @param [GtkIconSource] source 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_size_wildcarded, :gtk_icon_source_set_size_wildcarded, [GtkIconSource, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_size_wildcarded(source)
  # @param [GtkIconSource] source 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_source_get_size_wildcarded, :gtk_icon_source_get_size_wildcarded, [GtkIconSource], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_state_wildcarded(source)
  # @param [GtkIconSource] source 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_source_get_state_wildcarded, :gtk_icon_source_get_state_wildcarded, [GtkIconSource], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_direction_wildcarded(source)
  # @param [GtkIconSource] source 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_source_get_direction_wildcarded, :gtk_icon_source_get_direction_wildcarded, [GtkIconSource], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_direction(source, direction)
  # @param [GtkIconSource] source 
  # @param [Symbol from _enum_gtk_text_direction_] direction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_direction, :gtk_icon_source_set_direction, [GtkIconSource, :gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_state(source, state)
  # @param [GtkIconSource] source 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_state, :gtk_icon_source_set_state, [GtkIconSource, :gtk_state_type], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_set_size(source, size)
  # @param [GtkIconSource] source 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_source_set_size, :gtk_icon_source_set_size, [GtkIconSource, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_direction(source)
  # @param [GtkIconSource] source 
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :gtk_icon_source_get_direction, :gtk_icon_source_get_direction, [GtkIconSource], :gtk_text_direction
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_state(source)
  # @param [GtkIconSource] source 
  # @return [Symbol from _enum_gtk_state_type_] 
  # @scope class
  attach_function :gtk_icon_source_get_state, :gtk_icon_source_get_state, [GtkIconSource], :gtk_state_type
  
  # (Not documented)
  # 
  # @method gtk_icon_source_get_size(source)
  # @param [GtkIconSource] source 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_icon_source_get_size, :gtk_icon_source_get_size, [GtkIconSource], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_icon_set_invalidate_caches()
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_set_invalidate_caches, :_gtk_icon_set_invalidate_caches, [], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_list_ids()
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_icon_factory_list_ids, :_gtk_icon_factory_list_ids, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_factory_ensure_default_icons()
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_factory_ensure_default_icons, :_gtk_icon_factory_ensure_default_icons, [], :void
  
  # (Not documented)
  class GtkStylePropertiesPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkSymbolicColorWrappers
    # @param [Float] factor 
    # @return [GtkSymbolicColor] 
    def new_shade(factor)
      GtkSymbolicColor.new Gtk.gtk_symbolic_color_new_shade(self, factor)
    end
    
    # @param [Float] factor 
    # @return [GtkSymbolicColor] 
    def new_alpha(factor)
      GtkSymbolicColor.new Gtk.gtk_symbolic_color_new_alpha(self, factor)
    end
    
    # @param [FFI::Pointer(*GtkSymbolicColor)] color2 
    # @param [Float] factor 
    # @return [GtkSymbolicColor] 
    def new_mix(color2, factor)
      GtkSymbolicColor.new Gtk.gtk_symbolic_color_new_mix(self, color2, factor)
    end
    
    # @return [GtkSymbolicColor] 
    def ref()
      GtkSymbolicColor.new Gtk.gtk_symbolic_color_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_symbolic_color_unref(self)
    end
    
    # @return [String] 
    def to_string()
      Gtk.gtk_symbolic_color_to_string(self)
    end
    
    # @param [FFI::Pointer(*GtkStyleProperties)] props 
    # @param [FFI::Pointer(*GdkRGBA)] resolved_color 
    # @return [Integer] 
    def resolve(props, resolved_color)
      Gtk.gtk_symbolic_color_resolve(self, props, resolved_color)
    end
  end
  
  class GtkSymbolicColor < FFI::Struct
    include GtkSymbolicColorWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  module GtkGradientWrappers
    # @param [Float] offset 
    # @param [GtkSymbolicColor] color 
    # @return [nil] 
    def add_color_stop(offset, color)
      Gtk.gtk_gradient_add_color_stop(self, offset, color)
    end
    
    # @return [GtkGradient] 
    def ref()
      GtkGradient.new Gtk.gtk_gradient_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_gradient_unref(self)
    end
    
    # @param [FFI::Pointer(*GtkStyleProperties)] props 
    # @param [FFI::Pointer(**CairoPatternT)] resolved_gradient 
    # @return [Integer] 
    def resolve(props, resolved_gradient)
      Gtk.gtk_gradient_resolve(self, props, resolved_gradient)
    end
    
    # @param [FFI::Pointer(*GtkStyleContext)] context 
    # @return [FFI::Pointer(*CairoPatternT)] 
    def resolve_for_context(context)
      Gtk.gtk_gradient_resolve_for_context(self, context)
    end
    
    # @return [String] 
    def to_string()
      Gtk.gtk_gradient_to_string(self)
    end
  end
  
  class GtkGradient < FFI::Struct
    include GtkGradientWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_object ::
  #   (unknown) 
  # :priv ::
  #   (GtkStylePropertiesPrivate) 
  module GtkStylePropertiesWrappers
    # @param [String] name 
    # @param [GtkSymbolicColor] color 
    # @return [nil] 
    def map_color(name, color)
      Gtk.gtk_style_properties_map_color(self, name, color)
    end
    
    # @param [String] name 
    # @return [GtkSymbolicColor] 
    def lookup_color(name)
      GtkSymbolicColor.new Gtk.gtk_style_properties_lookup_color(self, name)
    end
    
    # @param [String] property 
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def set_property(property, state, value)
      Gtk.gtk_style_properties_set_property(self, property, state, value)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [String] args 
    # @return [nil] 
    def set_valist(state, args)
      Gtk.gtk_style_properties_set_valist(self, state, args)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [nil] 
    def set(state)
      Gtk.gtk_style_properties_set(self, state)
    end
    
    # @param [String] property 
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [Integer] 
    def get_property(property, state, value)
      Gtk.gtk_style_properties_get_property(self, property, state, value)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [String] args 
    # @return [nil] 
    def get_valist(state, args)
      Gtk.gtk_style_properties_get_valist(self, state, args)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [nil] 
    def get(state)
      Gtk.gtk_style_properties_get(self, state)
    end
    
    # @param [String] property 
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [nil] 
    def unset_property(property, state)
      Gtk.gtk_style_properties_unset_property(self, property, state)
    end
    
    # @return [nil] 
    def clear()
      Gtk.gtk_style_properties_clear(self)
    end
    
    # @param [FFI::Pointer(*GtkStyleProperties)] props_to_merge 
    # @param [Integer] replace 
    # @return [nil] 
    def merge(props_to_merge, replace)
      Gtk.gtk_style_properties_merge(self, props_to_merge, replace)
    end
  end
  
  class GtkStyleProperties < FFI::Struct
    include GtkStylePropertiesWrappers
    layout :parent_object, :char,
           :priv, GtkStylePropertiesPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkStylePropertiesClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_style_property_parser_(string, value, error)
  # @param [String] string 
  # @param [FFI::Pointer(*GValue)] value 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  callback :gtk_style_property_parser, [:string, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_properties_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_properties_get_type, :gtk_style_properties_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_style_properties_register_property(parse_func, pspec)
  # @param [Proc(_callback_gtk_style_property_parser_)] parse_func 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_register_property, :gtk_style_properties_register_property, [:gtk_style_property_parser, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_lookup_property(property_name, parse_func, pspec)
  # @param [String] property_name 
  # @param [FFI::Pointer(*GtkStylePropertyParser)] parse_func 
  # @param [FFI::Pointer(**GParamSpec)] pspec 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_properties_lookup_property, :gtk_style_properties_lookup_property, [:string, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_properties_new()
  # @return [GtkStyleProperties] 
  # @scope class
  attach_function :gtk_style_properties_new, :gtk_style_properties_new, [], GtkStyleProperties
  
  # (Not documented)
  # 
  # @method gtk_style_properties_map_color(props, name, color)
  # @param [GtkStyleProperties] props 
  # @param [String] name 
  # @param [GtkSymbolicColor] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_map_color, :gtk_style_properties_map_color, [GtkStyleProperties, :string, GtkSymbolicColor], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_lookup_color(props, name)
  # @param [GtkStyleProperties] props 
  # @param [String] name 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_style_properties_lookup_color, :gtk_style_properties_lookup_color, [GtkStyleProperties, :string], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_style_properties_set_property(props, property, state, value)
  # @param [GtkStyleProperties] props 
  # @param [String] property 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_set_property, :gtk_style_properties_set_property, [GtkStyleProperties, :string, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_set_valist(props, state, args)
  # @param [GtkStyleProperties] props 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [String] args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_set_valist, :gtk_style_properties_set_valist, [GtkStyleProperties, :gtk_state_flags, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_set(props, state)
  # @param [GtkStyleProperties] props 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_set, :gtk_style_properties_set, [GtkStyleProperties, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_get_property(props, property, state, value)
  # @param [GtkStyleProperties] props 
  # @param [String] property 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_properties_get_property, :gtk_style_properties_get_property, [GtkStyleProperties, :string, :gtk_state_flags, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_properties_get_valist(props, state, args)
  # @param [GtkStyleProperties] props 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [String] args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_get_valist, :gtk_style_properties_get_valist, [GtkStyleProperties, :gtk_state_flags, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_get(props, state)
  # @param [GtkStyleProperties] props 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_get, :gtk_style_properties_get, [GtkStyleProperties, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_unset_property(props, property, state)
  # @param [GtkStyleProperties] props 
  # @param [String] property 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_unset_property, :gtk_style_properties_unset_property, [GtkStyleProperties, :string, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_clear(props)
  # @param [GtkStyleProperties] props 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_clear, :gtk_style_properties_clear, [GtkStyleProperties], :void
  
  # (Not documented)
  # 
  # @method gtk_style_properties_merge(props, props_to_merge, replace)
  # @param [GtkStyleProperties] props 
  # @param [GtkStyleProperties] props_to_merge 
  # @param [Integer] replace 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_properties_merge, :gtk_style_properties_merge, [GtkStyleProperties, GtkStyleProperties, :int], :void
  
  # (Not documented)
  module GtkStyleProviderWrappers
    # @param [GtkWidgetPath] path 
    # @return [GtkStyleProperties] 
    def get_style(path)
      GtkStyleProperties.new Gtk.gtk_style_provider_get_style(self, path)
    end
    
    # @param [GtkWidgetPath] path 
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GParamSpec)] pspec 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [Integer] 
    def get_style_property(path, state, pspec, value)
      Gtk.gtk_style_provider_get_style_property(self, path, state, pspec, value)
    end
    
    # @param [GtkWidgetPath] path 
    # @return [GtkIconFactory] 
    def get_icon_factory(path)
      GtkIconFactory.new Gtk.gtk_style_provider_get_icon_factory(self, path)
    end
  end
  
  class GtkStyleProvider < FFI::Struct
    include GtkStyleProviderWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :get_style ::
  #   (FFI::Pointer(*)) 
  # :get_style_property ::
  #   (FFI::Pointer(*)) 
  # :get_icon_factory ::
  #   (FFI::Pointer(*)) 
  class GtkStyleProviderIface < FFI::Struct
    layout :g_iface, :char,
           :get_style, :pointer,
           :get_style_property, :pointer,
           :get_icon_factory, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_style_provider_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_provider_get_type, :gtk_style_provider_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_style_provider_get_style(provider, path)
  # @param [GtkStyleProvider] provider 
  # @param [GtkWidgetPath] path 
  # @return [GtkStyleProperties] 
  # @scope class
  attach_function :gtk_style_provider_get_style, :gtk_style_provider_get_style, [GtkStyleProvider, GtkWidgetPath], GtkStyleProperties
  
  # (Not documented)
  # 
  # @method gtk_style_provider_get_style_property(provider, path, state, pspec, value)
  # @param [GtkStyleProvider] provider 
  # @param [GtkWidgetPath] path 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_provider_get_style_property, :gtk_style_provider_get_style_property, [GtkStyleProvider, GtkWidgetPath, :gtk_state_flags, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_provider_get_icon_factory(provider, path)
  # @param [GtkStyleProvider] provider 
  # @param [GtkWidgetPath] path 
  # @return [GtkIconFactory] 
  # @scope class
  attach_function :gtk_style_provider_get_icon_factory, :gtk_style_provider_get_icon_factory, [GtkStyleProvider, GtkWidgetPath], GtkIconFactory
  
  # (Not documented)
  class GtkStyleContextPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_object ::
  #   (unknown) 
  # :priv ::
  #   (GtkStyleContextPrivate) 
  module GtkStyleContextWrappers
    # @param [GtkStyleProvider] provider 
    # @param [Integer] priority 
    # @return [nil] 
    def add_provider(provider, priority)
      Gtk.gtk_style_context_add_provider(self, provider, priority)
    end
    
    # @param [GtkStyleProvider] provider 
    # @return [nil] 
    def remove_provider(provider)
      Gtk.gtk_style_context_remove_provider(self, provider)
    end
    
    # @return [nil] 
    def save()
      Gtk.gtk_style_context_save(self)
    end
    
    # @return [nil] 
    def restore()
      Gtk.gtk_style_context_restore(self)
    end
    
    # @param [String] property 
    # @return [GtkCssSection] 
    def get_section(property)
      GtkCssSection.new Gtk.gtk_style_context_get_section(self, property)
    end
    
    # @param [String] property 
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def get_property(property, state, value)
      Gtk.gtk_style_context_get_property(self, property, state, value)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [String] args 
    # @return [nil] 
    def get_valist(state, args)
      Gtk.gtk_style_context_get_valist(self, state, args)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [nil] 
    def get(state)
      Gtk.gtk_style_context_get(self, state)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] flags 
    # @return [nil] 
    def set_state(flags)
      Gtk.gtk_style_context_set_state(self, flags)
    end
    
    # @return [Symbol from _enum_gtk_state_flags_] 
    def get_state()
      Gtk.gtk_style_context_get_state(self)
    end
    
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @param [FFI::Pointer(*Gdouble)] progress 
    # @return [Integer] 
    def state_is_running(state, progress)
      Gtk.gtk_style_context_state_is_running(self, state, progress)
    end
    
    # @param [GtkWidgetPath] path 
    # @return [nil] 
    def set_path(path)
      Gtk.gtk_style_context_set_path(self, path)
    end
    
    # @return [GtkWidgetPath] 
    def get_path()
      GtkWidgetPath.new Gtk.gtk_style_context_get_path(self)
    end
    
    # @param [FFI::Pointer(*GtkStyleContext)] parent 
    # @return [nil] 
    def set_parent(parent)
      Gtk.gtk_style_context_set_parent(self, parent)
    end
    
    # @return [GtkStyleContext] 
    def get_parent()
      GtkStyleContext.new Gtk.gtk_style_context_get_parent(self)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_classes()
      Gtk.gtk_style_context_list_classes(self)
    end
    
    # @param [String] class_name 
    # @return [nil] 
    def add_class(class_name)
      Gtk.gtk_style_context_add_class(self, class_name)
    end
    
    # @param [String] class_name 
    # @return [nil] 
    def remove_class(class_name)
      Gtk.gtk_style_context_remove_class(self, class_name)
    end
    
    # @param [String] class_name 
    # @return [Integer] 
    def has_class(class_name)
      Gtk.gtk_style_context_has_class(self, class_name)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_regions()
      Gtk.gtk_style_context_list_regions(self)
    end
    
    # @param [String] region_name 
    # @param [Symbol from _enum_gtk_region_flags_] flags 
    # @return [nil] 
    def add_region(region_name, flags)
      Gtk.gtk_style_context_add_region(self, region_name, flags)
    end
    
    # @param [String] region_name 
    # @return [nil] 
    def remove_region(region_name)
      Gtk.gtk_style_context_remove_region(self, region_name)
    end
    
    # @param [String] region_name 
    # @param [FFI::Pointer(*GtkRegionFlags)] flags_return 
    # @return [Integer] 
    def has_region(region_name, flags_return)
      Gtk.gtk_style_context_has_region(self, region_name, flags_return)
    end
    
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def get_style_property(property_name, value)
      Gtk.gtk_style_context_get_style_property(self, property_name, value)
    end
    
    # @param [String] args 
    # @return [nil] 
    def get_style_valist(args)
      Gtk.gtk_style_context_get_style_valist(self, args)
    end
    
    # @return [nil] 
    def get_style()
      Gtk.gtk_style_context_get_style(self)
    end
    
    # @param [String] stock_id 
    # @return [GtkIconSet] 
    def lookup_icon_set(stock_id)
      GtkIconSet.new Gtk.gtk_style_context_lookup_icon_set(self, stock_id)
    end
    
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_style_context_set_screen(self, screen)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_style_context_get_screen(self)
    end
    
    # @param [Symbol from _enum_gtk_text_direction_] direction 
    # @return [nil] 
    def set_direction(direction)
      Gtk.gtk_style_context_set_direction(self, direction)
    end
    
    # @return [Symbol from _enum_gtk_text_direction_] 
    def get_direction()
      Gtk.gtk_style_context_get_direction(self)
    end
    
    # @param [Symbol from _enum_gtk_junction_sides_] sides 
    # @return [nil] 
    def set_junction_sides(sides)
      Gtk.gtk_style_context_set_junction_sides(self, sides)
    end
    
    # @return [Symbol from _enum_gtk_junction_sides_] 
    def get_junction_sides()
      Gtk.gtk_style_context_get_junction_sides(self)
    end
    
    # @param [String] color_name 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [Integer] 
    def lookup_color(color_name, color)
      Gtk.gtk_style_context_lookup_color(self, color_name, color)
    end
    
    # @param [FFI::Pointer(*GdkWindow)] window 
    # @param [FFI::Pointer(Gpointer)] region_id 
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @param [Integer] state_value 
    # @return [nil] 
    def notify_state_change(window, region_id, state, state_value)
      Gtk.gtk_style_context_notify_state_change(self, window, region_id, state, state_value)
    end
    
    # @param [FFI::Pointer(Gpointer)] region_id 
    # @return [nil] 
    def cancel_animations(region_id)
      Gtk.gtk_style_context_cancel_animations(self, region_id)
    end
    
    # @param [FFI::Pointer(*GdkWindow)] window 
    # @param [Integer] dx 
    # @param [Integer] dy 
    # @return [nil] 
    def scroll_animations(window, dx, dy)
      Gtk.gtk_style_context_scroll_animations(self, window, dx, dy)
    end
    
    # @param [FFI::Pointer(Gpointer)] region_id 
    # @return [nil] 
    def push_animatable_region(region_id)
      Gtk.gtk_style_context_push_animatable_region(self, region_id)
    end
    
    # @return [nil] 
    def pop_animatable_region()
      Gtk.gtk_style_context_pop_animatable_region(self)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_color(state, color)
      Gtk.gtk_style_context_get_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_background_color(state, color)
      Gtk.gtk_style_context_get_background_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_border_color(state, color)
      Gtk.gtk_style_context_get_border_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [FFI::Pointer(*PangoFontDescription)] 
    def get_font(state)
      Gtk.gtk_style_context_get_font(self, state)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [GtkBorder] border 
    # @return [nil] 
    def get_border(state, border)
      Gtk.gtk_style_context_get_border(self, state, border)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [GtkBorder] padding 
    # @return [nil] 
    def get_padding(state, padding)
      Gtk.gtk_style_context_get_padding(self, state, padding)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [GtkBorder] margin 
    # @return [nil] 
    def get_margin(state, margin)
      Gtk.gtk_style_context_get_margin(self, state, margin)
    end
    
    # @return [nil] 
    def invalidate()
      Gtk.gtk_style_context_invalidate(self)
    end
    
    # @param [FFI::Pointer(*GdkWindow)] window 
    # @return [nil] 
    def set_background(window)
      Gtk.gtk_style_context_set_background(self, window)
    end
  end
  
  class GtkStyleContext < FFI::Struct
    include GtkStyleContextWrappers
    layout :parent_object, :char,
           :priv, GtkStyleContextPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkStyleContextClass < FFI::Struct
    layout :parent_class, :char,
           :changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_context_get_type, :gtk_style_context_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_style_context_new()
  # @return [GtkStyleContext] 
  # @scope class
  attach_function :gtk_style_context_new, :gtk_style_context_new, [], GtkStyleContext
  
  # (Not documented)
  # 
  # @method gtk_style_context_add_provider_for_screen(screen, provider, priority)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @param [GtkStyleProvider] provider 
  # @param [Integer] priority 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_add_provider_for_screen, :gtk_style_context_add_provider_for_screen, [:pointer, GtkStyleProvider, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_remove_provider_for_screen(screen, provider)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @param [GtkStyleProvider] provider 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_remove_provider_for_screen, :gtk_style_context_remove_provider_for_screen, [:pointer, GtkStyleProvider], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_add_provider(context, provider, priority)
  # @param [GtkStyleContext] context 
  # @param [GtkStyleProvider] provider 
  # @param [Integer] priority 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_add_provider, :gtk_style_context_add_provider, [GtkStyleContext, GtkStyleProvider, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_remove_provider(context, provider)
  # @param [GtkStyleContext] context 
  # @param [GtkStyleProvider] provider 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_remove_provider, :gtk_style_context_remove_provider, [GtkStyleContext, GtkStyleProvider], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_save(context)
  # @param [GtkStyleContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_save, :gtk_style_context_save, [GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_restore(context)
  # @param [GtkStyleContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_restore, :gtk_style_context_restore, [GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_section(context, property)
  # @param [GtkStyleContext] context 
  # @param [String] property 
  # @return [GtkCssSection] 
  # @scope class
  attach_function :gtk_style_context_get_section, :gtk_style_context_get_section, [GtkStyleContext, :string], GtkCssSection
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_property(context, property, state, value)
  # @param [GtkStyleContext] context 
  # @param [String] property 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_property, :gtk_style_context_get_property, [GtkStyleContext, :string, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_valist(context, state, args)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [String] args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_valist, :gtk_style_context_get_valist, [GtkStyleContext, :gtk_state_flags, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get(context, state)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get, :gtk_style_context_get, [GtkStyleContext, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_state(context, flags)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_state, :gtk_style_context_set_state, [GtkStyleContext, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_state(context)
  # @param [GtkStyleContext] context 
  # @return [Symbol from _enum_gtk_state_flags_] 
  # @scope class
  attach_function :gtk_style_context_get_state, :gtk_style_context_get_state, [GtkStyleContext], :gtk_state_flags
  
  # (Not documented)
  # 
  # @method gtk_style_context_state_is_running(context, state, progress)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*Gdouble)] progress 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_context_state_is_running, :gtk_style_context_state_is_running, [GtkStyleContext, :gtk_state_type, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_path(context, path)
  # @param [GtkStyleContext] context 
  # @param [GtkWidgetPath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_path, :gtk_style_context_set_path, [GtkStyleContext, GtkWidgetPath], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_path(context)
  # @param [GtkStyleContext] context 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_style_context_get_path, :gtk_style_context_get_path, [GtkStyleContext], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_parent(context, parent)
  # @param [GtkStyleContext] context 
  # @param [GtkStyleContext] parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_parent, :gtk_style_context_set_parent, [GtkStyleContext, GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_parent(context)
  # @param [GtkStyleContext] context 
  # @return [GtkStyleContext] 
  # @scope class
  attach_function :gtk_style_context_get_parent, :gtk_style_context_get_parent, [GtkStyleContext], GtkStyleContext
  
  # (Not documented)
  # 
  # @method gtk_style_context_list_classes(context)
  # @param [GtkStyleContext] context 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_style_context_list_classes, :gtk_style_context_list_classes, [GtkStyleContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_style_context_add_class(context, class_name)
  # @param [GtkStyleContext] context 
  # @param [String] class_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_add_class, :gtk_style_context_add_class, [GtkStyleContext, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_remove_class(context, class_name)
  # @param [GtkStyleContext] context 
  # @param [String] class_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_remove_class, :gtk_style_context_remove_class, [GtkStyleContext, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_has_class(context, class_name)
  # @param [GtkStyleContext] context 
  # @param [String] class_name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_context_has_class, :gtk_style_context_has_class, [GtkStyleContext, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_style_context_list_regions(context)
  # @param [GtkStyleContext] context 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_style_context_list_regions, :gtk_style_context_list_regions, [GtkStyleContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_style_context_add_region(context, region_name, flags)
  # @param [GtkStyleContext] context 
  # @param [String] region_name 
  # @param [Symbol from _enum_gtk_region_flags_] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_add_region, :gtk_style_context_add_region, [GtkStyleContext, :string, :gtk_region_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_remove_region(context, region_name)
  # @param [GtkStyleContext] context 
  # @param [String] region_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_remove_region, :gtk_style_context_remove_region, [GtkStyleContext, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_has_region(context, region_name, flags_return)
  # @param [GtkStyleContext] context 
  # @param [String] region_name 
  # @param [FFI::Pointer(*GtkRegionFlags)] flags_return 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_context_has_region, :gtk_style_context_has_region, [GtkStyleContext, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_style_property(context, property_name, value)
  # @param [GtkStyleContext] context 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_style_property, :gtk_style_context_get_style_property, [GtkStyleContext, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_style_valist(context, args)
  # @param [GtkStyleContext] context 
  # @param [String] args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_style_valist, :gtk_style_context_get_style_valist, [GtkStyleContext, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_style(context)
  # @param [GtkStyleContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_style, :gtk_style_context_get_style, [GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_lookup_icon_set(context, stock_id)
  # @param [GtkStyleContext] context 
  # @param [String] stock_id 
  # @return [GtkIconSet] 
  # @scope class
  attach_function :gtk_style_context_lookup_icon_set, :gtk_style_context_lookup_icon_set, [GtkStyleContext, :string], GtkIconSet
  
  # (Not documented)
  # 
  # @method gtk_icon_set_render_icon_pixbuf(icon_set, context, size)
  # @param [GtkIconSet] icon_set 
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_set_render_icon_pixbuf, :gtk_icon_set_render_icon_pixbuf, [GtkIconSet, GtkStyleContext, :gtk_icon_size], :pointer
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_screen(context, screen)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_screen, :gtk_style_context_set_screen, [GtkStyleContext, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_screen(context)
  # @param [GtkStyleContext] context 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_style_context_get_screen, :gtk_style_context_get_screen, [GtkStyleContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_direction(context, direction)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_text_direction_] direction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_direction, :gtk_style_context_set_direction, [GtkStyleContext, :gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_direction(context)
  # @param [GtkStyleContext] context 
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :gtk_style_context_get_direction, :gtk_style_context_get_direction, [GtkStyleContext], :gtk_text_direction
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_junction_sides(context, sides)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_junction_sides_] sides 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_junction_sides, :gtk_style_context_set_junction_sides, [GtkStyleContext, :gtk_junction_sides], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_junction_sides(context)
  # @param [GtkStyleContext] context 
  # @return [Symbol from _enum_gtk_junction_sides_] 
  # @scope class
  attach_function :gtk_style_context_get_junction_sides, :gtk_style_context_get_junction_sides, [GtkStyleContext], :gtk_junction_sides
  
  # (Not documented)
  # 
  # @method gtk_style_context_lookup_color(context, color_name, color)
  # @param [GtkStyleContext] context 
  # @param [String] color_name 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_style_context_lookup_color, :gtk_style_context_lookup_color, [GtkStyleContext, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_style_context_notify_state_change(context, window, region_id, state, state_value)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @param [FFI::Pointer(Gpointer)] region_id 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [Integer] state_value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_notify_state_change, :gtk_style_context_notify_state_change, [GtkStyleContext, :pointer, :pointer, :gtk_state_type, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_cancel_animations(context, region_id)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(Gpointer)] region_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_cancel_animations, :gtk_style_context_cancel_animations, [GtkStyleContext, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_scroll_animations(context, window, dx, dy)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @param [Integer] dx 
  # @param [Integer] dy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_scroll_animations, :gtk_style_context_scroll_animations, [GtkStyleContext, :pointer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_push_animatable_region(context, region_id)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(Gpointer)] region_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_push_animatable_region, :gtk_style_context_push_animatable_region, [GtkStyleContext, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_pop_animatable_region(context)
  # @param [GtkStyleContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_pop_animatable_region, :gtk_style_context_pop_animatable_region, [GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_color(context, state, color)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_color, :gtk_style_context_get_color, [GtkStyleContext, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_background_color(context, state, color)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_background_color, :gtk_style_context_get_background_color, [GtkStyleContext, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_border_color(context, state, color)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_border_color, :gtk_style_context_get_border_color, [GtkStyleContext, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_font(context, state)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [FFI::Pointer(*PangoFontDescription)] 
  # @scope class
  attach_function :gtk_style_context_get_font, :gtk_style_context_get_font, [GtkStyleContext, :gtk_state_flags], :pointer
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_border(context, state, border)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [GtkBorder] border 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_border, :gtk_style_context_get_border, [GtkStyleContext, :gtk_state_flags, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_padding(context, state, padding)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [GtkBorder] padding 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_padding, :gtk_style_context_get_padding, [GtkStyleContext, :gtk_state_flags, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_margin(context, state, margin)
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [GtkBorder] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_get_margin, :gtk_style_context_get_margin, [GtkStyleContext, :gtk_state_flags, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_invalidate(context)
  # @param [GtkStyleContext] context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_invalidate, :gtk_style_context_invalidate, [GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_reset_widgets(screen)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_reset_widgets, :gtk_style_context_reset_widgets, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_set_background(context, window)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_style_context_set_background, :gtk_style_context_set_background, [GtkStyleContext, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_render_check(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_check, :gtk_render_check, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_option(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_option, :gtk_render_option, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_arrow(context, cr, angle, x, y, size)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] angle 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_arrow, :gtk_render_arrow, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_background(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_background, :gtk_render_background, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_frame(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_frame, :gtk_render_frame, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_expander(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_expander, :gtk_render_expander, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_focus(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_focus, :gtk_render_focus, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_layout(context, cr, x, y, layout)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [FFI::Pointer(*PangoLayout)] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_layout, :gtk_render_layout, [GtkStyleContext, :pointer, :double, :double, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_render_line(context, cr, x0, y0, x1, y1)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x0 
  # @param [Float] y0 
  # @param [Float] x1 
  # @param [Float] y1 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_line, :gtk_render_line, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_slider(context, cr, x, y, width, height, orientation)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_slider, :gtk_render_slider, [GtkStyleContext, :pointer, :double, :double, :double, :double, :gtk_orientation], :void
  
  # (Not documented)
  # 
  # @method gtk_render_frame_gap(context, cr, x, y, width, height, gap_side, xy0_gap, xy1_gap)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Symbol from _enum_gtk_position_type_] gap_side 
  # @param [Float] xy0_gap 
  # @param [Float] xy1_gap 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_frame_gap, :gtk_render_frame_gap, [GtkStyleContext, :pointer, :double, :double, :double, :double, :gtk_position_type, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_extension(context, cr, x, y, width, height, gap_side)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Symbol from _enum_gtk_position_type_] gap_side 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_extension, :gtk_render_extension, [GtkStyleContext, :pointer, :double, :double, :double, :double, :gtk_position_type], :void
  
  # (Not documented)
  # 
  # @method gtk_render_handle(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_handle, :gtk_render_handle, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_activity(context, cr, x, y, width, height)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_activity, :gtk_render_activity, [GtkStyleContext, :pointer, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_icon_pixbuf(context, source, size)
  # @param [GtkStyleContext] context 
  # @param [GtkIconSource] source 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_render_icon_pixbuf, :gtk_render_icon_pixbuf, [GtkStyleContext, GtkIconSource, :gtk_icon_size], :pointer
  
  # (Not documented)
  # 
  # @method gtk_render_icon(context, cr, pixbuf, x, y)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_icon, :gtk_render_icon, [GtkStyleContext, :pointer, :pointer, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_render_insertion_cursor(context, cr, x, y, layout, index, direction)
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [FFI::Pointer(*PangoLayout)] layout 
  # @param [Integer] index 
  # @param [unknown] direction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_render_insertion_cursor, :gtk_render_insertion_cursor, [GtkStyleContext, :pointer, :double, :double, :pointer, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_draw_insertion_cursor(widget, cr, location, is_primary, direction, draw_arrow)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [FFI::Pointer(*GdkRectangle)] location 
  # @param [Integer] is_primary 
  # @param [Symbol from _enum_gtk_text_direction_] direction 
  # @param [Integer] draw_arrow 
  # @return [nil] 
  # @scope class
  attach_function :gtk_draw_insertion_cursor, :gtk_draw_insertion_cursor, [GtkWidget, :pointer, :pointer, :int, :gtk_text_direction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_style_context_get_attributes(attributes, context, flags)
  # @param [FFI::Pointer(*AtkAttributeSet)] attributes 
  # @param [GtkStyleContext] context 
  # @param [Symbol from _enum_gtk_state_flags_] flags 
  # @return [FFI::Pointer(*AtkAttributeSet)] 
  # @scope class
  attach_function :gtk_style_context_get_attributes, :_gtk_style_context_get_attributes, [:pointer, GtkStyleContext, :gtk_state_flags], :pointer
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_symbolic_color_get_type, :gtk_symbolic_color_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_new_literal(color)
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_new_literal, :gtk_symbolic_color_new_literal, [:pointer], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_new_name(name)
  # @param [String] name 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_new_name, :gtk_symbolic_color_new_name, [:string], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_new_shade(color, factor)
  # @param [GtkSymbolicColor] color 
  # @param [Float] factor 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_new_shade, :gtk_symbolic_color_new_shade, [GtkSymbolicColor, :double], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_new_alpha(color, factor)
  # @param [GtkSymbolicColor] color 
  # @param [Float] factor 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_new_alpha, :gtk_symbolic_color_new_alpha, [GtkSymbolicColor, :double], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_new_mix(color1, color2, factor)
  # @param [GtkSymbolicColor] color1 
  # @param [GtkSymbolicColor] color2 
  # @param [Float] factor 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_new_mix, :gtk_symbolic_color_new_mix, [GtkSymbolicColor, GtkSymbolicColor, :double], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_new_win32(theme_class, id)
  # @param [String] theme_class 
  # @param [Integer] id 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_new_win32, :gtk_symbolic_color_new_win32, [:string, :int], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_ref(color)
  # @param [GtkSymbolicColor] color 
  # @return [GtkSymbolicColor] 
  # @scope class
  attach_function :gtk_symbolic_color_ref, :gtk_symbolic_color_ref, [GtkSymbolicColor], GtkSymbolicColor
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_unref(color)
  # @param [GtkSymbolicColor] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_symbolic_color_unref, :gtk_symbolic_color_unref, [GtkSymbolicColor], :void
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_to_string(color)
  # @param [GtkSymbolicColor] color 
  # @return [String] 
  # @scope class
  attach_function :gtk_symbolic_color_to_string, :gtk_symbolic_color_to_string, [GtkSymbolicColor], :string
  
  # (Not documented)
  # 
  # @method gtk_symbolic_color_resolve(color, props, resolved_color)
  # @param [GtkSymbolicColor] color 
  # @param [GtkStyleProperties] props 
  # @param [FFI::Pointer(*GdkRGBA)] resolved_color 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_symbolic_color_resolve, :gtk_symbolic_color_resolve, [GtkSymbolicColor, GtkStyleProperties, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_gradient_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_gradient_get_type, :gtk_gradient_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_gradient_new_linear(x0, y0, x1, y1)
  # @param [Float] x0 
  # @param [Float] y0 
  # @param [Float] x1 
  # @param [Float] y1 
  # @return [GtkGradient] 
  # @scope class
  attach_function :gtk_gradient_new_linear, :gtk_gradient_new_linear, [:double, :double, :double, :double], GtkGradient
  
  # (Not documented)
  # 
  # @method gtk_gradient_new_radial(x0, y0, radius0, x1, y1, radius1)
  # @param [Float] x0 
  # @param [Float] y0 
  # @param [Float] radius0 
  # @param [Float] x1 
  # @param [Float] y1 
  # @param [Float] radius1 
  # @return [GtkGradient] 
  # @scope class
  attach_function :gtk_gradient_new_radial, :gtk_gradient_new_radial, [:double, :double, :double, :double, :double, :double], GtkGradient
  
  # (Not documented)
  # 
  # @method gtk_gradient_add_color_stop(gradient, offset, color)
  # @param [GtkGradient] gradient 
  # @param [Float] offset 
  # @param [GtkSymbolicColor] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_gradient_add_color_stop, :gtk_gradient_add_color_stop, [GtkGradient, :double, GtkSymbolicColor], :void
  
  # (Not documented)
  # 
  # @method gtk_gradient_ref(gradient)
  # @param [GtkGradient] gradient 
  # @return [GtkGradient] 
  # @scope class
  attach_function :gtk_gradient_ref, :gtk_gradient_ref, [GtkGradient], GtkGradient
  
  # (Not documented)
  # 
  # @method gtk_gradient_unref(gradient)
  # @param [GtkGradient] gradient 
  # @return [nil] 
  # @scope class
  attach_function :gtk_gradient_unref, :gtk_gradient_unref, [GtkGradient], :void
  
  # (Not documented)
  # 
  # @method gtk_gradient_resolve(gradient, props, resolved_gradient)
  # @param [GtkGradient] gradient 
  # @param [GtkStyleProperties] props 
  # @param [FFI::Pointer(**CairoPatternT)] resolved_gradient 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_gradient_resolve, :gtk_gradient_resolve, [GtkGradient, GtkStyleProperties, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_gradient_resolve_for_context(gradient, context)
  # @param [GtkGradient] gradient 
  # @param [GtkStyleContext] context 
  # @return [FFI::Pointer(*CairoPatternT)] 
  # @scope class
  attach_function :gtk_gradient_resolve_for_context, :gtk_gradient_resolve_for_context, [GtkGradient, GtkStyleContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_gradient_to_string(gradient)
  # @param [GtkGradient] gradient 
  # @return [String] 
  # @scope class
  attach_function :gtk_gradient_to_string, :gtk_gradient_to_string, [GtkGradient], :string
  
  # (Not documented)
  class GtkGridPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) < private >
  # :priv ::
  #   (GtkGridPrivate) 
  module GtkGridWrappers
    # @param [GtkWidget] child 
    # @param [Integer] left 
    # @param [Integer] top 
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def attach(child, left, top, width, height)
      Gtk.gtk_grid_attach(self, child, left, top, width, height)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] sibling 
    # @param [Symbol from _enum_gtk_position_type_] side 
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def attach_next_to(child, sibling, side, width, height)
      Gtk.gtk_grid_attach_next_to(self, child, sibling, side, width, height)
    end
    
    # @param [Integer] left 
    # @param [Integer] top 
    # @return [GtkWidget] 
    def get_child_at(left, top)
      GtkWidget.new Gtk.gtk_grid_get_child_at(self, left, top)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def insert_row(position)
      Gtk.gtk_grid_insert_row(self, position)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def insert_column(position)
      Gtk.gtk_grid_insert_column(self, position)
    end
    
    # @param [GtkWidget] sibling 
    # @param [Symbol from _enum_gtk_position_type_] side 
    # @return [nil] 
    def insert_next_to(sibling, side)
      Gtk.gtk_grid_insert_next_to(self, sibling, side)
    end
    
    # @param [Integer] homogeneous 
    # @return [nil] 
    def set_row_homogeneous(homogeneous)
      Gtk.gtk_grid_set_row_homogeneous(self, homogeneous)
    end
    
    # @return [Integer] 
    def get_row_homogeneous()
      Gtk.gtk_grid_get_row_homogeneous(self)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_row_spacing(spacing)
      Gtk.gtk_grid_set_row_spacing(self, spacing)
    end
    
    # @return [Integer] 
    def get_row_spacing()
      Gtk.gtk_grid_get_row_spacing(self)
    end
    
    # @param [Integer] homogeneous 
    # @return [nil] 
    def set_column_homogeneous(homogeneous)
      Gtk.gtk_grid_set_column_homogeneous(self, homogeneous)
    end
    
    # @return [Integer] 
    def get_column_homogeneous()
      Gtk.gtk_grid_get_column_homogeneous(self)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_column_spacing(spacing)
      Gtk.gtk_grid_set_column_spacing(self, spacing)
    end
    
    # @return [Integer] 
    def get_column_spacing()
      Gtk.gtk_grid_get_column_spacing(self)
    end
  end
  
  class GtkGrid < FFI::Struct
    include GtkGridWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkGridPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkGridClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_grid_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_grid_get_type, :gtk_grid_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_grid_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_grid_new, :gtk_grid_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_grid_attach(grid, child, left, top, width, height)
  # @param [GtkGrid] grid 
  # @param [GtkWidget] child 
  # @param [Integer] left 
  # @param [Integer] top 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_attach, :gtk_grid_attach, [GtkGrid, GtkWidget, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_attach_next_to(grid, child, sibling, side, width, height)
  # @param [GtkGrid] grid 
  # @param [GtkWidget] child 
  # @param [GtkWidget] sibling 
  # @param [Symbol from _enum_gtk_position_type_] side 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_attach_next_to, :gtk_grid_attach_next_to, [GtkGrid, GtkWidget, GtkWidget, :gtk_position_type, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_get_child_at(grid, left, top)
  # @param [GtkGrid] grid 
  # @param [Integer] left 
  # @param [Integer] top 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_grid_get_child_at, :gtk_grid_get_child_at, [GtkGrid, :int, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_grid_insert_row(grid, position)
  # @param [GtkGrid] grid 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_insert_row, :gtk_grid_insert_row, [GtkGrid, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_insert_column(grid, position)
  # @param [GtkGrid] grid 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_insert_column, :gtk_grid_insert_column, [GtkGrid, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_insert_next_to(grid, sibling, side)
  # @param [GtkGrid] grid 
  # @param [GtkWidget] sibling 
  # @param [Symbol from _enum_gtk_position_type_] side 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_insert_next_to, :gtk_grid_insert_next_to, [GtkGrid, GtkWidget, :gtk_position_type], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_set_row_homogeneous(grid, homogeneous)
  # @param [GtkGrid] grid 
  # @param [Integer] homogeneous 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_set_row_homogeneous, :gtk_grid_set_row_homogeneous, [GtkGrid, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_get_row_homogeneous(grid)
  # @param [GtkGrid] grid 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_grid_get_row_homogeneous, :gtk_grid_get_row_homogeneous, [GtkGrid], :int
  
  # (Not documented)
  # 
  # @method gtk_grid_set_row_spacing(grid, spacing)
  # @param [GtkGrid] grid 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_set_row_spacing, :gtk_grid_set_row_spacing, [GtkGrid, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_get_row_spacing(grid)
  # @param [GtkGrid] grid 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_grid_get_row_spacing, :gtk_grid_get_row_spacing, [GtkGrid], :uint
  
  # (Not documented)
  # 
  # @method gtk_grid_set_column_homogeneous(grid, homogeneous)
  # @param [GtkGrid] grid 
  # @param [Integer] homogeneous 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_set_column_homogeneous, :gtk_grid_set_column_homogeneous, [GtkGrid, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_get_column_homogeneous(grid)
  # @param [GtkGrid] grid 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_grid_get_column_homogeneous, :gtk_grid_get_column_homogeneous, [GtkGrid], :int
  
  # (Not documented)
  # 
  # @method gtk_grid_set_column_spacing(grid, spacing)
  # @param [GtkGrid] grid 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grid_set_column_spacing, :gtk_grid_set_column_spacing, [GtkGrid, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_grid_get_column_spacing(grid)
  # @param [GtkGrid] grid 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_grid_get_column_spacing, :gtk_grid_get_column_spacing, [GtkGrid], :uint
  
  # (Not documented)
  module GtkIconInfoWrappers
    # @return [GtkIconInfo] 
    def copy()
      GtkIconInfo.new Gtk.gtk_icon_info_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_icon_info_free(self)
    end
    
    # @return [Integer] 
    def get_base_size()
      Gtk.gtk_icon_info_get_base_size(self)
    end
    
    # @return [String] 
    def get_filename()
      Gtk.gtk_icon_info_get_filename(self)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_builtin_pixbuf()
      Gtk.gtk_icon_info_get_builtin_pixbuf(self)
    end
    
    # @param [FFI::Pointer(**GError)] error 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def load_icon(error)
      Gtk.gtk_icon_info_load_icon(self, error)
    end
    
    # @param [FFI::Pointer(*GdkRGBA)] fg 
    # @param [FFI::Pointer(*GdkRGBA)] success_color 
    # @param [FFI::Pointer(*GdkRGBA)] warning_color 
    # @param [FFI::Pointer(*GdkRGBA)] error_color 
    # @param [FFI::Pointer(*Gboolean)] was_symbolic 
    # @param [FFI::Pointer(**GError)] error 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def load_symbolic(fg, success_color, warning_color, error_color, was_symbolic, error)
      Gtk.gtk_icon_info_load_symbolic(self, fg, success_color, warning_color, error_color, was_symbolic, error)
    end
    
    # @param [GtkStyleContext] context 
    # @param [FFI::Pointer(*Gboolean)] was_symbolic 
    # @param [FFI::Pointer(**GError)] error 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def load_symbolic_for_context(context, was_symbolic, error)
      Gtk.gtk_icon_info_load_symbolic_for_context(self, context, was_symbolic, error)
    end
    
    # @param [GtkStyle] style 
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @param [FFI::Pointer(*Gboolean)] was_symbolic 
    # @param [FFI::Pointer(**GError)] error 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def load_symbolic_for_style(style, state, was_symbolic, error)
      Gtk.gtk_icon_info_load_symbolic_for_style(self, style, state, was_symbolic, error)
    end
    
    # @param [Integer] raw_coordinates 
    # @return [nil] 
    def set_raw_coordinates(raw_coordinates)
      Gtk.gtk_icon_info_set_raw_coordinates(self, raw_coordinates)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] rectangle 
    # @return [Integer] 
    def get_embedded_rect(rectangle)
      Gtk.gtk_icon_info_get_embedded_rect(self, rectangle)
    end
    
    # @param [FFI::Pointer(**GdkPoint)] points 
    # @param [FFI::Pointer(*Gint)] n_points 
    # @return [Integer] 
    def get_attach_points(points, n_points)
      Gtk.gtk_icon_info_get_attach_points(self, points, n_points)
    end
    
    # @return [String] 
    def get_display_name()
      Gtk.gtk_icon_info_get_display_name(self)
    end
  end
  
  class GtkIconInfo < FFI::Struct
    include GtkIconInfoWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkIconThemePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) < private >
  # :priv ::
  #   (GtkIconThemePrivate) 
  module GtkIconThemeWrappers
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_icon_theme_set_screen(self, screen)
    end
    
    # @param [String] path 
    # @return [nil] 
    def append_search_path(path)
      Gtk.gtk_icon_theme_append_search_path(self, path)
    end
    
    # @param [String] path 
    # @return [nil] 
    def prepend_search_path(path)
      Gtk.gtk_icon_theme_prepend_search_path(self, path)
    end
    
    # @param [String] theme_name 
    # @return [nil] 
    def set_custom_theme(theme_name)
      Gtk.gtk_icon_theme_set_custom_theme(self, theme_name)
    end
    
    # @param [String] icon_name 
    # @return [Integer] 
    def has_icon(icon_name)
      Gtk.gtk_icon_theme_has_icon(self, icon_name)
    end
    
    # @param [String] icon_name 
    # @return [FFI::Pointer(*Gint)] 
    def get_icon_sizes(icon_name)
      Gtk.gtk_icon_theme_get_icon_sizes(self, icon_name)
    end
    
    # @param [String] icon_name 
    # @param [Integer] size 
    # @param [Symbol from _enum_gtk_icon_lookup_flags_] flags 
    # @return [GtkIconInfo] 
    def lookup_icon(icon_name, size, flags)
      GtkIconInfo.new Gtk.gtk_icon_theme_lookup_icon(self, icon_name, size, flags)
    end
    
    # @param [String] icon_name 
    # @param [Integer] size 
    # @param [Symbol from _enum_gtk_icon_lookup_flags_] flags 
    # @param [FFI::Pointer(**GError)] error 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def load_icon(icon_name, size, flags, error)
      Gtk.gtk_icon_theme_load_icon(self, icon_name, size, flags, error)
    end
    
    # @param [FFI::Pointer(*GIcon)] icon 
    # @param [Integer] size 
    # @param [Symbol from _enum_gtk_icon_lookup_flags_] flags 
    # @return [GtkIconInfo] 
    def lookup_by_gicon(icon, size, flags)
      GtkIconInfo.new Gtk.gtk_icon_theme_lookup_by_gicon(self, icon, size, flags)
    end
    
    # @param [String] context 
    # @return [FFI::Pointer(*GList)] 
    def list_icons(context)
      Gtk.gtk_icon_theme_list_icons(self, context)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def list_contexts()
      Gtk.gtk_icon_theme_list_contexts(self)
    end
    
    # @return [String] 
    def get_example_icon_name()
      Gtk.gtk_icon_theme_get_example_icon_name(self)
    end
    
    # @return [Integer] 
    def rescan_if_needed()
      Gtk.gtk_icon_theme_rescan_if_needed(self)
    end
  end
  
  class GtkIconTheme < FFI::Struct
    include GtkIconThemeWrappers
    layout :parent_instance, :char,
           :priv, GtkIconThemePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkIconThemeClass < FFI::Struct
    layout :parent_class, :char,
           :changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_icon_lookup_flags).</em>
  # 
  # === Options:
  # :no_svg ::
  #   
  # :force_svg ::
  #   
  # :use_builtin ::
  #   
  # :generic_fallback ::
  #   
  # :force_size ::
  #   
  # 
  # @method _enum_gtk_icon_lookup_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_icon_lookup_flags, [
    :no_svg, 1,
    :force_svg, 2,
    :use_builtin, 4,
    :generic_fallback, 8,
    :force_size, 16
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_icon_theme_error).</em>
  # 
  # === Options:
  # :not_found ::
  #   
  # :failed ::
  #   
  # 
  # @method _enum_gtk_icon_theme_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_icon_theme_error, [
    :not_found, 0,
    :failed, 1
  ]
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_theme_error_quark, :gtk_icon_theme_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_theme_get_type, :gtk_icon_theme_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_new()
  # @return [GtkIconTheme] 
  # @scope class
  attach_function :gtk_icon_theme_new, :gtk_icon_theme_new, [], GtkIconTheme
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_get_default()
  # @return [GtkIconTheme] 
  # @scope class
  attach_function :gtk_icon_theme_get_default, :gtk_icon_theme_get_default, [], GtkIconTheme
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_get_for_screen(screen)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [GtkIconTheme] 
  # @scope class
  attach_function :gtk_icon_theme_get_for_screen, :gtk_icon_theme_get_for_screen, [:pointer], GtkIconTheme
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_set_screen(icon_theme, screen)
  # @param [GtkIconTheme] icon_theme 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_set_screen, :gtk_icon_theme_set_screen, [GtkIconTheme, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_append_search_path(icon_theme, path)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_append_search_path, :gtk_icon_theme_append_search_path, [GtkIconTheme, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_prepend_search_path(icon_theme, path)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_prepend_search_path, :gtk_icon_theme_prepend_search_path, [GtkIconTheme, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_set_custom_theme(icon_theme, theme_name)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] theme_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_set_custom_theme, :gtk_icon_theme_set_custom_theme, [GtkIconTheme, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_has_icon(icon_theme, icon_name)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] icon_name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_theme_has_icon, :gtk_icon_theme_has_icon, [GtkIconTheme, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_get_icon_sizes(icon_theme, icon_name)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] icon_name 
  # @return [FFI::Pointer(*Gint)] 
  # @scope class
  attach_function :gtk_icon_theme_get_icon_sizes, :gtk_icon_theme_get_icon_sizes, [GtkIconTheme, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_lookup_icon(icon_theme, icon_name, size, flags)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] icon_name 
  # @param [Integer] size 
  # @param [Symbol from _enum_gtk_icon_lookup_flags_] flags 
  # @return [GtkIconInfo] 
  # @scope class
  attach_function :gtk_icon_theme_lookup_icon, :gtk_icon_theme_lookup_icon, [GtkIconTheme, :string, :int, :gtk_icon_lookup_flags], GtkIconInfo
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_load_icon(icon_theme, icon_name, size, flags, error)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] icon_name 
  # @param [Integer] size 
  # @param [Symbol from _enum_gtk_icon_lookup_flags_] flags 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_theme_load_icon, :gtk_icon_theme_load_icon, [GtkIconTheme, :string, :int, :gtk_icon_lookup_flags, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_lookup_by_gicon(icon_theme, icon, size, flags)
  # @param [GtkIconTheme] icon_theme 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @param [Integer] size 
  # @param [Symbol from _enum_gtk_icon_lookup_flags_] flags 
  # @return [GtkIconInfo] 
  # @scope class
  attach_function :gtk_icon_theme_lookup_by_gicon, :gtk_icon_theme_lookup_by_gicon, [GtkIconTheme, :pointer, :int, :gtk_icon_lookup_flags], GtkIconInfo
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_list_icons(icon_theme, context)
  # @param [GtkIconTheme] icon_theme 
  # @param [String] context 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_icon_theme_list_icons, :gtk_icon_theme_list_icons, [GtkIconTheme, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_list_contexts(icon_theme)
  # @param [GtkIconTheme] icon_theme 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_icon_theme_list_contexts, :gtk_icon_theme_list_contexts, [GtkIconTheme], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_get_example_icon_name(icon_theme)
  # @param [GtkIconTheme] icon_theme 
  # @return [String] 
  # @scope class
  attach_function :gtk_icon_theme_get_example_icon_name, :gtk_icon_theme_get_example_icon_name, [GtkIconTheme], :string
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_rescan_if_needed(icon_theme)
  # @param [GtkIconTheme] icon_theme 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_theme_rescan_if_needed, :gtk_icon_theme_rescan_if_needed, [GtkIconTheme], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_add_builtin_icon(icon_name, size, pixbuf)
  # @param [String] icon_name 
  # @param [Integer] size 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_add_builtin_icon, :gtk_icon_theme_add_builtin_icon, [:string, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_info_get_type, :gtk_icon_info_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_info_copy(icon_info)
  # @param [GtkIconInfo] icon_info 
  # @return [GtkIconInfo] 
  # @scope class
  attach_function :gtk_icon_info_copy, :gtk_icon_info_copy, [GtkIconInfo], GtkIconInfo
  
  # (Not documented)
  # 
  # @method gtk_icon_info_free(icon_info)
  # @param [GtkIconInfo] icon_info 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_info_free, :gtk_icon_info_free, [GtkIconInfo], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_info_new_for_pixbuf(icon_theme, pixbuf)
  # @param [GtkIconTheme] icon_theme 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [GtkIconInfo] 
  # @scope class
  attach_function :gtk_icon_info_new_for_pixbuf, :gtk_icon_info_new_for_pixbuf, [GtkIconTheme, :pointer], GtkIconInfo
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_base_size(icon_info)
  # @param [GtkIconInfo] icon_info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_info_get_base_size, :gtk_icon_info_get_base_size, [GtkIconInfo], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_filename(icon_info)
  # @param [GtkIconInfo] icon_info 
  # @return [String] 
  # @scope class
  attach_function :gtk_icon_info_get_filename, :gtk_icon_info_get_filename, [GtkIconInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_builtin_pixbuf(icon_info)
  # @param [GtkIconInfo] icon_info 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_info_get_builtin_pixbuf, :gtk_icon_info_get_builtin_pixbuf, [GtkIconInfo], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_info_load_icon(icon_info, error)
  # @param [GtkIconInfo] icon_info 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_info_load_icon, :gtk_icon_info_load_icon, [GtkIconInfo, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_info_load_symbolic(icon_info, fg, success_color, warning_color, error_color, was_symbolic, error)
  # @param [GtkIconInfo] icon_info 
  # @param [FFI::Pointer(*GdkRGBA)] fg 
  # @param [FFI::Pointer(*GdkRGBA)] success_color 
  # @param [FFI::Pointer(*GdkRGBA)] warning_color 
  # @param [FFI::Pointer(*GdkRGBA)] error_color 
  # @param [FFI::Pointer(*Gboolean)] was_symbolic 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_info_load_symbolic, :gtk_icon_info_load_symbolic, [GtkIconInfo, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_info_load_symbolic_for_context(icon_info, context, was_symbolic, error)
  # @param [GtkIconInfo] icon_info 
  # @param [GtkStyleContext] context 
  # @param [FFI::Pointer(*Gboolean)] was_symbolic 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_info_load_symbolic_for_context, :gtk_icon_info_load_symbolic_for_context, [GtkIconInfo, GtkStyleContext, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_info_load_symbolic_for_style(icon_info, style, state, was_symbolic, error)
  # @param [GtkIconInfo] icon_info 
  # @param [GtkStyle] style 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*Gboolean)] was_symbolic 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_icon_info_load_symbolic_for_style, :gtk_icon_info_load_symbolic_for_style, [GtkIconInfo, GtkStyle, :gtk_state_type, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_info_set_raw_coordinates(icon_info, raw_coordinates)
  # @param [GtkIconInfo] icon_info 
  # @param [Integer] raw_coordinates 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_info_set_raw_coordinates, :gtk_icon_info_set_raw_coordinates, [GtkIconInfo, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_embedded_rect(icon_info, rectangle)
  # @param [GtkIconInfo] icon_info 
  # @param [FFI::Pointer(*GdkRectangle)] rectangle 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_info_get_embedded_rect, :gtk_icon_info_get_embedded_rect, [GtkIconInfo, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_attach_points(icon_info, points, n_points)
  # @param [GtkIconInfo] icon_info 
  # @param [FFI::Pointer(**GdkPoint)] points 
  # @param [FFI::Pointer(*Gint)] n_points 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_info_get_attach_points, :gtk_icon_info_get_attach_points, [GtkIconInfo, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_info_get_display_name(icon_info)
  # @param [GtkIconInfo] icon_info 
  # @return [String] 
  # @scope class
  attach_function :gtk_icon_info_get_display_name, :gtk_icon_info_get_display_name, [GtkIconInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_check_reload(display)
  # @param [FFI::Pointer(*GdkDisplay)] display 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_check_reload, :_gtk_icon_theme_check_reload, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_ensure_builtin_cache()
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_theme_ensure_builtin_cache, :_gtk_icon_theme_ensure_builtin_cache, [], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tooltip_get_type, :gtk_tooltip_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_markup(tooltip, markup)
  # @param [GtkTooltip] tooltip 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_markup, :gtk_tooltip_set_markup, [GtkTooltip, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_text(tooltip, text)
  # @param [GtkTooltip] tooltip 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_text, :gtk_tooltip_set_text, [GtkTooltip, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_icon(tooltip, pixbuf)
  # @param [GtkTooltip] tooltip 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_icon, :gtk_tooltip_set_icon, [GtkTooltip, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_icon_from_stock(tooltip, stock_id, size)
  # @param [GtkTooltip] tooltip 
  # @param [String] stock_id 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_icon_from_stock, :gtk_tooltip_set_icon_from_stock, [GtkTooltip, :string, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_icon_from_icon_name(tooltip, icon_name, size)
  # @param [GtkTooltip] tooltip 
  # @param [String] icon_name 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_icon_from_icon_name, :gtk_tooltip_set_icon_from_icon_name, [GtkTooltip, :string, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_icon_from_gicon(tooltip, gicon, size)
  # @param [GtkTooltip] tooltip 
  # @param [FFI::Pointer(*GIcon)] gicon 
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_icon_from_gicon, :gtk_tooltip_set_icon_from_gicon, [GtkTooltip, :pointer, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_custom(tooltip, custom_widget)
  # @param [GtkTooltip] tooltip 
  # @param [GtkWidget] custom_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_custom, :gtk_tooltip_set_custom, [GtkTooltip, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_set_tip_area(tooltip, rect)
  # @param [GtkTooltip] tooltip 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_set_tip_area, :gtk_tooltip_set_tip_area, [GtkTooltip, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_trigger_tooltip_query(display)
  # @param [FFI::Pointer(*GdkDisplay)] display 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_trigger_tooltip_query, :gtk_tooltip_trigger_tooltip_query, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_focus_in(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_focus_in, :_gtk_tooltip_focus_in, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_focus_out(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_focus_out, :_gtk_tooltip_focus_out, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_toggle_keyboard_mode(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_toggle_keyboard_mode, :_gtk_tooltip_toggle_keyboard_mode, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_handle_event(event)
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_handle_event, :_gtk_tooltip_handle_event, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tooltip_hide(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tooltip_hide, :_gtk_tooltip_hide, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_find_at_coords(window, window_x, window_y, widget_x, widget_y)
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @param [Integer] window_x 
  # @param [Integer] window_y 
  # @param [FFI::Pointer(*Gint)] widget_x 
  # @param [FFI::Pointer(*Gint)] widget_y 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_widget_find_at_coords, :_gtk_widget_find_at_coords, [:pointer, :int, :int, :pointer, :pointer], GtkWidget
  
  # (Not documented)
  class GtkIconViewPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_icon_view_foreach_func_(path, data)
  # @param [GtkTreePath] path 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [FFI::Pointer(*GtkIconView)] 
  # @scope class
  callback :gtk_icon_view_foreach_func, [GtkTreePath, :pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_icon_view_drop_position).</em>
  # 
  # === Options:
  # :no_drop ::
  #   
  # :drop_into ::
  #   
  # :drop_left ::
  #   
  # :drop_right ::
  #   
  # :drop_above ::
  #   
  # :drop_below ::
  #   
  # 
  # @method _enum_gtk_icon_view_drop_position_
  # @return [Symbol]
  # @scope class
  enum :gtk_icon_view_drop_position, [
    :no_drop, 0,
    :drop_into, 1,
    :drop_left, 2,
    :drop_right, 3,
    :drop_above, 4,
    :drop_below, 5
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkIconViewPrivate) < private >
  module GtkIconViewWrappers
    # @param [GtkTreeModel] model 
    # @return [nil] 
    def set_model(model)
      Gtk.gtk_icon_view_set_model(self, model)
    end
    
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_icon_view_get_model(self)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_text_column(column)
      Gtk.gtk_icon_view_set_text_column(self, column)
    end
    
    # @return [Integer] 
    def get_text_column()
      Gtk.gtk_icon_view_get_text_column(self)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_markup_column(column)
      Gtk.gtk_icon_view_set_markup_column(self, column)
    end
    
    # @return [Integer] 
    def get_markup_column()
      Gtk.gtk_icon_view_get_markup_column(self)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_pixbuf_column(column)
      Gtk.gtk_icon_view_set_pixbuf_column(self, column)
    end
    
    # @return [Integer] 
    def get_pixbuf_column()
      Gtk.gtk_icon_view_get_pixbuf_column(self)
    end
    
    # @param [Symbol from _enum_gtk_orientation_] orientation 
    # @return [nil] 
    def set_item_orientation(orientation)
      Gtk.gtk_icon_view_set_item_orientation(self, orientation)
    end
    
    # @return [Symbol from _enum_gtk_orientation_] 
    def get_item_orientation()
      Gtk.gtk_icon_view_get_item_orientation(self)
    end
    
    # @param [Integer] columns 
    # @return [nil] 
    def set_columns(columns)
      Gtk.gtk_icon_view_set_columns(self, columns)
    end
    
    # @return [Integer] 
    def get_columns()
      Gtk.gtk_icon_view_get_columns(self)
    end
    
    # @param [Integer] item_width 
    # @return [nil] 
    def set_item_width(item_width)
      Gtk.gtk_icon_view_set_item_width(self, item_width)
    end
    
    # @return [Integer] 
    def get_item_width()
      Gtk.gtk_icon_view_get_item_width(self)
    end
    
    # @param [Integer] spacing 
    # @return [nil] 
    def set_spacing(spacing)
      Gtk.gtk_icon_view_set_spacing(self, spacing)
    end
    
    # @return [Integer] 
    def get_spacing()
      Gtk.gtk_icon_view_get_spacing(self)
    end
    
    # @param [Integer] row_spacing 
    # @return [nil] 
    def set_row_spacing(row_spacing)
      Gtk.gtk_icon_view_set_row_spacing(self, row_spacing)
    end
    
    # @return [Integer] 
    def get_row_spacing()
      Gtk.gtk_icon_view_get_row_spacing(self)
    end
    
    # @param [Integer] column_spacing 
    # @return [nil] 
    def set_column_spacing(column_spacing)
      Gtk.gtk_icon_view_set_column_spacing(self, column_spacing)
    end
    
    # @return [Integer] 
    def get_column_spacing()
      Gtk.gtk_icon_view_get_column_spacing(self)
    end
    
    # @param [Integer] margin 
    # @return [nil] 
    def set_margin(margin)
      Gtk.gtk_icon_view_set_margin(self, margin)
    end
    
    # @return [Integer] 
    def get_margin()
      Gtk.gtk_icon_view_get_margin(self)
    end
    
    # @param [Integer] item_padding 
    # @return [nil] 
    def set_item_padding(item_padding)
      Gtk.gtk_icon_view_set_item_padding(self, item_padding)
    end
    
    # @return [Integer] 
    def get_item_padding()
      Gtk.gtk_icon_view_get_item_padding(self)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [GtkTreePath] 
    def get_path_at_pos(x, y)
      GtkTreePath.new Gtk.gtk_icon_view_get_path_at_pos(self, x, y)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(**GtkCellRenderer)] cell 
    # @return [Integer] 
    def get_item_at_pos(x, y, path, cell)
      Gtk.gtk_icon_view_get_item_at_pos(self, x, y, path, cell)
    end
    
    # @param [FFI::Pointer(**GtkTreePath)] start_path 
    # @param [FFI::Pointer(**GtkTreePath)] end_path 
    # @return [Integer] 
    def get_visible_range(start_path, end_path)
      Gtk.gtk_icon_view_get_visible_range(self, start_path, end_path)
    end
    
    # @param [Proc(_callback_gtk_icon_view_foreach_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def selected_foreach(func, data)
      Gtk.gtk_icon_view_selected_foreach(self, func, data)
    end
    
    # @param [Symbol from _enum_gtk_selection_mode_] mode 
    # @return [nil] 
    def set_selection_mode(mode)
      Gtk.gtk_icon_view_set_selection_mode(self, mode)
    end
    
    # @return [Symbol from _enum_gtk_selection_mode_] 
    def get_selection_mode()
      Gtk.gtk_icon_view_get_selection_mode(self)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def select_path(path)
      Gtk.gtk_icon_view_select_path(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def unselect_path(path)
      Gtk.gtk_icon_view_unselect_path(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def path_is_selected(path)
      Gtk.gtk_icon_view_path_is_selected(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def get_item_row(path)
      Gtk.gtk_icon_view_get_item_row(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def get_item_column(path)
      Gtk.gtk_icon_view_get_item_column(self, path)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_selected_items()
      Gtk.gtk_icon_view_get_selected_items(self)
    end
    
    # @return [nil] 
    def select_all()
      Gtk.gtk_icon_view_select_all(self)
    end
    
    # @return [nil] 
    def unselect_all()
      Gtk.gtk_icon_view_unselect_all(self)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def item_activated(path)
      Gtk.gtk_icon_view_item_activated(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkCellRenderer] cell 
    # @param [Integer] start_editing 
    # @return [nil] 
    def set_cursor(path, cell, start_editing)
      Gtk.gtk_icon_view_set_cursor(self, path, cell, start_editing)
    end
    
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(**GtkCellRenderer)] cell 
    # @return [Integer] 
    def get_cursor(path, cell)
      Gtk.gtk_icon_view_get_cursor(self, path, cell)
    end
    
    # @param [GtkTreePath] path 
    # @param [Integer] use_align 
    # @param [Float] row_align 
    # @param [Float] col_align 
    # @return [nil] 
    def scroll_to_path(path, use_align, row_align, col_align)
      Gtk.gtk_icon_view_scroll_to_path(self, path, use_align, row_align, col_align)
    end
    
    # @param [unknown] start_button_mask 
    # @param [GtkTargetEntry] targets 
    # @param [Integer] n_targets 
    # @param [unknown] actions 
    # @return [nil] 
    def enable_model_drag_source(start_button_mask, targets, n_targets, actions)
      Gtk.gtk_icon_view_enable_model_drag_source(self, start_button_mask, targets, n_targets, actions)
    end
    
    # @param [GtkTargetEntry] targets 
    # @param [Integer] n_targets 
    # @param [unknown] actions 
    # @return [nil] 
    def enable_model_drag_dest(targets, n_targets, actions)
      Gtk.gtk_icon_view_enable_model_drag_dest(self, targets, n_targets, actions)
    end
    
    # @return [nil] 
    def unset_model_drag_source()
      Gtk.gtk_icon_view_unset_model_drag_source(self)
    end
    
    # @return [nil] 
    def unset_model_drag_dest()
      Gtk.gtk_icon_view_unset_model_drag_dest(self)
    end
    
    # @param [Integer] reorderable 
    # @return [nil] 
    def set_reorderable(reorderable)
      Gtk.gtk_icon_view_set_reorderable(self, reorderable)
    end
    
    # @return [Integer] 
    def get_reorderable()
      Gtk.gtk_icon_view_get_reorderable(self)
    end
    
    # @param [GtkTreePath] path 
    # @param [Symbol from _enum_gtk_icon_view_drop_position_] pos 
    # @return [nil] 
    def set_drag_dest_item(path, pos)
      Gtk.gtk_icon_view_set_drag_dest_item(self, path, pos)
    end
    
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(*GtkIconViewDropPosition)] pos 
    # @return [nil] 
    def get_drag_dest_item(path, pos)
      Gtk.gtk_icon_view_get_drag_dest_item(self, path, pos)
    end
    
    # @param [Integer] drag_x 
    # @param [Integer] drag_y 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [FFI::Pointer(*GtkIconViewDropPosition)] pos 
    # @return [Integer] 
    def get_dest_item_at_pos(drag_x, drag_y, path, pos)
      Gtk.gtk_icon_view_get_dest_item_at_pos(self, drag_x, drag_y, path, pos)
    end
    
    # @param [GtkTreePath] path 
    # @return [FFI::Pointer(*CairoSurfaceT)] 
    def create_drag_icon(path)
      Gtk.gtk_icon_view_create_drag_icon(self, path)
    end
    
    # @param [Integer] wx 
    # @param [Integer] wy 
    # @param [FFI::Pointer(*Gint)] bx 
    # @param [FFI::Pointer(*Gint)] by 
    # @return [nil] 
    def convert_widget_to_bin_window_coords(wx, wy, bx, by)
      Gtk.gtk_icon_view_convert_widget_to_bin_window_coords(self, wx, wy, bx, by)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkCellRenderer] cell 
    # @param [FFI::Pointer(*GdkRectangle)] rect 
    # @return [Integer] 
    def get_cell_rect(path, cell, rect)
      Gtk.gtk_icon_view_get_cell_rect(self, path, cell, rect)
    end
    
    # @param [GtkTooltip] tooltip 
    # @param [GtkTreePath] path 
    # @return [nil] 
    def set_tooltip_item(tooltip, path)
      Gtk.gtk_icon_view_set_tooltip_item(self, tooltip, path)
    end
    
    # @param [GtkTooltip] tooltip 
    # @param [GtkTreePath] path 
    # @param [GtkCellRenderer] cell 
    # @return [nil] 
    def set_tooltip_cell(tooltip, path, cell)
      Gtk.gtk_icon_view_set_tooltip_cell(self, tooltip, path, cell)
    end
    
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] y 
    # @param [Integer] keyboard_tip 
    # @param [FFI::Pointer(**GtkTreeModel)] model 
    # @param [FFI::Pointer(**GtkTreePath)] path 
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def get_tooltip_context(x, y, keyboard_tip, model, path, iter)
      Gtk.gtk_icon_view_get_tooltip_context(self, x, y, keyboard_tip, model, path, iter)
    end
    
    # @param [Integer] column 
    # @return [nil] 
    def set_tooltip_column(column)
      Gtk.gtk_icon_view_set_tooltip_column(self, column)
    end
    
    # @return [Integer] 
    def get_tooltip_column()
      Gtk.gtk_icon_view_get_tooltip_column(self)
    end
  end
  
  class GtkIconView < FFI::Struct
    include GtkIconViewWrappers
    layout :parent, GtkContainer.by_value,
           :priv, GtkIconViewPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :item_activated ::
  #   (FFI::Pointer(*)) 
  # :selection_changed ::
  #   (FFI::Pointer(*)) 
  # :select_all ::
  #   (FFI::Pointer(*)) Key binding signals
  # :unselect_all ::
  #   (FFI::Pointer(*)) 
  # :select_cursor_item ::
  #   (FFI::Pointer(*)) 
  # :toggle_cursor_item ::
  #   (FFI::Pointer(*)) 
  # :move_cursor ::
  #   (FFI::Pointer(*)) 
  # :activate_cursor_item ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkIconViewClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :item_activated, :pointer,
           :selection_changed, :pointer,
           :select_all, :pointer,
           :unselect_all, :pointer,
           :select_cursor_item, :pointer,
           :toggle_cursor_item, :pointer,
           :move_cursor, :pointer,
           :activate_cursor_item, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_type, :gtk_icon_view_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_view_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_icon_view_new, :gtk_icon_view_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_icon_view_new_with_area(area)
  # @param [GtkCellArea] area 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_icon_view_new_with_area, :gtk_icon_view_new_with_area, [GtkCellArea], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_icon_view_new_with_model(model)
  # @param [GtkTreeModel] model 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_icon_view_new_with_model, :gtk_icon_view_new_with_model, [GtkTreeModel], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_model(icon_view, model)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreeModel] model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_model, :gtk_icon_view_set_model, [GtkIconView, GtkTreeModel], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_model(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_icon_view_get_model, :gtk_icon_view_get_model, [GtkIconView], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_text_column(icon_view, column)
  # @param [GtkIconView] icon_view 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_text_column, :gtk_icon_view_set_text_column, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_text_column(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_text_column, :gtk_icon_view_get_text_column, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_markup_column(icon_view, column)
  # @param [GtkIconView] icon_view 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_markup_column, :gtk_icon_view_set_markup_column, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_markup_column(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_markup_column, :gtk_icon_view_get_markup_column, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_pixbuf_column(icon_view, column)
  # @param [GtkIconView] icon_view 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_pixbuf_column, :gtk_icon_view_set_pixbuf_column, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_pixbuf_column(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_pixbuf_column, :gtk_icon_view_get_pixbuf_column, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_item_orientation(icon_view, orientation)
  # @param [GtkIconView] icon_view 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_item_orientation, :gtk_icon_view_set_item_orientation, [GtkIconView, :gtk_orientation], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_item_orientation(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Symbol from _enum_gtk_orientation_] 
  # @scope class
  attach_function :gtk_icon_view_get_item_orientation, :gtk_icon_view_get_item_orientation, [GtkIconView], :gtk_orientation
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_columns(icon_view, columns)
  # @param [GtkIconView] icon_view 
  # @param [Integer] columns 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_columns, :gtk_icon_view_set_columns, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_columns(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_columns, :gtk_icon_view_get_columns, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_item_width(icon_view, item_width)
  # @param [GtkIconView] icon_view 
  # @param [Integer] item_width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_item_width, :gtk_icon_view_set_item_width, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_item_width(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_item_width, :gtk_icon_view_get_item_width, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_spacing(icon_view, spacing)
  # @param [GtkIconView] icon_view 
  # @param [Integer] spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_spacing, :gtk_icon_view_set_spacing, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_spacing(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_spacing, :gtk_icon_view_get_spacing, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_row_spacing(icon_view, row_spacing)
  # @param [GtkIconView] icon_view 
  # @param [Integer] row_spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_row_spacing, :gtk_icon_view_set_row_spacing, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_row_spacing(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_row_spacing, :gtk_icon_view_get_row_spacing, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_column_spacing(icon_view, column_spacing)
  # @param [GtkIconView] icon_view 
  # @param [Integer] column_spacing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_column_spacing, :gtk_icon_view_set_column_spacing, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_column_spacing(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_column_spacing, :gtk_icon_view_get_column_spacing, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_margin(icon_view, margin)
  # @param [GtkIconView] icon_view 
  # @param [Integer] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_margin, :gtk_icon_view_set_margin, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_margin(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_margin, :gtk_icon_view_get_margin, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_item_padding(icon_view, item_padding)
  # @param [GtkIconView] icon_view 
  # @param [Integer] item_padding 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_item_padding, :gtk_icon_view_set_item_padding, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_item_padding(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_item_padding, :gtk_icon_view_get_item_padding, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_path_at_pos(icon_view, x, y)
  # @param [GtkIconView] icon_view 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_icon_view_get_path_at_pos, :gtk_icon_view_get_path_at_pos, [GtkIconView, :int, :int], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_item_at_pos(icon_view, x, y, path, cell)
  # @param [GtkIconView] icon_view 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(**GtkCellRenderer)] cell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_item_at_pos, :gtk_icon_view_get_item_at_pos, [GtkIconView, :int, :int, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_visible_range(icon_view, start_path, end_path)
  # @param [GtkIconView] icon_view 
  # @param [FFI::Pointer(**GtkTreePath)] start_path 
  # @param [FFI::Pointer(**GtkTreePath)] end_path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_visible_range, :gtk_icon_view_get_visible_range, [GtkIconView, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_selected_foreach(icon_view, func, data)
  # @param [GtkIconView] icon_view 
  # @param [Proc(_callback_gtk_icon_view_foreach_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_selected_foreach, :gtk_icon_view_selected_foreach, [GtkIconView, :gtk_icon_view_foreach_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_selection_mode(icon_view, mode)
  # @param [GtkIconView] icon_view 
  # @param [Symbol from _enum_gtk_selection_mode_] mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_selection_mode, :gtk_icon_view_set_selection_mode, [GtkIconView, :gtk_selection_mode], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_selection_mode(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Symbol from _enum_gtk_selection_mode_] 
  # @scope class
  attach_function :gtk_icon_view_get_selection_mode, :gtk_icon_view_get_selection_mode, [GtkIconView], :gtk_selection_mode
  
  # (Not documented)
  # 
  # @method gtk_icon_view_select_path(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_select_path, :gtk_icon_view_select_path, [GtkIconView, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_unselect_path(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_unselect_path, :gtk_icon_view_unselect_path, [GtkIconView, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_path_is_selected(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_path_is_selected, :gtk_icon_view_path_is_selected, [GtkIconView, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_item_row(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_item_row, :gtk_icon_view_get_item_row, [GtkIconView, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_item_column(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_item_column, :gtk_icon_view_get_item_column, [GtkIconView, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_selected_items(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_icon_view_get_selected_items, :gtk_icon_view_get_selected_items, [GtkIconView], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_view_select_all(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_select_all, :gtk_icon_view_select_all, [GtkIconView], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_unselect_all(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_unselect_all, :gtk_icon_view_unselect_all, [GtkIconView], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_item_activated(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_item_activated, :gtk_icon_view_item_activated, [GtkIconView, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_cursor(icon_view, path, cell, start_editing)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @param [GtkCellRenderer] cell 
  # @param [Integer] start_editing 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_cursor, :gtk_icon_view_set_cursor, [GtkIconView, GtkTreePath, GtkCellRenderer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_cursor(icon_view, path, cell)
  # @param [GtkIconView] icon_view 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(**GtkCellRenderer)] cell 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_cursor, :gtk_icon_view_get_cursor, [GtkIconView, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_scroll_to_path(icon_view, path, use_align, row_align, col_align)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @param [Integer] use_align 
  # @param [Float] row_align 
  # @param [Float] col_align 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_scroll_to_path, :gtk_icon_view_scroll_to_path, [GtkIconView, GtkTreePath, :int, :float, :float], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_enable_model_drag_source(icon_view, start_button_mask, targets, n_targets, actions)
  # @param [GtkIconView] icon_view 
  # @param [unknown] start_button_mask 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_enable_model_drag_source, :gtk_icon_view_enable_model_drag_source, [GtkIconView, :char, GtkTargetEntry, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_enable_model_drag_dest(icon_view, targets, n_targets, actions)
  # @param [GtkIconView] icon_view 
  # @param [GtkTargetEntry] targets 
  # @param [Integer] n_targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_enable_model_drag_dest, :gtk_icon_view_enable_model_drag_dest, [GtkIconView, GtkTargetEntry, :int, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_unset_model_drag_source(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_unset_model_drag_source, :gtk_icon_view_unset_model_drag_source, [GtkIconView], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_unset_model_drag_dest(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_unset_model_drag_dest, :gtk_icon_view_unset_model_drag_dest, [GtkIconView], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_reorderable(icon_view, reorderable)
  # @param [GtkIconView] icon_view 
  # @param [Integer] reorderable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_reorderable, :gtk_icon_view_set_reorderable, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_reorderable(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_reorderable, :gtk_icon_view_get_reorderable, [GtkIconView], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_drag_dest_item(icon_view, path, pos)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @param [Symbol from _enum_gtk_icon_view_drop_position_] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_drag_dest_item, :gtk_icon_view_set_drag_dest_item, [GtkIconView, GtkTreePath, :gtk_icon_view_drop_position], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_drag_dest_item(icon_view, path, pos)
  # @param [GtkIconView] icon_view 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(*GtkIconViewDropPosition)] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_get_drag_dest_item, :gtk_icon_view_get_drag_dest_item, [GtkIconView, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_dest_item_at_pos(icon_view, drag_x, drag_y, path, pos)
  # @param [GtkIconView] icon_view 
  # @param [Integer] drag_x 
  # @param [Integer] drag_y 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [FFI::Pointer(*GtkIconViewDropPosition)] pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_dest_item_at_pos, :gtk_icon_view_get_dest_item_at_pos, [GtkIconView, :int, :int, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_create_drag_icon(icon_view, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @return [FFI::Pointer(*CairoSurfaceT)] 
  # @scope class
  attach_function :gtk_icon_view_create_drag_icon, :gtk_icon_view_create_drag_icon, [GtkIconView, GtkTreePath], :pointer
  
  # (Not documented)
  # 
  # @method gtk_icon_view_convert_widget_to_bin_window_coords(icon_view, wx, wy, bx, by)
  # @param [GtkIconView] icon_view 
  # @param [Integer] wx 
  # @param [Integer] wy 
  # @param [FFI::Pointer(*Gint)] bx 
  # @param [FFI::Pointer(*Gint)] by 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_convert_widget_to_bin_window_coords, :gtk_icon_view_convert_widget_to_bin_window_coords, [GtkIconView, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_cell_rect(icon_view, path, cell, rect)
  # @param [GtkIconView] icon_view 
  # @param [GtkTreePath] path 
  # @param [GtkCellRenderer] cell 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_cell_rect, :gtk_icon_view_get_cell_rect, [GtkIconView, GtkTreePath, GtkCellRenderer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_tooltip_item(icon_view, tooltip, path)
  # @param [GtkIconView] icon_view 
  # @param [GtkTooltip] tooltip 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_tooltip_item, :gtk_icon_view_set_tooltip_item, [GtkIconView, GtkTooltip, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_tooltip_cell(icon_view, tooltip, path, cell)
  # @param [GtkIconView] icon_view 
  # @param [GtkTooltip] tooltip 
  # @param [GtkTreePath] path 
  # @param [GtkCellRenderer] cell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_tooltip_cell, :gtk_icon_view_set_tooltip_cell, [GtkIconView, GtkTooltip, GtkTreePath, GtkCellRenderer], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_tooltip_context(icon_view, x, y, keyboard_tip, model, path, iter)
  # @param [GtkIconView] icon_view 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @param [Integer] keyboard_tip 
  # @param [FFI::Pointer(**GtkTreeModel)] model 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_tooltip_context, :gtk_icon_view_get_tooltip_context, [GtkIconView, :pointer, :pointer, :int, :pointer, :pointer, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_icon_view_set_tooltip_column(icon_view, column)
  # @param [GtkIconView] icon_view 
  # @param [Integer] column 
  # @return [nil] 
  # @scope class
  attach_function :gtk_icon_view_set_tooltip_column, :gtk_icon_view_set_tooltip_column, [GtkIconView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_icon_view_get_tooltip_column(icon_view)
  # @param [GtkIconView] icon_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_get_tooltip_column, :gtk_icon_view_get_tooltip_column, [GtkIconView], :int
  
  # (Not documented)
  class GtkImageMenuItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :menu_item ::
  #   (GtkMenuItem) 
  # :priv ::
  #   (GtkImageMenuItemPrivate) < private >
  module GtkImageMenuItemWrappers
    # @param [Integer] always_show 
    # @return [nil] 
    def set_always_show_image(always_show)
      Gtk.gtk_image_menu_item_set_always_show_image(self, always_show)
    end
    
    # @return [Integer] 
    def get_always_show_image()
      Gtk.gtk_image_menu_item_get_always_show_image(self)
    end
    
    # @param [GtkWidget] image 
    # @return [nil] 
    def set_image(image)
      Gtk.gtk_image_menu_item_set_image(self, image)
    end
    
    # @return [GtkWidget] 
    def get_image()
      GtkWidget.new Gtk.gtk_image_menu_item_get_image(self)
    end
    
    # @param [Integer] use_stock 
    # @return [nil] 
    def set_use_stock(use_stock)
      Gtk.gtk_image_menu_item_set_use_stock(self, use_stock)
    end
    
    # @return [Integer] 
    def get_use_stock()
      Gtk.gtk_image_menu_item_get_use_stock(self)
    end
    
    # @param [GtkAccelGroup] accel_group 
    # @return [nil] 
    def set_accel_group(accel_group)
      Gtk.gtk_image_menu_item_set_accel_group(self, accel_group)
    end
  end
  
  class GtkImageMenuItem < FFI::Struct
    include GtkImageMenuItemWrappers
    layout :menu_item, GtkMenuItem.by_value,
           :priv, GtkImageMenuItemPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMenuItemClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkImageMenuItemClass < FFI::Struct
    layout :parent_class, GtkMenuItemClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_image_menu_item_get_type, :gtk_image_menu_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_menu_item_new, :gtk_image_menu_item_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_new_with_label(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_menu_item_new_with_label, :gtk_image_menu_item_new_with_label, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_new_with_mnemonic(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_menu_item_new_with_mnemonic, :gtk_image_menu_item_new_with_mnemonic, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_new_from_stock(stock_id, accel_group)
  # @param [String] stock_id 
  # @param [GtkAccelGroup] accel_group 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_menu_item_new_from_stock, :gtk_image_menu_item_new_from_stock, [:string, GtkAccelGroup], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_set_always_show_image(image_menu_item, always_show)
  # @param [GtkImageMenuItem] image_menu_item 
  # @param [Integer] always_show 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_menu_item_set_always_show_image, :gtk_image_menu_item_set_always_show_image, [GtkImageMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_get_always_show_image(image_menu_item)
  # @param [GtkImageMenuItem] image_menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_image_menu_item_get_always_show_image, :gtk_image_menu_item_get_always_show_image, [GtkImageMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_set_image(image_menu_item, image)
  # @param [GtkImageMenuItem] image_menu_item 
  # @param [GtkWidget] image 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_menu_item_set_image, :gtk_image_menu_item_set_image, [GtkImageMenuItem, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_get_image(image_menu_item)
  # @param [GtkImageMenuItem] image_menu_item 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_image_menu_item_get_image, :gtk_image_menu_item_get_image, [GtkImageMenuItem], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_set_use_stock(image_menu_item, use_stock)
  # @param [GtkImageMenuItem] image_menu_item 
  # @param [Integer] use_stock 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_menu_item_set_use_stock, :gtk_image_menu_item_set_use_stock, [GtkImageMenuItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_get_use_stock(image_menu_item)
  # @param [GtkImageMenuItem] image_menu_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_image_menu_item_get_use_stock, :gtk_image_menu_item_get_use_stock, [GtkImageMenuItem], :int
  
  # (Not documented)
  # 
  # @method gtk_image_menu_item_set_accel_group(image_menu_item, accel_group)
  # @param [GtkImageMenuItem] image_menu_item 
  # @param [GtkAccelGroup] accel_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_image_menu_item_set_accel_group, :gtk_image_menu_item_set_accel_group, [GtkImageMenuItem, GtkAccelGroup], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :context_id ::
  #   (String) 
  # :context_name ::
  #   (String) 
  # :domain ::
  #   (String) 
  # :domain_dirname ::
  #   (String) 
  # :default_locales ::
  #   (String) 
  class GtkIMContextInfo < FFI::Struct
    layout :context_id, :string,
           :context_name, :string,
           :domain, :string,
           :domain_dirname, :string,
           :default_locales, :string
  end
  
  # (Not documented)
  class GtkIMContextSimplePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :object ::
  #   (GtkIMContext) 
  # :priv ::
  #   (GtkIMContextSimplePrivate) < private >
  module GtkIMContextSimpleWrappers
    # @param [FFI::Pointer(*Guint16)] data 
    # @param [Integer] max_seq_len 
    # @param [Integer] n_seqs 
    # @return [nil] 
    def add_table(data, max_seq_len, n_seqs)
      Gtk.gtk_im_context_simple_add_table(self, data, max_seq_len, n_seqs)
    end
  end
  
  class GtkIMContextSimple < FFI::Struct
    include GtkIMContextSimpleWrappers
    layout :object, GtkIMContext.by_value,
           :priv, GtkIMContextSimplePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkIMContextClass) 
  class GtkIMContextSimpleClass < FFI::Struct
    layout :parent_class, GtkIMContextClass.by_value
  end
  
  # (Not documented)
  # 
  # @method gtk_im_context_simple_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_context_simple_get_type, :gtk_im_context_simple_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_im_context_simple_new()
  # @return [GtkIMContext] 
  # @scope class
  attach_function :gtk_im_context_simple_new, :gtk_im_context_simple_new, [], GtkIMContext
  
  # (Not documented)
  # 
  # @method gtk_im_context_simple_add_table(context_simple, data, max_seq_len, n_seqs)
  # @param [GtkIMContextSimple] context_simple 
  # @param [FFI::Pointer(*Guint16)] data 
  # @param [Integer] max_seq_len 
  # @param [Integer] n_seqs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_context_simple_add_table, :gtk_im_context_simple_add_table, [GtkIMContextSimple, :pointer, :int, :int], :void
  
  # (Not documented)
  class GtkIMMulticontextPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :object ::
  #   (GtkIMContext) 
  # :priv ::
  #   (GtkIMMulticontextPrivate) < private >
  module GtkIMMulticontextWrappers
    # @param [GtkMenuShell] menushell 
    # @return [nil] 
    def append_menuitems(menushell)
      Gtk.gtk_im_multicontext_append_menuitems(self, menushell)
    end
    
    # @return [String] 
    def get_context_id()
      Gtk.gtk_im_multicontext_get_context_id(self)
    end
    
    # @param [String] context_id 
    # @return [nil] 
    def set_context_id(context_id)
      Gtk.gtk_im_multicontext_set_context_id(self, context_id)
    end
  end
  
  class GtkIMMulticontext < FFI::Struct
    include GtkIMMulticontextWrappers
    layout :object, GtkIMContext.by_value,
           :priv, GtkIMMulticontextPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkIMContextClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkIMMulticontextClass < FFI::Struct
    layout :parent_class, GtkIMContextClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_im_multicontext_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_multicontext_get_type, :gtk_im_multicontext_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_im_multicontext_new()
  # @return [GtkIMContext] 
  # @scope class
  attach_function :gtk_im_multicontext_new, :gtk_im_multicontext_new, [], GtkIMContext
  
  # (Not documented)
  # 
  # @method gtk_im_multicontext_append_menuitems(context, menushell)
  # @param [GtkIMMulticontext] context 
  # @param [GtkMenuShell] menushell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_multicontext_append_menuitems, :gtk_im_multicontext_append_menuitems, [GtkIMMulticontext, GtkMenuShell], :void
  
  # (Not documented)
  # 
  # @method gtk_im_multicontext_get_context_id(context)
  # @param [GtkIMMulticontext] context 
  # @return [String] 
  # @scope class
  attach_function :gtk_im_multicontext_get_context_id, :gtk_im_multicontext_get_context_id, [GtkIMMulticontext], :string
  
  # (Not documented)
  # 
  # @method gtk_im_multicontext_set_context_id(context, context_id)
  # @param [GtkIMMulticontext] context 
  # @param [String] context_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_im_multicontext_set_context_id, :gtk_im_multicontext_set_context_id, [GtkIMMulticontext, :string], :void
  
  # (Not documented)
  class GtkInfoBarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkInfoBarPrivate) < private >
  module GtkInfoBarWrappers
    # @return [GtkWidget] 
    def get_action_area()
      GtkWidget.new Gtk.gtk_info_bar_get_action_area(self)
    end
    
    # @return [GtkWidget] 
    def get_content_area()
      GtkWidget.new Gtk.gtk_info_bar_get_content_area(self)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] response_id 
    # @return [nil] 
    def add_action_widget(child, response_id)
      Gtk.gtk_info_bar_add_action_widget(self, child, response_id)
    end
    
    # @param [String] button_text 
    # @param [Integer] response_id 
    # @return [GtkWidget] 
    def add_button(button_text, response_id)
      GtkWidget.new Gtk.gtk_info_bar_add_button(self, button_text, response_id)
    end
    
    # @param [String] first_button_text 
    # @return [nil] 
    def add_buttons(first_button_text)
      Gtk.gtk_info_bar_add_buttons(self, first_button_text)
    end
    
    # @param [Integer] response_id 
    # @param [Integer] setting 
    # @return [nil] 
    def set_response_sensitive(response_id, setting)
      Gtk.gtk_info_bar_set_response_sensitive(self, response_id, setting)
    end
    
    # @param [Integer] response_id 
    # @return [nil] 
    def set_default_response(response_id)
      Gtk.gtk_info_bar_set_default_response(self, response_id)
    end
    
    # @param [Integer] response_id 
    # @return [nil] 
    def response(response_id)
      Gtk.gtk_info_bar_response(self, response_id)
    end
    
    # @param [Symbol from _enum_gtk_message_type_] message_type 
    # @return [nil] 
    def set_message_type(message_type)
      Gtk.gtk_info_bar_set_message_type(self, message_type)
    end
    
    # @return [Symbol from _enum_gtk_message_type_] 
    def get_message_type()
      Gtk.gtk_info_bar_get_message_type(self)
    end
  end
  
  class GtkInfoBar < FFI::Struct
    include GtkInfoBarWrappers
    layout :parent, GtkBox.by_value,
           :priv, GtkInfoBarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :response ::
  #   (FFI::Pointer(*)) Signals
  # :close ::
  #   (FFI::Pointer(*)) Keybinding signals
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkInfoBarClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :response, :pointer,
           :close, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_info_bar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_info_bar_get_type, :gtk_info_bar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_info_bar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_info_bar_new, :gtk_info_bar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_info_bar_new_with_buttons(first_button_text)
  # @param [String] first_button_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_info_bar_new_with_buttons, :gtk_info_bar_new_with_buttons, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_info_bar_get_action_area(info_bar)
  # @param [GtkInfoBar] info_bar 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_info_bar_get_action_area, :gtk_info_bar_get_action_area, [GtkInfoBar], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_info_bar_get_content_area(info_bar)
  # @param [GtkInfoBar] info_bar 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_info_bar_get_content_area, :gtk_info_bar_get_content_area, [GtkInfoBar], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_info_bar_add_action_widget(info_bar, child, response_id)
  # @param [GtkInfoBar] info_bar 
  # @param [GtkWidget] child 
  # @param [Integer] response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_info_bar_add_action_widget, :gtk_info_bar_add_action_widget, [GtkInfoBar, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_info_bar_add_button(info_bar, button_text, response_id)
  # @param [GtkInfoBar] info_bar 
  # @param [String] button_text 
  # @param [Integer] response_id 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_info_bar_add_button, :gtk_info_bar_add_button, [GtkInfoBar, :string, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_info_bar_add_buttons(info_bar, first_button_text)
  # @param [GtkInfoBar] info_bar 
  # @param [String] first_button_text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_info_bar_add_buttons, :gtk_info_bar_add_buttons, [GtkInfoBar, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_info_bar_set_response_sensitive(info_bar, response_id, setting)
  # @param [GtkInfoBar] info_bar 
  # @param [Integer] response_id 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_info_bar_set_response_sensitive, :gtk_info_bar_set_response_sensitive, [GtkInfoBar, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_info_bar_set_default_response(info_bar, response_id)
  # @param [GtkInfoBar] info_bar 
  # @param [Integer] response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_info_bar_set_default_response, :gtk_info_bar_set_default_response, [GtkInfoBar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_info_bar_response(info_bar, response_id)
  # @param [GtkInfoBar] info_bar 
  # @param [Integer] response_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_info_bar_response, :gtk_info_bar_response, [GtkInfoBar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_info_bar_set_message_type(info_bar, message_type)
  # @param [GtkInfoBar] info_bar 
  # @param [Symbol from _enum_gtk_message_type_] message_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_info_bar_set_message_type, :gtk_info_bar_set_message_type, [GtkInfoBar, :gtk_message_type], :void
  
  # (Not documented)
  # 
  # @method gtk_info_bar_get_message_type(info_bar)
  # @param [GtkInfoBar] info_bar 
  # @return [Symbol from _enum_gtk_message_type_] 
  # @scope class
  attach_function :gtk_info_bar_get_message_type, :gtk_info_bar_get_message_type, [GtkInfoBar], :gtk_message_type
  
  # (Not documented)
  class GtkInvisiblePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkInvisiblePrivate) < private >
  module GtkInvisibleWrappers
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_invisible_set_screen(self, screen)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_invisible_get_screen(self)
    end
  end
  
  class GtkInvisible < FFI::Struct
    include GtkInvisibleWrappers
    layout :widget, GtkWidget.by_value,
           :priv, GtkInvisiblePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkInvisibleClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_invisible_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_invisible_get_type, :gtk_invisible_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_invisible_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_invisible_new, :gtk_invisible_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_invisible_new_for_screen(screen)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_invisible_new_for_screen, :gtk_invisible_new_for_screen, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_invisible_set_screen(invisible, screen)
  # @param [GtkInvisible] invisible 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_invisible_set_screen, :gtk_invisible_set_screen, [GtkInvisible, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_invisible_get_screen(invisible)
  # @param [GtkInvisible] invisible 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_invisible_get_screen, :gtk_invisible_get_screen, [GtkInvisible], :pointer
  
  # (Not documented)
  class GtkLayoutPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkLayoutPrivate) < private >
  module GtkLayoutWrappers
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_bin_window()
      Gtk.gtk_layout_get_bin_window(self)
    end
    
    # @param [GtkWidget] child_widget 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def put(child_widget, x, y)
      Gtk.gtk_layout_put(self, child_widget, x, y)
    end
    
    # @param [GtkWidget] child_widget 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def move(child_widget, x, y)
      Gtk.gtk_layout_move(self, child_widget, x, y)
    end
    
    # @param [Integer] width 
    # @param [Integer] height 
    # @return [nil] 
    def set_size(width, height)
      Gtk.gtk_layout_set_size(self, width, height)
    end
    
    # @param [FFI::Pointer(*Guint)] width 
    # @param [FFI::Pointer(*Guint)] height 
    # @return [nil] 
    def get_size(width, height)
      Gtk.gtk_layout_get_size(self, width, height)
    end
    
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_layout_get_hadjustment(self)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_layout_get_vadjustment(self)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_hadjustment(adjustment)
      Gtk.gtk_layout_set_hadjustment(self, adjustment)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_vadjustment(adjustment)
      Gtk.gtk_layout_set_vadjustment(self, adjustment)
    end
  end
  
  class GtkLayout < FFI::Struct
    include GtkLayoutWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkLayoutPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkLayoutClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_layout_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_layout_get_type, :gtk_layout_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_layout_new(hadjustment, vadjustment)
  # @param [GtkAdjustment] hadjustment 
  # @param [GtkAdjustment] vadjustment 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_layout_new, :gtk_layout_new, [GtkAdjustment, GtkAdjustment], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_layout_get_bin_window(layout)
  # @param [GtkLayout] layout 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_layout_get_bin_window, :gtk_layout_get_bin_window, [GtkLayout], :pointer
  
  # (Not documented)
  # 
  # @method gtk_layout_put(layout, child_widget, x, y)
  # @param [GtkLayout] layout 
  # @param [GtkWidget] child_widget 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_layout_put, :gtk_layout_put, [GtkLayout, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_layout_move(layout, child_widget, x, y)
  # @param [GtkLayout] layout 
  # @param [GtkWidget] child_widget 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_layout_move, :gtk_layout_move, [GtkLayout, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_layout_set_size(layout, width, height)
  # @param [GtkLayout] layout 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_layout_set_size, :gtk_layout_set_size, [GtkLayout, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_layout_get_size(layout, width, height)
  # @param [GtkLayout] layout 
  # @param [FFI::Pointer(*Guint)] width 
  # @param [FFI::Pointer(*Guint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_layout_get_size, :gtk_layout_get_size, [GtkLayout, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_layout_get_hadjustment(layout)
  # @param [GtkLayout] layout 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_layout_get_hadjustment, :gtk_layout_get_hadjustment, [GtkLayout], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_layout_get_vadjustment(layout)
  # @param [GtkLayout] layout 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_layout_get_vadjustment, :gtk_layout_get_vadjustment, [GtkLayout], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_layout_set_hadjustment(layout, adjustment)
  # @param [GtkLayout] layout 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_layout_set_hadjustment, :gtk_layout_set_hadjustment, [GtkLayout, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_layout_set_vadjustment(layout, adjustment)
  # @param [GtkLayout] layout 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_layout_set_vadjustment, :gtk_layout_set_vadjustment, [GtkLayout, GtkAdjustment], :void
  
  # (Not documented)
  class GtkLevelBarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkWidget) < private >
  # :priv ::
  #   (GtkLevelBarPrivate) 
  module GtkLevelBarWrappers
    # @param [Symbol from _enum_gtk_level_bar_mode_] mode 
    # @return [nil] 
    def set_mode(mode)
      Gtk.gtk_level_bar_set_mode(self, mode)
    end
    
    # @return [Symbol from _enum_gtk_level_bar_mode_] 
    def get_mode()
      Gtk.gtk_level_bar_get_mode(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_value(value)
      Gtk.gtk_level_bar_set_value(self, value)
    end
    
    # @return [Float] 
    def get_value()
      Gtk.gtk_level_bar_get_value(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_min_value(value)
      Gtk.gtk_level_bar_set_min_value(self, value)
    end
    
    # @return [Float] 
    def get_min_value()
      Gtk.gtk_level_bar_get_min_value(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_max_value(value)
      Gtk.gtk_level_bar_set_max_value(self, value)
    end
    
    # @return [Float] 
    def get_max_value()
      Gtk.gtk_level_bar_get_max_value(self)
    end
    
    # @param [String] name 
    # @param [Float] value 
    # @return [nil] 
    def add_offset_value(name, value)
      Gtk.gtk_level_bar_add_offset_value(self, name, value)
    end
    
    # @param [String] name 
    # @return [nil] 
    def remove_offset_value(name)
      Gtk.gtk_level_bar_remove_offset_value(self, name)
    end
    
    # @param [String] name 
    # @param [FFI::Pointer(*Gdouble)] value 
    # @return [Integer] 
    def get_offset_value(name, value)
      Gtk.gtk_level_bar_get_offset_value(self, name, value)
    end
  end
  
  class GtkLevelBar < FFI::Struct
    include GtkLevelBarWrappers
    layout :parent, GtkWidget.by_value,
           :priv, GtkLevelBarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) < private >
  # :offset_changed ::
  #   (FFI::Pointer(*)) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) padding for future class expansion
  class GtkLevelBarClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :offset_changed, :pointer,
           :padding, [:pointer, 16]
  end
  
  # (Not documented)
  # 
  # @method gtk_level_bar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_level_bar_get_type, :gtk_level_bar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_level_bar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_level_bar_new, :gtk_level_bar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_level_bar_new_for_interval(min_value, max_value)
  # @param [Float] min_value 
  # @param [Float] max_value 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_level_bar_new_for_interval, :gtk_level_bar_new_for_interval, [:double, :double], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_level_bar_set_mode(self_, mode)
  # @param [GtkLevelBar] self_ 
  # @param [Symbol from _enum_gtk_level_bar_mode_] mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_level_bar_set_mode, :gtk_level_bar_set_mode, [GtkLevelBar, :gtk_level_bar_mode], :void
  
  # (Not documented)
  # 
  # @method gtk_level_bar_get_mode(self_)
  # @param [GtkLevelBar] self_ 
  # @return [Symbol from _enum_gtk_level_bar_mode_] 
  # @scope class
  attach_function :gtk_level_bar_get_mode, :gtk_level_bar_get_mode, [GtkLevelBar], :gtk_level_bar_mode
  
  # (Not documented)
  # 
  # @method gtk_level_bar_set_value(self_, value)
  # @param [GtkLevelBar] self_ 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_level_bar_set_value, :gtk_level_bar_set_value, [GtkLevelBar, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_level_bar_get_value(self_)
  # @param [GtkLevelBar] self_ 
  # @return [Float] 
  # @scope class
  attach_function :gtk_level_bar_get_value, :gtk_level_bar_get_value, [GtkLevelBar], :double
  
  # (Not documented)
  # 
  # @method gtk_level_bar_set_min_value(self_, value)
  # @param [GtkLevelBar] self_ 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_level_bar_set_min_value, :gtk_level_bar_set_min_value, [GtkLevelBar, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_level_bar_get_min_value(self_)
  # @param [GtkLevelBar] self_ 
  # @return [Float] 
  # @scope class
  attach_function :gtk_level_bar_get_min_value, :gtk_level_bar_get_min_value, [GtkLevelBar], :double
  
  # (Not documented)
  # 
  # @method gtk_level_bar_set_max_value(self_, value)
  # @param [GtkLevelBar] self_ 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_level_bar_set_max_value, :gtk_level_bar_set_max_value, [GtkLevelBar, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_level_bar_get_max_value(self_)
  # @param [GtkLevelBar] self_ 
  # @return [Float] 
  # @scope class
  attach_function :gtk_level_bar_get_max_value, :gtk_level_bar_get_max_value, [GtkLevelBar], :double
  
  # (Not documented)
  # 
  # @method gtk_level_bar_add_offset_value(self_, name, value)
  # @param [GtkLevelBar] self_ 
  # @param [String] name 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_level_bar_add_offset_value, :gtk_level_bar_add_offset_value, [GtkLevelBar, :string, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_level_bar_remove_offset_value(self_, name)
  # @param [GtkLevelBar] self_ 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_level_bar_remove_offset_value, :gtk_level_bar_remove_offset_value, [GtkLevelBar, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_level_bar_get_offset_value(self_, name, value)
  # @param [GtkLevelBar] self_ 
  # @param [String] name 
  # @param [FFI::Pointer(*Gdouble)] value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_level_bar_get_offset_value, :gtk_level_bar_get_offset_value, [GtkLevelBar, :string, :pointer], :int
  
  # (Not documented)
  class GtkLinkButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkButton) < private >
  # :priv ::
  #   (GtkLinkButtonPrivate) 
  module GtkLinkButtonWrappers
    # @return [String] 
    def get_uri()
      Gtk.gtk_link_button_get_uri(self)
    end
    
    # @param [String] uri 
    # @return [nil] 
    def set_uri(uri)
      Gtk.gtk_link_button_set_uri(self, uri)
    end
    
    # @return [Integer] 
    def get_visited()
      Gtk.gtk_link_button_get_visited(self)
    end
    
    # @param [Integer] visited 
    # @return [nil] 
    def set_visited(visited)
      Gtk.gtk_link_button_set_visited(self, visited)
    end
  end
  
  class GtkLinkButton < FFI::Struct
    include GtkLinkButtonWrappers
    layout :parent_instance, GtkButton.by_value,
           :priv, GtkLinkButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkButtonClass) < private >
  # :activate_link ::
  #   (FFI::Pointer(*)) < public >
  # :gtk_padding1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_padding2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_padding3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_padding4 ::
  #   (FFI::Pointer(*)) 
  class GtkLinkButtonClass < FFI::Struct
    layout :parent_class, GtkButtonClass.by_value,
           :activate_link, :pointer,
           :gtk_padding1, :pointer,
           :gtk_padding2, :pointer,
           :gtk_padding3, :pointer,
           :gtk_padding4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_link_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_link_button_get_type, :gtk_link_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_link_button_new(uri)
  # @param [String] uri 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_link_button_new, :gtk_link_button_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_link_button_new_with_label(uri, label)
  # @param [String] uri 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_link_button_new_with_label, :gtk_link_button_new_with_label, [:string, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_link_button_get_uri(link_button)
  # @param [GtkLinkButton] link_button 
  # @return [String] 
  # @scope class
  attach_function :gtk_link_button_get_uri, :gtk_link_button_get_uri, [GtkLinkButton], :string
  
  # (Not documented)
  # 
  # @method gtk_link_button_set_uri(link_button, uri)
  # @param [GtkLinkButton] link_button 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :gtk_link_button_set_uri, :gtk_link_button_set_uri, [GtkLinkButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_link_button_get_visited(link_button)
  # @param [GtkLinkButton] link_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_link_button_get_visited, :gtk_link_button_get_visited, [GtkLinkButton], :int
  
  # (Not documented)
  # 
  # @method gtk_link_button_set_visited(link_button, visited)
  # @param [GtkLinkButton] link_button 
  # @param [Integer] visited 
  # @return [nil] 
  # @scope class
  attach_function :gtk_link_button_set_visited, :gtk_link_button_set_visited, [GtkLinkButton, :int], :void
  
  # (Not documented)
  class GtkLockButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkButton) 
  # :priv ::
  #   (GtkLockButtonPrivate) 
  module GtkLockButtonWrappers
    # @return [FFI::Pointer(*GPermission)] 
    def get_permission()
      Gtk.gtk_lock_button_get_permission(self)
    end
    
    # @param [FFI::Pointer(*GPermission)] permission 
    # @return [nil] 
    def set_permission(permission)
      Gtk.gtk_lock_button_set_permission(self, permission)
    end
  end
  
  class GtkLockButton < FFI::Struct
    include GtkLockButtonWrappers
    layout :parent, GtkButton.by_value,
           :priv, GtkLockButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkButtonClass) 
  # :reserved0 ::
  #   (FFI::Pointer(*)) 
  # :reserved1 ::
  #   (FFI::Pointer(*)) 
  # :reserved2 ::
  #   (FFI::Pointer(*)) 
  # :reserved3 ::
  #   (FFI::Pointer(*)) 
  # :reserved4 ::
  #   (FFI::Pointer(*)) 
  # :reserved5 ::
  #   (FFI::Pointer(*)) 
  # :reserved6 ::
  #   (FFI::Pointer(*)) 
  # :reserved7 ::
  #   (FFI::Pointer(*)) 
  class GtkLockButtonClass < FFI::Struct
    layout :parent_class, GtkButtonClass.by_value,
           :reserved0, :pointer,
           :reserved1, :pointer,
           :reserved2, :pointer,
           :reserved3, :pointer,
           :reserved4, :pointer,
           :reserved5, :pointer,
           :reserved6, :pointer,
           :reserved7, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_lock_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_lock_button_get_type, :gtk_lock_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_lock_button_new(permission)
  # @param [FFI::Pointer(*GPermission)] permission 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_lock_button_new, :gtk_lock_button_new, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_lock_button_get_permission(button)
  # @param [GtkLockButton] button 
  # @return [FFI::Pointer(*GPermission)] 
  # @scope class
  attach_function :gtk_lock_button_get_permission, :gtk_lock_button_get_permission, [GtkLockButton], :pointer
  
  # (Not documented)
  # 
  # @method gtk_lock_button_set_permission(button, permission)
  # @param [GtkLockButton] button 
  # @param [FFI::Pointer(*GPermission)] permission 
  # @return [nil] 
  # @scope class
  attach_function :gtk_lock_button_set_permission, :gtk_lock_button_set_permission, [GtkLockButton, :pointer], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_key_snoop_func_(grab_widget, event, func_data)
  # @param [GtkWidget] grab_widget 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_key_snoop_func, [GtkWidget, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_get_major_version()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_major_version, :gtk_get_major_version, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_get_minor_version()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_minor_version, :gtk_get_minor_version, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_get_micro_version()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_micro_version, :gtk_get_micro_version, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_get_binary_age()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_binary_age, :gtk_get_binary_age, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_get_interface_age()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_interface_age, :gtk_get_interface_age, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_check_version(required_major, required_minor, required_micro)
  # @param [Integer] required_major 
  # @param [Integer] required_minor 
  # @param [Integer] required_micro 
  # @return [String] 
  # @scope class
  attach_function :gtk_check_version, :gtk_check_version, [:uint, :uint, :uint], :string
  
  # (Not documented)
  # 
  # @method gtk_parse_args(argc, argv)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_parse_args, :gtk_parse_args, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_init(argc, argv)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @return [nil] 
  # @scope class
  attach_function :gtk_init, :gtk_init, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_init_check(argc, argv)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_init_check, :gtk_init_check, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_init_with_args(argc, argv, parameter_string, entries, translation_domain, error)
  # @param [FFI::Pointer(*Gint)] argc 
  # @param [FFI::Pointer(***Gchar)] argv 
  # @param [String] parameter_string 
  # @param [FFI::Pointer(*GOptionEntry)] entries 
  # @param [String] translation_domain 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_init_with_args, :gtk_init_with_args, [:pointer, :pointer, :string, :pointer, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_get_option_group(open_default_display)
  # @param [Integer] open_default_display 
  # @return [FFI::Pointer(*GOptionGroup)] 
  # @scope class
  attach_function :gtk_get_option_group, :gtk_get_option_group, [:int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_init_abi_check(argc, argv, num_checks, sizeof_gtk_window, sizeof_gtk_box)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @param [Integer] num_checks 
  # @param [Integer] sizeof_gtk_window 
  # @param [Integer] sizeof_gtk_box 
  # @return [nil] 
  # @scope class
  attach_function :gtk_init_abi_check, :gtk_init_abi_check, [:pointer, :pointer, :int, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_init_check_abi_check(argc, argv, num_checks, sizeof_gtk_window, sizeof_gtk_box)
  # @param [FFI::Pointer(*Int)] argc 
  # @param [FFI::Pointer(***CharS)] argv 
  # @param [Integer] num_checks 
  # @param [Integer] sizeof_gtk_window 
  # @param [Integer] sizeof_gtk_box 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_init_check_abi_check, :gtk_init_check_abi_check, [:pointer, :pointer, :int, :uint, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_disable_setlocale()
  # @return [nil] 
  # @scope class
  attach_function :gtk_disable_setlocale, :gtk_disable_setlocale, [], :void
  
  # (Not documented)
  # 
  # @method gtk_get_default_language()
  # @return [FFI::Pointer(*PangoLanguage)] 
  # @scope class
  attach_function :gtk_get_default_language, :gtk_get_default_language, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_events_pending()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_events_pending, :gtk_events_pending, [], :int
  
  # (Not documented)
  # 
  # @method gtk_main_do_event(event)
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_main_do_event, :gtk_main_do_event, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_main()
  # @return [nil] 
  # @scope class
  attach_function :gtk_main, :gtk_main, [], :void
  
  # (Not documented)
  # 
  # @method gtk_main_level()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_main_level, :gtk_main_level, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_main_quit()
  # @return [nil] 
  # @scope class
  attach_function :gtk_main_quit, :gtk_main_quit, [], :void
  
  # (Not documented)
  # 
  # @method gtk_main_iteration()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_main_iteration, :gtk_main_iteration, [], :int
  
  # (Not documented)
  # 
  # @method gtk_main_iteration_do(blocking)
  # @param [Integer] blocking 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_main_iteration_do, :gtk_main_iteration_do, [:int], :int
  
  # (Not documented)
  # 
  # @method gtk_true()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_true, :gtk_true, [], :int
  
  # (Not documented)
  # 
  # @method gtk_false()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_false, :gtk_false, [], :int
  
  # (Not documented)
  # 
  # @method gtk_grab_add(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grab_add, :gtk_grab_add, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_grab_get_current()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_grab_get_current, :gtk_grab_get_current, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_grab_remove(widget)
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_grab_remove, :gtk_grab_remove, [GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_device_grab_add(widget, device, block_others)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @param [Integer] block_others 
  # @return [nil] 
  # @scope class
  attach_function :gtk_device_grab_add, :gtk_device_grab_add, [GtkWidget, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_device_grab_remove(widget, device)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkDevice)] device 
  # @return [nil] 
  # @scope class
  attach_function :gtk_device_grab_remove, :gtk_device_grab_remove, [GtkWidget, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_key_snooper_install(snooper, func_data)
  # @param [Proc(_callback_gtk_key_snoop_func_)] snooper 
  # @param [FFI::Pointer(Gpointer)] func_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_key_snooper_install, :gtk_key_snooper_install, [:gtk_key_snoop_func, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_key_snooper_remove(snooper_handler_id)
  # @param [Integer] snooper_handler_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_key_snooper_remove, :gtk_key_snooper_remove, [:uint], :void
  
  # (Not documented)
  # 
  # @method gtk_get_current_event()
  # @return [FFI::Pointer(*GdkEvent)] 
  # @scope class
  attach_function :gtk_get_current_event, :gtk_get_current_event, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_get_current_event_time()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_current_event_time, :gtk_get_current_event_time, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_get_current_event_state(state)
  # @param [FFI::Pointer(*GdkModifierType)] state 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_get_current_event_state, :gtk_get_current_event_state, [:pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_get_current_event_device()
  # @return [FFI::Pointer(*GdkDevice)] 
  # @scope class
  attach_function :gtk_get_current_event_device, :gtk_get_current_event_device, [], :pointer
  
  # (Not documented)
  # 
  # @method gtk_get_event_widget(event)
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_get_event_widget, :gtk_get_event_widget, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_propagate_event(widget, event)
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*GdkEvent)] event 
  # @return [nil] 
  # @scope class
  attach_function :gtk_propagate_event, :gtk_propagate_event, [GtkWidget, :pointer], :void
  
  # (Not documented)
  class GtkMenuBarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :menu_shell ::
  #   (GtkMenuShell) 
  # :priv ::
  #   (GtkMenuBarPrivate) < private >
  module GtkMenuBarWrappers
    # @return [Symbol from _enum_gtk_pack_direction_] 
    def get_pack_direction()
      Gtk.gtk_menu_bar_get_pack_direction(self)
    end
    
    # @param [Symbol from _enum_gtk_pack_direction_] pack_dir 
    # @return [nil] 
    def set_pack_direction(pack_dir)
      Gtk.gtk_menu_bar_set_pack_direction(self, pack_dir)
    end
    
    # @return [Symbol from _enum_gtk_pack_direction_] 
    def get_child_pack_direction()
      Gtk.gtk_menu_bar_get_child_pack_direction(self)
    end
    
    # @param [Symbol from _enum_gtk_pack_direction_] child_pack_dir 
    # @return [nil] 
    def set_child_pack_direction(child_pack_dir)
      Gtk.gtk_menu_bar_set_child_pack_direction(self, child_pack_dir)
    end
    
    # @param [Symbol from _enum_gtk_direction_type_] dir 
    # @return [nil] 
    def cycle_focus(dir)
      Gtk.gtk_menu_bar_cycle_focus(self, dir)
    end
  end
  
  class GtkMenuBar < FFI::Struct
    include GtkMenuBarWrappers
    layout :menu_shell, GtkMenuShell.by_value,
           :priv, GtkMenuBarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMenuShellClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMenuBarClass < FFI::Struct
    layout :parent_class, GtkMenuShellClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_bar_get_type, :gtk_menu_bar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_bar_new, :gtk_menu_bar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_new_from_model(model)
  # @param [FFI::Pointer(*GMenuModel)] model 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_bar_new_from_model, :gtk_menu_bar_new_from_model, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_get_pack_direction(menubar)
  # @param [GtkMenuBar] menubar 
  # @return [Symbol from _enum_gtk_pack_direction_] 
  # @scope class
  attach_function :gtk_menu_bar_get_pack_direction, :gtk_menu_bar_get_pack_direction, [GtkMenuBar], :gtk_pack_direction
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_set_pack_direction(menubar, pack_dir)
  # @param [GtkMenuBar] menubar 
  # @param [Symbol from _enum_gtk_pack_direction_] pack_dir 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_bar_set_pack_direction, :gtk_menu_bar_set_pack_direction, [GtkMenuBar, :gtk_pack_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_get_child_pack_direction(menubar)
  # @param [GtkMenuBar] menubar 
  # @return [Symbol from _enum_gtk_pack_direction_] 
  # @scope class
  attach_function :gtk_menu_bar_get_child_pack_direction, :gtk_menu_bar_get_child_pack_direction, [GtkMenuBar], :gtk_pack_direction
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_set_child_pack_direction(menubar, child_pack_dir)
  # @param [GtkMenuBar] menubar 
  # @param [Symbol from _enum_gtk_pack_direction_] child_pack_dir 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_bar_set_child_pack_direction, :gtk_menu_bar_set_child_pack_direction, [GtkMenuBar, :gtk_pack_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_bar_cycle_focus(menubar, dir)
  # @param [GtkMenuBar] menubar 
  # @param [Symbol from _enum_gtk_direction_type_] dir 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_bar_cycle_focus, :_gtk_menu_bar_cycle_focus, [GtkMenuBar, :gtk_direction_type], :void
  
  # (Not documented)
  class GtkMenuButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToggleButton) 
  # :priv ::
  #   (GtkMenuButtonPrivate) < private >
  module GtkMenuButtonWrappers
    # @param [GtkWidget] popup 
    # @return [nil] 
    def set_popup(popup)
      Gtk.gtk_menu_button_set_popup(self, popup)
    end
    
    # @return [GtkMenu] 
    def get_popup()
      GtkMenu.new Gtk.gtk_menu_button_get_popup(self)
    end
    
    # @param [Symbol from _enum_gtk_arrow_type_] direction 
    # @return [nil] 
    def set_direction(direction)
      Gtk.gtk_menu_button_set_direction(self, direction)
    end
    
    # @return [Symbol from _enum_gtk_arrow_type_] 
    def get_direction()
      Gtk.gtk_menu_button_get_direction(self)
    end
    
    # @param [FFI::Pointer(*GMenuModel)] menu_model 
    # @return [nil] 
    def set_menu_model(menu_model)
      Gtk.gtk_menu_button_set_menu_model(self, menu_model)
    end
    
    # @return [FFI::Pointer(*GMenuModel)] 
    def get_menu_model()
      Gtk.gtk_menu_button_get_menu_model(self)
    end
    
    # @param [GtkWidget] align_widget 
    # @return [nil] 
    def set_align_widget(align_widget)
      Gtk.gtk_menu_button_set_align_widget(self, align_widget)
    end
    
    # @return [GtkWidget] 
    def get_align_widget()
      GtkWidget.new Gtk.gtk_menu_button_get_align_widget(self)
    end
  end
  
  class GtkMenuButton < FFI::Struct
    include GtkMenuButtonWrappers
    layout :parent, GtkToggleButton.by_value,
           :priv, GtkMenuButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToggleButtonClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMenuButtonClass < FFI::Struct
    layout :parent_class, GtkToggleButtonClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_menu_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_button_get_type, :gtk_menu_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_button_new, :gtk_menu_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_button_set_popup(menu_button, popup)
  # @param [GtkMenuButton] menu_button 
  # @param [GtkWidget] popup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_button_set_popup, :gtk_menu_button_set_popup, [GtkMenuButton, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_button_get_popup(menu_button)
  # @param [GtkMenuButton] menu_button 
  # @return [GtkMenu] 
  # @scope class
  attach_function :gtk_menu_button_get_popup, :gtk_menu_button_get_popup, [GtkMenuButton], GtkMenu
  
  # (Not documented)
  # 
  # @method gtk_menu_button_set_direction(menu_button, direction)
  # @param [GtkMenuButton] menu_button 
  # @param [Symbol from _enum_gtk_arrow_type_] direction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_button_set_direction, :gtk_menu_button_set_direction, [GtkMenuButton, :gtk_arrow_type], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_button_get_direction(menu_button)
  # @param [GtkMenuButton] menu_button 
  # @return [Symbol from _enum_gtk_arrow_type_] 
  # @scope class
  attach_function :gtk_menu_button_get_direction, :gtk_menu_button_get_direction, [GtkMenuButton], :gtk_arrow_type
  
  # (Not documented)
  # 
  # @method gtk_menu_button_set_menu_model(menu_button, menu_model)
  # @param [GtkMenuButton] menu_button 
  # @param [FFI::Pointer(*GMenuModel)] menu_model 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_button_set_menu_model, :gtk_menu_button_set_menu_model, [GtkMenuButton, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_button_get_menu_model(menu_button)
  # @param [GtkMenuButton] menu_button 
  # @return [FFI::Pointer(*GMenuModel)] 
  # @scope class
  attach_function :gtk_menu_button_get_menu_model, :gtk_menu_button_get_menu_model, [GtkMenuButton], :pointer
  
  # (Not documented)
  # 
  # @method gtk_menu_button_set_align_widget(menu_button, align_widget)
  # @param [GtkMenuButton] menu_button 
  # @param [GtkWidget] align_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_button_set_align_widget, :gtk_menu_button_set_align_widget, [GtkMenuButton, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_button_get_align_widget(menu_button)
  # @param [GtkMenuButton] menu_button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_button_get_align_widget, :gtk_menu_button_get_align_widget, [GtkMenuButton], GtkWidget
  
  # (Not documented)
  class GtkSizeGroupPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkSizeGroupPrivate) < private >
  module GtkSizeGroupWrappers
    # @param [Symbol from _enum_gtk_size_group_mode_] mode 
    # @return [nil] 
    def set_mode(mode)
      Gtk.gtk_size_group_set_mode(self, mode)
    end
    
    # @return [Symbol from _enum_gtk_size_group_mode_] 
    def get_mode()
      Gtk.gtk_size_group_get_mode(self)
    end
    
    # @param [Integer] ignore_hidden 
    # @return [nil] 
    def set_ignore_hidden(ignore_hidden)
      Gtk.gtk_size_group_set_ignore_hidden(self, ignore_hidden)
    end
    
    # @return [Integer] 
    def get_ignore_hidden()
      Gtk.gtk_size_group_get_ignore_hidden(self)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def add_widget(widget)
      Gtk.gtk_size_group_add_widget(self, widget)
    end
    
    # @param [GtkWidget] widget 
    # @return [nil] 
    def remove_widget(widget)
      Gtk.gtk_size_group_remove_widget(self, widget)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_widgets()
      Gtk.gtk_size_group_get_widgets(self)
    end
  end
  
  class GtkSizeGroup < FFI::Struct
    include GtkSizeGroupWrappers
    layout :parent_instance, :char,
           :priv, GtkSizeGroupPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSizeGroupClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_size_group_mode).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :horizontal ::
  #   
  # :vertical ::
  #   
  # :both ::
  #   
  # 
  # @method _enum_gtk_size_group_mode_
  # @return [Symbol]
  # @scope class
  enum :gtk_size_group_mode, [
    :none, 0,
    :horizontal, 1,
    :vertical, 2,
    :both, 3
  ]
  
  # (Not documented)
  # 
  # @method gtk_size_group_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_size_group_get_type, :gtk_size_group_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_size_group_new(mode)
  # @param [Symbol from _enum_gtk_size_group_mode_] mode 
  # @return [GtkSizeGroup] 
  # @scope class
  attach_function :gtk_size_group_new, :gtk_size_group_new, [:gtk_size_group_mode], GtkSizeGroup
  
  # (Not documented)
  # 
  # @method gtk_size_group_set_mode(size_group, mode)
  # @param [GtkSizeGroup] size_group 
  # @param [Symbol from _enum_gtk_size_group_mode_] mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_size_group_set_mode, :gtk_size_group_set_mode, [GtkSizeGroup, :gtk_size_group_mode], :void
  
  # (Not documented)
  # 
  # @method gtk_size_group_get_mode(size_group)
  # @param [GtkSizeGroup] size_group 
  # @return [Symbol from _enum_gtk_size_group_mode_] 
  # @scope class
  attach_function :gtk_size_group_get_mode, :gtk_size_group_get_mode, [GtkSizeGroup], :gtk_size_group_mode
  
  # (Not documented)
  # 
  # @method gtk_size_group_set_ignore_hidden(size_group, ignore_hidden)
  # @param [GtkSizeGroup] size_group 
  # @param [Integer] ignore_hidden 
  # @return [nil] 
  # @scope class
  attach_function :gtk_size_group_set_ignore_hidden, :gtk_size_group_set_ignore_hidden, [GtkSizeGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_size_group_get_ignore_hidden(size_group)
  # @param [GtkSizeGroup] size_group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_size_group_get_ignore_hidden, :gtk_size_group_get_ignore_hidden, [GtkSizeGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_size_group_add_widget(size_group, widget)
  # @param [GtkSizeGroup] size_group 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_size_group_add_widget, :gtk_size_group_add_widget, [GtkSizeGroup, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_size_group_remove_widget(size_group, widget)
  # @param [GtkSizeGroup] size_group 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_size_group_remove_widget, :gtk_size_group_remove_widget, [GtkSizeGroup, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_size_group_get_widgets(size_group)
  # @param [GtkSizeGroup] size_group 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_size_group_get_widgets, :gtk_size_group_get_widgets, [GtkSizeGroup], :pointer
  
  # (Not documented)
  class GtkToolItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkToolItemPrivate) < private >
  module GtkToolItemWrappers
    # @param [Integer] homogeneous 
    # @return [nil] 
    def set_homogeneous(homogeneous)
      Gtk.gtk_tool_item_set_homogeneous(self, homogeneous)
    end
    
    # @return [Integer] 
    def get_homogeneous()
      Gtk.gtk_tool_item_get_homogeneous(self)
    end
    
    # @param [Integer] expand 
    # @return [nil] 
    def set_expand(expand)
      Gtk.gtk_tool_item_set_expand(self, expand)
    end
    
    # @return [Integer] 
    def get_expand()
      Gtk.gtk_tool_item_get_expand(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_tooltip_text(text)
      Gtk.gtk_tool_item_set_tooltip_text(self, text)
    end
    
    # @param [String] markup 
    # @return [nil] 
    def set_tooltip_markup(markup)
      Gtk.gtk_tool_item_set_tooltip_markup(self, markup)
    end
    
    # @param [Integer] use_drag_window 
    # @return [nil] 
    def set_use_drag_window(use_drag_window)
      Gtk.gtk_tool_item_set_use_drag_window(self, use_drag_window)
    end
    
    # @return [Integer] 
    def get_use_drag_window()
      Gtk.gtk_tool_item_get_use_drag_window(self)
    end
    
    # @param [Integer] visible_horizontal 
    # @return [nil] 
    def set_visible_horizontal(visible_horizontal)
      Gtk.gtk_tool_item_set_visible_horizontal(self, visible_horizontal)
    end
    
    # @return [Integer] 
    def get_visible_horizontal()
      Gtk.gtk_tool_item_get_visible_horizontal(self)
    end
    
    # @param [Integer] visible_vertical 
    # @return [nil] 
    def set_visible_vertical(visible_vertical)
      Gtk.gtk_tool_item_set_visible_vertical(self, visible_vertical)
    end
    
    # @return [Integer] 
    def get_visible_vertical()
      Gtk.gtk_tool_item_get_visible_vertical(self)
    end
    
    # @return [Integer] 
    def get_is_important()
      Gtk.gtk_tool_item_get_is_important(self)
    end
    
    # @param [Integer] is_important 
    # @return [nil] 
    def set_is_important(is_important)
      Gtk.gtk_tool_item_set_is_important(self, is_important)
    end
    
    # @return [unknown] 
    def get_ellipsize_mode()
      Gtk.gtk_tool_item_get_ellipsize_mode(self)
    end
    
    # @return [Symbol from _enum_gtk_icon_size_] 
    def get_icon_size()
      Gtk.gtk_tool_item_get_icon_size(self)
    end
    
    # @return [Symbol from _enum_gtk_orientation_] 
    def get_orientation()
      Gtk.gtk_tool_item_get_orientation(self)
    end
    
    # @return [Symbol from _enum_gtk_toolbar_style_] 
    def get_toolbar_style()
      Gtk.gtk_tool_item_get_toolbar_style(self)
    end
    
    # @return [Symbol from _enum_gtk_relief_style_] 
    def get_relief_style()
      Gtk.gtk_tool_item_get_relief_style(self)
    end
    
    # @return [Float] 
    def get_text_alignment()
      Gtk.gtk_tool_item_get_text_alignment(self)
    end
    
    # @return [Symbol from _enum_gtk_orientation_] 
    def get_text_orientation()
      Gtk.gtk_tool_item_get_text_orientation(self)
    end
    
    # @return [GtkSizeGroup] 
    def get_text_size_group()
      GtkSizeGroup.new Gtk.gtk_tool_item_get_text_size_group(self)
    end
    
    # @return [GtkWidget] 
    def retrieve_proxy_menu_item()
      GtkWidget.new Gtk.gtk_tool_item_retrieve_proxy_menu_item(self)
    end
    
    # @param [String] menu_item_id 
    # @return [GtkWidget] 
    def get_proxy_menu_item(menu_item_id)
      GtkWidget.new Gtk.gtk_tool_item_get_proxy_menu_item(self, menu_item_id)
    end
    
    # @param [String] menu_item_id 
    # @param [GtkWidget] menu_item 
    # @return [nil] 
    def set_proxy_menu_item(menu_item_id, menu_item)
      Gtk.gtk_tool_item_set_proxy_menu_item(self, menu_item_id, menu_item)
    end
    
    # @return [nil] 
    def rebuild_menu()
      Gtk.gtk_tool_item_rebuild_menu(self)
    end
    
    # @return [nil] 
    def toolbar_reconfigured()
      Gtk.gtk_tool_item_toolbar_reconfigured(self)
    end
    
    # @return [Integer] 
    def create_menu_proxy()
      Gtk.gtk_tool_item_create_menu_proxy(self)
    end
  end
  
  class GtkToolItem < FFI::Struct
    include GtkToolItemWrappers
    layout :parent, GtkBin.by_value,
           :priv, GtkToolItemPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :create_menu_proxy ::
  #   (FFI::Pointer(*)) signals
  # :toolbar_reconfigured ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToolItemClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :create_menu_proxy, :pointer,
           :toolbar_reconfigured, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_type, :gtk_tool_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_item_new()
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_tool_item_new, :gtk_tool_item_new, [], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_homogeneous(tool_item, homogeneous)
  # @param [GtkToolItem] tool_item 
  # @param [Integer] homogeneous 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_homogeneous, :gtk_tool_item_set_homogeneous, [GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_homogeneous(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_homogeneous, :gtk_tool_item_get_homogeneous, [GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_expand(tool_item, expand)
  # @param [GtkToolItem] tool_item 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_expand, :gtk_tool_item_set_expand, [GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_expand(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_expand, :gtk_tool_item_get_expand, [GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_tooltip_text(tool_item, text)
  # @param [GtkToolItem] tool_item 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_tooltip_text, :gtk_tool_item_set_tooltip_text, [GtkToolItem, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_tooltip_markup(tool_item, markup)
  # @param [GtkToolItem] tool_item 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_tooltip_markup, :gtk_tool_item_set_tooltip_markup, [GtkToolItem, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_use_drag_window(tool_item, use_drag_window)
  # @param [GtkToolItem] tool_item 
  # @param [Integer] use_drag_window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_use_drag_window, :gtk_tool_item_set_use_drag_window, [GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_use_drag_window(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_use_drag_window, :gtk_tool_item_get_use_drag_window, [GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_visible_horizontal(tool_item, visible_horizontal)
  # @param [GtkToolItem] tool_item 
  # @param [Integer] visible_horizontal 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_visible_horizontal, :gtk_tool_item_set_visible_horizontal, [GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_visible_horizontal(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_visible_horizontal, :gtk_tool_item_get_visible_horizontal, [GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_visible_vertical(tool_item, visible_vertical)
  # @param [GtkToolItem] tool_item 
  # @param [Integer] visible_vertical 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_visible_vertical, :gtk_tool_item_set_visible_vertical, [GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_visible_vertical(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_visible_vertical, :gtk_tool_item_get_visible_vertical, [GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_is_important(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_get_is_important, :gtk_tool_item_get_is_important, [GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_is_important(tool_item, is_important)
  # @param [GtkToolItem] tool_item 
  # @param [Integer] is_important 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_is_important, :gtk_tool_item_set_is_important, [GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_ellipsize_mode(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_tool_item_get_ellipsize_mode, :gtk_tool_item_get_ellipsize_mode, [GtkToolItem], :char
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_icon_size(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_tool_item_get_icon_size, :gtk_tool_item_get_icon_size, [GtkToolItem], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_orientation(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Symbol from _enum_gtk_orientation_] 
  # @scope class
  attach_function :gtk_tool_item_get_orientation, :gtk_tool_item_get_orientation, [GtkToolItem], :gtk_orientation
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_toolbar_style(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Symbol from _enum_gtk_toolbar_style_] 
  # @scope class
  attach_function :gtk_tool_item_get_toolbar_style, :gtk_tool_item_get_toolbar_style, [GtkToolItem], :gtk_toolbar_style
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_relief_style(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Symbol from _enum_gtk_relief_style_] 
  # @scope class
  attach_function :gtk_tool_item_get_relief_style, :gtk_tool_item_get_relief_style, [GtkToolItem], :gtk_relief_style
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_text_alignment(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Float] 
  # @scope class
  attach_function :gtk_tool_item_get_text_alignment, :gtk_tool_item_get_text_alignment, [GtkToolItem], :float
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_text_orientation(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Symbol from _enum_gtk_orientation_] 
  # @scope class
  attach_function :gtk_tool_item_get_text_orientation, :gtk_tool_item_get_text_orientation, [GtkToolItem], :gtk_orientation
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_text_size_group(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [GtkSizeGroup] 
  # @scope class
  attach_function :gtk_tool_item_get_text_size_group, :gtk_tool_item_get_text_size_group, [GtkToolItem], GtkSizeGroup
  
  # (Not documented)
  # 
  # @method gtk_tool_item_retrieve_proxy_menu_item(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_item_retrieve_proxy_menu_item, :gtk_tool_item_retrieve_proxy_menu_item, [GtkToolItem], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_item_get_proxy_menu_item(tool_item, menu_item_id)
  # @param [GtkToolItem] tool_item 
  # @param [String] menu_item_id 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_item_get_proxy_menu_item, :gtk_tool_item_get_proxy_menu_item, [GtkToolItem, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_item_set_proxy_menu_item(tool_item, menu_item_id, menu_item)
  # @param [GtkToolItem] tool_item 
  # @param [String] menu_item_id 
  # @param [GtkWidget] menu_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_set_proxy_menu_item, :gtk_tool_item_set_proxy_menu_item, [GtkToolItem, :string, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_rebuild_menu(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_rebuild_menu, :gtk_tool_item_rebuild_menu, [GtkToolItem], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_toolbar_reconfigured(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_toolbar_reconfigured, :gtk_tool_item_toolbar_reconfigured, [GtkToolItem], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_create_menu_proxy(tool_item)
  # @param [GtkToolItem] tool_item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_create_menu_proxy, :_gtk_tool_item_create_menu_proxy, [GtkToolItem], :int
  
  # (Not documented)
  class GtkToolButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToolItem) 
  # :priv ::
  #   (GtkToolButtonPrivate) < private >
  module GtkToolButtonWrappers
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_tool_button_set_label(self, label)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_tool_button_get_label(self)
    end
    
    # @param [Integer] use_underline 
    # @return [nil] 
    def set_use_underline(use_underline)
      Gtk.gtk_tool_button_set_use_underline(self, use_underline)
    end
    
    # @return [Integer] 
    def get_use_underline()
      Gtk.gtk_tool_button_get_use_underline(self)
    end
    
    # @param [String] stock_id 
    # @return [nil] 
    def set_stock_id(stock_id)
      Gtk.gtk_tool_button_set_stock_id(self, stock_id)
    end
    
    # @return [String] 
    def get_stock_id()
      Gtk.gtk_tool_button_get_stock_id(self)
    end
    
    # @param [String] icon_name 
    # @return [nil] 
    def set_icon_name(icon_name)
      Gtk.gtk_tool_button_set_icon_name(self, icon_name)
    end
    
    # @return [String] 
    def get_icon_name()
      Gtk.gtk_tool_button_get_icon_name(self)
    end
    
    # @param [GtkWidget] icon_widget 
    # @return [nil] 
    def set_icon_widget(icon_widget)
      Gtk.gtk_tool_button_set_icon_widget(self, icon_widget)
    end
    
    # @return [GtkWidget] 
    def get_icon_widget()
      GtkWidget.new Gtk.gtk_tool_button_get_icon_widget(self)
    end
    
    # @param [GtkWidget] label_widget 
    # @return [nil] 
    def set_label_widget(label_widget)
      Gtk.gtk_tool_button_set_label_widget(self, label_widget)
    end
    
    # @return [GtkWidget] 
    def get_label_widget()
      GtkWidget.new Gtk.gtk_tool_button_get_label_widget(self)
    end
    
    # @return [GtkWidget] 
    def get_button()
      GtkWidget.new Gtk.gtk_tool_button_get_button(self)
    end
  end
  
  class GtkToolButton < FFI::Struct
    include GtkToolButtonWrappers
    layout :parent, GtkToolItem.by_value,
           :priv, GtkToolButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToolItemClass) 
  # :button_type ::
  #   (Integer) 
  # :clicked ::
  #   (FFI::Pointer(*)) signal
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToolButtonClass < FFI::Struct
    layout :parent_class, GtkToolItemClass.by_value,
           :button_type, :uint,
           :clicked, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_button_get_type, :gtk_tool_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_button_new(icon_widget, label)
  # @param [GtkWidget] icon_widget 
  # @param [String] label 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_tool_button_new, :gtk_tool_button_new, [GtkWidget, :string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_tool_button_new_from_stock(stock_id)
  # @param [String] stock_id 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_tool_button_new_from_stock, :gtk_tool_button_new_from_stock, [:string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_tool_button_set_label(button, label)
  # @param [GtkToolButton] button 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_button_set_label, :gtk_tool_button_set_label, [GtkToolButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_label(button)
  # @param [GtkToolButton] button 
  # @return [String] 
  # @scope class
  attach_function :gtk_tool_button_get_label, :gtk_tool_button_get_label, [GtkToolButton], :string
  
  # (Not documented)
  # 
  # @method gtk_tool_button_set_use_underline(button, use_underline)
  # @param [GtkToolButton] button 
  # @param [Integer] use_underline 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_button_set_use_underline, :gtk_tool_button_set_use_underline, [GtkToolButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_use_underline(button)
  # @param [GtkToolButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_button_get_use_underline, :gtk_tool_button_get_use_underline, [GtkToolButton], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_button_set_stock_id(button, stock_id)
  # @param [GtkToolButton] button 
  # @param [String] stock_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_button_set_stock_id, :gtk_tool_button_set_stock_id, [GtkToolButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_stock_id(button)
  # @param [GtkToolButton] button 
  # @return [String] 
  # @scope class
  attach_function :gtk_tool_button_get_stock_id, :gtk_tool_button_get_stock_id, [GtkToolButton], :string
  
  # (Not documented)
  # 
  # @method gtk_tool_button_set_icon_name(button, icon_name)
  # @param [GtkToolButton] button 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_button_set_icon_name, :gtk_tool_button_set_icon_name, [GtkToolButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_icon_name(button)
  # @param [GtkToolButton] button 
  # @return [String] 
  # @scope class
  attach_function :gtk_tool_button_get_icon_name, :gtk_tool_button_get_icon_name, [GtkToolButton], :string
  
  # (Not documented)
  # 
  # @method gtk_tool_button_set_icon_widget(button, icon_widget)
  # @param [GtkToolButton] button 
  # @param [GtkWidget] icon_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_button_set_icon_widget, :gtk_tool_button_set_icon_widget, [GtkToolButton, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_icon_widget(button)
  # @param [GtkToolButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_button_get_icon_widget, :gtk_tool_button_get_icon_widget, [GtkToolButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_button_set_label_widget(button, label_widget)
  # @param [GtkToolButton] button 
  # @param [GtkWidget] label_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_button_set_label_widget, :gtk_tool_button_set_label_widget, [GtkToolButton, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_label_widget(button)
  # @param [GtkToolButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_button_get_label_widget, :gtk_tool_button_get_label_widget, [GtkToolButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_button_get_button(button)
  # @param [GtkToolButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_button_get_button, :_gtk_tool_button_get_button, [GtkToolButton], GtkWidget
  
  # (Not documented)
  class GtkMenuToolButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToolButton) 
  # :priv ::
  #   (GtkMenuToolButtonPrivate) < private >
  module GtkMenuToolButtonWrappers
    # @param [GtkWidget] menu 
    # @return [nil] 
    def set_menu(menu)
      Gtk.gtk_menu_tool_button_set_menu(self, menu)
    end
    
    # @return [GtkWidget] 
    def get_menu()
      GtkWidget.new Gtk.gtk_menu_tool_button_get_menu(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_arrow_tooltip_text(text)
      Gtk.gtk_menu_tool_button_set_arrow_tooltip_text(self, text)
    end
    
    # @param [String] markup 
    # @return [nil] 
    def set_arrow_tooltip_markup(markup)
      Gtk.gtk_menu_tool_button_set_arrow_tooltip_markup(self, markup)
    end
  end
  
  class GtkMenuToolButton < FFI::Struct
    include GtkMenuToolButtonWrappers
    layout :parent, GtkToolButton.by_value,
           :priv, GtkMenuToolButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToolButtonClass) 
  # :show_menu ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMenuToolButtonClass < FFI::Struct
    layout :parent_class, GtkToolButtonClass.by_value,
           :show_menu, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_tool_button_get_type, :gtk_menu_tool_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_new(icon_widget, label)
  # @param [GtkWidget] icon_widget 
  # @param [String] label 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_menu_tool_button_new, :gtk_menu_tool_button_new, [GtkWidget, :string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_new_from_stock(stock_id)
  # @param [String] stock_id 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_menu_tool_button_new_from_stock, :gtk_menu_tool_button_new_from_stock, [:string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_set_menu(button, menu)
  # @param [GtkMenuToolButton] button 
  # @param [GtkWidget] menu 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_tool_button_set_menu, :gtk_menu_tool_button_set_menu, [GtkMenuToolButton, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_get_menu(button)
  # @param [GtkMenuToolButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_menu_tool_button_get_menu, :gtk_menu_tool_button_get_menu, [GtkMenuToolButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_set_arrow_tooltip_text(button, text)
  # @param [GtkMenuToolButton] button 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_tool_button_set_arrow_tooltip_text, :gtk_menu_tool_button_set_arrow_tooltip_text, [GtkMenuToolButton, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_menu_tool_button_set_arrow_tooltip_markup(button, markup)
  # @param [GtkMenuToolButton] button 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_menu_tool_button_set_arrow_tooltip_markup, :gtk_menu_tool_button_set_arrow_tooltip_markup, [GtkMenuToolButton, :string], :void
  
  # (Not documented)
  class GtkMessageDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkMessageDialogPrivate) < private >
  module GtkMessageDialogWrappers
    # @param [GtkWidget] image 
    # @return [nil] 
    def set_image(image)
      Gtk.gtk_message_dialog_set_image(self, image)
    end
    
    # @return [GtkWidget] 
    def get_image()
      GtkWidget.new Gtk.gtk_message_dialog_get_image(self)
    end
    
    # @param [String] str 
    # @return [nil] 
    def set_markup(str)
      Gtk.gtk_message_dialog_set_markup(self, str)
    end
    
    # @param [String] message_format 
    # @return [nil] 
    def format_secondary_text(message_format)
      Gtk.gtk_message_dialog_format_secondary_text(self, message_format)
    end
    
    # @param [String] message_format 
    # @return [nil] 
    def format_secondary_markup(message_format)
      Gtk.gtk_message_dialog_format_secondary_markup(self, message_format)
    end
    
    # @return [GtkWidget] 
    def get_message_area()
      GtkWidget.new Gtk.gtk_message_dialog_get_message_area(self)
    end
  end
  
  class GtkMessageDialog < FFI::Struct
    include GtkMessageDialogWrappers
    layout :parent_instance, GtkDialog.by_value,
           :priv, GtkMessageDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMessageDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_buttons_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :ok ::
  #   
  # :close ::
  #   
  # :cancel ::
  #   
  # :yes_no ::
  #   
  # :ok_cancel ::
  #   
  # 
  # @method _enum_gtk_buttons_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_buttons_type, [
    :none, 0,
    :ok, 1,
    :close, 2,
    :cancel, 3,
    :yes_no, 4,
    :ok_cancel, 5
  ]
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_message_dialog_get_type, :gtk_message_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_new(parent, flags, type, buttons, message_format)
  # @param [GtkWindow] parent 
  # @param [Symbol from _enum_gtk_dialog_flags_] flags 
  # @param [Symbol from _enum_gtk_message_type_] type 
  # @param [Symbol from _enum_gtk_buttons_type_] buttons 
  # @param [String] message_format 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_message_dialog_new, :gtk_message_dialog_new, [GtkWindow, :gtk_dialog_flags, :gtk_message_type, :gtk_buttons_type, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_new_with_markup(parent, flags, type, buttons, message_format)
  # @param [GtkWindow] parent 
  # @param [Symbol from _enum_gtk_dialog_flags_] flags 
  # @param [Symbol from _enum_gtk_message_type_] type 
  # @param [Symbol from _enum_gtk_buttons_type_] buttons 
  # @param [String] message_format 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_message_dialog_new_with_markup, :gtk_message_dialog_new_with_markup, [GtkWindow, :gtk_dialog_flags, :gtk_message_type, :gtk_buttons_type, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_set_image(dialog, image)
  # @param [GtkMessageDialog] dialog 
  # @param [GtkWidget] image 
  # @return [nil] 
  # @scope class
  attach_function :gtk_message_dialog_set_image, :gtk_message_dialog_set_image, [GtkMessageDialog, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_get_image(dialog)
  # @param [GtkMessageDialog] dialog 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_message_dialog_get_image, :gtk_message_dialog_get_image, [GtkMessageDialog], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_set_markup(message_dialog, str)
  # @param [GtkMessageDialog] message_dialog 
  # @param [String] str 
  # @return [nil] 
  # @scope class
  attach_function :gtk_message_dialog_set_markup, :gtk_message_dialog_set_markup, [GtkMessageDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_format_secondary_text(message_dialog, message_format)
  # @param [GtkMessageDialog] message_dialog 
  # @param [String] message_format 
  # @return [nil] 
  # @scope class
  attach_function :gtk_message_dialog_format_secondary_text, :gtk_message_dialog_format_secondary_text, [GtkMessageDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_format_secondary_markup(message_dialog, message_format)
  # @param [GtkMessageDialog] message_dialog 
  # @param [String] message_format 
  # @return [nil] 
  # @scope class
  attach_function :gtk_message_dialog_format_secondary_markup, :gtk_message_dialog_format_secondary_markup, [GtkMessageDialog, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_message_dialog_get_message_area(message_dialog)
  # @param [GtkMessageDialog] message_dialog 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_message_dialog_get_message_area, :gtk_message_dialog_get_message_area, [GtkMessageDialog], GtkWidget
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_module_init_func_(argv)
  # @param [FFI::Pointer(***Gchar)] argv 
  # @return [FFI::Pointer(*Gint)] 
  # @scope class
  callback :gtk_module_init_func, [:pointer], :pointer
  
  # (Not documented)
  class GtkMountOperationPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkMountOperationPrivate) 
  module GtkMountOperationWrappers
    # @return [Integer] 
    def is_showing()
      Gtk.gtk_mount_operation_is_showing(self)
    end
    
    # @param [GtkWindow] parent 
    # @return [nil] 
    def set_parent(parent)
      Gtk.gtk_mount_operation_set_parent(self, parent)
    end
    
    # @return [GtkWindow] 
    def get_parent()
      GtkWindow.new Gtk.gtk_mount_operation_get_parent(self)
    end
    
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_mount_operation_set_screen(self, screen)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_mount_operation_get_screen(self)
    end
  end
  
  class GtkMountOperation < FFI::Struct
    include GtkMountOperationWrappers
    layout :parent_instance, :char,
           :priv, GtkMountOperationPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkMountOperationClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_mount_operation_get_type, :gtk_mount_operation_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_new(parent)
  # @param [GtkWindow] parent 
  # @return [FFI::Pointer(*GMountOperation)] 
  # @scope class
  attach_function :gtk_mount_operation_new, :gtk_mount_operation_new, [GtkWindow], :pointer
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_is_showing(op)
  # @param [GtkMountOperation] op 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_mount_operation_is_showing, :gtk_mount_operation_is_showing, [GtkMountOperation], :int
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_set_parent(op, parent)
  # @param [GtkMountOperation] op 
  # @param [GtkWindow] parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_mount_operation_set_parent, :gtk_mount_operation_set_parent, [GtkMountOperation, GtkWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_get_parent(op)
  # @param [GtkMountOperation] op 
  # @return [GtkWindow] 
  # @scope class
  attach_function :gtk_mount_operation_get_parent, :gtk_mount_operation_get_parent, [GtkMountOperation], GtkWindow
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_set_screen(op, screen)
  # @param [GtkMountOperation] op 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_mount_operation_set_screen, :gtk_mount_operation_set_screen, [GtkMountOperation, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_mount_operation_get_screen(op)
  # @param [GtkMountOperation] op 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_mount_operation_get_screen, :gtk_mount_operation_get_screen, [GtkMountOperation], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_notebook_tab).</em>
  # 
  # === Options:
  # :first ::
  #   
  # :last ::
  #   
  # 
  # @method _enum_gtk_notebook_tab_
  # @return [Symbol]
  # @scope class
  enum :gtk_notebook_tab, [
    :first, 0,
    :last, 1
  ]
  
  # (Not documented)
  class GtkNotebookPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) < private >
  # :priv ::
  #   (GtkNotebookPrivate) 
  module GtkNotebookWrappers
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @return [Integer] 
    def append_page(child, tab_label)
      Gtk.gtk_notebook_append_page(self, child, tab_label)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @param [GtkWidget] menu_label 
    # @return [Integer] 
    def append_page_menu(child, tab_label, menu_label)
      Gtk.gtk_notebook_append_page_menu(self, child, tab_label, menu_label)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @return [Integer] 
    def prepend_page(child, tab_label)
      Gtk.gtk_notebook_prepend_page(self, child, tab_label)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @param [GtkWidget] menu_label 
    # @return [Integer] 
    def prepend_page_menu(child, tab_label, menu_label)
      Gtk.gtk_notebook_prepend_page_menu(self, child, tab_label, menu_label)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @param [Integer] position 
    # @return [Integer] 
    def insert_page(child, tab_label, position)
      Gtk.gtk_notebook_insert_page(self, child, tab_label, position)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @param [GtkWidget] menu_label 
    # @param [Integer] position 
    # @return [Integer] 
    def insert_page_menu(child, tab_label, menu_label, position)
      Gtk.gtk_notebook_insert_page_menu(self, child, tab_label, menu_label, position)
    end
    
    # @param [Integer] page_num 
    # @return [nil] 
    def remove_page(page_num)
      Gtk.gtk_notebook_remove_page(self, page_num)
    end
    
    # @param [String] group_name 
    # @return [nil] 
    def set_group_name(group_name)
      Gtk.gtk_notebook_set_group_name(self, group_name)
    end
    
    # @return [String] 
    def get_group_name()
      Gtk.gtk_notebook_get_group_name(self)
    end
    
    # @return [Integer] 
    def get_current_page()
      Gtk.gtk_notebook_get_current_page(self)
    end
    
    # @param [Integer] page_num 
    # @return [GtkWidget] 
    def get_nth_page(page_num)
      GtkWidget.new Gtk.gtk_notebook_get_nth_page(self, page_num)
    end
    
    # @return [Integer] 
    def get_n_pages()
      Gtk.gtk_notebook_get_n_pages(self)
    end
    
    # @param [GtkWidget] child 
    # @return [Integer] 
    def page_num(child)
      Gtk.gtk_notebook_page_num(self, child)
    end
    
    # @param [Integer] page_num 
    # @return [nil] 
    def set_current_page(page_num)
      Gtk.gtk_notebook_set_current_page(self, page_num)
    end
    
    # @return [nil] 
    def next_page()
      Gtk.gtk_notebook_next_page(self)
    end
    
    # @return [nil] 
    def prev_page()
      Gtk.gtk_notebook_prev_page(self)
    end
    
    # @param [Integer] show_border 
    # @return [nil] 
    def set_show_border(show_border)
      Gtk.gtk_notebook_set_show_border(self, show_border)
    end
    
    # @return [Integer] 
    def get_show_border()
      Gtk.gtk_notebook_get_show_border(self)
    end
    
    # @param [Integer] show_tabs 
    # @return [nil] 
    def set_show_tabs(show_tabs)
      Gtk.gtk_notebook_set_show_tabs(self, show_tabs)
    end
    
    # @return [Integer] 
    def get_show_tabs()
      Gtk.gtk_notebook_get_show_tabs(self)
    end
    
    # @param [Symbol from _enum_gtk_position_type_] pos 
    # @return [nil] 
    def set_tab_pos(pos)
      Gtk.gtk_notebook_set_tab_pos(self, pos)
    end
    
    # @return [Symbol from _enum_gtk_position_type_] 
    def get_tab_pos()
      Gtk.gtk_notebook_get_tab_pos(self)
    end
    
    # @param [Integer] scrollable 
    # @return [nil] 
    def set_scrollable(scrollable)
      Gtk.gtk_notebook_set_scrollable(self, scrollable)
    end
    
    # @return [Integer] 
    def get_scrollable()
      Gtk.gtk_notebook_get_scrollable(self)
    end
    
    # @return [Integer] 
    def get_tab_hborder()
      Gtk.gtk_notebook_get_tab_hborder(self)
    end
    
    # @return [Integer] 
    def get_tab_vborder()
      Gtk.gtk_notebook_get_tab_vborder(self)
    end
    
    # @return [nil] 
    def popup_enable()
      Gtk.gtk_notebook_popup_enable(self)
    end
    
    # @return [nil] 
    def popup_disable()
      Gtk.gtk_notebook_popup_disable(self)
    end
    
    # @param [GtkWidget] child 
    # @return [GtkWidget] 
    def get_tab_label(child)
      GtkWidget.new Gtk.gtk_notebook_get_tab_label(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] tab_label 
    # @return [nil] 
    def set_tab_label(child, tab_label)
      Gtk.gtk_notebook_set_tab_label(self, child, tab_label)
    end
    
    # @param [GtkWidget] child 
    # @param [String] tab_text 
    # @return [nil] 
    def set_tab_label_text(child, tab_text)
      Gtk.gtk_notebook_set_tab_label_text(self, child, tab_text)
    end
    
    # @param [GtkWidget] child 
    # @return [String] 
    def get_tab_label_text(child)
      Gtk.gtk_notebook_get_tab_label_text(self, child)
    end
    
    # @param [GtkWidget] child 
    # @return [GtkWidget] 
    def get_menu_label(child)
      GtkWidget.new Gtk.gtk_notebook_get_menu_label(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkWidget] menu_label 
    # @return [nil] 
    def set_menu_label(child, menu_label)
      Gtk.gtk_notebook_set_menu_label(self, child, menu_label)
    end
    
    # @param [GtkWidget] child 
    # @param [String] menu_text 
    # @return [nil] 
    def set_menu_label_text(child, menu_text)
      Gtk.gtk_notebook_set_menu_label_text(self, child, menu_text)
    end
    
    # @param [GtkWidget] child 
    # @return [String] 
    def get_menu_label_text(child)
      Gtk.gtk_notebook_get_menu_label_text(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] position 
    # @return [nil] 
    def reorder_child(child, position)
      Gtk.gtk_notebook_reorder_child(self, child, position)
    end
    
    # @param [GtkWidget] child 
    # @return [Integer] 
    def get_tab_reorderable(child)
      Gtk.gtk_notebook_get_tab_reorderable(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] reorderable 
    # @return [nil] 
    def set_tab_reorderable(child, reorderable)
      Gtk.gtk_notebook_set_tab_reorderable(self, child, reorderable)
    end
    
    # @param [GtkWidget] child 
    # @return [Integer] 
    def get_tab_detachable(child)
      Gtk.gtk_notebook_get_tab_detachable(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] detachable 
    # @return [nil] 
    def set_tab_detachable(child, detachable)
      Gtk.gtk_notebook_set_tab_detachable(self, child, detachable)
    end
    
    # @param [Symbol from _enum_gtk_pack_type_] pack_type 
    # @return [GtkWidget] 
    def get_action_widget(pack_type)
      GtkWidget.new Gtk.gtk_notebook_get_action_widget(self, pack_type)
    end
    
    # @param [GtkWidget] widget 
    # @param [Symbol from _enum_gtk_pack_type_] pack_type 
    # @return [nil] 
    def set_action_widget(widget, pack_type)
      Gtk.gtk_notebook_set_action_widget(self, widget, pack_type)
    end
  end
  
  class GtkNotebook < FFI::Struct
    include GtkNotebookWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkNotebookPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :switch_page ::
  #   (FFI::Pointer(*)) 
  # :select_page ::
  #   (FFI::Pointer(*)) Action signals for keybindings
  # :focus_tab ::
  #   (FFI::Pointer(*)) 
  # :change_current_page ::
  #   (FFI::Pointer(*)) 
  # :move_focus_out ::
  #   (FFI::Pointer(*)) 
  # :reorder_tab ::
  #   (FFI::Pointer(*)) 
  # :insert_page ::
  #   (FFI::Pointer(*)) More vfuncs
  # :create_window ::
  #   (FFI::Pointer(*)) 
  # :page_reordered ::
  #   (FFI::Pointer(*)) 
  # :page_removed ::
  #   (FFI::Pointer(*)) 
  # :page_added ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkNotebookClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :switch_page, :pointer,
           :select_page, :pointer,
           :focus_tab, :pointer,
           :change_current_page, :pointer,
           :move_focus_out, :pointer,
           :reorder_tab, :pointer,
           :insert_page, :pointer,
           :create_window, :pointer,
           :page_reordered, :pointer,
           :page_removed, :pointer,
           :page_added, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_type, :gtk_notebook_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_notebook_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_notebook_new, :gtk_notebook_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_notebook_append_page(notebook, child, tab_label)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_append_page, :gtk_notebook_append_page, [GtkNotebook, GtkWidget, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_append_page_menu(notebook, child, tab_label, menu_label)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @param [GtkWidget] menu_label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_append_page_menu, :gtk_notebook_append_page_menu, [GtkNotebook, GtkWidget, GtkWidget, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_prepend_page(notebook, child, tab_label)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_prepend_page, :gtk_notebook_prepend_page, [GtkNotebook, GtkWidget, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_prepend_page_menu(notebook, child, tab_label, menu_label)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @param [GtkWidget] menu_label 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_prepend_page_menu, :gtk_notebook_prepend_page_menu, [GtkNotebook, GtkWidget, GtkWidget, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_insert_page(notebook, child, tab_label, position)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @param [Integer] position 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_insert_page, :gtk_notebook_insert_page, [GtkNotebook, GtkWidget, GtkWidget, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_insert_page_menu(notebook, child, tab_label, menu_label, position)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @param [GtkWidget] menu_label 
  # @param [Integer] position 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_insert_page_menu, :gtk_notebook_insert_page_menu, [GtkNotebook, GtkWidget, GtkWidget, GtkWidget, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_remove_page(notebook, page_num)
  # @param [GtkNotebook] notebook 
  # @param [Integer] page_num 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_remove_page, :gtk_notebook_remove_page, [GtkNotebook, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_group_name(notebook, group_name)
  # @param [GtkNotebook] notebook 
  # @param [String] group_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_group_name, :gtk_notebook_set_group_name, [GtkNotebook, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_group_name(notebook)
  # @param [GtkNotebook] notebook 
  # @return [String] 
  # @scope class
  attach_function :gtk_notebook_get_group_name, :gtk_notebook_get_group_name, [GtkNotebook], :string
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_current_page(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_current_page, :gtk_notebook_get_current_page, [GtkNotebook], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_nth_page(notebook, page_num)
  # @param [GtkNotebook] notebook 
  # @param [Integer] page_num 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_notebook_get_nth_page, :gtk_notebook_get_nth_page, [GtkNotebook, :int], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_n_pages(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_n_pages, :gtk_notebook_get_n_pages, [GtkNotebook], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_page_num(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_page_num, :gtk_notebook_page_num, [GtkNotebook, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_current_page(notebook, page_num)
  # @param [GtkNotebook] notebook 
  # @param [Integer] page_num 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_current_page, :gtk_notebook_set_current_page, [GtkNotebook, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_next_page(notebook)
  # @param [GtkNotebook] notebook 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_next_page, :gtk_notebook_next_page, [GtkNotebook], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_prev_page(notebook)
  # @param [GtkNotebook] notebook 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_prev_page, :gtk_notebook_prev_page, [GtkNotebook], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_show_border(notebook, show_border)
  # @param [GtkNotebook] notebook 
  # @param [Integer] show_border 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_show_border, :gtk_notebook_set_show_border, [GtkNotebook, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_show_border(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_show_border, :gtk_notebook_get_show_border, [GtkNotebook], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_show_tabs(notebook, show_tabs)
  # @param [GtkNotebook] notebook 
  # @param [Integer] show_tabs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_show_tabs, :gtk_notebook_set_show_tabs, [GtkNotebook, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_show_tabs(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_show_tabs, :gtk_notebook_get_show_tabs, [GtkNotebook], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_tab_pos(notebook, pos)
  # @param [GtkNotebook] notebook 
  # @param [Symbol from _enum_gtk_position_type_] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_tab_pos, :gtk_notebook_set_tab_pos, [GtkNotebook, :gtk_position_type], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_pos(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Symbol from _enum_gtk_position_type_] 
  # @scope class
  attach_function :gtk_notebook_get_tab_pos, :gtk_notebook_get_tab_pos, [GtkNotebook], :gtk_position_type
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_scrollable(notebook, scrollable)
  # @param [GtkNotebook] notebook 
  # @param [Integer] scrollable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_scrollable, :gtk_notebook_set_scrollable, [GtkNotebook, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_scrollable(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_scrollable, :gtk_notebook_get_scrollable, [GtkNotebook], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_hborder(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_tab_hborder, :gtk_notebook_get_tab_hborder, [GtkNotebook], :ushort
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_vborder(notebook)
  # @param [GtkNotebook] notebook 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_tab_vborder, :gtk_notebook_get_tab_vborder, [GtkNotebook], :ushort
  
  # (Not documented)
  # 
  # @method gtk_notebook_popup_enable(notebook)
  # @param [GtkNotebook] notebook 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_popup_enable, :gtk_notebook_popup_enable, [GtkNotebook], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_popup_disable(notebook)
  # @param [GtkNotebook] notebook 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_popup_disable, :gtk_notebook_popup_disable, [GtkNotebook], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_label(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_notebook_get_tab_label, :gtk_notebook_get_tab_label, [GtkNotebook, GtkWidget], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_tab_label(notebook, child, tab_label)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] tab_label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_tab_label, :gtk_notebook_set_tab_label, [GtkNotebook, GtkWidget, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_tab_label_text(notebook, child, tab_text)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [String] tab_text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_tab_label_text, :gtk_notebook_set_tab_label_text, [GtkNotebook, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_label_text(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [String] 
  # @scope class
  attach_function :gtk_notebook_get_tab_label_text, :gtk_notebook_get_tab_label_text, [GtkNotebook, GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_menu_label(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_notebook_get_menu_label, :gtk_notebook_get_menu_label, [GtkNotebook, GtkWidget], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_menu_label(notebook, child, menu_label)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [GtkWidget] menu_label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_menu_label, :gtk_notebook_set_menu_label, [GtkNotebook, GtkWidget, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_menu_label_text(notebook, child, menu_text)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [String] menu_text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_menu_label_text, :gtk_notebook_set_menu_label_text, [GtkNotebook, GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_menu_label_text(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [String] 
  # @scope class
  attach_function :gtk_notebook_get_menu_label_text, :gtk_notebook_get_menu_label_text, [GtkNotebook, GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_notebook_reorder_child(notebook, child, position)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_reorder_child, :gtk_notebook_reorder_child, [GtkNotebook, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_reorderable(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_tab_reorderable, :gtk_notebook_get_tab_reorderable, [GtkNotebook, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_tab_reorderable(notebook, child, reorderable)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [Integer] reorderable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_tab_reorderable, :gtk_notebook_set_tab_reorderable, [GtkNotebook, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_tab_detachable(notebook, child)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_get_tab_detachable, :gtk_notebook_get_tab_detachable, [GtkNotebook, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_tab_detachable(notebook, child, detachable)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] child 
  # @param [Integer] detachable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_tab_detachable, :gtk_notebook_set_tab_detachable, [GtkNotebook, GtkWidget, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_notebook_get_action_widget(notebook, pack_type)
  # @param [GtkNotebook] notebook 
  # @param [Symbol from _enum_gtk_pack_type_] pack_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_notebook_get_action_widget, :gtk_notebook_get_action_widget, [GtkNotebook, :gtk_pack_type], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_notebook_set_action_widget(notebook, widget, pack_type)
  # @param [GtkNotebook] notebook 
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_pack_type_] pack_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_notebook_set_action_widget, :gtk_notebook_set_action_widget, [GtkNotebook, GtkWidget, :gtk_pack_type], :void
  
  # (Not documented)
  class GtkNumerableIconPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkNumerableIconPrivate) < private >
  module GtkNumerableIconWrappers
    # @return [GtkStyleContext] 
    def get_style_context()
      GtkStyleContext.new Gtk.gtk_numerable_icon_get_style_context(self)
    end
    
    # @param [GtkStyleContext] style 
    # @return [nil] 
    def set_style_context(style)
      Gtk.gtk_numerable_icon_set_style_context(self, style)
    end
    
    # @return [Integer] 
    def get_count()
      Gtk.gtk_numerable_icon_get_count(self)
    end
    
    # @param [Integer] count 
    # @return [nil] 
    def set_count(count)
      Gtk.gtk_numerable_icon_set_count(self, count)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_numerable_icon_get_label(self)
    end
    
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_numerable_icon_set_label(self, label)
    end
    
    # @param [FFI::Pointer(*GIcon)] icon 
    # @return [nil] 
    def set_background_gicon(icon)
      Gtk.gtk_numerable_icon_set_background_gicon(self, icon)
    end
    
    # @return [FFI::Pointer(*GIcon)] 
    def get_background_gicon()
      Gtk.gtk_numerable_icon_get_background_gicon(self)
    end
    
    # @param [String] icon_name 
    # @return [nil] 
    def set_background_icon_name(icon_name)
      Gtk.gtk_numerable_icon_set_background_icon_name(self, icon_name)
    end
    
    # @return [String] 
    def get_background_icon_name()
      Gtk.gtk_numerable_icon_get_background_icon_name(self)
    end
  end
  
  class GtkNumerableIcon < FFI::Struct
    include GtkNumerableIconWrappers
    layout :parent, :char,
           :priv, GtkNumerableIconPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) padding for future class expansion
  class GtkNumerableIconClass < FFI::Struct
    layout :parent_class, :char,
           :padding, [:pointer, 16]
  end
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_numerable_icon_get_type, :gtk_numerable_icon_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_new(base_icon)
  # @param [FFI::Pointer(*GIcon)] base_icon 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_numerable_icon_new, :gtk_numerable_icon_new, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_new_with_style_context(base_icon, context)
  # @param [FFI::Pointer(*GIcon)] base_icon 
  # @param [GtkStyleContext] context 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_numerable_icon_new_with_style_context, :gtk_numerable_icon_new_with_style_context, [:pointer, GtkStyleContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_get_style_context(self_)
  # @param [GtkNumerableIcon] self_ 
  # @return [GtkStyleContext] 
  # @scope class
  attach_function :gtk_numerable_icon_get_style_context, :gtk_numerable_icon_get_style_context, [GtkNumerableIcon], GtkStyleContext
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_set_style_context(self_, style)
  # @param [GtkNumerableIcon] self_ 
  # @param [GtkStyleContext] style 
  # @return [nil] 
  # @scope class
  attach_function :gtk_numerable_icon_set_style_context, :gtk_numerable_icon_set_style_context, [GtkNumerableIcon, GtkStyleContext], :void
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_get_count(self_)
  # @param [GtkNumerableIcon] self_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_numerable_icon_get_count, :gtk_numerable_icon_get_count, [GtkNumerableIcon], :int
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_set_count(self_, count)
  # @param [GtkNumerableIcon] self_ 
  # @param [Integer] count 
  # @return [nil] 
  # @scope class
  attach_function :gtk_numerable_icon_set_count, :gtk_numerable_icon_set_count, [GtkNumerableIcon, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_get_label(self_)
  # @param [GtkNumerableIcon] self_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_numerable_icon_get_label, :gtk_numerable_icon_get_label, [GtkNumerableIcon], :string
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_set_label(self_, label)
  # @param [GtkNumerableIcon] self_ 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_numerable_icon_set_label, :gtk_numerable_icon_set_label, [GtkNumerableIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_set_background_gicon(self_, icon)
  # @param [GtkNumerableIcon] self_ 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_numerable_icon_set_background_gicon, :gtk_numerable_icon_set_background_gicon, [GtkNumerableIcon, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_get_background_gicon(self_)
  # @param [GtkNumerableIcon] self_ 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_numerable_icon_get_background_gicon, :gtk_numerable_icon_get_background_gicon, [GtkNumerableIcon], :pointer
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_set_background_icon_name(self_, icon_name)
  # @param [GtkNumerableIcon] self_ 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_numerable_icon_set_background_icon_name, :gtk_numerable_icon_set_background_icon_name, [GtkNumerableIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_numerable_icon_get_background_icon_name(self_)
  # @param [GtkNumerableIcon] self_ 
  # @return [String] 
  # @scope class
  attach_function :gtk_numerable_icon_get_background_icon_name, :gtk_numerable_icon_get_background_icon_name, [GtkNumerableIcon], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_object ::
  #   (GtkWindow) 
  module GtkOffscreenWindowWrappers
    # @return [FFI::Pointer(*CairoSurfaceT)] 
    def get_surface()
      Gtk.gtk_offscreen_window_get_surface(self)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_pixbuf()
      Gtk.gtk_offscreen_window_get_pixbuf(self)
    end
  end
  
  class GtkOffscreenWindow < FFI::Struct
    include GtkOffscreenWindowWrappers
    layout :parent_object, GtkWindow.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWindowClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkOffscreenWindowClass < FFI::Struct
    layout :parent_class, GtkWindowClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_offscreen_window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_offscreen_window_get_type, :gtk_offscreen_window_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_offscreen_window_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_offscreen_window_new, :gtk_offscreen_window_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_offscreen_window_get_surface(offscreen)
  # @param [GtkOffscreenWindow] offscreen 
  # @return [FFI::Pointer(*CairoSurfaceT)] 
  # @scope class
  attach_function :gtk_offscreen_window_get_surface, :gtk_offscreen_window_get_surface, [GtkOffscreenWindow], :pointer
  
  # (Not documented)
  # 
  # @method gtk_offscreen_window_get_pixbuf(offscreen)
  # @param [GtkOffscreenWindow] offscreen 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_offscreen_window_get_pixbuf, :gtk_offscreen_window_get_pixbuf, [GtkOffscreenWindow], :pointer
  
  # (Not documented)
  module GtkOrientableWrappers
    # @param [Symbol from _enum_gtk_orientation_] orientation 
    # @return [nil] 
    def set_orientation(orientation)
      Gtk.gtk_orientable_set_orientation(self, orientation)
    end
    
    # @return [Symbol from _enum_gtk_orientation_] 
    def get_orientation()
      Gtk.gtk_orientable_get_orientation(self)
    end
  end
  
  class GtkOrientable < FFI::Struct
    include GtkOrientableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base_iface ::
  #   (unknown) 
  class GtkOrientableIface < FFI::Struct
    layout :base_iface, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_orientable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_orientable_get_type, :gtk_orientable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_orientable_set_orientation(orientable, orientation)
  # @param [GtkOrientable] orientable 
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_orientable_set_orientation, :gtk_orientable_set_orientation, [GtkOrientable, :gtk_orientation], :void
  
  # (Not documented)
  # 
  # @method gtk_orientable_get_orientation(orientable)
  # @param [GtkOrientable] orientable 
  # @return [Symbol from _enum_gtk_orientation_] 
  # @scope class
  attach_function :gtk_orientable_get_orientation, :gtk_orientable_get_orientation, [GtkOrientable], :gtk_orientation
  
  # (Not documented)
  class GtkOverlayPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkOverlayPrivate) 
  module GtkOverlayWrappers
    # @param [GtkWidget] widget 
    # @return [nil] 
    def add_overlay(widget)
      Gtk.gtk_overlay_add_overlay(self, widget)
    end
  end
  
  class GtkOverlay < FFI::Struct
    include GtkOverlayWrappers
    layout :parent, GtkBin.by_value,
           :priv, GtkOverlayPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :get_child_position ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkOverlayClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :get_child_position, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_overlay_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_overlay_get_type, :gtk_overlay_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_overlay_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_overlay_new, :gtk_overlay_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_overlay_add_overlay(overlay, widget)
  # @param [GtkOverlay] overlay 
  # @param [GtkWidget] widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_overlay_add_overlay, :gtk_overlay_add_overlay, [GtkOverlay, GtkWidget], :void
  
  # (Not documented)
  module GtkPaperSizeWrappers
    # @return [GtkPaperSize] 
    def copy()
      GtkPaperSize.new Gtk.gtk_paper_size_copy(self)
    end
    
    # @return [nil] 
    def free()
      Gtk.gtk_paper_size_free(self)
    end
    
    # @param [FFI::Pointer(*GtkPaperSize)] size2 
    # @return [Integer] 
    def is_equal(size2)
      Gtk.gtk_paper_size_is_equal(self, size2)
    end
    
    # @return [String] 
    def get_name()
      Gtk.gtk_paper_size_get_name(self)
    end
    
    # @return [String] 
    def get_display_name()
      Gtk.gtk_paper_size_get_display_name(self)
    end
    
    # @return [String] 
    def get_ppd_name()
      Gtk.gtk_paper_size_get_ppd_name(self)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_width(unit)
      Gtk.gtk_paper_size_get_width(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_height(unit)
      Gtk.gtk_paper_size_get_height(self, unit)
    end
    
    # @return [Integer] 
    def is_custom()
      Gtk.gtk_paper_size_is_custom(self)
    end
    
    # @param [Float] width 
    # @param [Float] height 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_size(width, height, unit)
      Gtk.gtk_paper_size_set_size(self, width, height, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_default_top_margin(unit)
      Gtk.gtk_paper_size_get_default_top_margin(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_default_bottom_margin(unit)
      Gtk.gtk_paper_size_get_default_bottom_margin(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_default_left_margin(unit)
      Gtk.gtk_paper_size_get_default_left_margin(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_default_right_margin(unit)
      Gtk.gtk_paper_size_get_default_right_margin(self, unit)
    end
    
    # @param [FFI::Pointer(*GKeyFile)] key_file 
    # @param [String] group_name 
    # @return [nil] 
    def to_key_file(key_file, group_name)
      Gtk.gtk_paper_size_to_key_file(self, key_file, group_name)
    end
  end
  
  class GtkPaperSize < FFI::Struct
    include GtkPaperSizeWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_paper_size_get_type, :gtk_paper_size_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_paper_size_new(name)
  # @param [String] name 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_paper_size_new, :gtk_paper_size_new, [:string], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_paper_size_new_from_ppd(ppd_name, ppd_display_name, width, height)
  # @param [String] ppd_name 
  # @param [String] ppd_display_name 
  # @param [Float] width 
  # @param [Float] height 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_paper_size_new_from_ppd, :gtk_paper_size_new_from_ppd, [:string, :string, :double, :double], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_paper_size_new_custom(name, display_name, width, height, unit)
  # @param [String] name 
  # @param [String] display_name 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_paper_size_new_custom, :gtk_paper_size_new_custom, [:string, :string, :double, :double, :gtk_unit], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_paper_size_copy(other)
  # @param [GtkPaperSize] other 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_paper_size_copy, :gtk_paper_size_copy, [GtkPaperSize], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_paper_size_free(size)
  # @param [GtkPaperSize] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paper_size_free, :gtk_paper_size_free, [GtkPaperSize], :void
  
  # (Not documented)
  # 
  # @method gtk_paper_size_is_equal(size1, size2)
  # @param [GtkPaperSize] size1 
  # @param [GtkPaperSize] size2 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_paper_size_is_equal, :gtk_paper_size_is_equal, [GtkPaperSize, GtkPaperSize], :int
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_paper_sizes(include_custom)
  # @param [Integer] include_custom 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_paper_size_get_paper_sizes, :gtk_paper_size_get_paper_sizes, [:int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_name(size)
  # @param [GtkPaperSize] size 
  # @return [String] 
  # @scope class
  attach_function :gtk_paper_size_get_name, :gtk_paper_size_get_name, [GtkPaperSize], :string
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_display_name(size)
  # @param [GtkPaperSize] size 
  # @return [String] 
  # @scope class
  attach_function :gtk_paper_size_get_display_name, :gtk_paper_size_get_display_name, [GtkPaperSize], :string
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_ppd_name(size)
  # @param [GtkPaperSize] size 
  # @return [String] 
  # @scope class
  attach_function :gtk_paper_size_get_ppd_name, :gtk_paper_size_get_ppd_name, [GtkPaperSize], :string
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_width(size, unit)
  # @param [GtkPaperSize] size 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_paper_size_get_width, :gtk_paper_size_get_width, [GtkPaperSize, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_height(size, unit)
  # @param [GtkPaperSize] size 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_paper_size_get_height, :gtk_paper_size_get_height, [GtkPaperSize, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_paper_size_is_custom(size)
  # @param [GtkPaperSize] size 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_paper_size_is_custom, :gtk_paper_size_is_custom, [GtkPaperSize], :int
  
  # (Not documented)
  # 
  # @method gtk_paper_size_set_size(size, width, height, unit)
  # @param [GtkPaperSize] size 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paper_size_set_size, :gtk_paper_size_set_size, [GtkPaperSize, :double, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_default_top_margin(size, unit)
  # @param [GtkPaperSize] size 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_paper_size_get_default_top_margin, :gtk_paper_size_get_default_top_margin, [GtkPaperSize, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_default_bottom_margin(size, unit)
  # @param [GtkPaperSize] size 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_paper_size_get_default_bottom_margin, :gtk_paper_size_get_default_bottom_margin, [GtkPaperSize, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_default_left_margin(size, unit)
  # @param [GtkPaperSize] size 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_paper_size_get_default_left_margin, :gtk_paper_size_get_default_left_margin, [GtkPaperSize, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_default_right_margin(size, unit)
  # @param [GtkPaperSize] size 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_paper_size_get_default_right_margin, :gtk_paper_size_get_default_right_margin, [GtkPaperSize, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_paper_size_get_default()
  # @return [String] 
  # @scope class
  attach_function :gtk_paper_size_get_default, :gtk_paper_size_get_default, [], :string
  
  # (Not documented)
  # 
  # @method gtk_paper_size_new_from_key_file(key_file, group_name, error)
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_paper_size_new_from_key_file, :gtk_paper_size_new_from_key_file, [:pointer, :string, :pointer], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_paper_size_to_key_file(size, key_file, group_name)
  # @param [GtkPaperSize] size 
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paper_size_to_key_file, :gtk_paper_size_to_key_file, [GtkPaperSize, :pointer, :string], :void
  
  # (Not documented)
  module GtkPageSetupWrappers
    # @return [GtkPageSetup] 
    def copy()
      GtkPageSetup.new Gtk.gtk_page_setup_copy(self)
    end
    
    # @return [Symbol from _enum_gtk_page_orientation_] 
    def get_orientation()
      Gtk.gtk_page_setup_get_orientation(self)
    end
    
    # @param [Symbol from _enum_gtk_page_orientation_] orientation 
    # @return [nil] 
    def set_orientation(orientation)
      Gtk.gtk_page_setup_set_orientation(self, orientation)
    end
    
    # @return [GtkPaperSize] 
    def get_paper_size()
      GtkPaperSize.new Gtk.gtk_page_setup_get_paper_size(self)
    end
    
    # @param [GtkPaperSize] size 
    # @return [nil] 
    def set_paper_size(size)
      Gtk.gtk_page_setup_set_paper_size(self, size)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_top_margin(unit)
      Gtk.gtk_page_setup_get_top_margin(self, unit)
    end
    
    # @param [Float] margin 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_top_margin(margin, unit)
      Gtk.gtk_page_setup_set_top_margin(self, margin, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_bottom_margin(unit)
      Gtk.gtk_page_setup_get_bottom_margin(self, unit)
    end
    
    # @param [Float] margin 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_bottom_margin(margin, unit)
      Gtk.gtk_page_setup_set_bottom_margin(self, margin, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_left_margin(unit)
      Gtk.gtk_page_setup_get_left_margin(self, unit)
    end
    
    # @param [Float] margin 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_left_margin(margin, unit)
      Gtk.gtk_page_setup_set_left_margin(self, margin, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_right_margin(unit)
      Gtk.gtk_page_setup_get_right_margin(self, unit)
    end
    
    # @param [Float] margin 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_right_margin(margin, unit)
      Gtk.gtk_page_setup_set_right_margin(self, margin, unit)
    end
    
    # @param [GtkPaperSize] size 
    # @return [nil] 
    def set_paper_size_and_default_margins(size)
      Gtk.gtk_page_setup_set_paper_size_and_default_margins(self, size)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_paper_width(unit)
      Gtk.gtk_page_setup_get_paper_width(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_paper_height(unit)
      Gtk.gtk_page_setup_get_paper_height(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_page_width(unit)
      Gtk.gtk_page_setup_get_page_width(self, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_page_height(unit)
      Gtk.gtk_page_setup_get_page_height(self, unit)
    end
    
    # @param [String] file_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_file(file_name, error)
      Gtk.gtk_page_setup_load_file(self, file_name, error)
    end
    
    # @param [String] file_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def to_file(file_name, error)
      Gtk.gtk_page_setup_to_file(self, file_name, error)
    end
    
    # @param [FFI::Pointer(*GKeyFile)] key_file 
    # @param [String] group_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_key_file(key_file, group_name, error)
      Gtk.gtk_page_setup_load_key_file(self, key_file, group_name, error)
    end
    
    # @param [FFI::Pointer(*GKeyFile)] key_file 
    # @param [String] group_name 
    # @return [nil] 
    def to_key_file(key_file, group_name)
      Gtk.gtk_page_setup_to_key_file(self, key_file, group_name)
    end
  end
  
  class GtkPageSetup < FFI::Struct
    include GtkPageSetupWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_page_setup_get_type, :gtk_page_setup_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_page_setup_new()
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_page_setup_new, :gtk_page_setup_new, [], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_page_setup_copy(other)
  # @param [GtkPageSetup] other 
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_page_setup_copy, :gtk_page_setup_copy, [GtkPageSetup], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_orientation(setup)
  # @param [GtkPageSetup] setup 
  # @return [Symbol from _enum_gtk_page_orientation_] 
  # @scope class
  attach_function :gtk_page_setup_get_orientation, :gtk_page_setup_get_orientation, [GtkPageSetup], :gtk_page_orientation
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_orientation(setup, orientation)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_page_orientation_] orientation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_orientation, :gtk_page_setup_set_orientation, [GtkPageSetup, :gtk_page_orientation], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_paper_size(setup)
  # @param [GtkPageSetup] setup 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_page_setup_get_paper_size, :gtk_page_setup_get_paper_size, [GtkPageSetup], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_paper_size(setup, size)
  # @param [GtkPageSetup] setup 
  # @param [GtkPaperSize] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_paper_size, :gtk_page_setup_set_paper_size, [GtkPageSetup, GtkPaperSize], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_top_margin(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_top_margin, :gtk_page_setup_get_top_margin, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_top_margin(setup, margin, unit)
  # @param [GtkPageSetup] setup 
  # @param [Float] margin 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_top_margin, :gtk_page_setup_set_top_margin, [GtkPageSetup, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_bottom_margin(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_bottom_margin, :gtk_page_setup_get_bottom_margin, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_bottom_margin(setup, margin, unit)
  # @param [GtkPageSetup] setup 
  # @param [Float] margin 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_bottom_margin, :gtk_page_setup_set_bottom_margin, [GtkPageSetup, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_left_margin(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_left_margin, :gtk_page_setup_get_left_margin, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_left_margin(setup, margin, unit)
  # @param [GtkPageSetup] setup 
  # @param [Float] margin 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_left_margin, :gtk_page_setup_set_left_margin, [GtkPageSetup, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_right_margin(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_right_margin, :gtk_page_setup_get_right_margin, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_right_margin(setup, margin, unit)
  # @param [GtkPageSetup] setup 
  # @param [Float] margin 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_right_margin, :gtk_page_setup_set_right_margin, [GtkPageSetup, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_set_paper_size_and_default_margins(setup, size)
  # @param [GtkPageSetup] setup 
  # @param [GtkPaperSize] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_set_paper_size_and_default_margins, :gtk_page_setup_set_paper_size_and_default_margins, [GtkPageSetup, GtkPaperSize], :void
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_paper_width(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_paper_width, :gtk_page_setup_get_paper_width, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_paper_height(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_paper_height, :gtk_page_setup_get_paper_height, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_page_width(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_page_width, :gtk_page_setup_get_page_width, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_get_page_height(setup, unit)
  # @param [GtkPageSetup] setup 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_page_setup_get_page_height, :gtk_page_setup_get_page_height, [GtkPageSetup, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_page_setup_new_from_file(file_name, error)
  # @param [String] file_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_page_setup_new_from_file, :gtk_page_setup_new_from_file, [:string, :pointer], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_page_setup_load_file(setup, file_name, error)
  # @param [GtkPageSetup] setup 
  # @param [String] file_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_page_setup_load_file, :gtk_page_setup_load_file, [GtkPageSetup, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_page_setup_to_file(setup, file_name, error)
  # @param [GtkPageSetup] setup 
  # @param [String] file_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_page_setup_to_file, :gtk_page_setup_to_file, [GtkPageSetup, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_page_setup_new_from_key_file(key_file, group_name, error)
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_page_setup_new_from_key_file, :gtk_page_setup_new_from_key_file, [:pointer, :string, :pointer], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_page_setup_load_key_file(setup, key_file, group_name, error)
  # @param [GtkPageSetup] setup 
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_page_setup_load_key_file, :gtk_page_setup_load_key_file, [GtkPageSetup, :pointer, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_page_setup_to_key_file(setup, key_file, group_name)
  # @param [GtkPageSetup] setup 
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_page_setup_to_key_file, :gtk_page_setup_to_key_file, [GtkPageSetup, :pointer, :string], :void
  
  # (Not documented)
  class GtkPanedPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkPanedPrivate) < private >
  module GtkPanedWrappers
    # @param [GtkWidget] child 
    # @return [nil] 
    def add1(child)
      Gtk.gtk_paned_add1(self, child)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def add2(child)
      Gtk.gtk_paned_add2(self, child)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] resize 
    # @param [Integer] shrink 
    # @return [nil] 
    def pack1(child, resize, shrink)
      Gtk.gtk_paned_pack1(self, child, resize, shrink)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] resize 
    # @param [Integer] shrink 
    # @return [nil] 
    def pack2(child, resize, shrink)
      Gtk.gtk_paned_pack2(self, child, resize, shrink)
    end
    
    # @return [Integer] 
    def get_position()
      Gtk.gtk_paned_get_position(self)
    end
    
    # @param [Integer] position 
    # @return [nil] 
    def set_position(position)
      Gtk.gtk_paned_set_position(self, position)
    end
    
    # @return [GtkWidget] 
    def get_child1()
      GtkWidget.new Gtk.gtk_paned_get_child1(self)
    end
    
    # @return [GtkWidget] 
    def get_child2()
      GtkWidget.new Gtk.gtk_paned_get_child2(self)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_handle_window()
      Gtk.gtk_paned_get_handle_window(self)
    end
  end
  
  class GtkPaned < FFI::Struct
    include GtkPanedWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkPanedPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :cycle_child_focus ::
  #   (FFI::Pointer(*)) 
  # :toggle_handle_focus ::
  #   (FFI::Pointer(*)) 
  # :move_handle ::
  #   (FFI::Pointer(*)) 
  # :cycle_handle_focus ::
  #   (FFI::Pointer(*)) 
  # :accept_position ::
  #   (FFI::Pointer(*)) 
  # :cancel_position ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkPanedClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :cycle_child_focus, :pointer,
           :toggle_handle_focus, :pointer,
           :move_handle, :pointer,
           :cycle_handle_focus, :pointer,
           :accept_position, :pointer,
           :cancel_position, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_paned_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_paned_get_type, :gtk_paned_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_paned_new(orientation)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_paned_new, :gtk_paned_new, [:gtk_orientation], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_paned_add1(paned, child)
  # @param [GtkPaned] paned 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paned_add1, :gtk_paned_add1, [GtkPaned, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_paned_add2(paned, child)
  # @param [GtkPaned] paned 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paned_add2, :gtk_paned_add2, [GtkPaned, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_paned_pack1(paned, child, resize, shrink)
  # @param [GtkPaned] paned 
  # @param [GtkWidget] child 
  # @param [Integer] resize 
  # @param [Integer] shrink 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paned_pack1, :gtk_paned_pack1, [GtkPaned, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_paned_pack2(paned, child, resize, shrink)
  # @param [GtkPaned] paned 
  # @param [GtkWidget] child 
  # @param [Integer] resize 
  # @param [Integer] shrink 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paned_pack2, :gtk_paned_pack2, [GtkPaned, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_paned_get_position(paned)
  # @param [GtkPaned] paned 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_paned_get_position, :gtk_paned_get_position, [GtkPaned], :int
  
  # (Not documented)
  # 
  # @method gtk_paned_set_position(paned, position)
  # @param [GtkPaned] paned 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_paned_set_position, :gtk_paned_set_position, [GtkPaned, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_paned_get_child1(paned)
  # @param [GtkPaned] paned 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_paned_get_child1, :gtk_paned_get_child1, [GtkPaned], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_paned_get_child2(paned)
  # @param [GtkPaned] paned 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_paned_get_child2, :gtk_paned_get_child2, [GtkPaned], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_paned_get_handle_window(paned)
  # @param [GtkPaned] paned 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_paned_get_handle_window, :gtk_paned_get_handle_window, [GtkPaned], :pointer
  
  # (Not documented)
  module GtkPrintContextWrappers
    # @return [FFI::Pointer(*CairoT)] 
    def get_cairo_context()
      Gtk.gtk_print_context_get_cairo_context(self)
    end
    
    # @return [GtkPageSetup] 
    def get_page_setup()
      GtkPageSetup.new Gtk.gtk_print_context_get_page_setup(self)
    end
    
    # @return [Float] 
    def get_width()
      Gtk.gtk_print_context_get_width(self)
    end
    
    # @return [Float] 
    def get_height()
      Gtk.gtk_print_context_get_height(self)
    end
    
    # @return [Float] 
    def get_dpi_x()
      Gtk.gtk_print_context_get_dpi_x(self)
    end
    
    # @return [Float] 
    def get_dpi_y()
      Gtk.gtk_print_context_get_dpi_y(self)
    end
    
    # @param [FFI::Pointer(*Gdouble)] top 
    # @param [FFI::Pointer(*Gdouble)] bottom 
    # @param [FFI::Pointer(*Gdouble)] left 
    # @param [FFI::Pointer(*Gdouble)] right 
    # @return [Integer] 
    def get_hard_margins(top, bottom, left, right)
      Gtk.gtk_print_context_get_hard_margins(self, top, bottom, left, right)
    end
    
    # @return [FFI::Pointer(*PangoFontMap)] 
    def get_pango_fontmap()
      Gtk.gtk_print_context_get_pango_fontmap(self)
    end
    
    # @return [FFI::Pointer(*PangoContext)] 
    def create_pango_context()
      Gtk.gtk_print_context_create_pango_context(self)
    end
    
    # @return [FFI::Pointer(*PangoLayout)] 
    def create_pango_layout()
      Gtk.gtk_print_context_create_pango_layout(self)
    end
    
    # @param [FFI::Pointer(*CairoT)] cr 
    # @param [Float] dpi_x 
    # @param [Float] dpi_y 
    # @return [nil] 
    def set_cairo_context(cr, dpi_x, dpi_y)
      Gtk.gtk_print_context_set_cairo_context(self, cr, dpi_x, dpi_y)
    end
  end
  
  class GtkPrintContext < FFI::Struct
    include GtkPrintContextWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_context_get_type, :gtk_print_context_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_cairo_context(context)
  # @param [GtkPrintContext] context 
  # @return [FFI::Pointer(*CairoT)] 
  # @scope class
  attach_function :gtk_print_context_get_cairo_context, :gtk_print_context_get_cairo_context, [GtkPrintContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_page_setup(context)
  # @param [GtkPrintContext] context 
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_print_context_get_page_setup, :gtk_print_context_get_page_setup, [GtkPrintContext], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_width(context)
  # @param [GtkPrintContext] context 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_context_get_width, :gtk_print_context_get_width, [GtkPrintContext], :double
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_height(context)
  # @param [GtkPrintContext] context 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_context_get_height, :gtk_print_context_get_height, [GtkPrintContext], :double
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_dpi_x(context)
  # @param [GtkPrintContext] context 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_context_get_dpi_x, :gtk_print_context_get_dpi_x, [GtkPrintContext], :double
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_dpi_y(context)
  # @param [GtkPrintContext] context 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_context_get_dpi_y, :gtk_print_context_get_dpi_y, [GtkPrintContext], :double
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_hard_margins(context, top, bottom, left, right)
  # @param [GtkPrintContext] context 
  # @param [FFI::Pointer(*Gdouble)] top 
  # @param [FFI::Pointer(*Gdouble)] bottom 
  # @param [FFI::Pointer(*Gdouble)] left 
  # @param [FFI::Pointer(*Gdouble)] right 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_context_get_hard_margins, :gtk_print_context_get_hard_margins, [GtkPrintContext, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_print_context_get_pango_fontmap(context)
  # @param [GtkPrintContext] context 
  # @return [FFI::Pointer(*PangoFontMap)] 
  # @scope class
  attach_function :gtk_print_context_get_pango_fontmap, :gtk_print_context_get_pango_fontmap, [GtkPrintContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_print_context_create_pango_context(context)
  # @param [GtkPrintContext] context 
  # @return [FFI::Pointer(*PangoContext)] 
  # @scope class
  attach_function :gtk_print_context_create_pango_context, :gtk_print_context_create_pango_context, [GtkPrintContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_print_context_create_pango_layout(context)
  # @param [GtkPrintContext] context 
  # @return [FFI::Pointer(*PangoLayout)] 
  # @scope class
  attach_function :gtk_print_context_create_pango_layout, :gtk_print_context_create_pango_layout, [GtkPrintContext], :pointer
  
  # (Not documented)
  # 
  # @method gtk_print_context_set_cairo_context(context, cr, dpi_x, dpi_y)
  # @param [GtkPrintContext] context 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [Float] dpi_x 
  # @param [Float] dpi_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_context_set_cairo_context, :gtk_print_context_set_cairo_context, [GtkPrintContext, :pointer, :double, :double], :void
  
  # (Not documented)
  module GtkPrintSettingsWrappers
    # @return [GtkPrintSettings] 
    def copy()
      GtkPrintSettings.new Gtk.gtk_print_settings_copy(self)
    end
    
    # @param [String] file_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_file(file_name, error)
      Gtk.gtk_print_settings_load_file(self, file_name, error)
    end
    
    # @param [String] file_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def to_file(file_name, error)
      Gtk.gtk_print_settings_to_file(self, file_name, error)
    end
    
    # @param [FFI::Pointer(*GKeyFile)] key_file 
    # @param [String] group_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def load_key_file(key_file, group_name, error)
      Gtk.gtk_print_settings_load_key_file(self, key_file, group_name, error)
    end
    
    # @param [FFI::Pointer(*GKeyFile)] key_file 
    # @param [String] group_name 
    # @return [nil] 
    def to_key_file(key_file, group_name)
      Gtk.gtk_print_settings_to_key_file(self, key_file, group_name)
    end
    
    # @param [String] key 
    # @return [Integer] 
    def has_key(key)
      Gtk.gtk_print_settings_has_key(self, key)
    end
    
    # @param [String] key 
    # @return [String] 
    def get(key)
      Gtk.gtk_print_settings_get(self, key)
    end
    
    # @param [String] key 
    # @param [String] value 
    # @return [nil] 
    def set(key, value)
      Gtk.gtk_print_settings_set(self, key, value)
    end
    
    # @param [String] key 
    # @return [nil] 
    def unset(key)
      Gtk.gtk_print_settings_unset(self, key)
    end
    
    # @param [Proc(_callback_gtk_print_settings_func_)] func 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @return [nil] 
    def foreach(func, user_data)
      Gtk.gtk_print_settings_foreach(self, func, user_data)
    end
    
    # @param [String] key 
    # @return [Integer] 
    def get_bool(key)
      Gtk.gtk_print_settings_get_bool(self, key)
    end
    
    # @param [String] key 
    # @param [Integer] value 
    # @return [nil] 
    def set_bool(key, value)
      Gtk.gtk_print_settings_set_bool(self, key, value)
    end
    
    # @param [String] key 
    # @return [Float] 
    def get_double(key)
      Gtk.gtk_print_settings_get_double(self, key)
    end
    
    # @param [String] key 
    # @param [Float] def_ 
    # @return [Float] 
    def get_double_with_default(key, def_)
      Gtk.gtk_print_settings_get_double_with_default(self, key, def_)
    end
    
    # @param [String] key 
    # @param [Float] value 
    # @return [nil] 
    def set_double(key, value)
      Gtk.gtk_print_settings_set_double(self, key, value)
    end
    
    # @param [String] key 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_length(key, unit)
      Gtk.gtk_print_settings_get_length(self, key, unit)
    end
    
    # @param [String] key 
    # @param [Float] value 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_length(key, value, unit)
      Gtk.gtk_print_settings_set_length(self, key, value, unit)
    end
    
    # @param [String] key 
    # @return [Integer] 
    def get_int(key)
      Gtk.gtk_print_settings_get_int(self, key)
    end
    
    # @param [String] key 
    # @param [Integer] def_ 
    # @return [Integer] 
    def get_int_with_default(key, def_)
      Gtk.gtk_print_settings_get_int_with_default(self, key, def_)
    end
    
    # @param [String] key 
    # @param [Integer] value 
    # @return [nil] 
    def set_int(key, value)
      Gtk.gtk_print_settings_set_int(self, key, value)
    end
    
    # @return [String] 
    def get_printer()
      Gtk.gtk_print_settings_get_printer(self)
    end
    
    # @param [String] printer 
    # @return [nil] 
    def set_printer(printer)
      Gtk.gtk_print_settings_set_printer(self, printer)
    end
    
    # @return [Symbol from _enum_gtk_page_orientation_] 
    def get_orientation()
      Gtk.gtk_print_settings_get_orientation(self)
    end
    
    # @param [Symbol from _enum_gtk_page_orientation_] orientation 
    # @return [nil] 
    def set_orientation(orientation)
      Gtk.gtk_print_settings_set_orientation(self, orientation)
    end
    
    # @return [GtkPaperSize] 
    def get_paper_size()
      GtkPaperSize.new Gtk.gtk_print_settings_get_paper_size(self)
    end
    
    # @param [GtkPaperSize] paper_size 
    # @return [nil] 
    def set_paper_size(paper_size)
      Gtk.gtk_print_settings_set_paper_size(self, paper_size)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_paper_width(unit)
      Gtk.gtk_print_settings_get_paper_width(self, unit)
    end
    
    # @param [Float] width 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_paper_width(width, unit)
      Gtk.gtk_print_settings_set_paper_width(self, width, unit)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [Float] 
    def get_paper_height(unit)
      Gtk.gtk_print_settings_get_paper_height(self, unit)
    end
    
    # @param [Float] height 
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_paper_height(height, unit)
      Gtk.gtk_print_settings_set_paper_height(self, height, unit)
    end
    
    # @return [Integer] 
    def get_use_color()
      Gtk.gtk_print_settings_get_use_color(self)
    end
    
    # @param [Integer] use_color 
    # @return [nil] 
    def set_use_color(use_color)
      Gtk.gtk_print_settings_set_use_color(self, use_color)
    end
    
    # @return [Integer] 
    def get_collate()
      Gtk.gtk_print_settings_get_collate(self)
    end
    
    # @param [Integer] collate 
    # @return [nil] 
    def set_collate(collate)
      Gtk.gtk_print_settings_set_collate(self, collate)
    end
    
    # @return [Integer] 
    def get_reverse()
      Gtk.gtk_print_settings_get_reverse(self)
    end
    
    # @param [Integer] reverse 
    # @return [nil] 
    def set_reverse(reverse)
      Gtk.gtk_print_settings_set_reverse(self, reverse)
    end
    
    # @return [Symbol from _enum_gtk_print_duplex_] 
    def get_duplex()
      Gtk.gtk_print_settings_get_duplex(self)
    end
    
    # @param [Symbol from _enum_gtk_print_duplex_] duplex 
    # @return [nil] 
    def set_duplex(duplex)
      Gtk.gtk_print_settings_set_duplex(self, duplex)
    end
    
    # @return [Symbol from _enum_gtk_print_quality_] 
    def get_quality()
      Gtk.gtk_print_settings_get_quality(self)
    end
    
    # @param [Symbol from _enum_gtk_print_quality_] quality 
    # @return [nil] 
    def set_quality(quality)
      Gtk.gtk_print_settings_set_quality(self, quality)
    end
    
    # @return [Integer] 
    def get_n_copies()
      Gtk.gtk_print_settings_get_n_copies(self)
    end
    
    # @param [Integer] num_copies 
    # @return [nil] 
    def set_n_copies(num_copies)
      Gtk.gtk_print_settings_set_n_copies(self, num_copies)
    end
    
    # @return [Integer] 
    def get_number_up()
      Gtk.gtk_print_settings_get_number_up(self)
    end
    
    # @param [Integer] number_up 
    # @return [nil] 
    def set_number_up(number_up)
      Gtk.gtk_print_settings_set_number_up(self, number_up)
    end
    
    # @return [Symbol from _enum_gtk_number_up_layout_] 
    def get_number_up_layout()
      Gtk.gtk_print_settings_get_number_up_layout(self)
    end
    
    # @param [Symbol from _enum_gtk_number_up_layout_] number_up_layout 
    # @return [nil] 
    def set_number_up_layout(number_up_layout)
      Gtk.gtk_print_settings_set_number_up_layout(self, number_up_layout)
    end
    
    # @return [Integer] 
    def get_resolution()
      Gtk.gtk_print_settings_get_resolution(self)
    end
    
    # @param [Integer] resolution 
    # @return [nil] 
    def set_resolution(resolution)
      Gtk.gtk_print_settings_set_resolution(self, resolution)
    end
    
    # @return [Integer] 
    def get_resolution_x()
      Gtk.gtk_print_settings_get_resolution_x(self)
    end
    
    # @return [Integer] 
    def get_resolution_y()
      Gtk.gtk_print_settings_get_resolution_y(self)
    end
    
    # @param [Integer] resolution_x 
    # @param [Integer] resolution_y 
    # @return [nil] 
    def set_resolution_xy(resolution_x, resolution_y)
      Gtk.gtk_print_settings_set_resolution_xy(self, resolution_x, resolution_y)
    end
    
    # @return [Float] 
    def get_printer_lpi()
      Gtk.gtk_print_settings_get_printer_lpi(self)
    end
    
    # @param [Float] lpi 
    # @return [nil] 
    def set_printer_lpi(lpi)
      Gtk.gtk_print_settings_set_printer_lpi(self, lpi)
    end
    
    # @return [Float] 
    def get_scale()
      Gtk.gtk_print_settings_get_scale(self)
    end
    
    # @param [Float] scale 
    # @return [nil] 
    def set_scale(scale)
      Gtk.gtk_print_settings_set_scale(self, scale)
    end
    
    # @return [Symbol from _enum_gtk_print_pages_] 
    def get_print_pages()
      Gtk.gtk_print_settings_get_print_pages(self)
    end
    
    # @param [Symbol from _enum_gtk_print_pages_] pages 
    # @return [nil] 
    def set_print_pages(pages)
      Gtk.gtk_print_settings_set_print_pages(self, pages)
    end
    
    # @param [FFI::Pointer(*Gint)] num_ranges 
    # @return [GtkPageRange] 
    def get_page_ranges(num_ranges)
      GtkPageRange.new Gtk.gtk_print_settings_get_page_ranges(self, num_ranges)
    end
    
    # @param [FFI::Pointer(*GtkPageRange)] page_ranges 
    # @param [Integer] num_ranges 
    # @return [nil] 
    def set_page_ranges(page_ranges, num_ranges)
      Gtk.gtk_print_settings_set_page_ranges(self, page_ranges, num_ranges)
    end
    
    # @return [Symbol from _enum_gtk_page_set_] 
    def get_page_set()
      Gtk.gtk_print_settings_get_page_set(self)
    end
    
    # @param [Symbol from _enum_gtk_page_set_] page_set 
    # @return [nil] 
    def set_page_set(page_set)
      Gtk.gtk_print_settings_set_page_set(self, page_set)
    end
    
    # @return [String] 
    def get_default_source()
      Gtk.gtk_print_settings_get_default_source(self)
    end
    
    # @param [String] default_source 
    # @return [nil] 
    def set_default_source(default_source)
      Gtk.gtk_print_settings_set_default_source(self, default_source)
    end
    
    # @return [String] 
    def get_media_type()
      Gtk.gtk_print_settings_get_media_type(self)
    end
    
    # @param [String] media_type 
    # @return [nil] 
    def set_media_type(media_type)
      Gtk.gtk_print_settings_set_media_type(self, media_type)
    end
    
    # @return [String] 
    def get_dither()
      Gtk.gtk_print_settings_get_dither(self)
    end
    
    # @param [String] dither 
    # @return [nil] 
    def set_dither(dither)
      Gtk.gtk_print_settings_set_dither(self, dither)
    end
    
    # @return [String] 
    def get_finishings()
      Gtk.gtk_print_settings_get_finishings(self)
    end
    
    # @param [String] finishings 
    # @return [nil] 
    def set_finishings(finishings)
      Gtk.gtk_print_settings_set_finishings(self, finishings)
    end
    
    # @return [String] 
    def get_output_bin()
      Gtk.gtk_print_settings_get_output_bin(self)
    end
    
    # @param [String] output_bin 
    # @return [nil] 
    def set_output_bin(output_bin)
      Gtk.gtk_print_settings_set_output_bin(self, output_bin)
    end
  end
  
  class GtkPrintSettings < FFI::Struct
    include GtkPrintSettingsWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_print_settings_func_(value, user_data)
  # @param [String] value 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [String] 
  # @scope class
  callback :gtk_print_settings_func, [:string, :pointer], :string
  
  # (Not documented)
  # 
  # = Fields:
  # :start ::
  #   (Integer) 
  # :end_ ::
  #   (Integer) 
  class GtkPageRange < FFI::Struct
    layout :start, :int,
           :end_, :int
  end
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_type, :gtk_print_settings_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_settings_new()
  # @return [GtkPrintSettings] 
  # @scope class
  attach_function :gtk_print_settings_new, :gtk_print_settings_new, [], GtkPrintSettings
  
  # (Not documented)
  # 
  # @method gtk_print_settings_copy(other)
  # @param [GtkPrintSettings] other 
  # @return [GtkPrintSettings] 
  # @scope class
  attach_function :gtk_print_settings_copy, :gtk_print_settings_copy, [GtkPrintSettings], GtkPrintSettings
  
  # (Not documented)
  # 
  # @method gtk_print_settings_new_from_file(file_name, error)
  # @param [String] file_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [GtkPrintSettings] 
  # @scope class
  attach_function :gtk_print_settings_new_from_file, :gtk_print_settings_new_from_file, [:string, :pointer], GtkPrintSettings
  
  # (Not documented)
  # 
  # @method gtk_print_settings_load_file(settings, file_name, error)
  # @param [GtkPrintSettings] settings 
  # @param [String] file_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_load_file, :gtk_print_settings_load_file, [GtkPrintSettings, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_to_file(settings, file_name, error)
  # @param [GtkPrintSettings] settings 
  # @param [String] file_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_to_file, :gtk_print_settings_to_file, [GtkPrintSettings, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_new_from_key_file(key_file, group_name, error)
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [GtkPrintSettings] 
  # @scope class
  attach_function :gtk_print_settings_new_from_key_file, :gtk_print_settings_new_from_key_file, [:pointer, :string, :pointer], GtkPrintSettings
  
  # (Not documented)
  # 
  # @method gtk_print_settings_load_key_file(settings, key_file, group_name, error)
  # @param [GtkPrintSettings] settings 
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_load_key_file, :gtk_print_settings_load_key_file, [GtkPrintSettings, :pointer, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_to_key_file(settings, key_file, group_name)
  # @param [GtkPrintSettings] settings 
  # @param [FFI::Pointer(*GKeyFile)] key_file 
  # @param [String] group_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_to_key_file, :gtk_print_settings_to_key_file, [GtkPrintSettings, :pointer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_has_key(settings, key)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_has_key, :gtk_print_settings_has_key, [GtkPrintSettings, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get(settings, key)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get, :gtk_print_settings_get, [GtkPrintSettings, :string], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set(settings, key, value)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [String] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set, :gtk_print_settings_set, [GtkPrintSettings, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_unset(settings, key)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_unset, :gtk_print_settings_unset, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_foreach(settings, func, user_data)
  # @param [GtkPrintSettings] settings 
  # @param [Proc(_callback_gtk_print_settings_func_)] func 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_foreach, :gtk_print_settings_foreach, [GtkPrintSettings, :gtk_print_settings_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_bool(settings, key)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_bool, :gtk_print_settings_get_bool, [GtkPrintSettings, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_bool(settings, key, value)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_bool, :gtk_print_settings_set_bool, [GtkPrintSettings, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_double(settings, key)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_double, :gtk_print_settings_get_double, [GtkPrintSettings, :string], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_double_with_default(settings, key, def_)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Float] def_ 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_double_with_default, :gtk_print_settings_get_double_with_default, [GtkPrintSettings, :string, :double], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_double(settings, key, value)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_double, :gtk_print_settings_set_double, [GtkPrintSettings, :string, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_length(settings, key, unit)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_length, :gtk_print_settings_get_length, [GtkPrintSettings, :string, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_length(settings, key, value, unit)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Float] value 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_length, :gtk_print_settings_set_length, [GtkPrintSettings, :string, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_int(settings, key)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_int, :gtk_print_settings_get_int, [GtkPrintSettings, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_int_with_default(settings, key, def_)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Integer] def_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_int_with_default, :gtk_print_settings_get_int_with_default, [GtkPrintSettings, :string, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_int(settings, key, value)
  # @param [GtkPrintSettings] settings 
  # @param [String] key 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_int, :gtk_print_settings_set_int, [GtkPrintSettings, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_printer(settings)
  # @param [GtkPrintSettings] settings 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get_printer, :gtk_print_settings_get_printer, [GtkPrintSettings], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_printer(settings, printer)
  # @param [GtkPrintSettings] settings 
  # @param [String] printer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_printer, :gtk_print_settings_set_printer, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_orientation(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Symbol from _enum_gtk_page_orientation_] 
  # @scope class
  attach_function :gtk_print_settings_get_orientation, :gtk_print_settings_get_orientation, [GtkPrintSettings], :gtk_page_orientation
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_orientation(settings, orientation)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_page_orientation_] orientation 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_orientation, :gtk_print_settings_set_orientation, [GtkPrintSettings, :gtk_page_orientation], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_paper_size(settings)
  # @param [GtkPrintSettings] settings 
  # @return [GtkPaperSize] 
  # @scope class
  attach_function :gtk_print_settings_get_paper_size, :gtk_print_settings_get_paper_size, [GtkPrintSettings], GtkPaperSize
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_paper_size(settings, paper_size)
  # @param [GtkPrintSettings] settings 
  # @param [GtkPaperSize] paper_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_paper_size, :gtk_print_settings_set_paper_size, [GtkPrintSettings, GtkPaperSize], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_paper_width(settings, unit)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_paper_width, :gtk_print_settings_get_paper_width, [GtkPrintSettings, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_paper_width(settings, width, unit)
  # @param [GtkPrintSettings] settings 
  # @param [Float] width 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_paper_width, :gtk_print_settings_set_paper_width, [GtkPrintSettings, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_paper_height(settings, unit)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_paper_height, :gtk_print_settings_get_paper_height, [GtkPrintSettings, :gtk_unit], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_paper_height(settings, height, unit)
  # @param [GtkPrintSettings] settings 
  # @param [Float] height 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_paper_height, :gtk_print_settings_set_paper_height, [GtkPrintSettings, :double, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_use_color(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_use_color, :gtk_print_settings_get_use_color, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_use_color(settings, use_color)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] use_color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_use_color, :gtk_print_settings_set_use_color, [GtkPrintSettings, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_collate(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_collate, :gtk_print_settings_get_collate, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_collate(settings, collate)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] collate 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_collate, :gtk_print_settings_set_collate, [GtkPrintSettings, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_reverse(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_reverse, :gtk_print_settings_get_reverse, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_reverse(settings, reverse)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] reverse 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_reverse, :gtk_print_settings_set_reverse, [GtkPrintSettings, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_duplex(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Symbol from _enum_gtk_print_duplex_] 
  # @scope class
  attach_function :gtk_print_settings_get_duplex, :gtk_print_settings_get_duplex, [GtkPrintSettings], :gtk_print_duplex
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_duplex(settings, duplex)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_print_duplex_] duplex 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_duplex, :gtk_print_settings_set_duplex, [GtkPrintSettings, :gtk_print_duplex], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_quality(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Symbol from _enum_gtk_print_quality_] 
  # @scope class
  attach_function :gtk_print_settings_get_quality, :gtk_print_settings_get_quality, [GtkPrintSettings], :gtk_print_quality
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_quality(settings, quality)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_print_quality_] quality 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_quality, :gtk_print_settings_set_quality, [GtkPrintSettings, :gtk_print_quality], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_n_copies(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_n_copies, :gtk_print_settings_get_n_copies, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_n_copies(settings, num_copies)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] num_copies 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_n_copies, :gtk_print_settings_set_n_copies, [GtkPrintSettings, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_number_up(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_number_up, :gtk_print_settings_get_number_up, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_number_up(settings, number_up)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] number_up 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_number_up, :gtk_print_settings_set_number_up, [GtkPrintSettings, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_number_up_layout(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Symbol from _enum_gtk_number_up_layout_] 
  # @scope class
  attach_function :gtk_print_settings_get_number_up_layout, :gtk_print_settings_get_number_up_layout, [GtkPrintSettings], :gtk_number_up_layout
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_number_up_layout(settings, number_up_layout)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_number_up_layout_] number_up_layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_number_up_layout, :gtk_print_settings_set_number_up_layout, [GtkPrintSettings, :gtk_number_up_layout], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_resolution(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_resolution, :gtk_print_settings_get_resolution, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_resolution(settings, resolution)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] resolution 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_resolution, :gtk_print_settings_set_resolution, [GtkPrintSettings, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_resolution_x(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_resolution_x, :gtk_print_settings_get_resolution_x, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_resolution_y(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_settings_get_resolution_y, :gtk_print_settings_get_resolution_y, [GtkPrintSettings], :int
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_resolution_xy(settings, resolution_x, resolution_y)
  # @param [GtkPrintSettings] settings 
  # @param [Integer] resolution_x 
  # @param [Integer] resolution_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_resolution_xy, :gtk_print_settings_set_resolution_xy, [GtkPrintSettings, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_printer_lpi(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_printer_lpi, :gtk_print_settings_get_printer_lpi, [GtkPrintSettings], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_printer_lpi(settings, lpi)
  # @param [GtkPrintSettings] settings 
  # @param [Float] lpi 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_printer_lpi, :gtk_print_settings_set_printer_lpi, [GtkPrintSettings, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_scale(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Float] 
  # @scope class
  attach_function :gtk_print_settings_get_scale, :gtk_print_settings_get_scale, [GtkPrintSettings], :double
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_scale(settings, scale)
  # @param [GtkPrintSettings] settings 
  # @param [Float] scale 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_scale, :gtk_print_settings_set_scale, [GtkPrintSettings, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_print_pages(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Symbol from _enum_gtk_print_pages_] 
  # @scope class
  attach_function :gtk_print_settings_get_print_pages, :gtk_print_settings_get_print_pages, [GtkPrintSettings], :gtk_print_pages
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_print_pages(settings, pages)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_print_pages_] pages 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_print_pages, :gtk_print_settings_set_print_pages, [GtkPrintSettings, :gtk_print_pages], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_page_ranges(settings, num_ranges)
  # @param [GtkPrintSettings] settings 
  # @param [FFI::Pointer(*Gint)] num_ranges 
  # @return [GtkPageRange] 
  # @scope class
  attach_function :gtk_print_settings_get_page_ranges, :gtk_print_settings_get_page_ranges, [GtkPrintSettings, :pointer], GtkPageRange
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_page_ranges(settings, page_ranges, num_ranges)
  # @param [GtkPrintSettings] settings 
  # @param [GtkPageRange] page_ranges 
  # @param [Integer] num_ranges 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_page_ranges, :gtk_print_settings_set_page_ranges, [GtkPrintSettings, GtkPageRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_page_set(settings)
  # @param [GtkPrintSettings] settings 
  # @return [Symbol from _enum_gtk_page_set_] 
  # @scope class
  attach_function :gtk_print_settings_get_page_set, :gtk_print_settings_get_page_set, [GtkPrintSettings], :gtk_page_set
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_page_set(settings, page_set)
  # @param [GtkPrintSettings] settings 
  # @param [Symbol from _enum_gtk_page_set_] page_set 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_page_set, :gtk_print_settings_set_page_set, [GtkPrintSettings, :gtk_page_set], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_default_source(settings)
  # @param [GtkPrintSettings] settings 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get_default_source, :gtk_print_settings_get_default_source, [GtkPrintSettings], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_default_source(settings, default_source)
  # @param [GtkPrintSettings] settings 
  # @param [String] default_source 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_default_source, :gtk_print_settings_set_default_source, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_media_type(settings)
  # @param [GtkPrintSettings] settings 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get_media_type, :gtk_print_settings_get_media_type, [GtkPrintSettings], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_media_type(settings, media_type)
  # @param [GtkPrintSettings] settings 
  # @param [String] media_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_media_type, :gtk_print_settings_set_media_type, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_dither(settings)
  # @param [GtkPrintSettings] settings 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get_dither, :gtk_print_settings_get_dither, [GtkPrintSettings], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_dither(settings, dither)
  # @param [GtkPrintSettings] settings 
  # @param [String] dither 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_dither, :gtk_print_settings_set_dither, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_finishings(settings)
  # @param [GtkPrintSettings] settings 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get_finishings, :gtk_print_settings_get_finishings, [GtkPrintSettings], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_finishings(settings, finishings)
  # @param [GtkPrintSettings] settings 
  # @param [String] finishings 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_finishings, :gtk_print_settings_set_finishings, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_settings_get_output_bin(settings)
  # @param [GtkPrintSettings] settings 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_settings_get_output_bin, :gtk_print_settings_get_output_bin, [GtkPrintSettings], :string
  
  # (Not documented)
  # 
  # @method gtk_print_settings_set_output_bin(settings, output_bin)
  # @param [GtkPrintSettings] settings 
  # @param [String] output_bin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_settings_set_output_bin, :gtk_print_settings_set_output_bin, [GtkPrintSettings, :string], :void
  
  # (Not documented)
  module GtkPrintOperationPreviewWrappers
    # @param [Integer] page_nr 
    # @return [nil] 
    def render_page(page_nr)
      Gtk.gtk_print_operation_preview_render_page(self, page_nr)
    end
    
    # @return [nil] 
    def end_preview()
      Gtk.gtk_print_operation_preview_end_preview(self)
    end
    
    # @param [Integer] page_nr 
    # @return [Integer] 
    def is_selected(page_nr)
      Gtk.gtk_print_operation_preview_is_selected(self, page_nr)
    end
  end
  
  class GtkPrintOperationPreview < FFI::Struct
    include GtkPrintOperationPreviewWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :ready ::
  #   (FFI::Pointer(*)) signals
  # :got_page_size ::
  #   (FFI::Pointer(*)) 
  # :render_page ::
  #   (FFI::Pointer(*)) methods
  # :is_selected ::
  #   (FFI::Pointer(*)) 
  # :end_preview ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkPrintOperationPreviewIface < FFI::Struct
    layout :g_iface, :char,
           :ready, :pointer,
           :got_page_size, :pointer,
           :render_page, :pointer,
           :is_selected, :pointer,
           :end_preview, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_print_operation_preview_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_preview_get_type, :gtk_print_operation_preview_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_operation_preview_render_page(preview, page_nr)
  # @param [GtkPrintOperationPreview] preview 
  # @param [Integer] page_nr 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_preview_render_page, :gtk_print_operation_preview_render_page, [GtkPrintOperationPreview, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_preview_end_preview(preview)
  # @param [GtkPrintOperationPreview] preview 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_preview_end_preview, :gtk_print_operation_preview_end_preview, [GtkPrintOperationPreview], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_preview_is_selected(preview, page_nr)
  # @param [GtkPrintOperationPreview] preview 
  # @param [Integer] page_nr 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_preview_is_selected, :gtk_print_operation_preview_is_selected, [GtkPrintOperationPreview, :int], :int
  
  # (Not documented)
  class GtkPrintOperationPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_status).</em>
  # 
  # === Options:
  # :initial ::
  #   
  # :preparing ::
  #   
  # :generating_data ::
  #   
  # :sending_data ::
  #   
  # :pending ::
  #   
  # :pending_issue ::
  #   
  # :printing ::
  #   
  # :finished ::
  #   
  # :finished_aborted ::
  #   
  # 
  # @method _enum_gtk_print_status_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_status, [
    :initial, 0,
    :preparing, 1,
    :generating_data, 2,
    :sending_data, 3,
    :pending, 4,
    :pending_issue, 5,
    :printing, 6,
    :finished, 7,
    :finished_aborted, 8
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_operation_result).</em>
  # 
  # === Options:
  # :error ::
  #   
  # :apply ::
  #   
  # :cancel ::
  #   
  # :in_progress ::
  #   
  # 
  # @method _enum_gtk_print_operation_result_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_operation_result, [
    :error, 0,
    :apply, 1,
    :cancel, 2,
    :in_progress, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_operation_action).</em>
  # 
  # === Options:
  # :print_dialog ::
  #   
  # :print ::
  #   
  # :preview ::
  #   
  # :export ::
  #   
  # 
  # @method _enum_gtk_print_operation_action_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_operation_action, [
    :print_dialog, 0,
    :print, 1,
    :preview, 2,
    :export, 3
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkPrintOperationPrivate) < private >
  module GtkPrintOperationWrappers
    # @param [GtkPageSetup] default_page_setup 
    # @return [nil] 
    def set_default_page_setup(default_page_setup)
      Gtk.gtk_print_operation_set_default_page_setup(self, default_page_setup)
    end
    
    # @return [GtkPageSetup] 
    def get_default_page_setup()
      GtkPageSetup.new Gtk.gtk_print_operation_get_default_page_setup(self)
    end
    
    # @param [GtkPrintSettings] print_settings 
    # @return [nil] 
    def set_print_settings(print_settings)
      Gtk.gtk_print_operation_set_print_settings(self, print_settings)
    end
    
    # @return [GtkPrintSettings] 
    def get_print_settings()
      GtkPrintSettings.new Gtk.gtk_print_operation_get_print_settings(self)
    end
    
    # @param [String] job_name 
    # @return [nil] 
    def set_job_name(job_name)
      Gtk.gtk_print_operation_set_job_name(self, job_name)
    end
    
    # @param [Integer] n_pages 
    # @return [nil] 
    def set_n_pages(n_pages)
      Gtk.gtk_print_operation_set_n_pages(self, n_pages)
    end
    
    # @param [Integer] current_page 
    # @return [nil] 
    def set_current_page(current_page)
      Gtk.gtk_print_operation_set_current_page(self, current_page)
    end
    
    # @param [Integer] full_page 
    # @return [nil] 
    def set_use_full_page(full_page)
      Gtk.gtk_print_operation_set_use_full_page(self, full_page)
    end
    
    # @param [Symbol from _enum_gtk_unit_] unit 
    # @return [nil] 
    def set_unit(unit)
      Gtk.gtk_print_operation_set_unit(self, unit)
    end
    
    # @param [String] filename 
    # @return [nil] 
    def set_export_filename(filename)
      Gtk.gtk_print_operation_set_export_filename(self, filename)
    end
    
    # @param [Integer] track_status 
    # @return [nil] 
    def set_track_print_status(track_status)
      Gtk.gtk_print_operation_set_track_print_status(self, track_status)
    end
    
    # @param [Integer] show_progress 
    # @return [nil] 
    def set_show_progress(show_progress)
      Gtk.gtk_print_operation_set_show_progress(self, show_progress)
    end
    
    # @param [Integer] allow_async 
    # @return [nil] 
    def set_allow_async(allow_async)
      Gtk.gtk_print_operation_set_allow_async(self, allow_async)
    end
    
    # @param [String] label 
    # @return [nil] 
    def set_custom_tab_label(label)
      Gtk.gtk_print_operation_set_custom_tab_label(self, label)
    end
    
    # @param [Symbol from _enum_gtk_print_operation_action_] action 
    # @param [GtkWindow] parent 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Symbol from _enum_gtk_print_operation_result_] 
    def run(action, parent, error)
      Gtk.gtk_print_operation_run(self, action, parent, error)
    end
    
    # @param [FFI::Pointer(**GError)] error 
    # @return [nil] 
    def get_error(error)
      Gtk.gtk_print_operation_get_error(self, error)
    end
    
    # @return [Symbol from _enum_gtk_print_status_] 
    def get_status()
      Gtk.gtk_print_operation_get_status(self)
    end
    
    # @return [String] 
    def get_status_string()
      Gtk.gtk_print_operation_get_status_string(self)
    end
    
    # @return [Integer] 
    def is_finished()
      Gtk.gtk_print_operation_is_finished(self)
    end
    
    # @return [nil] 
    def cancel()
      Gtk.gtk_print_operation_cancel(self)
    end
    
    # @return [nil] 
    def draw_page_finish()
      Gtk.gtk_print_operation_draw_page_finish(self)
    end
    
    # @return [nil] 
    def set_defer_drawing()
      Gtk.gtk_print_operation_set_defer_drawing(self)
    end
    
    # @param [Integer] support_selection 
    # @return [nil] 
    def set_support_selection(support_selection)
      Gtk.gtk_print_operation_set_support_selection(self, support_selection)
    end
    
    # @return [Integer] 
    def get_support_selection()
      Gtk.gtk_print_operation_get_support_selection(self)
    end
    
    # @param [Integer] has_selection 
    # @return [nil] 
    def set_has_selection(has_selection)
      Gtk.gtk_print_operation_set_has_selection(self, has_selection)
    end
    
    # @return [Integer] 
    def get_has_selection()
      Gtk.gtk_print_operation_get_has_selection(self)
    end
    
    # @param [Integer] embed 
    # @return [nil] 
    def set_embed_page_setup(embed)
      Gtk.gtk_print_operation_set_embed_page_setup(self, embed)
    end
    
    # @return [Integer] 
    def get_embed_page_setup()
      Gtk.gtk_print_operation_get_embed_page_setup(self)
    end
    
    # @return [Integer] 
    def get_n_pages_to_print()
      Gtk.gtk_print_operation_get_n_pages_to_print(self)
    end
  end
  
  class GtkPrintOperation < FFI::Struct
    include GtkPrintOperationWrappers
    layout :parent_instance, :char,
           :priv, GtkPrintOperationPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :done ::
  #   (FFI::Pointer(*)) 
  # :begin_print ::
  #   (FFI::Pointer(*)) 
  # :paginate ::
  #   (FFI::Pointer(*)) 
  # :request_page_setup ::
  #   (FFI::Pointer(*)) 
  # :draw_page ::
  #   (FFI::Pointer(*)) 
  # :end_print ::
  #   (FFI::Pointer(*)) 
  # :status_changed ::
  #   (FFI::Pointer(*)) 
  # :create_custom_widget ::
  #   (FFI::Pointer(*)) 
  # :custom_widget_apply ::
  #   (FFI::Pointer(*)) 
  # :preview ::
  #   (FFI::Pointer(*)) 
  # :update_custom_widget ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkPrintOperationClass < FFI::Struct
    layout :parent_class, :char,
           :done, :pointer,
           :begin_print, :pointer,
           :paginate, :pointer,
           :request_page_setup, :pointer,
           :draw_page, :pointer,
           :end_print, :pointer,
           :status_changed, :pointer,
           :create_custom_widget, :pointer,
           :custom_widget_apply, :pointer,
           :preview, :pointer,
           :update_custom_widget, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_print_error).</em>
  # 
  # === Options:
  # :general ::
  #   
  # :internal_error ::
  #   
  # :nomem ::
  #   
  # :invalid_file ::
  #   
  # 
  # @method _enum_gtk_print_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_print_error, [
    :general, 0,
    :internal_error, 1,
    :nomem, 2,
    :invalid_file, 3
  ]
  
  # (Not documented)
  # 
  # @method gtk_print_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_error_quark, :gtk_print_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_get_type, :gtk_print_operation_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_operation_new()
  # @return [GtkPrintOperation] 
  # @scope class
  attach_function :gtk_print_operation_new, :gtk_print_operation_new, [], GtkPrintOperation
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_default_page_setup(op, default_page_setup)
  # @param [GtkPrintOperation] op 
  # @param [GtkPageSetup] default_page_setup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_default_page_setup, :gtk_print_operation_set_default_page_setup, [GtkPrintOperation, GtkPageSetup], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_default_page_setup(op)
  # @param [GtkPrintOperation] op 
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_print_operation_get_default_page_setup, :gtk_print_operation_get_default_page_setup, [GtkPrintOperation], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_print_settings(op, print_settings)
  # @param [GtkPrintOperation] op 
  # @param [GtkPrintSettings] print_settings 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_print_settings, :gtk_print_operation_set_print_settings, [GtkPrintOperation, GtkPrintSettings], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_print_settings(op)
  # @param [GtkPrintOperation] op 
  # @return [GtkPrintSettings] 
  # @scope class
  attach_function :gtk_print_operation_get_print_settings, :gtk_print_operation_get_print_settings, [GtkPrintOperation], GtkPrintSettings
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_job_name(op, job_name)
  # @param [GtkPrintOperation] op 
  # @param [String] job_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_job_name, :gtk_print_operation_set_job_name, [GtkPrintOperation, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_n_pages(op, n_pages)
  # @param [GtkPrintOperation] op 
  # @param [Integer] n_pages 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_n_pages, :gtk_print_operation_set_n_pages, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_current_page(op, current_page)
  # @param [GtkPrintOperation] op 
  # @param [Integer] current_page 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_current_page, :gtk_print_operation_set_current_page, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_use_full_page(op, full_page)
  # @param [GtkPrintOperation] op 
  # @param [Integer] full_page 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_use_full_page, :gtk_print_operation_set_use_full_page, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_unit(op, unit)
  # @param [GtkPrintOperation] op 
  # @param [Symbol from _enum_gtk_unit_] unit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_unit, :gtk_print_operation_set_unit, [GtkPrintOperation, :gtk_unit], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_export_filename(op, filename)
  # @param [GtkPrintOperation] op 
  # @param [String] filename 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_export_filename, :gtk_print_operation_set_export_filename, [GtkPrintOperation, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_track_print_status(op, track_status)
  # @param [GtkPrintOperation] op 
  # @param [Integer] track_status 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_track_print_status, :gtk_print_operation_set_track_print_status, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_show_progress(op, show_progress)
  # @param [GtkPrintOperation] op 
  # @param [Integer] show_progress 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_show_progress, :gtk_print_operation_set_show_progress, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_allow_async(op, allow_async)
  # @param [GtkPrintOperation] op 
  # @param [Integer] allow_async 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_allow_async, :gtk_print_operation_set_allow_async, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_custom_tab_label(op, label)
  # @param [GtkPrintOperation] op 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_custom_tab_label, :gtk_print_operation_set_custom_tab_label, [GtkPrintOperation, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_run(op, action, parent, error)
  # @param [GtkPrintOperation] op 
  # @param [Symbol from _enum_gtk_print_operation_action_] action 
  # @param [GtkWindow] parent 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Symbol from _enum_gtk_print_operation_result_] 
  # @scope class
  attach_function :gtk_print_operation_run, :gtk_print_operation_run, [GtkPrintOperation, :gtk_print_operation_action, GtkWindow, :pointer], :gtk_print_operation_result
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_error(op, error)
  # @param [GtkPrintOperation] op 
  # @param [FFI::Pointer(**GError)] error 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_get_error, :gtk_print_operation_get_error, [GtkPrintOperation, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_status(op)
  # @param [GtkPrintOperation] op 
  # @return [Symbol from _enum_gtk_print_status_] 
  # @scope class
  attach_function :gtk_print_operation_get_status, :gtk_print_operation_get_status, [GtkPrintOperation], :gtk_print_status
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_status_string(op)
  # @param [GtkPrintOperation] op 
  # @return [String] 
  # @scope class
  attach_function :gtk_print_operation_get_status_string, :gtk_print_operation_get_status_string, [GtkPrintOperation], :string
  
  # (Not documented)
  # 
  # @method gtk_print_operation_is_finished(op)
  # @param [GtkPrintOperation] op 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_is_finished, :gtk_print_operation_is_finished, [GtkPrintOperation], :int
  
  # (Not documented)
  # 
  # @method gtk_print_operation_cancel(op)
  # @param [GtkPrintOperation] op 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_cancel, :gtk_print_operation_cancel, [GtkPrintOperation], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_draw_page_finish(op)
  # @param [GtkPrintOperation] op 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_draw_page_finish, :gtk_print_operation_draw_page_finish, [GtkPrintOperation], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_defer_drawing(op)
  # @param [GtkPrintOperation] op 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_defer_drawing, :gtk_print_operation_set_defer_drawing, [GtkPrintOperation], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_support_selection(op, support_selection)
  # @param [GtkPrintOperation] op 
  # @param [Integer] support_selection 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_support_selection, :gtk_print_operation_set_support_selection, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_support_selection(op)
  # @param [GtkPrintOperation] op 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_get_support_selection, :gtk_print_operation_get_support_selection, [GtkPrintOperation], :int
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_has_selection(op, has_selection)
  # @param [GtkPrintOperation] op 
  # @param [Integer] has_selection 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_has_selection, :gtk_print_operation_set_has_selection, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_has_selection(op)
  # @param [GtkPrintOperation] op 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_get_has_selection, :gtk_print_operation_get_has_selection, [GtkPrintOperation], :int
  
  # (Not documented)
  # 
  # @method gtk_print_operation_set_embed_page_setup(op, embed)
  # @param [GtkPrintOperation] op 
  # @param [Integer] embed 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_operation_set_embed_page_setup, :gtk_print_operation_set_embed_page_setup, [GtkPrintOperation, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_embed_page_setup(op)
  # @param [GtkPrintOperation] op 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_get_embed_page_setup, :gtk_print_operation_get_embed_page_setup, [GtkPrintOperation], :int
  
  # (Not documented)
  # 
  # @method gtk_print_operation_get_n_pages_to_print(op)
  # @param [GtkPrintOperation] op 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_get_n_pages_to_print, :gtk_print_operation_get_n_pages_to_print, [GtkPrintOperation], :int
  
  # (Not documented)
  # 
  # @method gtk_print_run_page_setup_dialog(parent, page_setup, settings)
  # @param [GtkWindow] parent 
  # @param [GtkPageSetup] page_setup 
  # @param [GtkPrintSettings] settings 
  # @return [GtkPageSetup] 
  # @scope class
  attach_function :gtk_print_run_page_setup_dialog, :gtk_print_run_page_setup_dialog, [GtkWindow, GtkPageSetup, GtkPrintSettings], GtkPageSetup
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_page_setup_done_func_(data)
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkPageSetup] 
  # @scope class
  callback :gtk_page_setup_done_func, [:pointer], GtkPageSetup
  
  # (Not documented)
  # 
  # @method gtk_print_run_page_setup_dialog_async(parent, page_setup, settings, done_cb, data)
  # @param [GtkWindow] parent 
  # @param [GtkPageSetup] page_setup 
  # @param [GtkPrintSettings] settings 
  # @param [Proc(_callback_gtk_page_setup_done_func_)] done_cb 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_print_run_page_setup_dialog_async, :gtk_print_run_page_setup_dialog_async, [GtkWindow, GtkPageSetup, GtkPrintSettings, :gtk_page_setup_done_func, :pointer], :void
  
  # (Not documented)
  class GtkProgressBarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkProgressBarPrivate) < private >
  module GtkProgressBarWrappers
    # @return [nil] 
    def pulse()
      Gtk.gtk_progress_bar_pulse(self)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_text(text)
      Gtk.gtk_progress_bar_set_text(self, text)
    end
    
    # @param [Float] fraction 
    # @return [nil] 
    def set_fraction(fraction)
      Gtk.gtk_progress_bar_set_fraction(self, fraction)
    end
    
    # @param [Float] fraction 
    # @return [nil] 
    def set_pulse_step(fraction)
      Gtk.gtk_progress_bar_set_pulse_step(self, fraction)
    end
    
    # @param [Integer] inverted 
    # @return [nil] 
    def set_inverted(inverted)
      Gtk.gtk_progress_bar_set_inverted(self, inverted)
    end
    
    # @return [String] 
    def get_text()
      Gtk.gtk_progress_bar_get_text(self)
    end
    
    # @return [Float] 
    def get_fraction()
      Gtk.gtk_progress_bar_get_fraction(self)
    end
    
    # @return [Float] 
    def get_pulse_step()
      Gtk.gtk_progress_bar_get_pulse_step(self)
    end
    
    # @return [Integer] 
    def get_inverted()
      Gtk.gtk_progress_bar_get_inverted(self)
    end
    
    # @param [unknown] mode 
    # @return [nil] 
    def set_ellipsize(mode)
      Gtk.gtk_progress_bar_set_ellipsize(self, mode)
    end
    
    # @return [unknown] 
    def get_ellipsize()
      Gtk.gtk_progress_bar_get_ellipsize(self)
    end
    
    # @param [Integer] show_text 
    # @return [nil] 
    def set_show_text(show_text)
      Gtk.gtk_progress_bar_set_show_text(self, show_text)
    end
    
    # @return [Integer] 
    def get_show_text()
      Gtk.gtk_progress_bar_get_show_text(self)
    end
  end
  
  class GtkProgressBar < FFI::Struct
    include GtkProgressBarWrappers
    layout :parent, GtkWidget.by_value,
           :priv, GtkProgressBarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkProgressBarClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_progress_bar_get_type, :gtk_progress_bar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_progress_bar_new, :gtk_progress_bar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_pulse(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_pulse, :gtk_progress_bar_pulse, [GtkProgressBar], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_set_text(pbar, text)
  # @param [GtkProgressBar] pbar 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_set_text, :gtk_progress_bar_set_text, [GtkProgressBar, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_set_fraction(pbar, fraction)
  # @param [GtkProgressBar] pbar 
  # @param [Float] fraction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_set_fraction, :gtk_progress_bar_set_fraction, [GtkProgressBar, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_set_pulse_step(pbar, fraction)
  # @param [GtkProgressBar] pbar 
  # @param [Float] fraction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_set_pulse_step, :gtk_progress_bar_set_pulse_step, [GtkProgressBar, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_set_inverted(pbar, inverted)
  # @param [GtkProgressBar] pbar 
  # @param [Integer] inverted 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_set_inverted, :gtk_progress_bar_set_inverted, [GtkProgressBar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_text(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [String] 
  # @scope class
  attach_function :gtk_progress_bar_get_text, :gtk_progress_bar_get_text, [GtkProgressBar], :string
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_fraction(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [Float] 
  # @scope class
  attach_function :gtk_progress_bar_get_fraction, :gtk_progress_bar_get_fraction, [GtkProgressBar], :double
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_pulse_step(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [Float] 
  # @scope class
  attach_function :gtk_progress_bar_get_pulse_step, :gtk_progress_bar_get_pulse_step, [GtkProgressBar], :double
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_inverted(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_progress_bar_get_inverted, :gtk_progress_bar_get_inverted, [GtkProgressBar], :int
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_set_ellipsize(pbar, mode)
  # @param [GtkProgressBar] pbar 
  # @param [unknown] mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_set_ellipsize, :gtk_progress_bar_set_ellipsize, [GtkProgressBar, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_ellipsize(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_progress_bar_get_ellipsize, :gtk_progress_bar_get_ellipsize, [GtkProgressBar], :char
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_set_show_text(pbar, show_text)
  # @param [GtkProgressBar] pbar 
  # @param [Integer] show_text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_progress_bar_set_show_text, :gtk_progress_bar_set_show_text, [GtkProgressBar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_progress_bar_get_show_text(pbar)
  # @param [GtkProgressBar] pbar 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_progress_bar_get_show_text, :gtk_progress_bar_get_show_text, [GtkProgressBar], :int
  
  # (Not documented)
  class GtkToggleActionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkAction) 
  # :private_data ::
  #   (GtkToggleActionPrivate) < private >
  module GtkToggleActionWrappers
    # @return [nil] 
    def toggled()
      Gtk.gtk_toggle_action_toggled(self)
    end
    
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_toggle_action_set_active(self, is_active)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_toggle_action_get_active(self)
    end
    
    # @param [Integer] draw_as_radio 
    # @return [nil] 
    def set_draw_as_radio(draw_as_radio)
      Gtk.gtk_toggle_action_set_draw_as_radio(self, draw_as_radio)
    end
    
    # @return [Integer] 
    def get_draw_as_radio()
      Gtk.gtk_toggle_action_get_draw_as_radio(self)
    end
    
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_toggle_action_set_active(self, is_active)
    end
  end
  
  class GtkToggleAction < FFI::Struct
    include GtkToggleActionWrappers
    layout :parent, GtkAction.by_value,
           :private_data, GtkToggleActionPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkActionClass) 
  # :toggled ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToggleActionClass < FFI::Struct
    layout :parent_class, GtkActionClass.by_value,
           :toggled, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_action_get_type, :gtk_toggle_action_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_new(name, label, tooltip, stock_id)
  # @param [String] name 
  # @param [String] label 
  # @param [String] tooltip 
  # @param [String] stock_id 
  # @return [GtkToggleAction] 
  # @scope class
  attach_function :gtk_toggle_action_new, :gtk_toggle_action_new, [:string, :string, :string, :string], GtkToggleAction
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_toggled(action)
  # @param [GtkToggleAction] action 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_action_toggled, :gtk_toggle_action_toggled, [GtkToggleAction], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_set_active(action, is_active)
  # @param [GtkToggleAction] action 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_action_set_active, :gtk_toggle_action_set_active, [GtkToggleAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_get_active(action)
  # @param [GtkToggleAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_action_get_active, :gtk_toggle_action_get_active, [GtkToggleAction], :int
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_set_draw_as_radio(action, draw_as_radio)
  # @param [GtkToggleAction] action 
  # @param [Integer] draw_as_radio 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_action_set_draw_as_radio, :gtk_toggle_action_set_draw_as_radio, [GtkToggleAction, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_get_draw_as_radio(action)
  # @param [GtkToggleAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_action_get_draw_as_radio, :gtk_toggle_action_get_draw_as_radio, [GtkToggleAction], :int
  
  # (Not documented)
  # 
  # @method gtk_toggle_action_set_active(toggle_action, is_active)
  # @param [GtkToggleAction] toggle_action 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_action_set_active, :_gtk_toggle_action_set_active, [GtkToggleAction, :int], :void
  
  # (Not documented)
  class GtkRadioActionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToggleAction) 
  # :private_data ::
  #   (GtkRadioActionPrivate) < private >
  module GtkRadioActionWrappers
    # @return [FFI::Pointer(*GSList)] 
    def get_group()
      Gtk.gtk_radio_action_get_group(self)
    end
    
    # @param [FFI::Pointer(*GSList)] group 
    # @return [nil] 
    def set_group(group)
      Gtk.gtk_radio_action_set_group(self, group)
    end
    
    # @param [FFI::Pointer(*GtkRadioAction)] group_source 
    # @return [nil] 
    def join_group(group_source)
      Gtk.gtk_radio_action_join_group(self, group_source)
    end
    
    # @return [Integer] 
    def get_current_value()
      Gtk.gtk_radio_action_get_current_value(self)
    end
    
    # @param [Integer] current_value 
    # @return [nil] 
    def set_current_value(current_value)
      Gtk.gtk_radio_action_set_current_value(self, current_value)
    end
  end
  
  class GtkRadioAction < FFI::Struct
    include GtkRadioActionWrappers
    layout :parent, GtkToggleAction.by_value,
           :private_data, GtkRadioActionPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToggleActionClass) 
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRadioActionClass < FFI::Struct
    layout :parent_class, GtkToggleActionClass.by_value,
           :changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_radio_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_radio_action_get_type, :gtk_radio_action_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_radio_action_new(name, label, tooltip, stock_id, value)
  # @param [String] name 
  # @param [String] label 
  # @param [String] tooltip 
  # @param [String] stock_id 
  # @param [Integer] value 
  # @return [GtkRadioAction] 
  # @scope class
  attach_function :gtk_radio_action_new, :gtk_radio_action_new, [:string, :string, :string, :string, :int], GtkRadioAction
  
  # (Not documented)
  # 
  # @method gtk_radio_action_get_group(action)
  # @param [GtkRadioAction] action 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_radio_action_get_group, :gtk_radio_action_get_group, [GtkRadioAction], :pointer
  
  # (Not documented)
  # 
  # @method gtk_radio_action_set_group(action, group)
  # @param [GtkRadioAction] action 
  # @param [FFI::Pointer(*GSList)] group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_action_set_group, :gtk_radio_action_set_group, [GtkRadioAction, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_radio_action_join_group(action, group_source)
  # @param [GtkRadioAction] action 
  # @param [GtkRadioAction] group_source 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_action_join_group, :gtk_radio_action_join_group, [GtkRadioAction, GtkRadioAction], :void
  
  # (Not documented)
  # 
  # @method gtk_radio_action_get_current_value(action)
  # @param [GtkRadioAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_radio_action_get_current_value, :gtk_radio_action_get_current_value, [GtkRadioAction], :int
  
  # (Not documented)
  # 
  # @method gtk_radio_action_set_current_value(action, current_value)
  # @param [GtkRadioAction] action 
  # @param [Integer] current_value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_action_set_current_value, :gtk_radio_action_set_current_value, [GtkRadioAction, :int], :void
  
  # (Not documented)
  class GtkRadioButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :check_button ::
  #   (GtkCheckButton) 
  # :priv ::
  #   (GtkRadioButtonPrivate) < private >
  module GtkRadioButtonWrappers
    # @return [GtkWidget] 
    def new_from_widget()
      GtkWidget.new Gtk.gtk_radio_button_new_from_widget(self)
    end
    
    # @param [String] label 
    # @return [GtkWidget] 
    def new_with_label_from_widget(label)
      GtkWidget.new Gtk.gtk_radio_button_new_with_label_from_widget(self, label)
    end
    
    # @param [String] label 
    # @return [GtkWidget] 
    def new_with_mnemonic_from_widget(label)
      GtkWidget.new Gtk.gtk_radio_button_new_with_mnemonic_from_widget(self, label)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_group()
      Gtk.gtk_radio_button_get_group(self)
    end
    
    # @param [FFI::Pointer(*GSList)] group 
    # @return [nil] 
    def set_group(group)
      Gtk.gtk_radio_button_set_group(self, group)
    end
    
    # @param [FFI::Pointer(*GtkRadioButton)] group_source 
    # @return [nil] 
    def join_group(group_source)
      Gtk.gtk_radio_button_join_group(self, group_source)
    end
  end
  
  class GtkRadioButton < FFI::Struct
    include GtkRadioButtonWrappers
    layout :check_button, GtkCheckButton.by_value,
           :priv, GtkRadioButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCheckButtonClass) 
  # :group_changed ::
  #   (FFI::Pointer(*)) Signals
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRadioButtonClass < FFI::Struct
    layout :parent_class, GtkCheckButtonClass.by_value,
           :group_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_radio_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_radio_button_get_type, :gtk_radio_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_radio_button_new(group)
  # @param [FFI::Pointer(*GSList)] group 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_button_new, :gtk_radio_button_new, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_button_new_from_widget(radio_group_member)
  # @param [GtkRadioButton] radio_group_member 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_button_new_from_widget, :gtk_radio_button_new_from_widget, [GtkRadioButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_button_new_with_label(group, label)
  # @param [FFI::Pointer(*GSList)] group 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_button_new_with_label, :gtk_radio_button_new_with_label, [:pointer, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_button_new_with_label_from_widget(radio_group_member, label)
  # @param [GtkRadioButton] radio_group_member 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_button_new_with_label_from_widget, :gtk_radio_button_new_with_label_from_widget, [GtkRadioButton, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_button_new_with_mnemonic(group, label)
  # @param [FFI::Pointer(*GSList)] group 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_button_new_with_mnemonic, :gtk_radio_button_new_with_mnemonic, [:pointer, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, label)
  # @param [GtkRadioButton] radio_group_member 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_button_new_with_mnemonic_from_widget, :gtk_radio_button_new_with_mnemonic_from_widget, [GtkRadioButton, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_button_get_group(radio_button)
  # @param [GtkRadioButton] radio_button 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_radio_button_get_group, :gtk_radio_button_get_group, [GtkRadioButton], :pointer
  
  # (Not documented)
  # 
  # @method gtk_radio_button_set_group(radio_button, group)
  # @param [GtkRadioButton] radio_button 
  # @param [FFI::Pointer(*GSList)] group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_button_set_group, :gtk_radio_button_set_group, [GtkRadioButton, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_radio_button_join_group(radio_button, group_source)
  # @param [GtkRadioButton] radio_button 
  # @param [GtkRadioButton] group_source 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_button_join_group, :gtk_radio_button_join_group, [GtkRadioButton, GtkRadioButton], :void
  
  # (Not documented)
  class GtkRadioMenuItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :check_menu_item ::
  #   (GtkCheckMenuItem) 
  # :priv ::
  #   (GtkRadioMenuItemPrivate) < private >
  module GtkRadioMenuItemWrappers
    # @return [GtkWidget] 
    def new_from_widget()
      GtkWidget.new Gtk.gtk_radio_menu_item_new_from_widget(self)
    end
    
    # @param [String] label 
    # @return [GtkWidget] 
    def new_with_mnemonic_from_widget(label)
      GtkWidget.new Gtk.gtk_radio_menu_item_new_with_mnemonic_from_widget(self, label)
    end
    
    # @param [String] label 
    # @return [GtkWidget] 
    def new_with_label_from_widget(label)
      GtkWidget.new Gtk.gtk_radio_menu_item_new_with_label_from_widget(self, label)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_group()
      Gtk.gtk_radio_menu_item_get_group(self)
    end
    
    # @param [FFI::Pointer(*GSList)] group 
    # @return [nil] 
    def set_group(group)
      Gtk.gtk_radio_menu_item_set_group(self, group)
    end
  end
  
  class GtkRadioMenuItem < FFI::Struct
    include GtkRadioMenuItemWrappers
    layout :check_menu_item, GtkCheckMenuItem.by_value,
           :priv, GtkRadioMenuItemPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkCheckMenuItemClass) 
  # :group_changed ::
  #   (FFI::Pointer(*)) Signals
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRadioMenuItemClass < FFI::Struct
    layout :parent_class, GtkCheckMenuItemClass.by_value,
           :group_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_radio_menu_item_get_type, :gtk_radio_menu_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_new(group)
  # @param [FFI::Pointer(*GSList)] group 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_menu_item_new, :gtk_radio_menu_item_new, [:pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_new_with_label(group, label)
  # @param [FFI::Pointer(*GSList)] group 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_menu_item_new_with_label, :gtk_radio_menu_item_new_with_label, [:pointer, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_new_with_mnemonic(group, label)
  # @param [FFI::Pointer(*GSList)] group 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_menu_item_new_with_mnemonic, :gtk_radio_menu_item_new_with_mnemonic, [:pointer, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_new_from_widget(group)
  # @param [GtkRadioMenuItem] group 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_menu_item_new_from_widget, :gtk_radio_menu_item_new_from_widget, [GtkRadioMenuItem], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_new_with_mnemonic_from_widget(group, label)
  # @param [GtkRadioMenuItem] group 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_menu_item_new_with_mnemonic_from_widget, :gtk_radio_menu_item_new_with_mnemonic_from_widget, [GtkRadioMenuItem, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_new_with_label_from_widget(group, label)
  # @param [GtkRadioMenuItem] group 
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_radio_menu_item_new_with_label_from_widget, :gtk_radio_menu_item_new_with_label_from_widget, [GtkRadioMenuItem, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_get_group(radio_menu_item)
  # @param [GtkRadioMenuItem] radio_menu_item 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_radio_menu_item_get_group, :gtk_radio_menu_item_get_group, [GtkRadioMenuItem], :pointer
  
  # (Not documented)
  # 
  # @method gtk_radio_menu_item_set_group(radio_menu_item, group)
  # @param [GtkRadioMenuItem] radio_menu_item 
  # @param [FFI::Pointer(*GSList)] group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_menu_item_set_group, :gtk_radio_menu_item_set_group, [GtkRadioMenuItem, :pointer], :void
  
  # (Not documented)
  class GtkToggleToolButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToolButton) 
  # :priv ::
  #   (GtkToggleToolButtonPrivate) < private >
  module GtkToggleToolButtonWrappers
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_toggle_tool_button_set_active(self, is_active)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_toggle_tool_button_get_active(self)
    end
  end
  
  class GtkToggleToolButton < FFI::Struct
    include GtkToggleToolButtonWrappers
    layout :parent, GtkToolButton.by_value,
           :priv, GtkToggleToolButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToolButtonClass) 
  # :toggled ::
  #   (FFI::Pointer(*)) signal
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToggleToolButtonClass < FFI::Struct
    layout :parent_class, GtkToolButtonClass.by_value,
           :toggled, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_toggle_tool_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_tool_button_get_type, :gtk_toggle_tool_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_toggle_tool_button_new()
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_toggle_tool_button_new, :gtk_toggle_tool_button_new, [], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_toggle_tool_button_new_from_stock(stock_id)
  # @param [String] stock_id 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_toggle_tool_button_new_from_stock, :gtk_toggle_tool_button_new_from_stock, [:string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_toggle_tool_button_set_active(button, is_active)
  # @param [GtkToggleToolButton] button 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toggle_tool_button_set_active, :gtk_toggle_tool_button_set_active, [GtkToggleToolButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toggle_tool_button_get_active(button)
  # @param [GtkToggleToolButton] button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toggle_tool_button_get_active, :gtk_toggle_tool_button_get_active, [GtkToggleToolButton], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToggleToolButton) 
  module GtkRadioToolButtonWrappers
    # @return [GtkToolItem] 
    def new_from_widget()
      GtkToolItem.new Gtk.gtk_radio_tool_button_new_from_widget(self)
    end
    
    # @param [String] stock_id 
    # @return [GtkToolItem] 
    def new_with_stock_from_widget(stock_id)
      GtkToolItem.new Gtk.gtk_radio_tool_button_new_with_stock_from_widget(self, stock_id)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def get_group()
      Gtk.gtk_radio_tool_button_get_group(self)
    end
    
    # @param [FFI::Pointer(*GSList)] group 
    # @return [nil] 
    def set_group(group)
      Gtk.gtk_radio_tool_button_set_group(self, group)
    end
  end
  
  class GtkRadioToolButton < FFI::Struct
    include GtkRadioToolButtonWrappers
    layout :parent, GtkToggleToolButton.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToggleToolButtonClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRadioToolButtonClass < FFI::Struct
    layout :parent_class, GtkToggleToolButtonClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_radio_tool_button_get_type, :gtk_radio_tool_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_new(group)
  # @param [FFI::Pointer(*GSList)] group 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_radio_tool_button_new, :gtk_radio_tool_button_new, [:pointer], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_new_from_stock(group, stock_id)
  # @param [FFI::Pointer(*GSList)] group 
  # @param [String] stock_id 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_radio_tool_button_new_from_stock, :gtk_radio_tool_button_new_from_stock, [:pointer, :string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_new_from_widget(group)
  # @param [GtkRadioToolButton] group 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_radio_tool_button_new_from_widget, :gtk_radio_tool_button_new_from_widget, [GtkRadioToolButton], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_new_with_stock_from_widget(group, stock_id)
  # @param [GtkRadioToolButton] group 
  # @param [String] stock_id 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_radio_tool_button_new_with_stock_from_widget, :gtk_radio_tool_button_new_with_stock_from_widget, [GtkRadioToolButton, :string], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_get_group(button)
  # @param [GtkRadioToolButton] button 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_radio_tool_button_get_group, :gtk_radio_tool_button_get_group, [GtkRadioToolButton], :pointer
  
  # (Not documented)
  # 
  # @method gtk_radio_tool_button_set_group(button, group)
  # @param [GtkRadioToolButton] button 
  # @param [FFI::Pointer(*GSList)] group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_radio_tool_button_set_group, :gtk_radio_tool_button_set_group, [GtkRadioToolButton, :pointer], :void
  
  # (Not documented)
  class GtkRangePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkRangePrivate) 
  module GtkRangeWrappers
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_adjustment(adjustment)
      Gtk.gtk_range_set_adjustment(self, adjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_adjustment()
      GtkAdjustment.new Gtk.gtk_range_get_adjustment(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_inverted(setting)
      Gtk.gtk_range_set_inverted(self, setting)
    end
    
    # @return [Integer] 
    def get_inverted()
      Gtk.gtk_range_get_inverted(self)
    end
    
    # @param [Integer] flippable 
    # @return [nil] 
    def set_flippable(flippable)
      Gtk.gtk_range_set_flippable(self, flippable)
    end
    
    # @return [Integer] 
    def get_flippable()
      Gtk.gtk_range_get_flippable(self)
    end
    
    # @param [Integer] size_fixed 
    # @return [nil] 
    def set_slider_size_fixed(size_fixed)
      Gtk.gtk_range_set_slider_size_fixed(self, size_fixed)
    end
    
    # @return [Integer] 
    def get_slider_size_fixed()
      Gtk.gtk_range_get_slider_size_fixed(self)
    end
    
    # @param [Integer] min_size 
    # @return [nil] 
    def set_min_slider_size(min_size)
      Gtk.gtk_range_set_min_slider_size(self, min_size)
    end
    
    # @return [Integer] 
    def get_min_slider_size()
      Gtk.gtk_range_get_min_slider_size(self)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] range_rect 
    # @return [nil] 
    def get_range_rect(range_rect)
      Gtk.gtk_range_get_range_rect(self, range_rect)
    end
    
    # @param [FFI::Pointer(*Gint)] slider_start 
    # @param [FFI::Pointer(*Gint)] slider_end 
    # @return [nil] 
    def get_slider_range(slider_start, slider_end)
      Gtk.gtk_range_get_slider_range(self, slider_start, slider_end)
    end
    
    # @param [Symbol from _enum_gtk_sensitivity_type_] sensitivity 
    # @return [nil] 
    def set_lower_stepper_sensitivity(sensitivity)
      Gtk.gtk_range_set_lower_stepper_sensitivity(self, sensitivity)
    end
    
    # @return [Symbol from _enum_gtk_sensitivity_type_] 
    def get_lower_stepper_sensitivity()
      Gtk.gtk_range_get_lower_stepper_sensitivity(self)
    end
    
    # @param [Symbol from _enum_gtk_sensitivity_type_] sensitivity 
    # @return [nil] 
    def set_upper_stepper_sensitivity(sensitivity)
      Gtk.gtk_range_set_upper_stepper_sensitivity(self, sensitivity)
    end
    
    # @return [Symbol from _enum_gtk_sensitivity_type_] 
    def get_upper_stepper_sensitivity()
      Gtk.gtk_range_get_upper_stepper_sensitivity(self)
    end
    
    # @param [Float] step 
    # @param [Float] page 
    # @return [nil] 
    def set_increments(step, page)
      Gtk.gtk_range_set_increments(self, step, page)
    end
    
    # @param [Float] min 
    # @param [Float] max 
    # @return [nil] 
    def set_range(min, max)
      Gtk.gtk_range_set_range(self, min, max)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_value(value)
      Gtk.gtk_range_set_value(self, value)
    end
    
    # @return [Float] 
    def get_value()
      Gtk.gtk_range_get_value(self)
    end
    
    # @param [Integer] show_fill_level 
    # @return [nil] 
    def set_show_fill_level(show_fill_level)
      Gtk.gtk_range_set_show_fill_level(self, show_fill_level)
    end
    
    # @return [Integer] 
    def get_show_fill_level()
      Gtk.gtk_range_get_show_fill_level(self)
    end
    
    # @param [Integer] restrict_to_fill_level 
    # @return [nil] 
    def set_restrict_to_fill_level(restrict_to_fill_level)
      Gtk.gtk_range_set_restrict_to_fill_level(self, restrict_to_fill_level)
    end
    
    # @return [Integer] 
    def get_restrict_to_fill_level()
      Gtk.gtk_range_get_restrict_to_fill_level(self)
    end
    
    # @param [Float] fill_level 
    # @return [nil] 
    def set_fill_level(fill_level)
      Gtk.gtk_range_set_fill_level(self, fill_level)
    end
    
    # @return [Float] 
    def get_fill_level()
      Gtk.gtk_range_get_fill_level(self)
    end
    
    # @param [Integer] round_digits 
    # @return [nil] 
    def set_round_digits(round_digits)
      Gtk.gtk_range_set_round_digits(self, round_digits)
    end
    
    # @return [Integer] 
    def get_round_digits()
      Gtk.gtk_range_get_round_digits(self)
    end
    
    # @param [FFI::Pointer(*GdkEventScroll)] event 
    # @return [Float] 
    def get_wheel_delta(event)
      Gtk.gtk_range_get_wheel_delta(self, event)
    end
    
    # @param [Integer] has_origin 
    # @return [nil] 
    def set_has_origin(has_origin)
      Gtk.gtk_range_set_has_origin(self, has_origin)
    end
    
    # @return [Integer] 
    def get_has_origin()
      Gtk.gtk_range_get_has_origin(self)
    end
    
    # @param [FFI::Pointer(*Gdouble)] values 
    # @param [Integer] n_values 
    # @return [nil] 
    def set_stop_values(values, n_values)
      Gtk.gtk_range_set_stop_values(self, values, n_values)
    end
    
    # @param [FFI::Pointer(**Gint)] values 
    # @return [Integer] 
    def get_stop_positions(values)
      Gtk.gtk_range_get_stop_positions(self, values)
    end
    
    # @param [Integer] has_a 
    # @param [Integer] has_b 
    # @param [Integer] has_c 
    # @param [Integer] has_d 
    # @return [nil] 
    def set_steppers(has_a, has_b, has_c, has_d)
      Gtk.gtk_range_set_steppers(self, has_a, has_b, has_c, has_d)
    end
  end
  
  class GtkRange < FFI::Struct
    include GtkRangeWrappers
    layout :widget, GtkWidget.by_value,
           :priv, GtkRangePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :slider_detail ::
  #   (String) what detail to pass to GTK drawing functions
  # :stepper_detail ::
  #   (String) 
  # :value_changed ::
  #   (FFI::Pointer(*)) 
  # :adjust_bounds ::
  #   (FFI::Pointer(*)) 
  # :move_slider ::
  #   (FFI::Pointer(*)) action signals for keybindings
  # :get_range_border ::
  #   (FFI::Pointer(*)) Virtual functions
  # :change_value ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRangeClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :slider_detail, :string,
           :stepper_detail, :string,
           :value_changed, :pointer,
           :adjust_bounds, :pointer,
           :move_slider, :pointer,
           :get_range_border, :pointer,
           :change_value, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_range_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_type, :gtk_range_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_range_set_adjustment(range, adjustment)
  # @param [GtkRange] range 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_adjustment, :gtk_range_set_adjustment, [GtkRange, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_adjustment(range)
  # @param [GtkRange] range 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_range_get_adjustment, :gtk_range_get_adjustment, [GtkRange], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_range_set_inverted(range, setting)
  # @param [GtkRange] range 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_inverted, :gtk_range_set_inverted, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_inverted(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_inverted, :gtk_range_get_inverted, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_flippable(range, flippable)
  # @param [GtkRange] range 
  # @param [Integer] flippable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_flippable, :gtk_range_set_flippable, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_flippable(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_flippable, :gtk_range_get_flippable, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_slider_size_fixed(range, size_fixed)
  # @param [GtkRange] range 
  # @param [Integer] size_fixed 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_slider_size_fixed, :gtk_range_set_slider_size_fixed, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_slider_size_fixed(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_slider_size_fixed, :gtk_range_get_slider_size_fixed, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_min_slider_size(range, min_size)
  # @param [GtkRange] range 
  # @param [Integer] min_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_min_slider_size, :gtk_range_set_min_slider_size, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_min_slider_size(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_min_slider_size, :gtk_range_get_min_slider_size, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_get_range_rect(range, range_rect)
  # @param [GtkRange] range 
  # @param [FFI::Pointer(*GdkRectangle)] range_rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_get_range_rect, :gtk_range_get_range_rect, [GtkRange, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_slider_range(range, slider_start, slider_end)
  # @param [GtkRange] range 
  # @param [FFI::Pointer(*Gint)] slider_start 
  # @param [FFI::Pointer(*Gint)] slider_end 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_get_slider_range, :gtk_range_get_slider_range, [GtkRange, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_range_set_lower_stepper_sensitivity(range, sensitivity)
  # @param [GtkRange] range 
  # @param [Symbol from _enum_gtk_sensitivity_type_] sensitivity 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_lower_stepper_sensitivity, :gtk_range_set_lower_stepper_sensitivity, [GtkRange, :gtk_sensitivity_type], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_lower_stepper_sensitivity(range)
  # @param [GtkRange] range 
  # @return [Symbol from _enum_gtk_sensitivity_type_] 
  # @scope class
  attach_function :gtk_range_get_lower_stepper_sensitivity, :gtk_range_get_lower_stepper_sensitivity, [GtkRange], :gtk_sensitivity_type
  
  # (Not documented)
  # 
  # @method gtk_range_set_upper_stepper_sensitivity(range, sensitivity)
  # @param [GtkRange] range 
  # @param [Symbol from _enum_gtk_sensitivity_type_] sensitivity 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_upper_stepper_sensitivity, :gtk_range_set_upper_stepper_sensitivity, [GtkRange, :gtk_sensitivity_type], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_upper_stepper_sensitivity(range)
  # @param [GtkRange] range 
  # @return [Symbol from _enum_gtk_sensitivity_type_] 
  # @scope class
  attach_function :gtk_range_get_upper_stepper_sensitivity, :gtk_range_get_upper_stepper_sensitivity, [GtkRange], :gtk_sensitivity_type
  
  # (Not documented)
  # 
  # @method gtk_range_set_increments(range, step, page)
  # @param [GtkRange] range 
  # @param [Float] step 
  # @param [Float] page 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_increments, :gtk_range_set_increments, [GtkRange, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_range_set_range(range, min, max)
  # @param [GtkRange] range 
  # @param [Float] min 
  # @param [Float] max 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_range, :gtk_range_set_range, [GtkRange, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_range_set_value(range, value)
  # @param [GtkRange] range 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_value, :gtk_range_set_value, [GtkRange, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_value(range)
  # @param [GtkRange] range 
  # @return [Float] 
  # @scope class
  attach_function :gtk_range_get_value, :gtk_range_get_value, [GtkRange], :double
  
  # (Not documented)
  # 
  # @method gtk_range_set_show_fill_level(range, show_fill_level)
  # @param [GtkRange] range 
  # @param [Integer] show_fill_level 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_show_fill_level, :gtk_range_set_show_fill_level, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_show_fill_level(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_show_fill_level, :gtk_range_get_show_fill_level, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_restrict_to_fill_level(range, restrict_to_fill_level)
  # @param [GtkRange] range 
  # @param [Integer] restrict_to_fill_level 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_restrict_to_fill_level, :gtk_range_set_restrict_to_fill_level, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_restrict_to_fill_level(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_restrict_to_fill_level, :gtk_range_get_restrict_to_fill_level, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_fill_level(range, fill_level)
  # @param [GtkRange] range 
  # @param [Float] fill_level 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_fill_level, :gtk_range_set_fill_level, [GtkRange, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_fill_level(range)
  # @param [GtkRange] range 
  # @return [Float] 
  # @scope class
  attach_function :gtk_range_get_fill_level, :gtk_range_get_fill_level, [GtkRange], :double
  
  # (Not documented)
  # 
  # @method gtk_range_set_round_digits(range, round_digits)
  # @param [GtkRange] range 
  # @param [Integer] round_digits 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_round_digits, :gtk_range_set_round_digits, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_round_digits(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_round_digits, :gtk_range_get_round_digits, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_get_wheel_delta(range, event)
  # @param [GtkRange] range 
  # @param [FFI::Pointer(*GdkEventScroll)] event 
  # @return [Float] 
  # @scope class
  attach_function :gtk_range_get_wheel_delta, :_gtk_range_get_wheel_delta, [GtkRange, :pointer], :double
  
  # (Not documented)
  # 
  # @method gtk_range_set_has_origin(range, has_origin)
  # @param [GtkRange] range 
  # @param [Integer] has_origin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_has_origin, :_gtk_range_set_has_origin, [GtkRange, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_has_origin(range)
  # @param [GtkRange] range 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_has_origin, :_gtk_range_get_has_origin, [GtkRange], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_stop_values(range, values, n_values)
  # @param [GtkRange] range 
  # @param [FFI::Pointer(*Gdouble)] values 
  # @param [Integer] n_values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_stop_values, :_gtk_range_set_stop_values, [GtkRange, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_range_get_stop_positions(range, values)
  # @param [GtkRange] range 
  # @param [FFI::Pointer(**Gint)] values 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_range_get_stop_positions, :_gtk_range_get_stop_positions, [GtkRange, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_range_set_steppers(range, has_a, has_b, has_c, has_d)
  # @param [GtkRange] range 
  # @param [Integer] has_a 
  # @param [Integer] has_b 
  # @param [Integer] has_c 
  # @param [Integer] has_d 
  # @return [nil] 
  # @scope class
  attach_function :gtk_range_set_steppers, :_gtk_range_set_steppers, [GtkRange, :int, :int, :int, :int], :void
  
  # (Not documented)
  module GtkRecentInfoWrappers
    # @return [GtkRecentInfo] 
    def ref()
      GtkRecentInfo.new Gtk.gtk_recent_info_ref(self)
    end
    
    # @return [nil] 
    def unref()
      Gtk.gtk_recent_info_unref(self)
    end
    
    # @return [String] 
    def get_uri()
      Gtk.gtk_recent_info_get_uri(self)
    end
    
    # @return [String] 
    def get_display_name()
      Gtk.gtk_recent_info_get_display_name(self)
    end
    
    # @return [String] 
    def get_description()
      Gtk.gtk_recent_info_get_description(self)
    end
    
    # @return [String] 
    def get_mime_type()
      Gtk.gtk_recent_info_get_mime_type(self)
    end
    
    # @return [Integer] 
    def get_added()
      Gtk.gtk_recent_info_get_added(self)
    end
    
    # @return [Integer] 
    def get_modified()
      Gtk.gtk_recent_info_get_modified(self)
    end
    
    # @return [Integer] 
    def get_visited()
      Gtk.gtk_recent_info_get_visited(self)
    end
    
    # @return [Integer] 
    def get_private_hint()
      Gtk.gtk_recent_info_get_private_hint(self)
    end
    
    # @param [String] app_name 
    # @param [FFI::Pointer(**Gchar)] app_exec 
    # @param [FFI::Pointer(*Guint)] count 
    # @param [FFI::Pointer(*TimeT)] time 
    # @return [Integer] 
    def get_application_info(app_name, app_exec, count, time)
      Gtk.gtk_recent_info_get_application_info(self, app_name, app_exec, count, time)
    end
    
    # @param [String] app_name 
    # @param [FFI::Pointer(**GError)] error 
    # @return [FFI::Pointer(*GAppInfo)] 
    def create_app_info(app_name, error)
      Gtk.gtk_recent_info_create_app_info(self, app_name, error)
    end
    
    # @param [FFI::Pointer(*Gsize)] length 
    # @return [FFI::Pointer(**Gchar)] 
    def get_applications(length)
      Gtk.gtk_recent_info_get_applications(self, length)
    end
    
    # @return [String] 
    def last_application()
      Gtk.gtk_recent_info_last_application(self)
    end
    
    # @param [String] app_name 
    # @return [Integer] 
    def has_application(app_name)
      Gtk.gtk_recent_info_has_application(self, app_name)
    end
    
    # @param [FFI::Pointer(*Gsize)] length 
    # @return [FFI::Pointer(**Gchar)] 
    def get_groups(length)
      Gtk.gtk_recent_info_get_groups(self, length)
    end
    
    # @param [String] group_name 
    # @return [Integer] 
    def has_group(group_name)
      Gtk.gtk_recent_info_has_group(self, group_name)
    end
    
    # @param [Integer] size 
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_icon(size)
      Gtk.gtk_recent_info_get_icon(self, size)
    end
    
    # @return [FFI::Pointer(*GIcon)] 
    def get_gicon()
      Gtk.gtk_recent_info_get_gicon(self)
    end
    
    # @return [String] 
    def get_short_name()
      Gtk.gtk_recent_info_get_short_name(self)
    end
    
    # @return [String] 
    def get_uri_display()
      Gtk.gtk_recent_info_get_uri_display(self)
    end
    
    # @return [Integer] 
    def get_age()
      Gtk.gtk_recent_info_get_age(self)
    end
    
    # @return [Integer] 
    def is_local()
      Gtk.gtk_recent_info_is_local(self)
    end
    
    # @return [Integer] 
    def exists()
      Gtk.gtk_recent_info_exists(self)
    end
    
    # @param [FFI::Pointer(*GtkRecentInfo)] info_b 
    # @return [Integer] 
    def match(info_b)
      Gtk.gtk_recent_info_match(self, info_b)
    end
  end
  
  class GtkRecentInfo < FFI::Struct
    include GtkRecentInfoWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkRecentManagerPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :display_name ::
  #   (String) 
  # :description ::
  #   (String) 
  # :mime_type ::
  #   (String) 
  # :app_name ::
  #   (String) 
  # :app_exec ::
  #   (String) 
  # :groups ::
  #   (FFI::Pointer(**Gchar)) 
  # :is_private ::
  #   (Integer) 
  class GtkRecentData < FFI::Struct
    layout :display_name, :string,
           :description, :string,
           :mime_type, :string,
           :app_name, :string,
           :app_exec, :string,
           :groups, :pointer,
           :is_private, :int
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) < private >
  # :priv ::
  #   (GtkRecentManagerPrivate) 
  module GtkRecentManagerWrappers
    # @param [String] uri 
    # @return [Integer] 
    def add_item(uri)
      Gtk.gtk_recent_manager_add_item(self, uri)
    end
    
    # @param [String] uri 
    # @param [GtkRecentData] recent_data 
    # @return [Integer] 
    def add_full(uri, recent_data)
      Gtk.gtk_recent_manager_add_full(self, uri, recent_data)
    end
    
    # @param [String] uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def remove_item(uri, error)
      Gtk.gtk_recent_manager_remove_item(self, uri, error)
    end
    
    # @param [String] uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [GtkRecentInfo] 
    def lookup_item(uri, error)
      GtkRecentInfo.new Gtk.gtk_recent_manager_lookup_item(self, uri, error)
    end
    
    # @param [String] uri 
    # @return [Integer] 
    def has_item(uri)
      Gtk.gtk_recent_manager_has_item(self, uri)
    end
    
    # @param [String] uri 
    # @param [String] new_uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def move_item(uri, new_uri, error)
      Gtk.gtk_recent_manager_move_item(self, uri, new_uri, error)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_items()
      Gtk.gtk_recent_manager_get_items(self)
    end
    
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def purge_items(error)
      Gtk.gtk_recent_manager_purge_items(self, error)
    end
  end
  
  class GtkRecentManager < FFI::Struct
    include GtkRecentManagerWrappers
    layout :parent_instance, :char,
           :priv, GtkRecentManagerPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) < private >
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_recent1 ::
  #   (FFI::Pointer(*)) padding for future expansion
  # :gtk_recent2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_recent3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_recent4 ::
  #   (FFI::Pointer(*)) 
  class GtkRecentManagerClass < FFI::Struct
    layout :parent_class, :char,
           :changed, :pointer,
           :gtk_recent1, :pointer,
           :gtk_recent2, :pointer,
           :gtk_recent3, :pointer,
           :gtk_recent4, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_recent_manager_error).</em>
  # 
  # === Options:
  # :not_found ::
  #   
  # :invalid_uri ::
  #   
  # :invalid_encoding ::
  #   
  # :not_registered ::
  #   
  # :read ::
  #   
  # :write ::
  #   
  # :unknown ::
  #   
  # 
  # @method _enum_gtk_recent_manager_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_recent_manager_error, [
    :not_found, 0,
    :invalid_uri, 1,
    :invalid_encoding, 2,
    :not_registered, 3,
    :read, 4,
    :write, 5,
    :unknown, 6
  ]
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_error_quark, :gtk_recent_manager_error_quark, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_get_type, :gtk_recent_manager_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_new()
  # @return [GtkRecentManager] 
  # @scope class
  attach_function :gtk_recent_manager_new, :gtk_recent_manager_new, [], GtkRecentManager
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_get_default()
  # @return [GtkRecentManager] 
  # @scope class
  attach_function :gtk_recent_manager_get_default, :gtk_recent_manager_get_default, [], GtkRecentManager
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_add_item(manager, uri)
  # @param [GtkRecentManager] manager 
  # @param [String] uri 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_add_item, :gtk_recent_manager_add_item, [GtkRecentManager, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_add_full(manager, uri, recent_data)
  # @param [GtkRecentManager] manager 
  # @param [String] uri 
  # @param [GtkRecentData] recent_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_add_full, :gtk_recent_manager_add_full, [GtkRecentManager, :string, GtkRecentData], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_remove_item(manager, uri, error)
  # @param [GtkRecentManager] manager 
  # @param [String] uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_remove_item, :gtk_recent_manager_remove_item, [GtkRecentManager, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_lookup_item(manager, uri, error)
  # @param [GtkRecentManager] manager 
  # @param [String] uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [GtkRecentInfo] 
  # @scope class
  attach_function :gtk_recent_manager_lookup_item, :gtk_recent_manager_lookup_item, [GtkRecentManager, :string, :pointer], GtkRecentInfo
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_has_item(manager, uri)
  # @param [GtkRecentManager] manager 
  # @param [String] uri 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_has_item, :gtk_recent_manager_has_item, [GtkRecentManager, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_move_item(manager, uri, new_uri, error)
  # @param [GtkRecentManager] manager 
  # @param [String] uri 
  # @param [String] new_uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_move_item, :gtk_recent_manager_move_item, [GtkRecentManager, :string, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_get_items(manager)
  # @param [GtkRecentManager] manager 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_recent_manager_get_items, :gtk_recent_manager_get_items, [GtkRecentManager], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_purge_items(manager, error)
  # @param [GtkRecentManager] manager 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_purge_items, :gtk_recent_manager_purge_items, [GtkRecentManager, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_type, :gtk_recent_info_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_info_ref(info)
  # @param [GtkRecentInfo] info 
  # @return [GtkRecentInfo] 
  # @scope class
  attach_function :gtk_recent_info_ref, :gtk_recent_info_ref, [GtkRecentInfo], GtkRecentInfo
  
  # (Not documented)
  # 
  # @method gtk_recent_info_unref(info)
  # @param [GtkRecentInfo] info 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_info_unref, :gtk_recent_info_unref, [GtkRecentInfo], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_uri(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_get_uri, :gtk_recent_info_get_uri, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_display_name(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_get_display_name, :gtk_recent_info_get_display_name, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_description(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_get_description, :gtk_recent_info_get_description, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_mime_type(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_get_mime_type, :gtk_recent_info_get_mime_type, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_added(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_added, :gtk_recent_info_get_added, [GtkRecentInfo], :long_long
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_modified(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_modified, :gtk_recent_info_get_modified, [GtkRecentInfo], :long_long
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_visited(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_visited, :gtk_recent_info_get_visited, [GtkRecentInfo], :long_long
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_private_hint(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_private_hint, :gtk_recent_info_get_private_hint, [GtkRecentInfo], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_application_info(info, app_name, app_exec, count, time)
  # @param [GtkRecentInfo] info 
  # @param [String] app_name 
  # @param [FFI::Pointer(**Gchar)] app_exec 
  # @param [FFI::Pointer(*Guint)] count 
  # @param [FFI::Pointer(*TimeT)] time 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_application_info, :gtk_recent_info_get_application_info, [GtkRecentInfo, :string, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_create_app_info(info, app_name, error)
  # @param [GtkRecentInfo] info 
  # @param [String] app_name 
  # @param [FFI::Pointer(**GError)] error 
  # @return [FFI::Pointer(*GAppInfo)] 
  # @scope class
  attach_function :gtk_recent_info_create_app_info, :gtk_recent_info_create_app_info, [GtkRecentInfo, :string, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_applications(info, length)
  # @param [GtkRecentInfo] info 
  # @param [FFI::Pointer(*Gsize)] length 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_recent_info_get_applications, :gtk_recent_info_get_applications, [GtkRecentInfo, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_info_last_application(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_last_application, :gtk_recent_info_last_application, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_has_application(info, app_name)
  # @param [GtkRecentInfo] info 
  # @param [String] app_name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_has_application, :gtk_recent_info_has_application, [GtkRecentInfo, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_groups(info, length)
  # @param [GtkRecentInfo] info 
  # @param [FFI::Pointer(*Gsize)] length 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_recent_info_get_groups, :gtk_recent_info_get_groups, [GtkRecentInfo, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_info_has_group(info, group_name)
  # @param [GtkRecentInfo] info 
  # @param [String] group_name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_has_group, :gtk_recent_info_has_group, [GtkRecentInfo, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_icon(info, size)
  # @param [GtkRecentInfo] info 
  # @param [Integer] size 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_recent_info_get_icon, :gtk_recent_info_get_icon, [GtkRecentInfo, :int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_gicon(info)
  # @param [GtkRecentInfo] info 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_recent_info_get_gicon, :gtk_recent_info_get_gicon, [GtkRecentInfo], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_short_name(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_get_short_name, :gtk_recent_info_get_short_name, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_uri_display(info)
  # @param [GtkRecentInfo] info 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_info_get_uri_display, :gtk_recent_info_get_uri_display, [GtkRecentInfo], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_info_get_age(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_get_age, :gtk_recent_info_get_age, [GtkRecentInfo], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_is_local(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_is_local, :gtk_recent_info_is_local, [GtkRecentInfo], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_exists(info)
  # @param [GtkRecentInfo] info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_exists, :gtk_recent_info_exists, [GtkRecentInfo], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_info_match(info_a, info_b)
  # @param [GtkRecentInfo] info_a 
  # @param [GtkRecentInfo] info_b 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_info_match, :gtk_recent_info_match, [GtkRecentInfo, GtkRecentInfo], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_sync()
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_manager_sync, :_gtk_recent_manager_sync, [], :void
  
  # (Not documented)
  class GtkRecentActionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkAction) 
  # :priv ::
  #   (GtkRecentActionPrivate) < private >
  module GtkRecentActionWrappers
    # @return [Integer] 
    def get_show_numbers()
      Gtk.gtk_recent_action_get_show_numbers(self)
    end
    
    # @param [Integer] show_numbers 
    # @return [nil] 
    def set_show_numbers(show_numbers)
      Gtk.gtk_recent_action_set_show_numbers(self, show_numbers)
    end
  end
  
  class GtkRecentAction < FFI::Struct
    include GtkRecentActionWrappers
    layout :parent_instance, GtkAction.by_value,
           :priv, GtkRecentActionPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkActionClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRecentActionClass < FFI::Struct
    layout :parent_class, GtkActionClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_recent_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_action_get_type, :gtk_recent_action_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_action_new(name, label, tooltip, stock_id)
  # @param [String] name 
  # @param [String] label 
  # @param [String] tooltip 
  # @param [String] stock_id 
  # @return [GtkAction] 
  # @scope class
  attach_function :gtk_recent_action_new, :gtk_recent_action_new, [:string, :string, :string, :string], GtkAction
  
  # (Not documented)
  # 
  # @method gtk_recent_action_new_for_manager(name, label, tooltip, stock_id, manager)
  # @param [String] name 
  # @param [String] label 
  # @param [String] tooltip 
  # @param [String] stock_id 
  # @param [GtkRecentManager] manager 
  # @return [GtkAction] 
  # @scope class
  attach_function :gtk_recent_action_new_for_manager, :gtk_recent_action_new_for_manager, [:string, :string, :string, :string, GtkRecentManager], GtkAction
  
  # (Not documented)
  # 
  # @method gtk_recent_action_get_show_numbers(action)
  # @param [GtkRecentAction] action 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_action_get_show_numbers, :gtk_recent_action_get_show_numbers, [GtkRecentAction], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_action_set_show_numbers(action, show_numbers)
  # @param [GtkRecentAction] action 
  # @param [Integer] show_numbers 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_action_set_show_numbers, :gtk_recent_action_set_show_numbers, [GtkRecentAction, :int], :void
  
  # (Not documented)
  module GtkRecentFilterWrappers
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Gtk.gtk_recent_filter_set_name(self, name)
    end
    
    # @return [String] 
    def get_name()
      Gtk.gtk_recent_filter_get_name(self)
    end
    
    # @param [String] mime_type 
    # @return [nil] 
    def add_mime_type(mime_type)
      Gtk.gtk_recent_filter_add_mime_type(self, mime_type)
    end
    
    # @param [String] pattern 
    # @return [nil] 
    def add_pattern(pattern)
      Gtk.gtk_recent_filter_add_pattern(self, pattern)
    end
    
    # @return [nil] 
    def add_pixbuf_formats()
      Gtk.gtk_recent_filter_add_pixbuf_formats(self)
    end
    
    # @param [String] application 
    # @return [nil] 
    def add_application(application)
      Gtk.gtk_recent_filter_add_application(self, application)
    end
    
    # @param [String] group 
    # @return [nil] 
    def add_group(group)
      Gtk.gtk_recent_filter_add_group(self, group)
    end
    
    # @param [Integer] days 
    # @return [nil] 
    def add_age(days)
      Gtk.gtk_recent_filter_add_age(self, days)
    end
    
    # @param [Symbol from _enum_gtk_recent_filter_flags_] needed 
    # @param [Proc(_callback_gtk_recent_filter_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] data_destroy 
    # @return [nil] 
    def add_custom(needed, func, data, data_destroy)
      Gtk.gtk_recent_filter_add_custom(self, needed, func, data, data_destroy)
    end
    
    # @return [Symbol from _enum_gtk_recent_filter_flags_] 
    def get_needed()
      Gtk.gtk_recent_filter_get_needed(self)
    end
    
    # @param [FFI::Pointer(*GtkRecentFilterInfo)] filter_info 
    # @return [Integer] 
    def filter(filter_info)
      Gtk.gtk_recent_filter_filter(self, filter_info)
    end
  end
  
  class GtkRecentFilter < FFI::Struct
    include GtkRecentFilterWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_recent_filter_flags).</em>
  # 
  # === Options:
  # :uri ::
  #   
  # :display_name ::
  #   
  # :mime_type ::
  #   
  # :application ::
  #   
  # :group ::
  #   
  # :age ::
  #   
  # 
  # @method _enum_gtk_recent_filter_flags_
  # @return [Symbol]
  # @scope class
  enum :gtk_recent_filter_flags, [
    :uri, 1,
    :display_name, 2,
    :mime_type, 4,
    :application, 8,
    :group, 16,
    :age, 32
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_recent_filter_func_(filter_info, user_data)
  # @param [FFI::Pointer(*GtkRecentFilterInfo)] filter_info 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_recent_filter_func, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :contains ::
  #   (Symbol from _enum_gtk_recent_filter_flags_) 
  # :uri ::
  #   (String) 
  # :display_name ::
  #   (String) 
  # :mime_type ::
  #   (String) 
  # :applications ::
  #   (FFI::Pointer(**Gchar)) 
  # :groups ::
  #   (FFI::Pointer(**Gchar)) 
  # :age ::
  #   (Integer) 
  class GtkRecentFilterInfo < FFI::Struct
    layout :contains, :gtk_recent_filter_flags,
           :uri, :string,
           :display_name, :string,
           :mime_type, :string,
           :applications, :pointer,
           :groups, :pointer,
           :age, :int
  end
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_filter_get_type, :gtk_recent_filter_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_new()
  # @return [GtkRecentFilter] 
  # @scope class
  attach_function :gtk_recent_filter_new, :gtk_recent_filter_new, [], GtkRecentFilter
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_set_name(filter, name)
  # @param [GtkRecentFilter] filter 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_set_name, :gtk_recent_filter_set_name, [GtkRecentFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_get_name(filter)
  # @param [GtkRecentFilter] filter 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_filter_get_name, :gtk_recent_filter_get_name, [GtkRecentFilter], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_mime_type(filter, mime_type)
  # @param [GtkRecentFilter] filter 
  # @param [String] mime_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_mime_type, :gtk_recent_filter_add_mime_type, [GtkRecentFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_pattern(filter, pattern)
  # @param [GtkRecentFilter] filter 
  # @param [String] pattern 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_pattern, :gtk_recent_filter_add_pattern, [GtkRecentFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_pixbuf_formats(filter)
  # @param [GtkRecentFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_pixbuf_formats, :gtk_recent_filter_add_pixbuf_formats, [GtkRecentFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_application(filter, application)
  # @param [GtkRecentFilter] filter 
  # @param [String] application 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_application, :gtk_recent_filter_add_application, [GtkRecentFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_group(filter, group)
  # @param [GtkRecentFilter] filter 
  # @param [String] group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_group, :gtk_recent_filter_add_group, [GtkRecentFilter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_age(filter, days)
  # @param [GtkRecentFilter] filter 
  # @param [Integer] days 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_age, :gtk_recent_filter_add_age, [GtkRecentFilter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_add_custom(filter, needed, func, data, data_destroy)
  # @param [GtkRecentFilter] filter 
  # @param [Symbol from _enum_gtk_recent_filter_flags_] needed 
  # @param [Proc(_callback_gtk_recent_filter_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] data_destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_filter_add_custom, :gtk_recent_filter_add_custom, [GtkRecentFilter, :gtk_recent_filter_flags, :gtk_recent_filter_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_get_needed(filter)
  # @param [GtkRecentFilter] filter 
  # @return [Symbol from _enum_gtk_recent_filter_flags_] 
  # @scope class
  attach_function :gtk_recent_filter_get_needed, :gtk_recent_filter_get_needed, [GtkRecentFilter], :gtk_recent_filter_flags
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_filter(filter, filter_info)
  # @param [GtkRecentFilter] filter 
  # @param [GtkRecentFilterInfo] filter_info 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_filter_filter, :gtk_recent_filter_filter, [GtkRecentFilter, GtkRecentFilterInfo], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_recent_sort_type).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :mru ::
  #   
  # :lru ::
  #   
  # :custom ::
  #   
  # 
  # @method _enum_gtk_recent_sort_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_recent_sort_type, [
    :none, 0,
    :mru, 1,
    :lru, 2,
    :custom, 3
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_recent_sort_func_(a, b, user_data)
  # @param [GtkRecentInfo] a 
  # @param [GtkRecentInfo] b 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_recent_sort_func, [GtkRecentInfo, GtkRecentInfo, :pointer], :int
  
  # (Not documented)
  module GtkRecentChooserWrappers
    # @param [Integer] show_private 
    # @return [nil] 
    def set_show_private(show_private)
      Gtk.gtk_recent_chooser_set_show_private(self, show_private)
    end
    
    # @return [Integer] 
    def get_show_private()
      Gtk.gtk_recent_chooser_get_show_private(self)
    end
    
    # @param [Integer] show_not_found 
    # @return [nil] 
    def set_show_not_found(show_not_found)
      Gtk.gtk_recent_chooser_set_show_not_found(self, show_not_found)
    end
    
    # @return [Integer] 
    def get_show_not_found()
      Gtk.gtk_recent_chooser_get_show_not_found(self)
    end
    
    # @param [Integer] select_multiple 
    # @return [nil] 
    def set_select_multiple(select_multiple)
      Gtk.gtk_recent_chooser_set_select_multiple(self, select_multiple)
    end
    
    # @return [Integer] 
    def get_select_multiple()
      Gtk.gtk_recent_chooser_get_select_multiple(self)
    end
    
    # @param [Integer] limit 
    # @return [nil] 
    def set_limit(limit)
      Gtk.gtk_recent_chooser_set_limit(self, limit)
    end
    
    # @return [Integer] 
    def get_limit()
      Gtk.gtk_recent_chooser_get_limit(self)
    end
    
    # @param [Integer] local_only 
    # @return [nil] 
    def set_local_only(local_only)
      Gtk.gtk_recent_chooser_set_local_only(self, local_only)
    end
    
    # @return [Integer] 
    def get_local_only()
      Gtk.gtk_recent_chooser_get_local_only(self)
    end
    
    # @param [Integer] show_tips 
    # @return [nil] 
    def set_show_tips(show_tips)
      Gtk.gtk_recent_chooser_set_show_tips(self, show_tips)
    end
    
    # @return [Integer] 
    def get_show_tips()
      Gtk.gtk_recent_chooser_get_show_tips(self)
    end
    
    # @param [Integer] show_icons 
    # @return [nil] 
    def set_show_icons(show_icons)
      Gtk.gtk_recent_chooser_set_show_icons(self, show_icons)
    end
    
    # @return [Integer] 
    def get_show_icons()
      Gtk.gtk_recent_chooser_get_show_icons(self)
    end
    
    # @param [Symbol from _enum_gtk_recent_sort_type_] sort_type 
    # @return [nil] 
    def set_sort_type(sort_type)
      Gtk.gtk_recent_chooser_set_sort_type(self, sort_type)
    end
    
    # @return [Symbol from _enum_gtk_recent_sort_type_] 
    def get_sort_type()
      Gtk.gtk_recent_chooser_get_sort_type(self)
    end
    
    # @param [Proc(_callback_gtk_recent_sort_func_)] sort_func 
    # @param [FFI::Pointer(Gpointer)] sort_data 
    # @param [FFI::Pointer(GDestroyNotify)] data_destroy 
    # @return [nil] 
    def set_sort_func(sort_func, sort_data, data_destroy)
      Gtk.gtk_recent_chooser_set_sort_func(self, sort_func, sort_data, data_destroy)
    end
    
    # @param [String] uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def set_current_uri(uri, error)
      Gtk.gtk_recent_chooser_set_current_uri(self, uri, error)
    end
    
    # @return [String] 
    def get_current_uri()
      Gtk.gtk_recent_chooser_get_current_uri(self)
    end
    
    # @return [GtkRecentInfo] 
    def get_current_item()
      GtkRecentInfo.new Gtk.gtk_recent_chooser_get_current_item(self)
    end
    
    # @param [String] uri 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def select_uri(uri, error)
      Gtk.gtk_recent_chooser_select_uri(self, uri, error)
    end
    
    # @param [String] uri 
    # @return [nil] 
    def unselect_uri(uri)
      Gtk.gtk_recent_chooser_unselect_uri(self, uri)
    end
    
    # @return [nil] 
    def select_all()
      Gtk.gtk_recent_chooser_select_all(self)
    end
    
    # @return [nil] 
    def unselect_all()
      Gtk.gtk_recent_chooser_unselect_all(self)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_items()
      Gtk.gtk_recent_chooser_get_items(self)
    end
    
    # @param [FFI::Pointer(*Gsize)] length 
    # @return [FFI::Pointer(**Gchar)] 
    def get_uris(length)
      Gtk.gtk_recent_chooser_get_uris(self, length)
    end
    
    # @param [GtkRecentFilter] filter 
    # @return [nil] 
    def add_filter(filter)
      Gtk.gtk_recent_chooser_add_filter(self, filter)
    end
    
    # @param [GtkRecentFilter] filter 
    # @return [nil] 
    def remove_filter(filter)
      Gtk.gtk_recent_chooser_remove_filter(self, filter)
    end
    
    # @return [FFI::Pointer(*GSList)] 
    def list_filters()
      Gtk.gtk_recent_chooser_list_filters(self)
    end
    
    # @param [GtkRecentFilter] filter 
    # @return [nil] 
    def set_filter(filter)
      Gtk.gtk_recent_chooser_set_filter(self, filter)
    end
    
    # @return [GtkRecentFilter] 
    def get_filter()
      GtkRecentFilter.new Gtk.gtk_recent_chooser_get_filter(self)
    end
  end
  
  class GtkRecentChooser < FFI::Struct
    include GtkRecentChooserWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_recent_chooser_error).</em>
  # 
  # === Options:
  # :not_found ::
  #   
  # :invalid_uri ::
  #   
  # 
  # @method _enum_gtk_recent_chooser_error_
  # @return [Symbol]
  # @scope class
  enum :gtk_recent_chooser_error, [
    :not_found, 0,
    :invalid_uri, 1
  ]
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_error_quark()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_error_quark, :gtk_recent_chooser_error_quark, [], :uint
  
  # (Not documented)
  # 
  # = Fields:
  # :base_iface ::
  #   (unknown) 
  # :set_current_uri ::
  #   (FFI::Pointer(*)) Methods
  # :get_current_uri ::
  #   (FFI::Pointer(*)) 
  # :select_uri ::
  #   (FFI::Pointer(*)) 
  # :unselect_uri ::
  #   (FFI::Pointer(*)) 
  # :select_all ::
  #   (FFI::Pointer(*)) 
  # :unselect_all ::
  #   (FFI::Pointer(*)) 
  # :get_items ::
  #   (FFI::Pointer(*)) 
  # :get_recent_manager ::
  #   (FFI::Pointer(*)) 
  # :add_filter ::
  #   (FFI::Pointer(*)) 
  # :remove_filter ::
  #   (FFI::Pointer(*)) 
  # :list_filters ::
  #   (FFI::Pointer(*)) 
  # :set_sort_func ::
  #   (FFI::Pointer(*)) 
  # :item_activated ::
  #   (FFI::Pointer(*)) Signals
  # :selection_changed ::
  #   (FFI::Pointer(*)) 
  class GtkRecentChooserIface < FFI::Struct
    layout :base_iface, :char,
           :set_current_uri, :pointer,
           :get_current_uri, :pointer,
           :select_uri, :pointer,
           :unselect_uri, :pointer,
           :select_all, :pointer,
           :unselect_all, :pointer,
           :get_items, :pointer,
           :get_recent_manager, :pointer,
           :add_filter, :pointer,
           :remove_filter, :pointer,
           :list_filters, :pointer,
           :set_sort_func, :pointer,
           :item_activated, :pointer,
           :selection_changed, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_type, :gtk_recent_chooser_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_show_private(chooser, show_private)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] show_private 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_show_private, :gtk_recent_chooser_set_show_private, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_show_private(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_show_private, :gtk_recent_chooser_get_show_private, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_show_not_found(chooser, show_not_found)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] show_not_found 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_show_not_found, :gtk_recent_chooser_set_show_not_found, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_show_not_found(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_show_not_found, :gtk_recent_chooser_get_show_not_found, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_select_multiple(chooser, select_multiple)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] select_multiple 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_select_multiple, :gtk_recent_chooser_set_select_multiple, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_select_multiple(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_select_multiple, :gtk_recent_chooser_get_select_multiple, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_limit(chooser, limit)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] limit 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_limit, :gtk_recent_chooser_set_limit, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_limit(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_limit, :gtk_recent_chooser_get_limit, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_local_only(chooser, local_only)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] local_only 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_local_only, :gtk_recent_chooser_set_local_only, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_local_only(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_local_only, :gtk_recent_chooser_get_local_only, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_show_tips(chooser, show_tips)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] show_tips 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_show_tips, :gtk_recent_chooser_set_show_tips, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_show_tips(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_show_tips, :gtk_recent_chooser_get_show_tips, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_show_icons(chooser, show_icons)
  # @param [GtkRecentChooser] chooser 
  # @param [Integer] show_icons 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_show_icons, :gtk_recent_chooser_set_show_icons, [GtkRecentChooser, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_show_icons(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_get_show_icons, :gtk_recent_chooser_get_show_icons, [GtkRecentChooser], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_sort_type(chooser, sort_type)
  # @param [GtkRecentChooser] chooser 
  # @param [Symbol from _enum_gtk_recent_sort_type_] sort_type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_sort_type, :gtk_recent_chooser_set_sort_type, [GtkRecentChooser, :gtk_recent_sort_type], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_sort_type(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [Symbol from _enum_gtk_recent_sort_type_] 
  # @scope class
  attach_function :gtk_recent_chooser_get_sort_type, :gtk_recent_chooser_get_sort_type, [GtkRecentChooser], :gtk_recent_sort_type
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_sort_func(chooser, sort_func, sort_data, data_destroy)
  # @param [GtkRecentChooser] chooser 
  # @param [Proc(_callback_gtk_recent_sort_func_)] sort_func 
  # @param [FFI::Pointer(Gpointer)] sort_data 
  # @param [FFI::Pointer(GDestroyNotify)] data_destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_sort_func, :gtk_recent_chooser_set_sort_func, [GtkRecentChooser, :gtk_recent_sort_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_current_uri(chooser, uri, error)
  # @param [GtkRecentChooser] chooser 
  # @param [String] uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_set_current_uri, :gtk_recent_chooser_set_current_uri, [GtkRecentChooser, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_current_uri(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [String] 
  # @scope class
  attach_function :gtk_recent_chooser_get_current_uri, :gtk_recent_chooser_get_current_uri, [GtkRecentChooser], :string
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_current_item(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [GtkRecentInfo] 
  # @scope class
  attach_function :gtk_recent_chooser_get_current_item, :gtk_recent_chooser_get_current_item, [GtkRecentChooser], GtkRecentInfo
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_select_uri(chooser, uri, error)
  # @param [GtkRecentChooser] chooser 
  # @param [String] uri 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_select_uri, :gtk_recent_chooser_select_uri, [GtkRecentChooser, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_unselect_uri(chooser, uri)
  # @param [GtkRecentChooser] chooser 
  # @param [String] uri 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_unselect_uri, :gtk_recent_chooser_unselect_uri, [GtkRecentChooser, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_select_all(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_select_all, :gtk_recent_chooser_select_all, [GtkRecentChooser], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_unselect_all(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_unselect_all, :gtk_recent_chooser_unselect_all, [GtkRecentChooser], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_items(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_recent_chooser_get_items, :gtk_recent_chooser_get_items, [GtkRecentChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_uris(chooser, length)
  # @param [GtkRecentChooser] chooser 
  # @param [FFI::Pointer(*Gsize)] length 
  # @return [FFI::Pointer(**Gchar)] 
  # @scope class
  attach_function :gtk_recent_chooser_get_uris, :gtk_recent_chooser_get_uris, [GtkRecentChooser, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_add_filter(chooser, filter)
  # @param [GtkRecentChooser] chooser 
  # @param [GtkRecentFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_add_filter, :gtk_recent_chooser_add_filter, [GtkRecentChooser, GtkRecentFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_remove_filter(chooser, filter)
  # @param [GtkRecentChooser] chooser 
  # @param [GtkRecentFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_remove_filter, :gtk_recent_chooser_remove_filter, [GtkRecentChooser, GtkRecentFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_list_filters(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_recent_chooser_list_filters, :gtk_recent_chooser_list_filters, [GtkRecentChooser], :pointer
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_set_filter(chooser, filter)
  # @param [GtkRecentChooser] chooser 
  # @param [GtkRecentFilter] filter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_set_filter, :gtk_recent_chooser_set_filter, [GtkRecentChooser, GtkRecentFilter], :void
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_get_filter(chooser)
  # @param [GtkRecentChooser] chooser 
  # @return [GtkRecentFilter] 
  # @scope class
  attach_function :gtk_recent_chooser_get_filter, :gtk_recent_chooser_get_filter, [GtkRecentChooser], GtkRecentFilter
  
  # (Not documented)
  class GtkRecentChooserDialogPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkDialog) 
  # :priv ::
  #   (GtkRecentChooserDialogPrivate) < private >
  class GtkRecentChooserDialog < FFI::Struct
    layout :parent_instance, GtkDialog.by_value,
           :priv, GtkRecentChooserDialogPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkDialogClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRecentChooserDialogClass < FFI::Struct
    layout :parent_class, GtkDialogClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_dialog_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_dialog_get_type, :gtk_recent_chooser_dialog_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_dialog_new(title, parent, first_button_text)
  # @param [String] title 
  # @param [GtkWindow] parent 
  # @param [String] first_button_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_recent_chooser_dialog_new, :gtk_recent_chooser_dialog_new, [:string, GtkWindow, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_dialog_new_for_manager(title, parent, manager, first_button_text)
  # @param [String] title 
  # @param [GtkWindow] parent 
  # @param [GtkRecentManager] manager 
  # @param [String] first_button_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_recent_chooser_dialog_new_for_manager, :gtk_recent_chooser_dialog_new_for_manager, [:string, GtkWindow, GtkRecentManager, :string], GtkWidget
  
  # (Not documented)
  class GtkRecentChooserMenuPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkMenu) 
  # :priv ::
  #   (GtkRecentChooserMenuPrivate) < private >
  module GtkRecentChooserMenuWrappers
    # @return [Integer] 
    def get_show_numbers()
      Gtk.gtk_recent_chooser_menu_get_show_numbers(self)
    end
    
    # @param [Integer] show_numbers 
    # @return [nil] 
    def set_show_numbers(show_numbers)
      Gtk.gtk_recent_chooser_menu_set_show_numbers(self, show_numbers)
    end
  end
  
  class GtkRecentChooserMenu < FFI::Struct
    include GtkRecentChooserMenuWrappers
    layout :parent_instance, GtkMenu.by_value,
           :priv, GtkRecentChooserMenuPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMenuClass) 
  # :gtk_recent1 ::
  #   (FFI::Pointer(*)) padding for future expansion
  # :gtk_recent2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_recent3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_recent4 ::
  #   (FFI::Pointer(*)) 
  class GtkRecentChooserMenuClass < FFI::Struct
    layout :parent_class, GtkMenuClass.by_value,
           :gtk_recent1, :pointer,
           :gtk_recent2, :pointer,
           :gtk_recent3, :pointer,
           :gtk_recent4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_menu_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_menu_get_type, :gtk_recent_chooser_menu_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_menu_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_recent_chooser_menu_new, :gtk_recent_chooser_menu_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_menu_new_for_manager(manager)
  # @param [GtkRecentManager] manager 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_recent_chooser_menu_new_for_manager, :gtk_recent_chooser_menu_new_for_manager, [GtkRecentManager], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_menu_get_show_numbers(menu)
  # @param [GtkRecentChooserMenu] menu 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_menu_get_show_numbers, :gtk_recent_chooser_menu_get_show_numbers, [GtkRecentChooserMenu], :int
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_menu_set_show_numbers(menu, show_numbers)
  # @param [GtkRecentChooserMenu] menu 
  # @param [Integer] show_numbers 
  # @return [nil] 
  # @scope class
  attach_function :gtk_recent_chooser_menu_set_show_numbers, :gtk_recent_chooser_menu_set_show_numbers, [GtkRecentChooserMenu, :int], :void
  
  # (Not documented)
  class GtkRecentChooserWidgetPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkRecentChooserWidgetPrivate) < private >
  class GtkRecentChooserWidget < FFI::Struct
    layout :parent_instance, GtkBox.by_value,
           :priv, GtkRecentChooserWidgetPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkRecentChooserWidgetClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_widget_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_widget_get_type, :gtk_recent_chooser_widget_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_widget_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_recent_chooser_widget_new, :gtk_recent_chooser_widget_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_widget_new_for_manager(manager)
  # @param [GtkRecentManager] manager 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_recent_chooser_widget_new_for_manager, :gtk_recent_chooser_widget_new_for_manager, [GtkRecentManager], GtkWidget
  
  # (Not documented)
  class GtkScalePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :range ::
  #   (GtkRange) 
  # :priv ::
  #   (GtkScalePrivate) < private >
  module GtkScaleWrappers
    # @param [Integer] digits 
    # @return [nil] 
    def set_digits(digits)
      Gtk.gtk_scale_set_digits(self, digits)
    end
    
    # @return [Integer] 
    def get_digits()
      Gtk.gtk_scale_get_digits(self)
    end
    
    # @param [Integer] draw_value 
    # @return [nil] 
    def set_draw_value(draw_value)
      Gtk.gtk_scale_set_draw_value(self, draw_value)
    end
    
    # @return [Integer] 
    def get_draw_value()
      Gtk.gtk_scale_get_draw_value(self)
    end
    
    # @param [Integer] has_origin 
    # @return [nil] 
    def set_has_origin(has_origin)
      Gtk.gtk_scale_set_has_origin(self, has_origin)
    end
    
    # @return [Integer] 
    def get_has_origin()
      Gtk.gtk_scale_get_has_origin(self)
    end
    
    # @param [Symbol from _enum_gtk_position_type_] pos 
    # @return [nil] 
    def set_value_pos(pos)
      Gtk.gtk_scale_set_value_pos(self, pos)
    end
    
    # @return [Symbol from _enum_gtk_position_type_] 
    def get_value_pos()
      Gtk.gtk_scale_get_value_pos(self)
    end
    
    # @return [FFI::Pointer(*PangoLayout)] 
    def get_layout()
      Gtk.gtk_scale_get_layout(self)
    end
    
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] y 
    # @return [nil] 
    def get_layout_offsets(x, y)
      Gtk.gtk_scale_get_layout_offsets(self, x, y)
    end
    
    # @param [Float] value 
    # @param [Symbol from _enum_gtk_position_type_] position 
    # @param [String] markup 
    # @return [nil] 
    def add_mark(value, position, markup)
      Gtk.gtk_scale_add_mark(self, value, position, markup)
    end
    
    # @return [nil] 
    def clear_marks()
      Gtk.gtk_scale_clear_marks(self)
    end
  end
  
  class GtkScale < FFI::Struct
    include GtkScaleWrappers
    layout :range, GtkRange.by_value,
           :priv, GtkScalePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkRangeClass) 
  # :format_value ::
  #   (FFI::Pointer(*)) 
  # :draw_value ::
  #   (FFI::Pointer(*)) 
  # :get_layout_offsets ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkScaleClass < FFI::Struct
    layout :parent_class, GtkRangeClass.by_value,
           :format_value, :pointer,
           :draw_value, :pointer,
           :get_layout_offsets, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_scale_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scale_get_type, :gtk_scale_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scale_new(orientation, adjustment)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @param [GtkAdjustment] adjustment 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scale_new, :gtk_scale_new, [:gtk_orientation, GtkAdjustment], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scale_new_with_range(orientation, min, max, step)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @param [Float] min 
  # @param [Float] max 
  # @param [Float] step 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scale_new_with_range, :gtk_scale_new_with_range, [:gtk_orientation, :double, :double, :double], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scale_set_digits(scale, digits)
  # @param [GtkScale] scale 
  # @param [Integer] digits 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_set_digits, :gtk_scale_set_digits, [GtkScale, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_get_digits(scale)
  # @param [GtkScale] scale 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scale_get_digits, :gtk_scale_get_digits, [GtkScale], :int
  
  # (Not documented)
  # 
  # @method gtk_scale_set_draw_value(scale, draw_value)
  # @param [GtkScale] scale 
  # @param [Integer] draw_value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_set_draw_value, :gtk_scale_set_draw_value, [GtkScale, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_get_draw_value(scale)
  # @param [GtkScale] scale 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scale_get_draw_value, :gtk_scale_get_draw_value, [GtkScale], :int
  
  # (Not documented)
  # 
  # @method gtk_scale_set_has_origin(scale, has_origin)
  # @param [GtkScale] scale 
  # @param [Integer] has_origin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_set_has_origin, :gtk_scale_set_has_origin, [GtkScale, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_get_has_origin(scale)
  # @param [GtkScale] scale 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scale_get_has_origin, :gtk_scale_get_has_origin, [GtkScale], :int
  
  # (Not documented)
  # 
  # @method gtk_scale_set_value_pos(scale, pos)
  # @param [GtkScale] scale 
  # @param [Symbol from _enum_gtk_position_type_] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_set_value_pos, :gtk_scale_set_value_pos, [GtkScale, :gtk_position_type], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_get_value_pos(scale)
  # @param [GtkScale] scale 
  # @return [Symbol from _enum_gtk_position_type_] 
  # @scope class
  attach_function :gtk_scale_get_value_pos, :gtk_scale_get_value_pos, [GtkScale], :gtk_position_type
  
  # (Not documented)
  # 
  # @method gtk_scale_get_layout(scale)
  # @param [GtkScale] scale 
  # @return [FFI::Pointer(*PangoLayout)] 
  # @scope class
  attach_function :gtk_scale_get_layout, :gtk_scale_get_layout, [GtkScale], :pointer
  
  # (Not documented)
  # 
  # @method gtk_scale_get_layout_offsets(scale, x, y)
  # @param [GtkScale] scale 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_get_layout_offsets, :gtk_scale_get_layout_offsets, [GtkScale, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_add_mark(scale, value, position, markup)
  # @param [GtkScale] scale 
  # @param [Float] value 
  # @param [Symbol from _enum_gtk_position_type_] position 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_add_mark, :gtk_scale_add_mark, [GtkScale, :double, :gtk_position_type, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_clear_marks(scale)
  # @param [GtkScale] scale 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_clear_marks, :gtk_scale_clear_marks, [GtkScale], :void
  
  # (Not documented)
  class GtkScaleButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkButton) 
  # :priv ::
  #   (GtkScaleButtonPrivate) < private >
  module GtkScaleButtonWrappers
    # @param [FFI::Pointer(**Gchar)] icons 
    # @return [nil] 
    def set_icons(icons)
      Gtk.gtk_scale_button_set_icons(self, icons)
    end
    
    # @return [Float] 
    def get_value()
      Gtk.gtk_scale_button_get_value(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_value(value)
      Gtk.gtk_scale_button_set_value(self, value)
    end
    
    # @return [GtkAdjustment] 
    def get_adjustment()
      GtkAdjustment.new Gtk.gtk_scale_button_get_adjustment(self)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_adjustment(adjustment)
      Gtk.gtk_scale_button_set_adjustment(self, adjustment)
    end
    
    # @return [GtkWidget] 
    def get_plus_button()
      GtkWidget.new Gtk.gtk_scale_button_get_plus_button(self)
    end
    
    # @return [GtkWidget] 
    def get_minus_button()
      GtkWidget.new Gtk.gtk_scale_button_get_minus_button(self)
    end
    
    # @return [GtkWidget] 
    def get_popup()
      GtkWidget.new Gtk.gtk_scale_button_get_popup(self)
    end
  end
  
  class GtkScaleButton < FFI::Struct
    include GtkScaleButtonWrappers
    layout :parent, GtkButton.by_value,
           :priv, GtkScaleButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkButtonClass) 
  # :value_changed ::
  #   (FFI::Pointer(*)) signals
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkScaleButtonClass < FFI::Struct
    layout :parent_class, GtkButtonClass.by_value,
           :value_changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_scale_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scale_button_get_type, :gtk_scale_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scale_button_new(size, min, max, step, icons)
  # @param [Symbol from _enum_gtk_icon_size_] size 
  # @param [Float] min 
  # @param [Float] max 
  # @param [Float] step 
  # @param [FFI::Pointer(**Gchar)] icons 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scale_button_new, :gtk_scale_button_new, [:gtk_icon_size, :double, :double, :double, :pointer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scale_button_set_icons(button, icons)
  # @param [GtkScaleButton] button 
  # @param [FFI::Pointer(**Gchar)] icons 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_button_set_icons, :gtk_scale_button_set_icons, [GtkScaleButton, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_button_get_value(button)
  # @param [GtkScaleButton] button 
  # @return [Float] 
  # @scope class
  attach_function :gtk_scale_button_get_value, :gtk_scale_button_get_value, [GtkScaleButton], :double
  
  # (Not documented)
  # 
  # @method gtk_scale_button_set_value(button, value)
  # @param [GtkScaleButton] button 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_button_set_value, :gtk_scale_button_set_value, [GtkScaleButton, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_button_get_adjustment(button)
  # @param [GtkScaleButton] button 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_scale_button_get_adjustment, :gtk_scale_button_get_adjustment, [GtkScaleButton], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_scale_button_set_adjustment(button, adjustment)
  # @param [GtkScaleButton] button 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scale_button_set_adjustment, :gtk_scale_button_set_adjustment, [GtkScaleButton, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_scale_button_get_plus_button(button)
  # @param [GtkScaleButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scale_button_get_plus_button, :gtk_scale_button_get_plus_button, [GtkScaleButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scale_button_get_minus_button(button)
  # @param [GtkScaleButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scale_button_get_minus_button, :gtk_scale_button_get_minus_button, [GtkScaleButton], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scale_button_get_popup(button)
  # @param [GtkScaleButton] button 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scale_button_get_popup, :gtk_scale_button_get_popup, [GtkScaleButton], GtkWidget
  
  # (Not documented)
  module GtkScrollableWrappers
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_scrollable_get_hadjustment(self)
    end
    
    # @param [GtkAdjustment] hadjustment 
    # @return [nil] 
    def set_hadjustment(hadjustment)
      Gtk.gtk_scrollable_set_hadjustment(self, hadjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_scrollable_get_vadjustment(self)
    end
    
    # @param [GtkAdjustment] vadjustment 
    # @return [nil] 
    def set_vadjustment(vadjustment)
      Gtk.gtk_scrollable_set_vadjustment(self, vadjustment)
    end
    
    # @return [Symbol from _enum_gtk_scrollable_policy_] 
    def get_hscroll_policy()
      Gtk.gtk_scrollable_get_hscroll_policy(self)
    end
    
    # @param [Symbol from _enum_gtk_scrollable_policy_] policy 
    # @return [nil] 
    def set_hscroll_policy(policy)
      Gtk.gtk_scrollable_set_hscroll_policy(self, policy)
    end
    
    # @return [Symbol from _enum_gtk_scrollable_policy_] 
    def get_vscroll_policy()
      Gtk.gtk_scrollable_get_vscroll_policy(self)
    end
    
    # @param [Symbol from _enum_gtk_scrollable_policy_] policy 
    # @return [nil] 
    def set_vscroll_policy(policy)
      Gtk.gtk_scrollable_set_vscroll_policy(self, policy)
    end
  end
  
  class GtkScrollable < FFI::Struct
    include GtkScrollableWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base_iface ::
  #   (unknown) 
  class GtkScrollableInterface < FFI::Struct
    layout :base_iface, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_scrollable_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrollable_get_type, :gtk_scrollable_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scrollable_get_hadjustment(scrollable)
  # @param [GtkScrollable] scrollable 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_scrollable_get_hadjustment, :gtk_scrollable_get_hadjustment, [GtkScrollable], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_scrollable_set_hadjustment(scrollable, hadjustment)
  # @param [GtkScrollable] scrollable 
  # @param [GtkAdjustment] hadjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrollable_set_hadjustment, :gtk_scrollable_set_hadjustment, [GtkScrollable, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_scrollable_get_vadjustment(scrollable)
  # @param [GtkScrollable] scrollable 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_scrollable_get_vadjustment, :gtk_scrollable_get_vadjustment, [GtkScrollable], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_scrollable_set_vadjustment(scrollable, vadjustment)
  # @param [GtkScrollable] scrollable 
  # @param [GtkAdjustment] vadjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrollable_set_vadjustment, :gtk_scrollable_set_vadjustment, [GtkScrollable, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_scrollable_get_hscroll_policy(scrollable)
  # @param [GtkScrollable] scrollable 
  # @return [Symbol from _enum_gtk_scrollable_policy_] 
  # @scope class
  attach_function :gtk_scrollable_get_hscroll_policy, :gtk_scrollable_get_hscroll_policy, [GtkScrollable], :gtk_scrollable_policy
  
  # (Not documented)
  # 
  # @method gtk_scrollable_set_hscroll_policy(scrollable, policy)
  # @param [GtkScrollable] scrollable 
  # @param [Symbol from _enum_gtk_scrollable_policy_] policy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrollable_set_hscroll_policy, :gtk_scrollable_set_hscroll_policy, [GtkScrollable, :gtk_scrollable_policy], :void
  
  # (Not documented)
  # 
  # @method gtk_scrollable_get_vscroll_policy(scrollable)
  # @param [GtkScrollable] scrollable 
  # @return [Symbol from _enum_gtk_scrollable_policy_] 
  # @scope class
  attach_function :gtk_scrollable_get_vscroll_policy, :gtk_scrollable_get_vscroll_policy, [GtkScrollable], :gtk_scrollable_policy
  
  # (Not documented)
  # 
  # @method gtk_scrollable_set_vscroll_policy(scrollable, policy)
  # @param [GtkScrollable] scrollable 
  # @param [Symbol from _enum_gtk_scrollable_policy_] policy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrollable_set_vscroll_policy, :gtk_scrollable_set_vscroll_policy, [GtkScrollable, :gtk_scrollable_policy], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :range ::
  #   (GtkRange) 
  class GtkScrollbar < FFI::Struct
    layout :range, GtkRange.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkRangeClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkScrollbarClass < FFI::Struct
    layout :parent_class, GtkRangeClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_scrollbar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrollbar_get_type, :gtk_scrollbar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scrollbar_new(orientation, adjustment)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @param [GtkAdjustment] adjustment 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scrollbar_new, :gtk_scrollbar_new, [:gtk_orientation, GtkAdjustment], GtkWidget
  
  # (Not documented)
  class GtkScrolledWindowPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkScrolledWindowPrivate) 
  module GtkScrolledWindowWrappers
    # @param [GtkAdjustment] hadjustment 
    # @return [nil] 
    def set_hadjustment(hadjustment)
      Gtk.gtk_scrolled_window_set_hadjustment(self, hadjustment)
    end
    
    # @param [GtkAdjustment] vadjustment 
    # @return [nil] 
    def set_vadjustment(vadjustment)
      Gtk.gtk_scrolled_window_set_vadjustment(self, vadjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_scrolled_window_get_hadjustment(self)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_scrolled_window_get_vadjustment(self)
    end
    
    # @return [GtkWidget] 
    def get_hscrollbar()
      GtkWidget.new Gtk.gtk_scrolled_window_get_hscrollbar(self)
    end
    
    # @return [GtkWidget] 
    def get_vscrollbar()
      GtkWidget.new Gtk.gtk_scrolled_window_get_vscrollbar(self)
    end
    
    # @param [Symbol from _enum_gtk_policy_type_] hscrollbar_policy 
    # @param [Symbol from _enum_gtk_policy_type_] vscrollbar_policy 
    # @return [nil] 
    def set_policy(hscrollbar_policy, vscrollbar_policy)
      Gtk.gtk_scrolled_window_set_policy(self, hscrollbar_policy, vscrollbar_policy)
    end
    
    # @param [FFI::Pointer(*GtkPolicyType)] hscrollbar_policy 
    # @param [FFI::Pointer(*GtkPolicyType)] vscrollbar_policy 
    # @return [nil] 
    def get_policy(hscrollbar_policy, vscrollbar_policy)
      Gtk.gtk_scrolled_window_get_policy(self, hscrollbar_policy, vscrollbar_policy)
    end
    
    # @param [Symbol from _enum_gtk_corner_type_] window_placement 
    # @return [nil] 
    def set_placement(window_placement)
      Gtk.gtk_scrolled_window_set_placement(self, window_placement)
    end
    
    # @return [nil] 
    def unset_placement()
      Gtk.gtk_scrolled_window_unset_placement(self)
    end
    
    # @return [Symbol from _enum_gtk_corner_type_] 
    def get_placement()
      Gtk.gtk_scrolled_window_get_placement(self)
    end
    
    # @param [Symbol from _enum_gtk_shadow_type_] type 
    # @return [nil] 
    def set_shadow_type(type)
      Gtk.gtk_scrolled_window_set_shadow_type(self, type)
    end
    
    # @return [Symbol from _enum_gtk_shadow_type_] 
    def get_shadow_type()
      Gtk.gtk_scrolled_window_get_shadow_type(self)
    end
    
    # @param [GtkWidget] child 
    # @return [nil] 
    def add_with_viewport(child)
      Gtk.gtk_scrolled_window_add_with_viewport(self, child)
    end
    
    # @return [Integer] 
    def get_min_content_width()
      Gtk.gtk_scrolled_window_get_min_content_width(self)
    end
    
    # @param [Integer] width 
    # @return [nil] 
    def set_min_content_width(width)
      Gtk.gtk_scrolled_window_set_min_content_width(self, width)
    end
    
    # @return [Integer] 
    def get_min_content_height()
      Gtk.gtk_scrolled_window_get_min_content_height(self)
    end
    
    # @param [Integer] height 
    # @return [nil] 
    def set_min_content_height(height)
      Gtk.gtk_scrolled_window_set_min_content_height(self, height)
    end
    
    # @param [Integer] kinetic_scrolling 
    # @return [nil] 
    def set_kinetic_scrolling(kinetic_scrolling)
      Gtk.gtk_scrolled_window_set_kinetic_scrolling(self, kinetic_scrolling)
    end
    
    # @return [Integer] 
    def get_kinetic_scrolling()
      Gtk.gtk_scrolled_window_get_kinetic_scrolling(self)
    end
    
    # @param [Integer] capture_button_press 
    # @return [nil] 
    def set_capture_button_press(capture_button_press)
      Gtk.gtk_scrolled_window_set_capture_button_press(self, capture_button_press)
    end
    
    # @return [Integer] 
    def get_capture_button_press()
      Gtk.gtk_scrolled_window_get_capture_button_press(self)
    end
    
    # @return [Integer] 
    def get_scrollbar_spacing()
      Gtk.gtk_scrolled_window_get_scrollbar_spacing(self)
    end
  end
  
  class GtkScrolledWindow < FFI::Struct
    include GtkScrolledWindowWrappers
    layout :container, GtkBin.by_value,
           :priv, GtkScrolledWindowPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :scrollbar_spacing ::
  #   (Integer) 
  # :scroll_child ::
  #   (FFI::Pointer(*)) Unfortunately, GtkScrollType is deficient in that there is
  #   no horizontal/vertical variants for GTK_SCROLL_START/END,
  #   so we have to add an additional boolean flag.
  # :move_focus_out ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkScrolledWindowClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :scrollbar_spacing, :int,
           :scroll_child, :pointer,
           :move_focus_out, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrolled_window_get_type, :gtk_scrolled_window_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_new(hadjustment, vadjustment)
  # @param [GtkAdjustment] hadjustment 
  # @param [GtkAdjustment] vadjustment 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scrolled_window_new, :gtk_scrolled_window_new, [GtkAdjustment, GtkAdjustment], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_hadjustment(scrolled_window, hadjustment)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [GtkAdjustment] hadjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_hadjustment, :gtk_scrolled_window_set_hadjustment, [GtkScrolledWindow, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_vadjustment(scrolled_window, vadjustment)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [GtkAdjustment] vadjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_vadjustment, :gtk_scrolled_window_set_vadjustment, [GtkScrolledWindow, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_hadjustment(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_scrolled_window_get_hadjustment, :gtk_scrolled_window_get_hadjustment, [GtkScrolledWindow], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_vadjustment(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_scrolled_window_get_vadjustment, :gtk_scrolled_window_get_vadjustment, [GtkScrolledWindow], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_hscrollbar(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scrolled_window_get_hscrollbar, :gtk_scrolled_window_get_hscrollbar, [GtkScrolledWindow], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_vscrollbar(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_scrolled_window_get_vscrollbar, :gtk_scrolled_window_get_vscrollbar, [GtkScrolledWindow], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Symbol from _enum_gtk_policy_type_] hscrollbar_policy 
  # @param [Symbol from _enum_gtk_policy_type_] vscrollbar_policy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_policy, :gtk_scrolled_window_set_policy, [GtkScrolledWindow, :gtk_policy_type, :gtk_policy_type], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [FFI::Pointer(*GtkPolicyType)] hscrollbar_policy 
  # @param [FFI::Pointer(*GtkPolicyType)] vscrollbar_policy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_get_policy, :gtk_scrolled_window_get_policy, [GtkScrolledWindow, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_placement(scrolled_window, window_placement)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Symbol from _enum_gtk_corner_type_] window_placement 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_placement, :gtk_scrolled_window_set_placement, [GtkScrolledWindow, :gtk_corner_type], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_unset_placement(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_unset_placement, :gtk_scrolled_window_unset_placement, [GtkScrolledWindow], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_placement(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Symbol from _enum_gtk_corner_type_] 
  # @scope class
  attach_function :gtk_scrolled_window_get_placement, :gtk_scrolled_window_get_placement, [GtkScrolledWindow], :gtk_corner_type
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_shadow_type(scrolled_window, type)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Symbol from _enum_gtk_shadow_type_] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_shadow_type, :gtk_scrolled_window_set_shadow_type, [GtkScrolledWindow, :gtk_shadow_type], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_shadow_type(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Symbol from _enum_gtk_shadow_type_] 
  # @scope class
  attach_function :gtk_scrolled_window_get_shadow_type, :gtk_scrolled_window_get_shadow_type, [GtkScrolledWindow], :gtk_shadow_type
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_add_with_viewport(scrolled_window, child)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_add_with_viewport, :gtk_scrolled_window_add_with_viewport, [GtkScrolledWindow, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_min_content_width(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrolled_window_get_min_content_width, :gtk_scrolled_window_get_min_content_width, [GtkScrolledWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_min_content_width(scrolled_window, width)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_min_content_width, :gtk_scrolled_window_set_min_content_width, [GtkScrolledWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_min_content_height(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrolled_window_get_min_content_height, :gtk_scrolled_window_get_min_content_height, [GtkScrolledWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_min_content_height(scrolled_window, height)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_min_content_height, :gtk_scrolled_window_set_min_content_height, [GtkScrolledWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_kinetic_scrolling(scrolled_window, kinetic_scrolling)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Integer] kinetic_scrolling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_kinetic_scrolling, :gtk_scrolled_window_set_kinetic_scrolling, [GtkScrolledWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_kinetic_scrolling(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrolled_window_get_kinetic_scrolling, :gtk_scrolled_window_get_kinetic_scrolling, [GtkScrolledWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_set_capture_button_press(scrolled_window, capture_button_press)
  # @param [GtkScrolledWindow] scrolled_window 
  # @param [Integer] capture_button_press 
  # @return [nil] 
  # @scope class
  attach_function :gtk_scrolled_window_set_capture_button_press, :gtk_scrolled_window_set_capture_button_press, [GtkScrolledWindow, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_capture_button_press(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrolled_window_get_capture_button_press, :gtk_scrolled_window_get_capture_button_press, [GtkScrolledWindow], :int
  
  # (Not documented)
  # 
  # @method gtk_scrolled_window_get_scrollbar_spacing(scrolled_window)
  # @param [GtkScrolledWindow] scrolled_window 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrolled_window_get_scrollbar_spacing, :_gtk_scrolled_window_get_scrollbar_spacing, [GtkScrolledWindow], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkEntry) 
  class GtkSearchEntry < FFI::Struct
    layout :parent, GtkEntry.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkEntryClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSearchEntryClass < FFI::Struct
    layout :parent_class, GtkEntryClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_search_entry_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_search_entry_get_type, :gtk_search_entry_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_search_entry_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_search_entry_new, :gtk_search_entry_new, [], GtkWidget
  
  # (Not documented)
  class GtkSeparatorPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :widget ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkSeparatorPrivate) 
  class GtkSeparator < FFI::Struct
    layout :widget, GtkWidget.by_value,
           :priv, GtkSeparatorPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSeparatorClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_separator_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_separator_get_type, :gtk_separator_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_separator_new(orientation)
  # @param [Symbol from _enum_gtk_orientation_] orientation 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_separator_new, :gtk_separator_new, [:gtk_orientation], GtkWidget
  
  # (Not documented)
  # 
  # = Fields:
  # :menu_item ::
  #   (GtkMenuItem) 
  class GtkSeparatorMenuItem < FFI::Struct
    layout :menu_item, GtkMenuItem.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkMenuItemClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSeparatorMenuItemClass < FFI::Struct
    layout :parent_class, GtkMenuItemClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_separator_menu_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_separator_menu_item_get_type, :gtk_separator_menu_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_separator_menu_item_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_separator_menu_item_new, :gtk_separator_menu_item_new, [], GtkWidget
  
  # (Not documented)
  class GtkSeparatorToolItemPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkToolItem) 
  # :priv ::
  #   (GtkSeparatorToolItemPrivate) < private >
  module GtkSeparatorToolItemWrappers
    # @return [Integer] 
    def get_draw()
      Gtk.gtk_separator_tool_item_get_draw(self)
    end
    
    # @param [Integer] draw 
    # @return [nil] 
    def set_draw(draw)
      Gtk.gtk_separator_tool_item_set_draw(self, draw)
    end
  end
  
  class GtkSeparatorToolItem < FFI::Struct
    include GtkSeparatorToolItemWrappers
    layout :parent, GtkToolItem.by_value,
           :priv, GtkSeparatorToolItemPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkToolItemClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSeparatorToolItemClass < FFI::Struct
    layout :parent_class, GtkToolItemClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_separator_tool_item_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_separator_tool_item_get_type, :gtk_separator_tool_item_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_separator_tool_item_new()
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_separator_tool_item_new, :gtk_separator_tool_item_new, [], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_separator_tool_item_get_draw(item)
  # @param [GtkSeparatorToolItem] item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_separator_tool_item_get_draw, :gtk_separator_tool_item_get_draw, [GtkSeparatorToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_separator_tool_item_set_draw(item, draw)
  # @param [GtkSeparatorToolItem] item 
  # @param [Integer] draw 
  # @return [nil] 
  # @scope class
  attach_function :gtk_separator_tool_item_set_draw, :gtk_separator_tool_item_set_draw, [GtkSeparatorToolItem, :int], :void
  
  # (Not documented)
  class GtkSettingsPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkSettingsPrivate) < private >
  module GtkSettingsWrappers
    # @param [String] name 
    # @param [FFI::Pointer(*GtkSettingsValue)] svalue 
    # @return [nil] 
    def set_property_value(name, svalue)
      Gtk.gtk_settings_set_property_value(self, name, svalue)
    end
    
    # @param [String] name 
    # @param [String] v_string 
    # @param [String] origin 
    # @return [nil] 
    def set_string_property(name, v_string, origin)
      Gtk.gtk_settings_set_string_property(self, name, v_string, origin)
    end
    
    # @param [String] name 
    # @param [Integer] v_long 
    # @param [String] origin 
    # @return [nil] 
    def set_long_property(name, v_long, origin)
      Gtk.gtk_settings_set_long_property(self, name, v_long, origin)
    end
    
    # @param [String] name 
    # @param [Float] v_double 
    # @param [String] origin 
    # @return [nil] 
    def set_double_property(name, v_double, origin)
      Gtk.gtk_settings_set_double_property(self, name, v_double, origin)
    end
  end
  
  class GtkSettings < FFI::Struct
    include GtkSettingsWrappers
    layout :parent_instance, :char,
           :priv, GtkSettingsPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSettingsClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :origin ::
  #   (String) origin should be something like "filename:linenumber" for rc files,
  #   or e.g. "XProperty" for other sources
  # :value ::
  #   (unknown) valid types are LONG, DOUBLE and STRING corresponding to the token parsed,
  #   or a GSTRING holding an unparsed statement
  class GtkSettingsValue < FFI::Struct
    layout :origin, :string,
           :value, :char
  end
  
  # (Not documented)
  # 
  # @method gtk_settings_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_settings_get_type, :gtk_settings_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_settings_get_default()
  # @return [GtkSettings] 
  # @scope class
  attach_function :gtk_settings_get_default, :gtk_settings_get_default, [], GtkSettings
  
  # (Not documented)
  # 
  # @method gtk_settings_get_for_screen(screen)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [GtkSettings] 
  # @scope class
  attach_function :gtk_settings_get_for_screen, :gtk_settings_get_for_screen, [:pointer], GtkSettings
  
  # (Not documented)
  # 
  # @method gtk_settings_install_property(pspec)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :gtk_settings_install_property, :gtk_settings_install_property, [:pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_settings_install_property_parser(pspec, parser)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [Proc(_callback_gtk_rc_property_parser_)] parser 
  # @return [nil] 
  # @scope class
  attach_function :gtk_settings_install_property_parser, :gtk_settings_install_property_parser, [:pointer, :gtk_rc_property_parser], :void
  
  # (Not documented)
  # 
  # @method gtk_rc_property_parse_color(pspec, gstring, property_value)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GString)] gstring 
  # @param [FFI::Pointer(*GValue)] property_value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_property_parse_color, :gtk_rc_property_parse_color, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_rc_property_parse_enum(pspec, gstring, property_value)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GString)] gstring 
  # @param [FFI::Pointer(*GValue)] property_value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_property_parse_enum, :gtk_rc_property_parse_enum, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_rc_property_parse_flags(pspec, gstring, property_value)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GString)] gstring 
  # @param [FFI::Pointer(*GValue)] property_value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_property_parse_flags, :gtk_rc_property_parse_flags, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_rc_property_parse_requisition(pspec, gstring, property_value)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GString)] gstring 
  # @param [FFI::Pointer(*GValue)] property_value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_property_parse_requisition, :gtk_rc_property_parse_requisition, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_rc_property_parse_border(pspec, gstring, property_value)
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @param [FFI::Pointer(*GString)] gstring 
  # @param [FFI::Pointer(*GValue)] property_value 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_property_parse_border, :gtk_rc_property_parse_border, [:pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_settings_set_property_value(settings, name, svalue)
  # @param [GtkSettings] settings 
  # @param [String] name 
  # @param [GtkSettingsValue] svalue 
  # @return [nil] 
  # @scope class
  attach_function :gtk_settings_set_property_value, :gtk_settings_set_property_value, [GtkSettings, :string, GtkSettingsValue], :void
  
  # (Not documented)
  # 
  # @method gtk_settings_set_string_property(settings, name, v_string, origin)
  # @param [GtkSettings] settings 
  # @param [String] name 
  # @param [String] v_string 
  # @param [String] origin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_settings_set_string_property, :gtk_settings_set_string_property, [GtkSettings, :string, :string, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_settings_set_long_property(settings, name, v_long, origin)
  # @param [GtkSettings] settings 
  # @param [String] name 
  # @param [Integer] v_long 
  # @param [String] origin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_settings_set_long_property, :gtk_settings_set_long_property, [GtkSettings, :string, :long, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_settings_set_double_property(settings, name, v_double, origin)
  # @param [GtkSettings] settings 
  # @param [String] name 
  # @param [Float] v_double 
  # @param [String] origin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_settings_set_double_property, :gtk_settings_set_double_property, [GtkSettings, :string, :double, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_show_uri(screen, uri, timestamp, error)
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @param [String] uri 
  # @param [Integer] timestamp 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_show_uri, :gtk_show_uri, [:pointer, :string, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # = Fields:
  # :data ::
  #   (FFI::Pointer(Gpointer)) 
  # :minimum_size ::
  #   (Integer) 
  # :natural_size ::
  #   (Integer) 
  class GtkRequestedSize < FFI::Struct
    layout :data, :pointer,
           :minimum_size, :int,
           :natural_size, :int
  end
  
  # (Not documented)
  # 
  # @method gtk_distribute_natural_allocation(extra_space, n_requested_sizes, sizes)
  # @param [Integer] extra_space 
  # @param [Integer] n_requested_sizes 
  # @param [GtkRequestedSize] sizes 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_distribute_natural_allocation, :gtk_distribute_natural_allocation, [:int, :uint, GtkRequestedSize], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_spin_button_update_policy).</em>
  # 
  # === Options:
  # :always ::
  #   
  # :if_valid ::
  #   
  # 
  # @method _enum_gtk_spin_button_update_policy_
  # @return [Symbol]
  # @scope class
  enum :gtk_spin_button_update_policy, [
    :always, 0,
    :if_valid, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_spin_type).</em>
  # 
  # === Options:
  # :step_forward ::
  #   
  # :step_backward ::
  #   
  # :page_forward ::
  #   
  # :page_backward ::
  #   
  # :home ::
  #   
  # :end_ ::
  #   
  # :user_defined ::
  #   
  # 
  # @method _enum_gtk_spin_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_spin_type, [
    :step_forward, 0,
    :step_backward, 1,
    :page_forward, 2,
    :page_backward, 3,
    :home, 4,
    :end_, 5,
    :user_defined, 6
  ]
  
  # (Not documented)
  class GtkSpinButtonPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :entry ::
  #   (GtkEntry) 
  # :priv ::
  #   (GtkSpinButtonPrivate) < private >
  module GtkSpinButtonWrappers
    # @param [GtkAdjustment] adjustment 
    # @param [Float] climb_rate 
    # @param [Integer] digits 
    # @return [nil] 
    def configure(adjustment, climb_rate, digits)
      Gtk.gtk_spin_button_configure(self, adjustment, climb_rate, digits)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_adjustment(adjustment)
      Gtk.gtk_spin_button_set_adjustment(self, adjustment)
    end
    
    # @return [GtkAdjustment] 
    def get_adjustment()
      GtkAdjustment.new Gtk.gtk_spin_button_get_adjustment(self)
    end
    
    # @param [Integer] digits 
    # @return [nil] 
    def set_digits(digits)
      Gtk.gtk_spin_button_set_digits(self, digits)
    end
    
    # @return [Integer] 
    def get_digits()
      Gtk.gtk_spin_button_get_digits(self)
    end
    
    # @param [Float] step 
    # @param [Float] page 
    # @return [nil] 
    def set_increments(step, page)
      Gtk.gtk_spin_button_set_increments(self, step, page)
    end
    
    # @param [FFI::Pointer(*Gdouble)] step 
    # @param [FFI::Pointer(*Gdouble)] page 
    # @return [nil] 
    def get_increments(step, page)
      Gtk.gtk_spin_button_get_increments(self, step, page)
    end
    
    # @param [Float] min 
    # @param [Float] max 
    # @return [nil] 
    def set_range(min, max)
      Gtk.gtk_spin_button_set_range(self, min, max)
    end
    
    # @param [FFI::Pointer(*Gdouble)] min 
    # @param [FFI::Pointer(*Gdouble)] max 
    # @return [nil] 
    def get_range(min, max)
      Gtk.gtk_spin_button_get_range(self, min, max)
    end
    
    # @return [Float] 
    def get_value()
      Gtk.gtk_spin_button_get_value(self)
    end
    
    # @return [Integer] 
    def get_value_as_int()
      Gtk.gtk_spin_button_get_value_as_int(self)
    end
    
    # @param [Float] value 
    # @return [nil] 
    def set_value(value)
      Gtk.gtk_spin_button_set_value(self, value)
    end
    
    # @param [Symbol from _enum_gtk_spin_button_update_policy_] policy 
    # @return [nil] 
    def set_update_policy(policy)
      Gtk.gtk_spin_button_set_update_policy(self, policy)
    end
    
    # @return [Symbol from _enum_gtk_spin_button_update_policy_] 
    def get_update_policy()
      Gtk.gtk_spin_button_get_update_policy(self)
    end
    
    # @param [Integer] numeric 
    # @return [nil] 
    def set_numeric(numeric)
      Gtk.gtk_spin_button_set_numeric(self, numeric)
    end
    
    # @return [Integer] 
    def get_numeric()
      Gtk.gtk_spin_button_get_numeric(self)
    end
    
    # @param [Symbol from _enum_gtk_spin_type_] direction 
    # @param [Float] increment 
    # @return [nil] 
    def spin(direction, increment)
      Gtk.gtk_spin_button_spin(self, direction, increment)
    end
    
    # @param [Integer] wrap 
    # @return [nil] 
    def set_wrap(wrap)
      Gtk.gtk_spin_button_set_wrap(self, wrap)
    end
    
    # @return [Integer] 
    def get_wrap()
      Gtk.gtk_spin_button_get_wrap(self)
    end
    
    # @param [Integer] snap_to_ticks 
    # @return [nil] 
    def set_snap_to_ticks(snap_to_ticks)
      Gtk.gtk_spin_button_set_snap_to_ticks(self, snap_to_ticks)
    end
    
    # @return [Integer] 
    def get_snap_to_ticks()
      Gtk.gtk_spin_button_get_snap_to_ticks(self)
    end
    
    # @return [nil] 
    def update()
      Gtk.gtk_spin_button_update(self)
    end
    
    # @param [FFI::Pointer(**GdkWindow)] down_panel 
    # @param [FFI::Pointer(**GdkWindow)] up_panel 
    # @return [nil] 
    def get_panels(down_panel, up_panel)
      Gtk.gtk_spin_button_get_panels(self, down_panel, up_panel)
    end
  end
  
  class GtkSpinButton < FFI::Struct
    include GtkSpinButtonWrappers
    layout :entry, GtkEntry.by_value,
           :priv, GtkSpinButtonPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkEntryClass) 
  # :input ::
  #   (FFI::Pointer(*)) 
  # :output ::
  #   (FFI::Pointer(*)) 
  # :value_changed ::
  #   (FFI::Pointer(*)) 
  # :change_value ::
  #   (FFI::Pointer(*)) Action signals for keybindings, do not connect to these
  # :wrapped ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSpinButtonClass < FFI::Struct
    layout :parent_class, GtkEntryClass.by_value,
           :input, :pointer,
           :output, :pointer,
           :value_changed, :pointer,
           :change_value, :pointer,
           :wrapped, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_get_type, :gtk_spin_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_spin_button_configure(spin_button, adjustment, climb_rate, digits)
  # @param [GtkSpinButton] spin_button 
  # @param [GtkAdjustment] adjustment 
  # @param [Float] climb_rate 
  # @param [Integer] digits 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_configure, :gtk_spin_button_configure, [GtkSpinButton, GtkAdjustment, :double, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_new(adjustment, climb_rate, digits)
  # @param [GtkAdjustment] adjustment 
  # @param [Float] climb_rate 
  # @param [Integer] digits 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_spin_button_new, :gtk_spin_button_new, [GtkAdjustment, :double, :uint], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_spin_button_new_with_range(min, max, step)
  # @param [Float] min 
  # @param [Float] max 
  # @param [Float] step 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_spin_button_new_with_range, :gtk_spin_button_new_with_range, [:double, :double, :double], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_adjustment(spin_button, adjustment)
  # @param [GtkSpinButton] spin_button 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_adjustment, :gtk_spin_button_set_adjustment, [GtkSpinButton, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_adjustment(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_spin_button_get_adjustment, :gtk_spin_button_get_adjustment, [GtkSpinButton], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_digits(spin_button, digits)
  # @param [GtkSpinButton] spin_button 
  # @param [Integer] digits 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_digits, :gtk_spin_button_set_digits, [GtkSpinButton, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_digits(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_get_digits, :gtk_spin_button_get_digits, [GtkSpinButton], :uint
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_increments(spin_button, step, page)
  # @param [GtkSpinButton] spin_button 
  # @param [Float] step 
  # @param [Float] page 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_increments, :gtk_spin_button_set_increments, [GtkSpinButton, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_increments(spin_button, step, page)
  # @param [GtkSpinButton] spin_button 
  # @param [FFI::Pointer(*Gdouble)] step 
  # @param [FFI::Pointer(*Gdouble)] page 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_get_increments, :gtk_spin_button_get_increments, [GtkSpinButton, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_range(spin_button, min, max)
  # @param [GtkSpinButton] spin_button 
  # @param [Float] min 
  # @param [Float] max 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_range, :gtk_spin_button_set_range, [GtkSpinButton, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_range(spin_button, min, max)
  # @param [GtkSpinButton] spin_button 
  # @param [FFI::Pointer(*Gdouble)] min 
  # @param [FFI::Pointer(*Gdouble)] max 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_get_range, :gtk_spin_button_get_range, [GtkSpinButton, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_value(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Float] 
  # @scope class
  attach_function :gtk_spin_button_get_value, :gtk_spin_button_get_value, [GtkSpinButton], :double
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_value_as_int(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_get_value_as_int, :gtk_spin_button_get_value_as_int, [GtkSpinButton], :int
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_value(spin_button, value)
  # @param [GtkSpinButton] spin_button 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_value, :gtk_spin_button_set_value, [GtkSpinButton, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_update_policy(spin_button, policy)
  # @param [GtkSpinButton] spin_button 
  # @param [Symbol from _enum_gtk_spin_button_update_policy_] policy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_update_policy, :gtk_spin_button_set_update_policy, [GtkSpinButton, :gtk_spin_button_update_policy], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_update_policy(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Symbol from _enum_gtk_spin_button_update_policy_] 
  # @scope class
  attach_function :gtk_spin_button_get_update_policy, :gtk_spin_button_get_update_policy, [GtkSpinButton], :gtk_spin_button_update_policy
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_numeric(spin_button, numeric)
  # @param [GtkSpinButton] spin_button 
  # @param [Integer] numeric 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_numeric, :gtk_spin_button_set_numeric, [GtkSpinButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_numeric(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_get_numeric, :gtk_spin_button_get_numeric, [GtkSpinButton], :int
  
  # (Not documented)
  # 
  # @method gtk_spin_button_spin(spin_button, direction, increment)
  # @param [GtkSpinButton] spin_button 
  # @param [Symbol from _enum_gtk_spin_type_] direction 
  # @param [Float] increment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_spin, :gtk_spin_button_spin, [GtkSpinButton, :gtk_spin_type, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_wrap(spin_button, wrap)
  # @param [GtkSpinButton] spin_button 
  # @param [Integer] wrap 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_wrap, :gtk_spin_button_set_wrap, [GtkSpinButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_wrap(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_get_wrap, :gtk_spin_button_get_wrap, [GtkSpinButton], :int
  
  # (Not documented)
  # 
  # @method gtk_spin_button_set_snap_to_ticks(spin_button, snap_to_ticks)
  # @param [GtkSpinButton] spin_button 
  # @param [Integer] snap_to_ticks 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_set_snap_to_ticks, :gtk_spin_button_set_snap_to_ticks, [GtkSpinButton, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_snap_to_ticks(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_get_snap_to_ticks, :gtk_spin_button_get_snap_to_ticks, [GtkSpinButton], :int
  
  # (Not documented)
  # 
  # @method gtk_spin_button_update(spin_button)
  # @param [GtkSpinButton] spin_button 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_update, :gtk_spin_button_update, [GtkSpinButton], :void
  
  # (Not documented)
  # 
  # @method gtk_spin_button_get_panels(spin_button, down_panel, up_panel)
  # @param [GtkSpinButton] spin_button 
  # @param [FFI::Pointer(**GdkWindow)] down_panel 
  # @param [FFI::Pointer(**GdkWindow)] up_panel 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spin_button_get_panels, :_gtk_spin_button_get_panels, [GtkSpinButton, :pointer, :pointer], :void
  
  # (Not documented)
  class GtkSpinnerPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkWidget) 
  # :priv ::
  #   (GtkSpinnerPrivate) < private >
  module GtkSpinnerWrappers
    # @return [nil] 
    def start()
      Gtk.gtk_spinner_start(self)
    end
    
    # @return [nil] 
    def stop()
      Gtk.gtk_spinner_stop(self)
    end
  end
  
  class GtkSpinner < FFI::Struct
    include GtkSpinnerWrappers
    layout :parent, GtkWidget.by_value,
           :priv, GtkSpinnerPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkSpinnerClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_spinner_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spinner_get_type, :gtk_spinner_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_spinner_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_spinner_new, :gtk_spinner_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_spinner_start(spinner)
  # @param [GtkSpinner] spinner 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spinner_start, :gtk_spinner_start, [GtkSpinner], :void
  
  # (Not documented)
  # 
  # @method gtk_spinner_stop(spinner)
  # @param [GtkSpinner] spinner 
  # @return [nil] 
  # @scope class
  attach_function :gtk_spinner_stop, :gtk_spinner_stop, [GtkSpinner], :void
  
  # (Not documented)
  class GtkStatusbarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_widget ::
  #   (GtkBox) 
  # :priv ::
  #   (GtkStatusbarPrivate) < private >
  module GtkStatusbarWrappers
    # @param [String] context_description 
    # @return [Integer] 
    def get_context_id(context_description)
      Gtk.gtk_statusbar_get_context_id(self, context_description)
    end
    
    # @param [Integer] context_id 
    # @param [String] text 
    # @return [Integer] 
    def push(context_id, text)
      Gtk.gtk_statusbar_push(self, context_id, text)
    end
    
    # @param [Integer] context_id 
    # @return [nil] 
    def pop(context_id)
      Gtk.gtk_statusbar_pop(self, context_id)
    end
    
    # @param [Integer] context_id 
    # @param [Integer] message_id 
    # @return [nil] 
    def remove(context_id, message_id)
      Gtk.gtk_statusbar_remove(self, context_id, message_id)
    end
    
    # @param [Integer] context_id 
    # @return [nil] 
    def remove_all(context_id)
      Gtk.gtk_statusbar_remove_all(self, context_id)
    end
    
    # @return [GtkWidget] 
    def get_message_area()
      GtkWidget.new Gtk.gtk_statusbar_get_message_area(self)
    end
  end
  
  class GtkStatusbar < FFI::Struct
    include GtkStatusbarWrappers
    layout :parent_widget, GtkBox.by_value,
           :priv, GtkStatusbarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBoxClass) 
  # :reserved ::
  #   (FFI::Pointer(Gpointer)) 
  # :text_pushed ::
  #   (FFI::Pointer(*)) 
  # :text_popped ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkStatusbarClass < FFI::Struct
    layout :parent_class, GtkBoxClass.by_value,
           :reserved, :pointer,
           :text_pushed, :pointer,
           :text_popped, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_statusbar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_statusbar_get_type, :gtk_statusbar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_statusbar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_statusbar_new, :gtk_statusbar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_statusbar_get_context_id(statusbar, context_description)
  # @param [GtkStatusbar] statusbar 
  # @param [String] context_description 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_statusbar_get_context_id, :gtk_statusbar_get_context_id, [GtkStatusbar, :string], :uint
  
  # (Not documented)
  # 
  # @method gtk_statusbar_push(statusbar, context_id, text)
  # @param [GtkStatusbar] statusbar 
  # @param [Integer] context_id 
  # @param [String] text 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_statusbar_push, :gtk_statusbar_push, [GtkStatusbar, :uint, :string], :uint
  
  # (Not documented)
  # 
  # @method gtk_statusbar_pop(statusbar, context_id)
  # @param [GtkStatusbar] statusbar 
  # @param [Integer] context_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_statusbar_pop, :gtk_statusbar_pop, [GtkStatusbar, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_statusbar_remove(statusbar, context_id, message_id)
  # @param [GtkStatusbar] statusbar 
  # @param [Integer] context_id 
  # @param [Integer] message_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_statusbar_remove, :gtk_statusbar_remove, [GtkStatusbar, :uint, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_statusbar_remove_all(statusbar, context_id)
  # @param [GtkStatusbar] statusbar 
  # @param [Integer] context_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_statusbar_remove_all, :gtk_statusbar_remove_all, [GtkStatusbar, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_statusbar_get_message_area(statusbar)
  # @param [GtkStatusbar] statusbar 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_statusbar_get_message_area, :gtk_statusbar_get_message_area, [GtkStatusbar], GtkWidget
  
  # (Not documented)
  class GtkStatusIconPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkStatusIconPrivate) 
  module GtkStatusIconWrappers
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def set_from_pixbuf(pixbuf)
      Gtk.gtk_status_icon_set_from_pixbuf(self, pixbuf)
    end
    
    # @param [String] filename 
    # @return [nil] 
    def set_from_file(filename)
      Gtk.gtk_status_icon_set_from_file(self, filename)
    end
    
    # @param [String] stock_id 
    # @return [nil] 
    def set_from_stock(stock_id)
      Gtk.gtk_status_icon_set_from_stock(self, stock_id)
    end
    
    # @param [String] icon_name 
    # @return [nil] 
    def set_from_icon_name(icon_name)
      Gtk.gtk_status_icon_set_from_icon_name(self, icon_name)
    end
    
    # @param [FFI::Pointer(*GIcon)] icon 
    # @return [nil] 
    def set_from_gicon(icon)
      Gtk.gtk_status_icon_set_from_gicon(self, icon)
    end
    
    # @return [Symbol from _enum_gtk_image_type_] 
    def get_storage_type()
      Gtk.gtk_status_icon_get_storage_type(self)
    end
    
    # @return [FFI::Pointer(*GdkPixbuf)] 
    def get_pixbuf()
      Gtk.gtk_status_icon_get_pixbuf(self)
    end
    
    # @return [String] 
    def get_stock()
      Gtk.gtk_status_icon_get_stock(self)
    end
    
    # @return [String] 
    def get_icon_name()
      Gtk.gtk_status_icon_get_icon_name(self)
    end
    
    # @return [FFI::Pointer(*GIcon)] 
    def get_gicon()
      Gtk.gtk_status_icon_get_gicon(self)
    end
    
    # @return [Integer] 
    def get_size()
      Gtk.gtk_status_icon_get_size(self)
    end
    
    # @param [FFI::Pointer(*GdkScreen)] screen 
    # @return [nil] 
    def set_screen(screen)
      Gtk.gtk_status_icon_set_screen(self, screen)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_status_icon_get_screen(self)
    end
    
    # @param [Integer] has_tooltip 
    # @return [nil] 
    def set_has_tooltip(has_tooltip)
      Gtk.gtk_status_icon_set_has_tooltip(self, has_tooltip)
    end
    
    # @param [String] text 
    # @return [nil] 
    def set_tooltip_text(text)
      Gtk.gtk_status_icon_set_tooltip_text(self, text)
    end
    
    # @param [String] markup 
    # @return [nil] 
    def set_tooltip_markup(markup)
      Gtk.gtk_status_icon_set_tooltip_markup(self, markup)
    end
    
    # @param [String] title 
    # @return [nil] 
    def set_title(title)
      Gtk.gtk_status_icon_set_title(self, title)
    end
    
    # @return [String] 
    def get_title()
      Gtk.gtk_status_icon_get_title(self)
    end
    
    # @param [String] name 
    # @return [nil] 
    def set_name(name)
      Gtk.gtk_status_icon_set_name(self, name)
    end
    
    # @param [Integer] visible 
    # @return [nil] 
    def set_visible(visible)
      Gtk.gtk_status_icon_set_visible(self, visible)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_status_icon_get_visible(self)
    end
    
    # @return [Integer] 
    def is_embedded()
      Gtk.gtk_status_icon_is_embedded(self)
    end
    
    # @param [FFI::Pointer(**GdkScreen)] screen 
    # @param [FFI::Pointer(*GdkRectangle)] area 
    # @param [FFI::Pointer(*GtkOrientation)] orientation 
    # @return [Integer] 
    def get_geometry(screen, area, orientation)
      Gtk.gtk_status_icon_get_geometry(self, screen, area, orientation)
    end
    
    # @return [Integer] 
    def get_has_tooltip()
      Gtk.gtk_status_icon_get_has_tooltip(self)
    end
    
    # @return [String] 
    def get_tooltip_text()
      Gtk.gtk_status_icon_get_tooltip_text(self)
    end
    
    # @return [String] 
    def get_tooltip_markup()
      Gtk.gtk_status_icon_get_tooltip_markup(self)
    end
    
    # @return [Integer] 
    def get_x11_window_id()
      Gtk.gtk_status_icon_get_x11_window_id(self)
    end
  end
  
  class GtkStatusIcon < FFI::Struct
    include GtkStatusIconWrappers
    layout :parent_instance, :char,
           :priv, GtkStatusIconPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :activate ::
  #   (FFI::Pointer(*)) 
  # :popup_menu ::
  #   (FFI::Pointer(*)) 
  # :size_changed ::
  #   (FFI::Pointer(*)) 
  # :button_press_event ::
  #   (FFI::Pointer(*)) 
  # :button_release_event ::
  #   (FFI::Pointer(*)) 
  # :scroll_event ::
  #   (FFI::Pointer(*)) 
  # :query_tooltip ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkStatusIconClass < FFI::Struct
    layout :parent_class, :char,
           :activate, :pointer,
           :popup_menu, :pointer,
           :size_changed, :pointer,
           :button_press_event, :pointer,
           :button_release_event, :pointer,
           :scroll_event, :pointer,
           :query_tooltip, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_get_type, :gtk_status_icon_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_status_icon_new()
  # @return [GtkStatusIcon] 
  # @scope class
  attach_function :gtk_status_icon_new, :gtk_status_icon_new, [], GtkStatusIcon
  
  # (Not documented)
  # 
  # @method gtk_status_icon_new_from_pixbuf(pixbuf)
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [GtkStatusIcon] 
  # @scope class
  attach_function :gtk_status_icon_new_from_pixbuf, :gtk_status_icon_new_from_pixbuf, [:pointer], GtkStatusIcon
  
  # (Not documented)
  # 
  # @method gtk_status_icon_new_from_file(filename)
  # @param [String] filename 
  # @return [GtkStatusIcon] 
  # @scope class
  attach_function :gtk_status_icon_new_from_file, :gtk_status_icon_new_from_file, [:string], GtkStatusIcon
  
  # (Not documented)
  # 
  # @method gtk_status_icon_new_from_stock(stock_id)
  # @param [String] stock_id 
  # @return [GtkStatusIcon] 
  # @scope class
  attach_function :gtk_status_icon_new_from_stock, :gtk_status_icon_new_from_stock, [:string], GtkStatusIcon
  
  # (Not documented)
  # 
  # @method gtk_status_icon_new_from_icon_name(icon_name)
  # @param [String] icon_name 
  # @return [GtkStatusIcon] 
  # @scope class
  attach_function :gtk_status_icon_new_from_icon_name, :gtk_status_icon_new_from_icon_name, [:string], GtkStatusIcon
  
  # (Not documented)
  # 
  # @method gtk_status_icon_new_from_gicon(icon)
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [GtkStatusIcon] 
  # @scope class
  attach_function :gtk_status_icon_new_from_gicon, :gtk_status_icon_new_from_gicon, [:pointer], GtkStatusIcon
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_from_pixbuf(status_icon, pixbuf)
  # @param [GtkStatusIcon] status_icon 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_from_pixbuf, :gtk_status_icon_set_from_pixbuf, [GtkStatusIcon, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_from_file(status_icon, filename)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] filename 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_from_file, :gtk_status_icon_set_from_file, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_from_stock(status_icon, stock_id)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] stock_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_from_stock, :gtk_status_icon_set_from_stock, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_from_icon_name(status_icon, icon_name)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] icon_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_from_icon_name, :gtk_status_icon_set_from_icon_name, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_from_gicon(status_icon, icon)
  # @param [GtkStatusIcon] status_icon 
  # @param [FFI::Pointer(*GIcon)] icon 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_from_gicon, :gtk_status_icon_set_from_gicon, [GtkStatusIcon, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_storage_type(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [Symbol from _enum_gtk_image_type_] 
  # @scope class
  attach_function :gtk_status_icon_get_storage_type, :gtk_status_icon_get_storage_type, [GtkStatusIcon], :gtk_image_type
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_pixbuf(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [FFI::Pointer(*GdkPixbuf)] 
  # @scope class
  attach_function :gtk_status_icon_get_pixbuf, :gtk_status_icon_get_pixbuf, [GtkStatusIcon], :pointer
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_stock(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [String] 
  # @scope class
  attach_function :gtk_status_icon_get_stock, :gtk_status_icon_get_stock, [GtkStatusIcon], :string
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_icon_name(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [String] 
  # @scope class
  attach_function :gtk_status_icon_get_icon_name, :gtk_status_icon_get_icon_name, [GtkStatusIcon], :string
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_gicon(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [FFI::Pointer(*GIcon)] 
  # @scope class
  attach_function :gtk_status_icon_get_gicon, :gtk_status_icon_get_gicon, [GtkStatusIcon], :pointer
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_size(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_get_size, :gtk_status_icon_get_size, [GtkStatusIcon], :int
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_screen(status_icon, screen)
  # @param [GtkStatusIcon] status_icon 
  # @param [FFI::Pointer(*GdkScreen)] screen 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_screen, :gtk_status_icon_set_screen, [GtkStatusIcon, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_screen(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_status_icon_get_screen, :gtk_status_icon_get_screen, [GtkStatusIcon], :pointer
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_has_tooltip(status_icon, has_tooltip)
  # @param [GtkStatusIcon] status_icon 
  # @param [Integer] has_tooltip 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_has_tooltip, :gtk_status_icon_set_has_tooltip, [GtkStatusIcon, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_tooltip_text(status_icon, text)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] text 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_tooltip_text, :gtk_status_icon_set_tooltip_text, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_tooltip_markup(status_icon, markup)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] markup 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_tooltip_markup, :gtk_status_icon_set_tooltip_markup, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_title(status_icon, title)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_title, :gtk_status_icon_set_title, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_title(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [String] 
  # @scope class
  attach_function :gtk_status_icon_get_title, :gtk_status_icon_get_title, [GtkStatusIcon], :string
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_name(status_icon, name)
  # @param [GtkStatusIcon] status_icon 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_name, :gtk_status_icon_set_name, [GtkStatusIcon, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_set_visible(status_icon, visible)
  # @param [GtkStatusIcon] status_icon 
  # @param [Integer] visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_set_visible, :gtk_status_icon_set_visible, [GtkStatusIcon, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_visible(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_get_visible, :gtk_status_icon_get_visible, [GtkStatusIcon], :int
  
  # (Not documented)
  # 
  # @method gtk_status_icon_is_embedded(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_is_embedded, :gtk_status_icon_is_embedded, [GtkStatusIcon], :int
  
  # (Not documented)
  # 
  # @method gtk_status_icon_position_menu(menu, x, y, push_in, user_data)
  # @param [GtkMenu] menu 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] y 
  # @param [FFI::Pointer(*Gboolean)] push_in 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_status_icon_position_menu, :gtk_status_icon_position_menu, [GtkMenu, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_geometry(status_icon, screen, area, orientation)
  # @param [GtkStatusIcon] status_icon 
  # @param [FFI::Pointer(**GdkScreen)] screen 
  # @param [FFI::Pointer(*GdkRectangle)] area 
  # @param [FFI::Pointer(*GtkOrientation)] orientation 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_get_geometry, :gtk_status_icon_get_geometry, [GtkStatusIcon, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_has_tooltip(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_get_has_tooltip, :gtk_status_icon_get_has_tooltip, [GtkStatusIcon], :int
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_tooltip_text(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [String] 
  # @scope class
  attach_function :gtk_status_icon_get_tooltip_text, :gtk_status_icon_get_tooltip_text, [GtkStatusIcon], :string
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_tooltip_markup(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [String] 
  # @scope class
  attach_function :gtk_status_icon_get_tooltip_markup, :gtk_status_icon_get_tooltip_markup, [GtkStatusIcon], :string
  
  # (Not documented)
  # 
  # @method gtk_status_icon_get_x11_window_id(status_icon)
  # @param [GtkStatusIcon] status_icon 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_status_icon_get_x11_window_id, :gtk_status_icon_get_x11_window_id, [GtkStatusIcon], :uint
  
  # (Not documented)
  class GtkSwitchPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkWidget) < private >
  # :priv ::
  #   (GtkSwitchPrivate) 
  module GtkSwitchWrappers
    # @param [Integer] is_active 
    # @return [nil] 
    def set_active(is_active)
      Gtk.gtk_switch_set_active(self, is_active)
    end
    
    # @return [Integer] 
    def get_active()
      Gtk.gtk_switch_get_active(self)
    end
  end
  
  class GtkSwitch < FFI::Struct
    include GtkSwitchWrappers
    layout :parent_instance, GtkWidget.by_value,
           :priv, GtkSwitchPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkWidgetClass) < private >
  # :activate ::
  #   (FFI::Pointer(*)) 
  # :switch_padding_1 ::
  #   (FFI::Pointer(*)) 
  # :switch_padding_2 ::
  #   (FFI::Pointer(*)) 
  # :switch_padding_3 ::
  #   (FFI::Pointer(*)) 
  # :switch_padding_4 ::
  #   (FFI::Pointer(*)) 
  # :switch_padding_5 ::
  #   (FFI::Pointer(*)) 
  # :switch_padding_6 ::
  #   (FFI::Pointer(*)) 
  class GtkSwitchClass < FFI::Struct
    layout :parent_class, GtkWidgetClass.by_value,
           :activate, :pointer,
           :switch_padding_1, :pointer,
           :switch_padding_2, :pointer,
           :switch_padding_3, :pointer,
           :switch_padding_4, :pointer,
           :switch_padding_5, :pointer,
           :switch_padding_6, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_switch_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_switch_get_type, :gtk_switch_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_switch_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_switch_new, :gtk_switch_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_switch_set_active(sw, is_active)
  # @param [GtkSwitch] sw 
  # @param [Integer] is_active 
  # @return [nil] 
  # @scope class
  attach_function :gtk_switch_set_active, :gtk_switch_set_active, [GtkSwitch, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_switch_get_active(sw)
  # @param [GtkSwitch] sw 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_switch_get_active, :gtk_switch_get_active, [GtkSwitch], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_text_tag_table_foreach_(data)
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkTextTag] 
  # @scope class
  callback :gtk_text_tag_table_foreach, [:pointer], GtkTextTag
  
  # (Not documented)
  class GtkTextTagTablePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkTextTagTablePrivate) 
  module GtkTextTagTableWrappers
    # @param [GtkTextTag] tag 
    # @return [nil] 
    def add(tag)
      Gtk.gtk_text_tag_table_add(self, tag)
    end
    
    # @param [GtkTextTag] tag 
    # @return [nil] 
    def remove(tag)
      Gtk.gtk_text_tag_table_remove(self, tag)
    end
    
    # @param [String] name 
    # @return [GtkTextTag] 
    def lookup(name)
      GtkTextTag.new Gtk.gtk_text_tag_table_lookup(self, name)
    end
    
    # @param [Proc(_callback_gtk_text_tag_table_foreach_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def foreach(func, data)
      Gtk.gtk_text_tag_table_foreach(self, func, data)
    end
    
    # @return [Integer] 
    def get_size()
      Gtk.gtk_text_tag_table_get_size(self)
    end
    
    # @param [FFI::Pointer(Gpointer)] buffer 
    # @return [nil] 
    def add_buffer(buffer)
      Gtk.gtk_text_tag_table_add_buffer(self, buffer)
    end
    
    # @param [FFI::Pointer(Gpointer)] buffer 
    # @return [nil] 
    def remove_buffer(buffer)
      Gtk.gtk_text_tag_table_remove_buffer(self, buffer)
    end
  end
  
  class GtkTextTagTable < FFI::Struct
    include GtkTextTagTableWrappers
    layout :parent_instance, :char,
           :priv, GtkTextTagTablePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :tag_changed ::
  #   (FFI::Pointer(*)) 
  # :tag_added ::
  #   (FFI::Pointer(*)) 
  # :tag_removed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTextTagTableClass < FFI::Struct
    layout :parent_class, :char,
           :tag_changed, :pointer,
           :tag_added, :pointer,
           :tag_removed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_tag_table_get_type, :gtk_text_tag_table_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_new()
  # @return [GtkTextTagTable] 
  # @scope class
  attach_function :gtk_text_tag_table_new, :gtk_text_tag_table_new, [], GtkTextTagTable
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_add(table, tag)
  # @param [GtkTextTagTable] table 
  # @param [GtkTextTag] tag 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_tag_table_add, :gtk_text_tag_table_add, [GtkTextTagTable, GtkTextTag], :void
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_remove(table, tag)
  # @param [GtkTextTagTable] table 
  # @param [GtkTextTag] tag 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_tag_table_remove, :gtk_text_tag_table_remove, [GtkTextTagTable, GtkTextTag], :void
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_lookup(table, name)
  # @param [GtkTextTagTable] table 
  # @param [String] name 
  # @return [GtkTextTag] 
  # @scope class
  attach_function :gtk_text_tag_table_lookup, :gtk_text_tag_table_lookup, [GtkTextTagTable, :string], GtkTextTag
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_foreach(table, func, data)
  # @param [GtkTextTagTable] table 
  # @param [Proc(_callback_gtk_text_tag_table_foreach_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_tag_table_foreach, :gtk_text_tag_table_foreach, [GtkTextTagTable, :gtk_text_tag_table_foreach, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_get_size(table)
  # @param [GtkTextTagTable] table 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_tag_table_get_size, :gtk_text_tag_table_get_size, [GtkTextTagTable], :int
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_add_buffer(table, buffer)
  # @param [GtkTextTagTable] table 
  # @param [FFI::Pointer(Gpointer)] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_tag_table_add_buffer, :_gtk_text_tag_table_add_buffer, [GtkTextTagTable, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_tag_table_remove_buffer(table, buffer)
  # @param [GtkTextTagTable] table 
  # @param [FFI::Pointer(Gpointer)] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_tag_table_remove_buffer, :_gtk_text_tag_table_remove_buffer, [GtkTextTagTable, :pointer], :void
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :segment ::
  #   (FFI::Pointer(Gpointer)) < private >
  module GtkTextMarkWrappers
    # @param [Integer] setting 
    # @return [nil] 
    def set_visible(setting)
      Gtk.gtk_text_mark_set_visible(self, setting)
    end
    
    # @return [Integer] 
    def get_visible()
      Gtk.gtk_text_mark_get_visible(self)
    end
    
    # @return [String] 
    def get_name()
      Gtk.gtk_text_mark_get_name(self)
    end
    
    # @return [Integer] 
    def get_deleted()
      Gtk.gtk_text_mark_get_deleted(self)
    end
    
    # @return [GtkTextBuffer] 
    def get_buffer()
      GtkTextBuffer.new Gtk.gtk_text_mark_get_buffer(self)
    end
    
    # @return [Integer] 
    def get_left_gravity()
      Gtk.gtk_text_mark_get_left_gravity(self)
    end
  end
  
  class GtkTextMark < FFI::Struct
    include GtkTextMarkWrappers
    layout :parent_instance, :char,
           :segment, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTextMarkClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_mark_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_mark_get_type, :gtk_text_mark_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_mark_new(name, left_gravity)
  # @param [String] name 
  # @param [Integer] left_gravity 
  # @return [GtkTextMark] 
  # @scope class
  attach_function :gtk_text_mark_new, :gtk_text_mark_new, [:string, :int], GtkTextMark
  
  # (Not documented)
  # 
  # @method gtk_text_mark_set_visible(mark, setting)
  # @param [GtkTextMark] mark 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_mark_set_visible, :gtk_text_mark_set_visible, [GtkTextMark, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_mark_get_visible(mark)
  # @param [GtkTextMark] mark 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_mark_get_visible, :gtk_text_mark_get_visible, [GtkTextMark], :int
  
  # (Not documented)
  # 
  # @method gtk_text_mark_get_name(mark)
  # @param [GtkTextMark] mark 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_mark_get_name, :gtk_text_mark_get_name, [GtkTextMark], :string
  
  # (Not documented)
  # 
  # @method gtk_text_mark_get_deleted(mark)
  # @param [GtkTextMark] mark 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_mark_get_deleted, :gtk_text_mark_get_deleted, [GtkTextMark], :int
  
  # (Not documented)
  # 
  # @method gtk_text_mark_get_buffer(mark)
  # @param [GtkTextMark] mark 
  # @return [FFI::Pointer(*GtkTextBuffer)] 
  # @scope class
  attach_function :gtk_text_mark_get_buffer, :gtk_text_mark_get_buffer, [GtkTextMark], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_mark_get_left_gravity(mark)
  # @param [GtkTextMark] mark 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_mark_get_left_gravity, :gtk_text_mark_get_left_gravity, [GtkTextMark], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_text_buffer_target_info).</em>
  # 
  # === Options:
  # :buffer_contents ::
  #   
  # :rich_text ::
  #   
  # :text ::
  #   
  # 
  # @method _enum_gtk_text_buffer_target_info_
  # @return [Symbol]
  # @scope class
  enum :gtk_text_buffer_target_info, [
    :buffer_contents, -1,
    :rich_text, -2,
    :text, -3
  ]
  
  # (Not documented)
  class GtkTextBTree < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkTextBufferPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :priv ::
  #   (GtkTextBufferPrivate) 
  module GtkTextBufferWrappers
    # @return [Integer] 
    def get_line_count()
      Gtk.gtk_text_buffer_get_line_count(self)
    end
    
    # @return [Integer] 
    def get_char_count()
      Gtk.gtk_text_buffer_get_char_count(self)
    end
    
    # @return [GtkTextTagTable] 
    def get_tag_table()
      GtkTextTagTable.new Gtk.gtk_text_buffer_get_tag_table(self)
    end
    
    # @param [String] text 
    # @param [Integer] len 
    # @return [nil] 
    def set_text(text, len)
      Gtk.gtk_text_buffer_set_text(self, text, len)
    end
    
    # @param [GtkTextIter] iter 
    # @param [String] text 
    # @param [Integer] len 
    # @return [nil] 
    def insert(iter, text, len)
      Gtk.gtk_text_buffer_insert(self, iter, text, len)
    end
    
    # @param [String] text 
    # @param [Integer] len 
    # @return [nil] 
    def insert_at_cursor(text, len)
      Gtk.gtk_text_buffer_insert_at_cursor(self, text, len)
    end
    
    # @param [GtkTextIter] iter 
    # @param [String] text 
    # @param [Integer] len 
    # @param [Integer] default_editable 
    # @return [Integer] 
    def insert_interactive(iter, text, len, default_editable)
      Gtk.gtk_text_buffer_insert_interactive(self, iter, text, len, default_editable)
    end
    
    # @param [String] text 
    # @param [Integer] len 
    # @param [Integer] default_editable 
    # @return [Integer] 
    def insert_interactive_at_cursor(text, len, default_editable)
      Gtk.gtk_text_buffer_insert_interactive_at_cursor(self, text, len, default_editable)
    end
    
    # @param [GtkTextIter] iter 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def insert_range(iter, start, end_)
      Gtk.gtk_text_buffer_insert_range(self, iter, start, end_)
    end
    
    # @param [GtkTextIter] iter 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @param [Integer] default_editable 
    # @return [Integer] 
    def insert_range_interactive(iter, start, end_, default_editable)
      Gtk.gtk_text_buffer_insert_range_interactive(self, iter, start, end_, default_editable)
    end
    
    # @param [GtkTextIter] iter 
    # @param [String] text 
    # @param [Integer] len 
    # @param [GtkTextTag] first_tag 
    # @return [nil] 
    def insert_with_tags(iter, text, len, first_tag)
      Gtk.gtk_text_buffer_insert_with_tags(self, iter, text, len, first_tag)
    end
    
    # @param [GtkTextIter] iter 
    # @param [String] text 
    # @param [Integer] len 
    # @param [String] first_tag_name 
    # @return [nil] 
    def insert_with_tags_by_name(iter, text, len, first_tag_name)
      Gtk.gtk_text_buffer_insert_with_tags_by_name(self, iter, text, len, first_tag_name)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def delete(start, end_)
      Gtk.gtk_text_buffer_delete(self, start, end_)
    end
    
    # @param [GtkTextIter] start_iter 
    # @param [GtkTextIter] end_iter 
    # @param [Integer] default_editable 
    # @return [Integer] 
    def delete_interactive(start_iter, end_iter, default_editable)
      Gtk.gtk_text_buffer_delete_interactive(self, start_iter, end_iter, default_editable)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] interactive 
    # @param [Integer] default_editable 
    # @return [Integer] 
    def backspace(iter, interactive, default_editable)
      Gtk.gtk_text_buffer_backspace(self, iter, interactive, default_editable)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @param [Integer] include_hidden_chars 
    # @return [String] 
    def get_text(start, end_, include_hidden_chars)
      Gtk.gtk_text_buffer_get_text(self, start, end_, include_hidden_chars)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @param [Integer] include_hidden_chars 
    # @return [String] 
    def get_slice(start, end_, include_hidden_chars)
      Gtk.gtk_text_buffer_get_slice(self, start, end_, include_hidden_chars)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
    # @return [nil] 
    def insert_pixbuf(iter, pixbuf)
      Gtk.gtk_text_buffer_insert_pixbuf(self, iter, pixbuf)
    end
    
    # @param [GtkTextIter] iter 
    # @param [GtkTextChildAnchor] anchor 
    # @return [nil] 
    def insert_child_anchor(iter, anchor)
      Gtk.gtk_text_buffer_insert_child_anchor(self, iter, anchor)
    end
    
    # @param [GtkTextIter] iter 
    # @return [GtkTextChildAnchor] 
    def create_child_anchor(iter)
      GtkTextChildAnchor.new Gtk.gtk_text_buffer_create_child_anchor(self, iter)
    end
    
    # @param [GtkTextMark] mark 
    # @param [GtkTextIter] where 
    # @return [nil] 
    def add_mark(mark, where)
      Gtk.gtk_text_buffer_add_mark(self, mark, where)
    end
    
    # @param [String] mark_name 
    # @param [GtkTextIter] where 
    # @param [Integer] left_gravity 
    # @return [GtkTextMark] 
    def create_mark(mark_name, where, left_gravity)
      GtkTextMark.new Gtk.gtk_text_buffer_create_mark(self, mark_name, where, left_gravity)
    end
    
    # @param [GtkTextMark] mark 
    # @param [GtkTextIter] where 
    # @return [nil] 
    def move_mark(mark, where)
      Gtk.gtk_text_buffer_move_mark(self, mark, where)
    end
    
    # @param [GtkTextMark] mark 
    # @return [nil] 
    def delete_mark(mark)
      Gtk.gtk_text_buffer_delete_mark(self, mark)
    end
    
    # @param [String] name 
    # @return [GtkTextMark] 
    def get_mark(name)
      GtkTextMark.new Gtk.gtk_text_buffer_get_mark(self, name)
    end
    
    # @param [String] name 
    # @param [GtkTextIter] where 
    # @return [nil] 
    def move_mark_by_name(name, where)
      Gtk.gtk_text_buffer_move_mark_by_name(self, name, where)
    end
    
    # @param [String] name 
    # @return [nil] 
    def delete_mark_by_name(name)
      Gtk.gtk_text_buffer_delete_mark_by_name(self, name)
    end
    
    # @return [GtkTextMark] 
    def get_insert()
      GtkTextMark.new Gtk.gtk_text_buffer_get_insert(self)
    end
    
    # @return [GtkTextMark] 
    def get_selection_bound()
      GtkTextMark.new Gtk.gtk_text_buffer_get_selection_bound(self)
    end
    
    # @param [GtkTextIter] where 
    # @return [nil] 
    def place_cursor(where)
      Gtk.gtk_text_buffer_place_cursor(self, where)
    end
    
    # @param [GtkTextIter] ins 
    # @param [GtkTextIter] bound 
    # @return [nil] 
    def select_range(ins, bound)
      Gtk.gtk_text_buffer_select_range(self, ins, bound)
    end
    
    # @param [GtkTextTag] tag 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def apply_tag(tag, start, end_)
      Gtk.gtk_text_buffer_apply_tag(self, tag, start, end_)
    end
    
    # @param [GtkTextTag] tag 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def remove_tag(tag, start, end_)
      Gtk.gtk_text_buffer_remove_tag(self, tag, start, end_)
    end
    
    # @param [String] name 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def apply_tag_by_name(name, start, end_)
      Gtk.gtk_text_buffer_apply_tag_by_name(self, name, start, end_)
    end
    
    # @param [String] name 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def remove_tag_by_name(name, start, end_)
      Gtk.gtk_text_buffer_remove_tag_by_name(self, name, start, end_)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def remove_all_tags(start, end_)
      Gtk.gtk_text_buffer_remove_all_tags(self, start, end_)
    end
    
    # @param [String] tag_name 
    # @param [String] first_property_name 
    # @return [GtkTextTag] 
    def create_tag(tag_name, first_property_name)
      GtkTextTag.new Gtk.gtk_text_buffer_create_tag(self, tag_name, first_property_name)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] line_number 
    # @param [Integer] char_offset 
    # @return [nil] 
    def get_iter_at_line_offset(iter, line_number, char_offset)
      Gtk.gtk_text_buffer_get_iter_at_line_offset(self, iter, line_number, char_offset)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] line_number 
    # @param [Integer] byte_index 
    # @return [nil] 
    def get_iter_at_line_index(iter, line_number, byte_index)
      Gtk.gtk_text_buffer_get_iter_at_line_index(self, iter, line_number, byte_index)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] char_offset 
    # @return [nil] 
    def get_iter_at_offset(iter, char_offset)
      Gtk.gtk_text_buffer_get_iter_at_offset(self, iter, char_offset)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] line_number 
    # @return [nil] 
    def get_iter_at_line(iter, line_number)
      Gtk.gtk_text_buffer_get_iter_at_line(self, iter, line_number)
    end
    
    # @param [GtkTextIter] iter 
    # @return [nil] 
    def get_start_iter(iter)
      Gtk.gtk_text_buffer_get_start_iter(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @return [nil] 
    def get_end_iter(iter)
      Gtk.gtk_text_buffer_get_end_iter(self, iter)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def get_bounds(start, end_)
      Gtk.gtk_text_buffer_get_bounds(self, start, end_)
    end
    
    # @param [GtkTextIter] iter 
    # @param [GtkTextMark] mark 
    # @return [nil] 
    def get_iter_at_mark(iter, mark)
      Gtk.gtk_text_buffer_get_iter_at_mark(self, iter, mark)
    end
    
    # @param [GtkTextIter] iter 
    # @param [GtkTextChildAnchor] anchor 
    # @return [nil] 
    def get_iter_at_child_anchor(iter, anchor)
      Gtk.gtk_text_buffer_get_iter_at_child_anchor(self, iter, anchor)
    end
    
    # @return [Integer] 
    def get_modified()
      Gtk.gtk_text_buffer_get_modified(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_modified(setting)
      Gtk.gtk_text_buffer_set_modified(self, setting)
    end
    
    # @return [Integer] 
    def get_has_selection()
      Gtk.gtk_text_buffer_get_has_selection(self)
    end
    
    # @param [GtkClipboard] clipboard 
    # @return [nil] 
    def add_selection_clipboard(clipboard)
      Gtk.gtk_text_buffer_add_selection_clipboard(self, clipboard)
    end
    
    # @param [GtkClipboard] clipboard 
    # @return [nil] 
    def remove_selection_clipboard(clipboard)
      Gtk.gtk_text_buffer_remove_selection_clipboard(self, clipboard)
    end
    
    # @param [GtkClipboard] clipboard 
    # @param [Integer] default_editable 
    # @return [nil] 
    def cut_clipboard(clipboard, default_editable)
      Gtk.gtk_text_buffer_cut_clipboard(self, clipboard, default_editable)
    end
    
    # @param [GtkClipboard] clipboard 
    # @return [nil] 
    def copy_clipboard(clipboard)
      Gtk.gtk_text_buffer_copy_clipboard(self, clipboard)
    end
    
    # @param [GtkClipboard] clipboard 
    # @param [GtkTextIter] override_location 
    # @param [Integer] default_editable 
    # @return [nil] 
    def paste_clipboard(clipboard, override_location, default_editable)
      Gtk.gtk_text_buffer_paste_clipboard(self, clipboard, override_location, default_editable)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [Integer] 
    def get_selection_bounds(start, end_)
      Gtk.gtk_text_buffer_get_selection_bounds(self, start, end_)
    end
    
    # @param [Integer] interactive 
    # @param [Integer] default_editable 
    # @return [Integer] 
    def delete_selection(interactive, default_editable)
      Gtk.gtk_text_buffer_delete_selection(self, interactive, default_editable)
    end
    
    # @return [nil] 
    def begin_user_action()
      Gtk.gtk_text_buffer_begin_user_action(self)
    end
    
    # @return [nil] 
    def end_user_action()
      Gtk.gtk_text_buffer_end_user_action(self)
    end
    
    # @return [GtkTargetList] 
    def get_copy_target_list()
      GtkTargetList.new Gtk.gtk_text_buffer_get_copy_target_list(self)
    end
    
    # @return [GtkTargetList] 
    def get_paste_target_list()
      GtkTargetList.new Gtk.gtk_text_buffer_get_paste_target_list(self)
    end
    
    # @return [nil] 
    def spew()
      Gtk.gtk_text_buffer_spew(self)
    end
    
    # @return [GtkTextBTree] 
    def get_btree()
      GtkTextBTree.new Gtk.gtk_text_buffer_get_btree(self)
    end
    
    # @param [GtkTextIter] anywhere_in_line 
    # @param [FFI::Pointer(*Gint)] char_len 
    # @return [FFI::Pointer(*PangoLogAttr)] 
    def get_line_log_attrs(anywhere_in_line, char_len)
      Gtk.gtk_text_buffer_get_line_log_attrs(self, anywhere_in_line, char_len)
    end
    
    # @param [GtkTextTag] tag 
    # @return [nil] 
    def notify_will_remove_tag(tag)
      Gtk.gtk_text_buffer_notify_will_remove_tag(self, tag)
    end
    
    # @param [unknown] boundary_type 
    # @param [GtkTextIter] position 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def get_text_before(boundary_type, position, start, end_)
      Gtk.gtk_text_buffer_get_text_before(self, boundary_type, position, start, end_)
    end
    
    # @param [unknown] boundary_type 
    # @param [GtkTextIter] position 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def get_text_at(boundary_type, position, start, end_)
      Gtk.gtk_text_buffer_get_text_at(self, boundary_type, position, start, end_)
    end
    
    # @param [unknown] boundary_type 
    # @param [GtkTextIter] position 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def get_text_after(boundary_type, position, start, end_)
      Gtk.gtk_text_buffer_get_text_after(self, boundary_type, position, start, end_)
    end
    
    # @param [String] mime_type 
    # @param [Proc(_callback_gtk_text_buffer_serialize_func_)] function 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] user_data_destroy 
    # @return [FFI::Pointer(GdkAtom)] 
    def register_serialize_format(mime_type, function, user_data, user_data_destroy)
      Gtk.gtk_text_buffer_register_serialize_format(self, mime_type, function, user_data, user_data_destroy)
    end
    
    # @param [String] tagset_name 
    # @return [FFI::Pointer(GdkAtom)] 
    def register_serialize_tagset(tagset_name)
      Gtk.gtk_text_buffer_register_serialize_tagset(self, tagset_name)
    end
    
    # @param [String] mime_type 
    # @param [Proc(_callback_gtk_text_buffer_deserialize_func_)] function 
    # @param [FFI::Pointer(Gpointer)] user_data 
    # @param [FFI::Pointer(GDestroyNotify)] user_data_destroy 
    # @return [FFI::Pointer(GdkAtom)] 
    def register_deserialize_format(mime_type, function, user_data, user_data_destroy)
      Gtk.gtk_text_buffer_register_deserialize_format(self, mime_type, function, user_data, user_data_destroy)
    end
    
    # @param [String] tagset_name 
    # @return [FFI::Pointer(GdkAtom)] 
    def register_deserialize_tagset(tagset_name)
      Gtk.gtk_text_buffer_register_deserialize_tagset(self, tagset_name)
    end
    
    # @param [FFI::Pointer(GdkAtom)] format 
    # @return [nil] 
    def unregister_serialize_format(format)
      Gtk.gtk_text_buffer_unregister_serialize_format(self, format)
    end
    
    # @param [FFI::Pointer(GdkAtom)] format 
    # @return [nil] 
    def unregister_deserialize_format(format)
      Gtk.gtk_text_buffer_unregister_deserialize_format(self, format)
    end
    
    # @param [FFI::Pointer(GdkAtom)] format 
    # @param [Integer] can_create_tags 
    # @return [nil] 
    def deserialize_set_can_create_tags(format, can_create_tags)
      Gtk.gtk_text_buffer_deserialize_set_can_create_tags(self, format, can_create_tags)
    end
    
    # @param [FFI::Pointer(GdkAtom)] format 
    # @return [Integer] 
    def deserialize_get_can_create_tags(format)
      Gtk.gtk_text_buffer_deserialize_get_can_create_tags(self, format)
    end
    
    # @param [FFI::Pointer(*Gint)] n_formats 
    # @return [FFI::Pointer(*GdkAtom)] 
    def get_serialize_formats(n_formats)
      Gtk.gtk_text_buffer_get_serialize_formats(self, n_formats)
    end
    
    # @param [FFI::Pointer(*Gint)] n_formats 
    # @return [FFI::Pointer(*GdkAtom)] 
    def get_deserialize_formats(n_formats)
      Gtk.gtk_text_buffer_get_deserialize_formats(self, n_formats)
    end
    
    # @param [FFI::Pointer(*GtkTextBuffer)] content_buffer 
    # @param [FFI::Pointer(GdkAtom)] format 
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @param [FFI::Pointer(*Gsize)] length 
    # @return [FFI::Pointer(*Guint8)] 
    def serialize(content_buffer, format, start, end_, length)
      Gtk.gtk_text_buffer_serialize(self, content_buffer, format, start, end_, length)
    end
    
    # @param [FFI::Pointer(*GtkTextBuffer)] content_buffer 
    # @param [FFI::Pointer(GdkAtom)] format 
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*Guint8)] data 
    # @param [Integer] length 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def deserialize(content_buffer, format, iter, data, length, error)
      Gtk.gtk_text_buffer_deserialize(self, content_buffer, format, iter, data, length, error)
    end
  end
  
  class GtkTextBuffer < FFI::Struct
    include GtkTextBufferWrappers
    layout :parent_instance, :char,
           :priv, GtkTextBufferPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :insert_text ::
  #   (FFI::Pointer(*)) 
  # :insert_pixbuf ::
  #   (FFI::Pointer(*)) 
  # :insert_child_anchor ::
  #   (FFI::Pointer(*)) 
  # :delete_range ::
  #   (FFI::Pointer(*)) 
  # :changed ::
  #   (FFI::Pointer(*)) Only for text/widgets/pixbuf changed, marks/tags don't cause this
  #   to be emitted
  # :modified_changed ::
  #   (FFI::Pointer(*)) New value for the modified flag
  # :mark_set ::
  #   (FFI::Pointer(*)) Mark moved or created
  # :mark_deleted ::
  #   (FFI::Pointer(*)) 
  # :apply_tag ::
  #   (FFI::Pointer(*)) 
  # :remove_tag ::
  #   (FFI::Pointer(*)) 
  # :begin_user_action ::
  #   (FFI::Pointer(*)) Called at the start and end of an atomic user action
  # :end_user_action ::
  #   (FFI::Pointer(*)) 
  # :paste_done ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTextBufferClass < FFI::Struct
    layout :parent_class, :char,
           :insert_text, :pointer,
           :insert_pixbuf, :pointer,
           :insert_child_anchor, :pointer,
           :delete_range, :pointer,
           :changed, :pointer,
           :modified_changed, :pointer,
           :mark_set, :pointer,
           :mark_deleted, :pointer,
           :apply_tag, :pointer,
           :remove_tag, :pointer,
           :begin_user_action, :pointer,
           :end_user_action, :pointer,
           :paste_done, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_get_type, :gtk_text_buffer_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_new(table)
  # @param [GtkTextTagTable] table 
  # @return [GtkTextBuffer] 
  # @scope class
  attach_function :gtk_text_buffer_new, :gtk_text_buffer_new, [GtkTextTagTable], GtkTextBuffer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_line_count(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_get_line_count, :gtk_text_buffer_get_line_count, [GtkTextBuffer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_char_count(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_get_char_count, :gtk_text_buffer_get_char_count, [GtkTextBuffer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_tag_table(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkTextTagTable] 
  # @scope class
  attach_function :gtk_text_buffer_get_tag_table, :gtk_text_buffer_get_tag_table, [GtkTextBuffer], GtkTextTagTable
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_set_text(buffer, text, len)
  # @param [GtkTextBuffer] buffer 
  # @param [String] text 
  # @param [Integer] len 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_set_text, :gtk_text_buffer_set_text, [GtkTextBuffer, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert(buffer, iter, text, len)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [String] text 
  # @param [Integer] len 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert, :gtk_text_buffer_insert, [GtkTextBuffer, GtkTextIter, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_at_cursor(buffer, text, len)
  # @param [GtkTextBuffer] buffer 
  # @param [String] text 
  # @param [Integer] len 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert_at_cursor, :gtk_text_buffer_insert_at_cursor, [GtkTextBuffer, :string, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_interactive(buffer, iter, text, len, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [String] text 
  # @param [Integer] len 
  # @param [Integer] default_editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_insert_interactive, :gtk_text_buffer_insert_interactive, [GtkTextBuffer, GtkTextIter, :string, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_interactive_at_cursor(buffer, text, len, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [String] text 
  # @param [Integer] len 
  # @param [Integer] default_editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_insert_interactive_at_cursor, :gtk_text_buffer_insert_interactive_at_cursor, [GtkTextBuffer, :string, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_range(buffer, iter, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert_range, :gtk_text_buffer_insert_range, [GtkTextBuffer, GtkTextIter, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_range_interactive(buffer, iter, start, end_, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @param [Integer] default_editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_insert_range_interactive, :gtk_text_buffer_insert_range_interactive, [GtkTextBuffer, GtkTextIter, GtkTextIter, GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_with_tags(buffer, iter, text, len, first_tag)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [String] text 
  # @param [Integer] len 
  # @param [GtkTextTag] first_tag 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert_with_tags, :gtk_text_buffer_insert_with_tags, [GtkTextBuffer, GtkTextIter, :string, :int, GtkTextTag], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_with_tags_by_name(buffer, iter, text, len, first_tag_name)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [String] text 
  # @param [Integer] len 
  # @param [String] first_tag_name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert_with_tags_by_name, :gtk_text_buffer_insert_with_tags_by_name, [GtkTextBuffer, GtkTextIter, :string, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_delete(buffer, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_delete, :gtk_text_buffer_delete, [GtkTextBuffer, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_delete_interactive(buffer, start_iter, end_iter, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start_iter 
  # @param [GtkTextIter] end_iter 
  # @param [Integer] default_editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_delete_interactive, :gtk_text_buffer_delete_interactive, [GtkTextBuffer, GtkTextIter, GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_backspace(buffer, iter, interactive, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [Integer] interactive 
  # @param [Integer] default_editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_backspace, :gtk_text_buffer_backspace, [GtkTextBuffer, GtkTextIter, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_text(buffer, start, end_, include_hidden_chars)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @param [Integer] include_hidden_chars 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_buffer_get_text, :gtk_text_buffer_get_text, [GtkTextBuffer, GtkTextIter, GtkTextIter, :int], :string
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_slice(buffer, start, end_, include_hidden_chars)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @param [Integer] include_hidden_chars 
  # @return [String] 
  # @scope class
  attach_function :gtk_text_buffer_get_slice, :gtk_text_buffer_get_slice, [GtkTextBuffer, GtkTextIter, GtkTextIter, :int], :string
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_pixbuf(buffer, iter, pixbuf)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*GdkPixbuf)] pixbuf 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert_pixbuf, :gtk_text_buffer_insert_pixbuf, [GtkTextBuffer, GtkTextIter, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_insert_child_anchor(buffer, iter, anchor)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [GtkTextChildAnchor] anchor 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_insert_child_anchor, :gtk_text_buffer_insert_child_anchor, [GtkTextBuffer, GtkTextIter, GtkTextChildAnchor], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_create_child_anchor(buffer, iter)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @return [GtkTextChildAnchor] 
  # @scope class
  attach_function :gtk_text_buffer_create_child_anchor, :gtk_text_buffer_create_child_anchor, [GtkTextBuffer, GtkTextIter], GtkTextChildAnchor
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_add_mark(buffer, mark, where)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextMark] mark 
  # @param [GtkTextIter] where 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_add_mark, :gtk_text_buffer_add_mark, [GtkTextBuffer, GtkTextMark, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_create_mark(buffer, mark_name, where, left_gravity)
  # @param [GtkTextBuffer] buffer 
  # @param [String] mark_name 
  # @param [GtkTextIter] where 
  # @param [Integer] left_gravity 
  # @return [GtkTextMark] 
  # @scope class
  attach_function :gtk_text_buffer_create_mark, :gtk_text_buffer_create_mark, [GtkTextBuffer, :string, GtkTextIter, :int], GtkTextMark
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_move_mark(buffer, mark, where)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextMark] mark 
  # @param [GtkTextIter] where 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_move_mark, :gtk_text_buffer_move_mark, [GtkTextBuffer, GtkTextMark, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_delete_mark(buffer, mark)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextMark] mark 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_delete_mark, :gtk_text_buffer_delete_mark, [GtkTextBuffer, GtkTextMark], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_mark(buffer, name)
  # @param [GtkTextBuffer] buffer 
  # @param [String] name 
  # @return [GtkTextMark] 
  # @scope class
  attach_function :gtk_text_buffer_get_mark, :gtk_text_buffer_get_mark, [GtkTextBuffer, :string], GtkTextMark
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_move_mark_by_name(buffer, name, where)
  # @param [GtkTextBuffer] buffer 
  # @param [String] name 
  # @param [GtkTextIter] where 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_move_mark_by_name, :gtk_text_buffer_move_mark_by_name, [GtkTextBuffer, :string, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_delete_mark_by_name(buffer, name)
  # @param [GtkTextBuffer] buffer 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_delete_mark_by_name, :gtk_text_buffer_delete_mark_by_name, [GtkTextBuffer, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_insert(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkTextMark] 
  # @scope class
  attach_function :gtk_text_buffer_get_insert, :gtk_text_buffer_get_insert, [GtkTextBuffer], GtkTextMark
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_selection_bound(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkTextMark] 
  # @scope class
  attach_function :gtk_text_buffer_get_selection_bound, :gtk_text_buffer_get_selection_bound, [GtkTextBuffer], GtkTextMark
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_place_cursor(buffer, where)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] where 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_place_cursor, :gtk_text_buffer_place_cursor, [GtkTextBuffer, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_select_range(buffer, ins, bound)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] ins 
  # @param [GtkTextIter] bound 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_select_range, :gtk_text_buffer_select_range, [GtkTextBuffer, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_apply_tag(buffer, tag, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextTag] tag 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_apply_tag, :gtk_text_buffer_apply_tag, [GtkTextBuffer, GtkTextTag, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_remove_tag(buffer, tag, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextTag] tag 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_remove_tag, :gtk_text_buffer_remove_tag, [GtkTextBuffer, GtkTextTag, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_apply_tag_by_name(buffer, name, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [String] name 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_apply_tag_by_name, :gtk_text_buffer_apply_tag_by_name, [GtkTextBuffer, :string, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_remove_tag_by_name(buffer, name, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [String] name 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_remove_tag_by_name, :gtk_text_buffer_remove_tag_by_name, [GtkTextBuffer, :string, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_remove_all_tags(buffer, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_remove_all_tags, :gtk_text_buffer_remove_all_tags, [GtkTextBuffer, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_create_tag(buffer, tag_name, first_property_name)
  # @param [GtkTextBuffer] buffer 
  # @param [String] tag_name 
  # @param [String] first_property_name 
  # @return [GtkTextTag] 
  # @scope class
  attach_function :gtk_text_buffer_create_tag, :gtk_text_buffer_create_tag, [GtkTextBuffer, :string, :string], GtkTextTag
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_iter_at_line_offset(buffer, iter, line_number, char_offset)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [Integer] line_number 
  # @param [Integer] char_offset 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_iter_at_line_offset, :gtk_text_buffer_get_iter_at_line_offset, [GtkTextBuffer, GtkTextIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_iter_at_line_index(buffer, iter, line_number, byte_index)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [Integer] line_number 
  # @param [Integer] byte_index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_iter_at_line_index, :gtk_text_buffer_get_iter_at_line_index, [GtkTextBuffer, GtkTextIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_iter_at_offset(buffer, iter, char_offset)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [Integer] char_offset 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_iter_at_offset, :gtk_text_buffer_get_iter_at_offset, [GtkTextBuffer, GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_iter_at_line(buffer, iter, line_number)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [Integer] line_number 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_iter_at_line, :gtk_text_buffer_get_iter_at_line, [GtkTextBuffer, GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_start_iter(buffer, iter)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_start_iter, :gtk_text_buffer_get_start_iter, [GtkTextBuffer, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_end_iter(buffer, iter)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_end_iter, :gtk_text_buffer_get_end_iter, [GtkTextBuffer, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_bounds(buffer, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_bounds, :gtk_text_buffer_get_bounds, [GtkTextBuffer, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_iter_at_mark(buffer, iter, mark)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [GtkTextMark] mark 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_iter_at_mark, :gtk_text_buffer_get_iter_at_mark, [GtkTextBuffer, GtkTextIter, GtkTextMark], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_iter_at_child_anchor(buffer, iter, anchor)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] iter 
  # @param [GtkTextChildAnchor] anchor 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_iter_at_child_anchor, :gtk_text_buffer_get_iter_at_child_anchor, [GtkTextBuffer, GtkTextIter, GtkTextChildAnchor], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_modified(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_get_modified, :gtk_text_buffer_get_modified, [GtkTextBuffer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_set_modified(buffer, setting)
  # @param [GtkTextBuffer] buffer 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_set_modified, :gtk_text_buffer_set_modified, [GtkTextBuffer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_has_selection(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_get_has_selection, :gtk_text_buffer_get_has_selection, [GtkTextBuffer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_add_selection_clipboard(buffer, clipboard)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkClipboard] clipboard 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_add_selection_clipboard, :gtk_text_buffer_add_selection_clipboard, [GtkTextBuffer, GtkClipboard], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_remove_selection_clipboard(buffer, clipboard)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkClipboard] clipboard 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_remove_selection_clipboard, :gtk_text_buffer_remove_selection_clipboard, [GtkTextBuffer, GtkClipboard], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_cut_clipboard(buffer, clipboard, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkClipboard] clipboard 
  # @param [Integer] default_editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_cut_clipboard, :gtk_text_buffer_cut_clipboard, [GtkTextBuffer, GtkClipboard, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_copy_clipboard(buffer, clipboard)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkClipboard] clipboard 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_copy_clipboard, :gtk_text_buffer_copy_clipboard, [GtkTextBuffer, GtkClipboard], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_paste_clipboard(buffer, clipboard, override_location, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkClipboard] clipboard 
  # @param [GtkTextIter] override_location 
  # @param [Integer] default_editable 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_paste_clipboard, :gtk_text_buffer_paste_clipboard, [GtkTextBuffer, GtkClipboard, GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_selection_bounds(buffer, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_get_selection_bounds, :gtk_text_buffer_get_selection_bounds, [GtkTextBuffer, GtkTextIter, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_delete_selection(buffer, interactive, default_editable)
  # @param [GtkTextBuffer] buffer 
  # @param [Integer] interactive 
  # @param [Integer] default_editable 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_delete_selection, :gtk_text_buffer_delete_selection, [GtkTextBuffer, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_begin_user_action(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_begin_user_action, :gtk_text_buffer_begin_user_action, [GtkTextBuffer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_end_user_action(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_end_user_action, :gtk_text_buffer_end_user_action, [GtkTextBuffer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_copy_target_list(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkTargetList] 
  # @scope class
  attach_function :gtk_text_buffer_get_copy_target_list, :gtk_text_buffer_get_copy_target_list, [GtkTextBuffer], GtkTargetList
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_paste_target_list(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkTargetList] 
  # @scope class
  attach_function :gtk_text_buffer_get_paste_target_list, :gtk_text_buffer_get_paste_target_list, [GtkTextBuffer], GtkTargetList
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_spew(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_spew, :_gtk_text_buffer_spew, [GtkTextBuffer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_btree(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkTextBTree] 
  # @scope class
  attach_function :gtk_text_buffer_get_btree, :_gtk_text_buffer_get_btree, [GtkTextBuffer], GtkTextBTree
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_line_log_attrs(buffer, anywhere_in_line, char_len)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextIter] anywhere_in_line 
  # @param [FFI::Pointer(*Gint)] char_len 
  # @return [FFI::Pointer(*PangoLogAttr)] 
  # @scope class
  attach_function :gtk_text_buffer_get_line_log_attrs, :_gtk_text_buffer_get_line_log_attrs, [GtkTextBuffer, GtkTextIter, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_notify_will_remove_tag(buffer, tag)
  # @param [GtkTextBuffer] buffer 
  # @param [GtkTextTag] tag 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_notify_will_remove_tag, :_gtk_text_buffer_notify_will_remove_tag, [GtkTextBuffer, GtkTextTag], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_text_before(buffer, boundary_type, position, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [unknown] boundary_type 
  # @param [GtkTextIter] position 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_text_before, :_gtk_text_buffer_get_text_before, [GtkTextBuffer, :char, GtkTextIter, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_text_at(buffer, boundary_type, position, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [unknown] boundary_type 
  # @param [GtkTextIter] position 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_text_at, :_gtk_text_buffer_get_text_at, [GtkTextBuffer, :char, GtkTextIter, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_text_after(buffer, boundary_type, position, start, end_)
  # @param [GtkTextBuffer] buffer 
  # @param [unknown] boundary_type 
  # @param [GtkTextIter] position 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_get_text_after, :_gtk_text_buffer_get_text_after, [GtkTextBuffer, :char, GtkTextIter, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_text_buffer_serialize_func_(register_buffer, content_buffer, start, end_, length, user_data)
  # @param [GtkTextBuffer] register_buffer 
  # @param [GtkTextBuffer] content_buffer 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @param [FFI::Pointer(*Gsize)] length 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @return [Integer] 
  # @scope class
  callback :gtk_text_buffer_serialize_func, [GtkTextBuffer, GtkTextBuffer, GtkTextIter, GtkTextIter, :pointer, :pointer], :uchar
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_text_buffer_deserialize_func_(register_buffer, content_buffer, iter, data, length, create_tags, user_data, error)
  # @param [GtkTextBuffer] register_buffer 
  # @param [GtkTextBuffer] content_buffer 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Guint8)] data 
  # @param [Integer] length 
  # @param [Integer] create_tags 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  callback :gtk_text_buffer_deserialize_func, [GtkTextBuffer, GtkTextBuffer, GtkTextIter, :pointer, :uint, :int, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_register_serialize_format(buffer, mime_type, function, user_data, user_data_destroy)
  # @param [GtkTextBuffer] buffer 
  # @param [String] mime_type 
  # @param [Proc(_callback_gtk_text_buffer_serialize_func_)] function 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] user_data_destroy 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_text_buffer_register_serialize_format, :gtk_text_buffer_register_serialize_format, [GtkTextBuffer, :string, :gtk_text_buffer_serialize_func, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_register_serialize_tagset(buffer, tagset_name)
  # @param [GtkTextBuffer] buffer 
  # @param [String] tagset_name 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_text_buffer_register_serialize_tagset, :gtk_text_buffer_register_serialize_tagset, [GtkTextBuffer, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_register_deserialize_format(buffer, mime_type, function, user_data, user_data_destroy)
  # @param [GtkTextBuffer] buffer 
  # @param [String] mime_type 
  # @param [Proc(_callback_gtk_text_buffer_deserialize_func_)] function 
  # @param [FFI::Pointer(Gpointer)] user_data 
  # @param [FFI::Pointer(GDestroyNotify)] user_data_destroy 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_text_buffer_register_deserialize_format, :gtk_text_buffer_register_deserialize_format, [GtkTextBuffer, :string, :gtk_text_buffer_deserialize_func, :pointer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_register_deserialize_tagset(buffer, tagset_name)
  # @param [GtkTextBuffer] buffer 
  # @param [String] tagset_name 
  # @return [FFI::Pointer(GdkAtom)] 
  # @scope class
  attach_function :gtk_text_buffer_register_deserialize_tagset, :gtk_text_buffer_register_deserialize_tagset, [GtkTextBuffer, :string], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_unregister_serialize_format(buffer, format)
  # @param [GtkTextBuffer] buffer 
  # @param [FFI::Pointer(GdkAtom)] format 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_unregister_serialize_format, :gtk_text_buffer_unregister_serialize_format, [GtkTextBuffer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_unregister_deserialize_format(buffer, format)
  # @param [GtkTextBuffer] buffer 
  # @param [FFI::Pointer(GdkAtom)] format 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_unregister_deserialize_format, :gtk_text_buffer_unregister_deserialize_format, [GtkTextBuffer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_deserialize_set_can_create_tags(buffer, format, can_create_tags)
  # @param [GtkTextBuffer] buffer 
  # @param [FFI::Pointer(GdkAtom)] format 
  # @param [Integer] can_create_tags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_buffer_deserialize_set_can_create_tags, :gtk_text_buffer_deserialize_set_can_create_tags, [GtkTextBuffer, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_deserialize_get_can_create_tags(buffer, format)
  # @param [GtkTextBuffer] buffer 
  # @param [FFI::Pointer(GdkAtom)] format 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_deserialize_get_can_create_tags, :gtk_text_buffer_deserialize_get_can_create_tags, [GtkTextBuffer, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_serialize_formats(buffer, n_formats)
  # @param [GtkTextBuffer] buffer 
  # @param [FFI::Pointer(*Gint)] n_formats 
  # @return [FFI::Pointer(*GdkAtom)] 
  # @scope class
  attach_function :gtk_text_buffer_get_serialize_formats, :gtk_text_buffer_get_serialize_formats, [GtkTextBuffer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_get_deserialize_formats(buffer, n_formats)
  # @param [GtkTextBuffer] buffer 
  # @param [FFI::Pointer(*Gint)] n_formats 
  # @return [FFI::Pointer(*GdkAtom)] 
  # @scope class
  attach_function :gtk_text_buffer_get_deserialize_formats, :gtk_text_buffer_get_deserialize_formats, [GtkTextBuffer, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_serialize(register_buffer, content_buffer, format, start, end_, length)
  # @param [GtkTextBuffer] register_buffer 
  # @param [GtkTextBuffer] content_buffer 
  # @param [FFI::Pointer(GdkAtom)] format 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @param [FFI::Pointer(*Gsize)] length 
  # @return [FFI::Pointer(*Guint8)] 
  # @scope class
  attach_function :gtk_text_buffer_serialize, :gtk_text_buffer_serialize, [GtkTextBuffer, GtkTextBuffer, :pointer, GtkTextIter, GtkTextIter, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_deserialize(register_buffer, content_buffer, format, iter, data, length, error)
  # @param [GtkTextBuffer] register_buffer 
  # @param [GtkTextBuffer] content_buffer 
  # @param [FFI::Pointer(GdkAtom)] format 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Guint8)] data 
  # @param [Integer] length 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_deserialize, :gtk_text_buffer_deserialize, [GtkTextBuffer, GtkTextBuffer, :pointer, GtkTextIter, :pointer, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_text_window_type).</em>
  # 
  # === Options:
  # :private ::
  #   
  # :widget ::
  #   
  # :text ::
  #   
  # :left ::
  #   
  # :right ::
  #   
  # :top ::
  #   
  # :bottom ::
  #   
  # 
  # @method _enum_gtk_text_window_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_text_window_type, [
    :private, 0,
    :widget, 1,
    :text, 2,
    :left, 3,
    :right, 4,
    :top, 5,
    :bottom, 6
  ]
  
  # (Not documented)
  class GtkTextViewPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkTextViewPrivate) 
  module GtkTextViewWrappers
    # @param [GtkTextBuffer] buffer 
    # @return [nil] 
    def set_buffer(buffer)
      Gtk.gtk_text_view_set_buffer(self, buffer)
    end
    
    # @return [GtkTextBuffer] 
    def get_buffer()
      GtkTextBuffer.new Gtk.gtk_text_view_get_buffer(self)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Float] within_margin 
    # @param [Integer] use_align 
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @return [Integer] 
    def scroll_to_iter(iter, within_margin, use_align, xalign, yalign)
      Gtk.gtk_text_view_scroll_to_iter(self, iter, within_margin, use_align, xalign, yalign)
    end
    
    # @param [GtkTextMark] mark 
    # @param [Float] within_margin 
    # @param [Integer] use_align 
    # @param [Float] xalign 
    # @param [Float] yalign 
    # @return [nil] 
    def scroll_to_mark(mark, within_margin, use_align, xalign, yalign)
      Gtk.gtk_text_view_scroll_to_mark(self, mark, within_margin, use_align, xalign, yalign)
    end
    
    # @param [GtkTextMark] mark 
    # @return [nil] 
    def scroll_mark_onscreen(mark)
      Gtk.gtk_text_view_scroll_mark_onscreen(self, mark)
    end
    
    # @param [GtkTextMark] mark 
    # @return [Integer] 
    def move_mark_onscreen(mark)
      Gtk.gtk_text_view_move_mark_onscreen(self, mark)
    end
    
    # @return [Integer] 
    def place_cursor_onscreen()
      Gtk.gtk_text_view_place_cursor_onscreen(self)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] visible_rect 
    # @return [nil] 
    def get_visible_rect(visible_rect)
      Gtk.gtk_text_view_get_visible_rect(self, visible_rect)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_cursor_visible(setting)
      Gtk.gtk_text_view_set_cursor_visible(self, setting)
    end
    
    # @return [Integer] 
    def get_cursor_visible()
      Gtk.gtk_text_view_get_cursor_visible(self)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*GdkRectangle)] strong 
    # @param [FFI::Pointer(*GdkRectangle)] weak 
    # @return [nil] 
    def get_cursor_locations(iter, strong, weak)
      Gtk.gtk_text_view_get_cursor_locations(self, iter, strong, weak)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*GdkRectangle)] location 
    # @return [nil] 
    def get_iter_location(iter, location)
      Gtk.gtk_text_view_get_iter_location(self, iter, location)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def get_iter_at_location(iter, x, y)
      Gtk.gtk_text_view_get_iter_at_location(self, iter, x, y)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*Gint)] trailing 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def get_iter_at_position(iter, trailing, x, y)
      Gtk.gtk_text_view_get_iter_at_position(self, iter, trailing, x, y)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*Gint)] y 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_line_yrange(iter, y, height)
      Gtk.gtk_text_view_get_line_yrange(self, iter, y, height)
    end
    
    # @param [GtkTextIter] target_iter 
    # @param [Integer] y 
    # @param [FFI::Pointer(*Gint)] line_top 
    # @return [nil] 
    def get_line_at_y(target_iter, y, line_top)
      Gtk.gtk_text_view_get_line_at_y(self, target_iter, y, line_top)
    end
    
    # @param [Symbol from _enum_gtk_text_window_type_] win 
    # @param [Integer] buffer_x 
    # @param [Integer] buffer_y 
    # @param [FFI::Pointer(*Gint)] window_x 
    # @param [FFI::Pointer(*Gint)] window_y 
    # @return [nil] 
    def buffer_to_window_coords(win, buffer_x, buffer_y, window_x, window_y)
      Gtk.gtk_text_view_buffer_to_window_coords(self, win, buffer_x, buffer_y, window_x, window_y)
    end
    
    # @param [Symbol from _enum_gtk_text_window_type_] win 
    # @param [Integer] window_x 
    # @param [Integer] window_y 
    # @param [FFI::Pointer(*Gint)] buffer_x 
    # @param [FFI::Pointer(*Gint)] buffer_y 
    # @return [nil] 
    def window_to_buffer_coords(win, window_x, window_y, buffer_x, buffer_y)
      Gtk.gtk_text_view_window_to_buffer_coords(self, win, window_x, window_y, buffer_x, buffer_y)
    end
    
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_text_view_get_hadjustment(self)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_text_view_get_vadjustment(self)
    end
    
    # @param [Symbol from _enum_gtk_text_window_type_] win 
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_window(win)
      Gtk.gtk_text_view_get_window(self, win)
    end
    
    # @param [FFI::Pointer(*GdkWindow)] window 
    # @return [Symbol from _enum_gtk_text_window_type_] 
    def get_window_type(window)
      Gtk.gtk_text_view_get_window_type(self, window)
    end
    
    # @param [Symbol from _enum_gtk_text_window_type_] type 
    # @param [Integer] size 
    # @return [nil] 
    def set_border_window_size(type, size)
      Gtk.gtk_text_view_set_border_window_size(self, type, size)
    end
    
    # @param [Symbol from _enum_gtk_text_window_type_] type 
    # @return [Integer] 
    def get_border_window_size(type)
      Gtk.gtk_text_view_get_border_window_size(self, type)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def forward_display_line(iter)
      Gtk.gtk_text_view_forward_display_line(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def backward_display_line(iter)
      Gtk.gtk_text_view_backward_display_line(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def forward_display_line_end(iter)
      Gtk.gtk_text_view_forward_display_line_end(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def backward_display_line_start(iter)
      Gtk.gtk_text_view_backward_display_line_start(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def starts_display_line(iter)
      Gtk.gtk_text_view_starts_display_line(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] count 
    # @return [Integer] 
    def move_visually(iter, count)
      Gtk.gtk_text_view_move_visually(self, iter, count)
    end
    
    # @param [FFI::Pointer(*GdkEventKey)] event 
    # @return [Integer] 
    def im_context_filter_keypress(event)
      Gtk.gtk_text_view_im_context_filter_keypress(self, event)
    end
    
    # @return [nil] 
    def reset_im_context()
      Gtk.gtk_text_view_reset_im_context(self)
    end
    
    # @param [GtkWidget] child 
    # @param [GtkTextChildAnchor] anchor 
    # @return [nil] 
    def add_child_at_anchor(child, anchor)
      Gtk.gtk_text_view_add_child_at_anchor(self, child, anchor)
    end
    
    # @param [GtkWidget] child 
    # @param [Symbol from _enum_gtk_text_window_type_] which_window 
    # @param [Integer] xpos 
    # @param [Integer] ypos 
    # @return [nil] 
    def add_child_in_window(child, which_window, xpos, ypos)
      Gtk.gtk_text_view_add_child_in_window(self, child, which_window, xpos, ypos)
    end
    
    # @param [GtkWidget] child 
    # @param [Integer] xpos 
    # @param [Integer] ypos 
    # @return [nil] 
    def move_child(child, xpos, ypos)
      Gtk.gtk_text_view_move_child(self, child, xpos, ypos)
    end
    
    # @param [Symbol from _enum_gtk_wrap_mode_] wrap_mode 
    # @return [nil] 
    def set_wrap_mode(wrap_mode)
      Gtk.gtk_text_view_set_wrap_mode(self, wrap_mode)
    end
    
    # @return [Symbol from _enum_gtk_wrap_mode_] 
    def get_wrap_mode()
      Gtk.gtk_text_view_get_wrap_mode(self)
    end
    
    # @param [Integer] setting 
    # @return [nil] 
    def set_editable(setting)
      Gtk.gtk_text_view_set_editable(self, setting)
    end
    
    # @return [Integer] 
    def get_editable()
      Gtk.gtk_text_view_get_editable(self)
    end
    
    # @param [Integer] overwrite 
    # @return [nil] 
    def set_overwrite(overwrite)
      Gtk.gtk_text_view_set_overwrite(self, overwrite)
    end
    
    # @return [Integer] 
    def get_overwrite()
      Gtk.gtk_text_view_get_overwrite(self)
    end
    
    # @param [Integer] accepts_tab 
    # @return [nil] 
    def set_accepts_tab(accepts_tab)
      Gtk.gtk_text_view_set_accepts_tab(self, accepts_tab)
    end
    
    # @return [Integer] 
    def get_accepts_tab()
      Gtk.gtk_text_view_get_accepts_tab(self)
    end
    
    # @param [Integer] pixels_above_lines 
    # @return [nil] 
    def set_pixels_above_lines(pixels_above_lines)
      Gtk.gtk_text_view_set_pixels_above_lines(self, pixels_above_lines)
    end
    
    # @return [Integer] 
    def get_pixels_above_lines()
      Gtk.gtk_text_view_get_pixels_above_lines(self)
    end
    
    # @param [Integer] pixels_below_lines 
    # @return [nil] 
    def set_pixels_below_lines(pixels_below_lines)
      Gtk.gtk_text_view_set_pixels_below_lines(self, pixels_below_lines)
    end
    
    # @return [Integer] 
    def get_pixels_below_lines()
      Gtk.gtk_text_view_get_pixels_below_lines(self)
    end
    
    # @param [Integer] pixels_inside_wrap 
    # @return [nil] 
    def set_pixels_inside_wrap(pixels_inside_wrap)
      Gtk.gtk_text_view_set_pixels_inside_wrap(self, pixels_inside_wrap)
    end
    
    # @return [Integer] 
    def get_pixels_inside_wrap()
      Gtk.gtk_text_view_get_pixels_inside_wrap(self)
    end
    
    # @param [Symbol from _enum_gtk_justification_] justification 
    # @return [nil] 
    def set_justification(justification)
      Gtk.gtk_text_view_set_justification(self, justification)
    end
    
    # @return [Symbol from _enum_gtk_justification_] 
    def get_justification()
      Gtk.gtk_text_view_get_justification(self)
    end
    
    # @param [Integer] left_margin 
    # @return [nil] 
    def set_left_margin(left_margin)
      Gtk.gtk_text_view_set_left_margin(self, left_margin)
    end
    
    # @return [Integer] 
    def get_left_margin()
      Gtk.gtk_text_view_get_left_margin(self)
    end
    
    # @param [Integer] right_margin 
    # @return [nil] 
    def set_right_margin(right_margin)
      Gtk.gtk_text_view_set_right_margin(self, right_margin)
    end
    
    # @return [Integer] 
    def get_right_margin()
      Gtk.gtk_text_view_get_right_margin(self)
    end
    
    # @param [Integer] indent 
    # @return [nil] 
    def set_indent(indent)
      Gtk.gtk_text_view_set_indent(self, indent)
    end
    
    # @return [Integer] 
    def get_indent()
      Gtk.gtk_text_view_get_indent(self)
    end
    
    # @param [FFI::Pointer(*PangoTabArray)] tabs 
    # @return [nil] 
    def set_tabs(tabs)
      Gtk.gtk_text_view_set_tabs(self, tabs)
    end
    
    # @return [FFI::Pointer(*PangoTabArray)] 
    def get_tabs()
      Gtk.gtk_text_view_get_tabs(self)
    end
    
    # @return [GtkTextAttributes] 
    def get_default_attributes()
      GtkTextAttributes.new Gtk.gtk_text_view_get_default_attributes(self)
    end
    
    # @param [Symbol from _enum_gtk_input_purpose_] purpose 
    # @return [nil] 
    def set_input_purpose(purpose)
      Gtk.gtk_text_view_set_input_purpose(self, purpose)
    end
    
    # @return [Symbol from _enum_gtk_input_purpose_] 
    def get_input_purpose()
      Gtk.gtk_text_view_get_input_purpose(self)
    end
    
    # @param [Symbol from _enum_gtk_input_hints_] hints 
    # @return [nil] 
    def set_input_hints(hints)
      Gtk.gtk_text_view_set_input_hints(self, hints)
    end
    
    # @return [Symbol from _enum_gtk_input_hints_] 
    def get_input_hints()
      Gtk.gtk_text_view_get_input_hints(self)
    end
  end
  
  class GtkTextView < FFI::Struct
    include GtkTextViewWrappers
    layout :parent_instance, GtkContainer.by_value,
           :priv, GtkTextViewPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :populate_popup ::
  #   (FFI::Pointer(*)) 
  # :move_cursor ::
  #   (FFI::Pointer(*)) move insertion point
  # :set_anchor ::
  #   (FFI::Pointer(*)) move the "anchor" (what Emacs calls the mark) to the cursor position
  # :insert_at_cursor ::
  #   (FFI::Pointer(*)) Edits
  # :delete_from_cursor ::
  #   (FFI::Pointer(*)) 
  # :backspace ::
  #   (FFI::Pointer(*)) 
  # :cut_clipboard ::
  #   (FFI::Pointer(*)) cut copy paste
  # :copy_clipboard ::
  #   (FFI::Pointer(*)) 
  # :paste_clipboard ::
  #   (FFI::Pointer(*)) 
  # :toggle_overwrite ::
  #   (FFI::Pointer(*)) overwrite
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved5 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved6 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved7 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved8 ::
  #   (FFI::Pointer(*)) 
  class GtkTextViewClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :populate_popup, :pointer,
           :move_cursor, :pointer,
           :set_anchor, :pointer,
           :insert_at_cursor, :pointer,
           :delete_from_cursor, :pointer,
           :backspace, :pointer,
           :cut_clipboard, :pointer,
           :copy_clipboard, :pointer,
           :paste_clipboard, :pointer,
           :toggle_overwrite, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer,
           :gtk_reserved5, :pointer,
           :gtk_reserved6, :pointer,
           :gtk_reserved7, :pointer,
           :gtk_reserved8, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_type, :gtk_text_view_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_view_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_text_view_new, :gtk_text_view_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_text_view_new_with_buffer(buffer)
  # @param [GtkTextBuffer] buffer 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_text_view_new_with_buffer, :gtk_text_view_new_with_buffer, [GtkTextBuffer], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_buffer(text_view, buffer)
  # @param [GtkTextView] text_view 
  # @param [GtkTextBuffer] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_buffer, :gtk_text_view_set_buffer, [GtkTextView, GtkTextBuffer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_buffer(text_view)
  # @param [GtkTextView] text_view 
  # @return [GtkTextBuffer] 
  # @scope class
  attach_function :gtk_text_view_get_buffer, :gtk_text_view_get_buffer, [GtkTextView], GtkTextBuffer
  
  # (Not documented)
  # 
  # @method gtk_text_view_scroll_to_iter(text_view, iter, within_margin, use_align, xalign, yalign)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [Float] within_margin 
  # @param [Integer] use_align 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_scroll_to_iter, :gtk_text_view_scroll_to_iter, [GtkTextView, GtkTextIter, :double, :int, :double, :double], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_scroll_to_mark(text_view, mark, within_margin, use_align, xalign, yalign)
  # @param [GtkTextView] text_view 
  # @param [GtkTextMark] mark 
  # @param [Float] within_margin 
  # @param [Integer] use_align 
  # @param [Float] xalign 
  # @param [Float] yalign 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_scroll_to_mark, :gtk_text_view_scroll_to_mark, [GtkTextView, GtkTextMark, :double, :int, :double, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_scroll_mark_onscreen(text_view, mark)
  # @param [GtkTextView] text_view 
  # @param [GtkTextMark] mark 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_scroll_mark_onscreen, :gtk_text_view_scroll_mark_onscreen, [GtkTextView, GtkTextMark], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_move_mark_onscreen(text_view, mark)
  # @param [GtkTextView] text_view 
  # @param [GtkTextMark] mark 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_move_mark_onscreen, :gtk_text_view_move_mark_onscreen, [GtkTextView, GtkTextMark], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_place_cursor_onscreen(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_place_cursor_onscreen, :gtk_text_view_place_cursor_onscreen, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_visible_rect(text_view, visible_rect)
  # @param [GtkTextView] text_view 
  # @param [FFI::Pointer(*GdkRectangle)] visible_rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_visible_rect, :gtk_text_view_get_visible_rect, [GtkTextView, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_cursor_visible(text_view, setting)
  # @param [GtkTextView] text_view 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_cursor_visible, :gtk_text_view_set_cursor_visible, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_cursor_visible(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_cursor_visible, :gtk_text_view_get_cursor_visible, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_cursor_locations(text_view, iter, strong, weak)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*GdkRectangle)] strong 
  # @param [FFI::Pointer(*GdkRectangle)] weak 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_cursor_locations, :gtk_text_view_get_cursor_locations, [GtkTextView, GtkTextIter, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_iter_location(text_view, iter, location)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*GdkRectangle)] location 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_iter_location, :gtk_text_view_get_iter_location, [GtkTextView, GtkTextIter, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_iter_at_location(text_view, iter, x, y)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_iter_at_location, :gtk_text_view_get_iter_at_location, [GtkTextView, GtkTextIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_iter_at_position(text_view, iter, trailing, x, y)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Gint)] trailing 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_iter_at_position, :gtk_text_view_get_iter_at_position, [GtkTextView, GtkTextIter, :pointer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_line_yrange(text_view, iter, y, height)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Gint)] y 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_line_yrange, :gtk_text_view_get_line_yrange, [GtkTextView, GtkTextIter, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_line_at_y(text_view, target_iter, y, line_top)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] target_iter 
  # @param [Integer] y 
  # @param [FFI::Pointer(*Gint)] line_top 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_get_line_at_y, :gtk_text_view_get_line_at_y, [GtkTextView, GtkTextIter, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_buffer_to_window_coords(text_view, win, buffer_x, buffer_y, window_x, window_y)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_text_window_type_] win 
  # @param [Integer] buffer_x 
  # @param [Integer] buffer_y 
  # @param [FFI::Pointer(*Gint)] window_x 
  # @param [FFI::Pointer(*Gint)] window_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_buffer_to_window_coords, :gtk_text_view_buffer_to_window_coords, [GtkTextView, :gtk_text_window_type, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_window_to_buffer_coords(text_view, win, window_x, window_y, buffer_x, buffer_y)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_text_window_type_] win 
  # @param [Integer] window_x 
  # @param [Integer] window_y 
  # @param [FFI::Pointer(*Gint)] buffer_x 
  # @param [FFI::Pointer(*Gint)] buffer_y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_window_to_buffer_coords, :gtk_text_view_window_to_buffer_coords, [GtkTextView, :gtk_text_window_type, :int, :int, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_hadjustment(text_view)
  # @param [GtkTextView] text_view 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_text_view_get_hadjustment, :gtk_text_view_get_hadjustment, [GtkTextView], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_vadjustment(text_view)
  # @param [GtkTextView] text_view 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_text_view_get_vadjustment, :gtk_text_view_get_vadjustment, [GtkTextView], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_window(text_view, win)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_text_window_type_] win 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_text_view_get_window, :gtk_text_view_get_window, [GtkTextView, :gtk_text_window_type], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_window_type(text_view, window)
  # @param [GtkTextView] text_view 
  # @param [FFI::Pointer(*GdkWindow)] window 
  # @return [Symbol from _enum_gtk_text_window_type_] 
  # @scope class
  attach_function :gtk_text_view_get_window_type, :gtk_text_view_get_window_type, [GtkTextView, :pointer], :gtk_text_window_type
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_border_window_size(text_view, type, size)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_text_window_type_] type 
  # @param [Integer] size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_border_window_size, :gtk_text_view_set_border_window_size, [GtkTextView, :gtk_text_window_type, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_border_window_size(text_view, type)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_text_window_type_] type 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_border_window_size, :gtk_text_view_get_border_window_size, [GtkTextView, :gtk_text_window_type], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_forward_display_line(text_view, iter)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_forward_display_line, :gtk_text_view_forward_display_line, [GtkTextView, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_backward_display_line(text_view, iter)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_backward_display_line, :gtk_text_view_backward_display_line, [GtkTextView, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_forward_display_line_end(text_view, iter)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_forward_display_line_end, :gtk_text_view_forward_display_line_end, [GtkTextView, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_backward_display_line_start(text_view, iter)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_backward_display_line_start, :gtk_text_view_backward_display_line_start, [GtkTextView, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_starts_display_line(text_view, iter)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_starts_display_line, :gtk_text_view_starts_display_line, [GtkTextView, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_move_visually(text_view, iter, count)
  # @param [GtkTextView] text_view 
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_move_visually, :gtk_text_view_move_visually, [GtkTextView, GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_im_context_filter_keypress(text_view, event)
  # @param [GtkTextView] text_view 
  # @param [FFI::Pointer(*GdkEventKey)] event 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_im_context_filter_keypress, :gtk_text_view_im_context_filter_keypress, [GtkTextView, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_reset_im_context(text_view)
  # @param [GtkTextView] text_view 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_reset_im_context, :gtk_text_view_reset_im_context, [GtkTextView], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_add_child_at_anchor(text_view, child, anchor)
  # @param [GtkTextView] text_view 
  # @param [GtkWidget] child 
  # @param [GtkTextChildAnchor] anchor 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_add_child_at_anchor, :gtk_text_view_add_child_at_anchor, [GtkTextView, GtkWidget, GtkTextChildAnchor], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_add_child_in_window(text_view, child, which_window, xpos, ypos)
  # @param [GtkTextView] text_view 
  # @param [GtkWidget] child 
  # @param [Symbol from _enum_gtk_text_window_type_] which_window 
  # @param [Integer] xpos 
  # @param [Integer] ypos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_add_child_in_window, :gtk_text_view_add_child_in_window, [GtkTextView, GtkWidget, :gtk_text_window_type, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_move_child(text_view, child, xpos, ypos)
  # @param [GtkTextView] text_view 
  # @param [GtkWidget] child 
  # @param [Integer] xpos 
  # @param [Integer] ypos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_move_child, :gtk_text_view_move_child, [GtkTextView, GtkWidget, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_wrap_mode(text_view, wrap_mode)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_wrap_mode_] wrap_mode 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_wrap_mode, :gtk_text_view_set_wrap_mode, [GtkTextView, :gtk_wrap_mode], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_wrap_mode(text_view)
  # @param [GtkTextView] text_view 
  # @return [Symbol from _enum_gtk_wrap_mode_] 
  # @scope class
  attach_function :gtk_text_view_get_wrap_mode, :gtk_text_view_get_wrap_mode, [GtkTextView], :gtk_wrap_mode
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_editable(text_view, setting)
  # @param [GtkTextView] text_view 
  # @param [Integer] setting 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_editable, :gtk_text_view_set_editable, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_editable(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_editable, :gtk_text_view_get_editable, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_overwrite(text_view, overwrite)
  # @param [GtkTextView] text_view 
  # @param [Integer] overwrite 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_overwrite, :gtk_text_view_set_overwrite, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_overwrite(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_overwrite, :gtk_text_view_get_overwrite, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_accepts_tab(text_view, accepts_tab)
  # @param [GtkTextView] text_view 
  # @param [Integer] accepts_tab 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_accepts_tab, :gtk_text_view_set_accepts_tab, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_accepts_tab(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_accepts_tab, :gtk_text_view_get_accepts_tab, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_pixels_above_lines(text_view, pixels_above_lines)
  # @param [GtkTextView] text_view 
  # @param [Integer] pixels_above_lines 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_pixels_above_lines, :gtk_text_view_set_pixels_above_lines, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_pixels_above_lines(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_pixels_above_lines, :gtk_text_view_get_pixels_above_lines, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_pixels_below_lines(text_view, pixels_below_lines)
  # @param [GtkTextView] text_view 
  # @param [Integer] pixels_below_lines 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_pixels_below_lines, :gtk_text_view_set_pixels_below_lines, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_pixels_below_lines(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_pixels_below_lines, :gtk_text_view_get_pixels_below_lines, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_pixels_inside_wrap(text_view, pixels_inside_wrap)
  # @param [GtkTextView] text_view 
  # @param [Integer] pixels_inside_wrap 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_pixels_inside_wrap, :gtk_text_view_set_pixels_inside_wrap, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_pixels_inside_wrap(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_pixels_inside_wrap, :gtk_text_view_get_pixels_inside_wrap, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_justification(text_view, justification)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_justification_] justification 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_justification, :gtk_text_view_set_justification, [GtkTextView, :gtk_justification], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_justification(text_view)
  # @param [GtkTextView] text_view 
  # @return [Symbol from _enum_gtk_justification_] 
  # @scope class
  attach_function :gtk_text_view_get_justification, :gtk_text_view_get_justification, [GtkTextView], :gtk_justification
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_left_margin(text_view, left_margin)
  # @param [GtkTextView] text_view 
  # @param [Integer] left_margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_left_margin, :gtk_text_view_set_left_margin, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_left_margin(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_left_margin, :gtk_text_view_get_left_margin, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_right_margin(text_view, right_margin)
  # @param [GtkTextView] text_view 
  # @param [Integer] right_margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_right_margin, :gtk_text_view_set_right_margin, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_right_margin(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_right_margin, :gtk_text_view_get_right_margin, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_indent(text_view, indent)
  # @param [GtkTextView] text_view 
  # @param [Integer] indent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_indent, :gtk_text_view_set_indent, [GtkTextView, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_indent(text_view)
  # @param [GtkTextView] text_view 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_view_get_indent, :gtk_text_view_get_indent, [GtkTextView], :int
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_tabs(text_view, tabs)
  # @param [GtkTextView] text_view 
  # @param [FFI::Pointer(*PangoTabArray)] tabs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_tabs, :gtk_text_view_set_tabs, [GtkTextView, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_tabs(text_view)
  # @param [GtkTextView] text_view 
  # @return [FFI::Pointer(*PangoTabArray)] 
  # @scope class
  attach_function :gtk_text_view_get_tabs, :gtk_text_view_get_tabs, [GtkTextView], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_default_attributes(text_view)
  # @param [GtkTextView] text_view 
  # @return [GtkTextAttributes] 
  # @scope class
  attach_function :gtk_text_view_get_default_attributes, :gtk_text_view_get_default_attributes, [GtkTextView], GtkTextAttributes
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_input_purpose(text_view, purpose)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_input_purpose_] purpose 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_input_purpose, :gtk_text_view_set_input_purpose, [GtkTextView, :gtk_input_purpose], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_input_purpose(text_view)
  # @param [GtkTextView] text_view 
  # @return [Symbol from _enum_gtk_input_purpose_] 
  # @scope class
  attach_function :gtk_text_view_get_input_purpose, :gtk_text_view_get_input_purpose, [GtkTextView], :gtk_input_purpose
  
  # (Not documented)
  # 
  # @method gtk_text_view_set_input_hints(text_view, hints)
  # @param [GtkTextView] text_view 
  # @param [Symbol from _enum_gtk_input_hints_] hints 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_view_set_input_hints, :gtk_text_view_set_input_hints, [GtkTextView, :gtk_input_hints], :void
  
  # (Not documented)
  # 
  # @method gtk_text_view_get_input_hints(text_view)
  # @param [GtkTextView] text_view 
  # @return [Symbol from _enum_gtk_input_hints_] 
  # @scope class
  attach_function :gtk_text_view_get_input_hints, :gtk_text_view_get_input_hints, [GtkTextView], :gtk_input_hints
  
  # (Not documented)
  class GtkThemingEnginePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_object ::
  #   (unknown) 
  # :priv ::
  #   (GtkThemingEnginePrivate) 
  module GtkThemingEngineWrappers
    # @param [String] property 
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def get_property(property, state, value)
      Gtk.gtk_theming_engine_get_property(self, property, state, value)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [String] args 
    # @return [nil] 
    def get_valist(state, args)
      Gtk.gtk_theming_engine_get_valist(self, state, args)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [nil] 
    def get(state)
      Gtk.gtk_theming_engine_get(self, state)
    end
    
    # @param [String] property_name 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def get_style_property(property_name, value)
      Gtk.gtk_theming_engine_get_style_property(self, property_name, value)
    end
    
    # @param [String] args 
    # @return [nil] 
    def get_style_valist(args)
      Gtk.gtk_theming_engine_get_style_valist(self, args)
    end
    
    # @return [nil] 
    def get_style()
      Gtk.gtk_theming_engine_get_style(self)
    end
    
    # @param [String] color_name 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [Integer] 
    def lookup_color(color_name, color)
      Gtk.gtk_theming_engine_lookup_color(self, color_name, color)
    end
    
    # @return [GtkWidgetPath] 
    def get_path()
      GtkWidgetPath.new Gtk.gtk_theming_engine_get_path(self)
    end
    
    # @param [String] style_class 
    # @return [Integer] 
    def has_class(style_class)
      Gtk.gtk_theming_engine_has_class(self, style_class)
    end
    
    # @param [String] style_region 
    # @param [FFI::Pointer(*GtkRegionFlags)] flags 
    # @return [Integer] 
    def has_region(style_region, flags)
      Gtk.gtk_theming_engine_has_region(self, style_region, flags)
    end
    
    # @return [Symbol from _enum_gtk_state_flags_] 
    def get_state()
      Gtk.gtk_theming_engine_get_state(self)
    end
    
    # @param [Symbol from _enum_gtk_state_type_] state 
    # @param [FFI::Pointer(*Gdouble)] progress 
    # @return [Integer] 
    def state_is_running(state, progress)
      Gtk.gtk_theming_engine_state_is_running(self, state, progress)
    end
    
    # @return [Symbol from _enum_gtk_text_direction_] 
    def get_direction()
      Gtk.gtk_theming_engine_get_direction(self)
    end
    
    # @return [Symbol from _enum_gtk_junction_sides_] 
    def get_junction_sides()
      Gtk.gtk_theming_engine_get_junction_sides(self)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_color(state, color)
      Gtk.gtk_theming_engine_get_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_background_color(state, color)
      Gtk.gtk_theming_engine_get_background_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [FFI::Pointer(*GdkRGBA)] color 
    # @return [nil] 
    def get_border_color(state, color)
      Gtk.gtk_theming_engine_get_border_color(self, state, color)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [GtkBorder] border 
    # @return [nil] 
    def get_border(state, border)
      Gtk.gtk_theming_engine_get_border(self, state, border)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [GtkBorder] padding 
    # @return [nil] 
    def get_padding(state, padding)
      Gtk.gtk_theming_engine_get_padding(self, state, padding)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @param [GtkBorder] margin 
    # @return [nil] 
    def get_margin(state, margin)
      Gtk.gtk_theming_engine_get_margin(self, state, margin)
    end
    
    # @param [Symbol from _enum_gtk_state_flags_] state 
    # @return [FFI::Pointer(*PangoFontDescription)] 
    def get_font(state)
      Gtk.gtk_theming_engine_get_font(self, state)
    end
    
    # @return [FFI::Pointer(*GdkScreen)] 
    def get_screen()
      Gtk.gtk_theming_engine_get_screen(self)
    end
  end
  
  class GtkThemingEngine < FFI::Struct
    include GtkThemingEngineWrappers
    layout :parent_object, :char,
           :priv, GtkThemingEnginePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :render_line ::
  #   (FFI::Pointer(*)) 
  # :render_background ::
  #   (FFI::Pointer(*)) 
  # :render_frame ::
  #   (FFI::Pointer(*)) 
  # :render_frame_gap ::
  #   (FFI::Pointer(*)) 
  # :render_extension ::
  #   (FFI::Pointer(*)) 
  # :render_check ::
  #   (FFI::Pointer(*)) 
  # :render_option ::
  #   (FFI::Pointer(*)) 
  # :render_arrow ::
  #   (FFI::Pointer(*)) 
  # :render_expander ::
  #   (FFI::Pointer(*)) 
  # :render_focus ::
  #   (FFI::Pointer(*)) 
  # :render_layout ::
  #   (FFI::Pointer(*)) 
  # :render_slider ::
  #   (FFI::Pointer(*)) 
  # :render_handle ::
  #   (FFI::Pointer(*)) 
  # :render_activity ::
  #   (FFI::Pointer(*)) 
  # :render_icon_pixbuf ::
  #   (FFI::Pointer(*)) 
  # :render_icon ::
  #   (FFI::Pointer(*)) 
  # :padding ::
  #   (Array<FFI::Pointer(*Void)>) < private >
  class GtkThemingEngineClass < FFI::Struct
    layout :parent_class, :char,
           :render_line, :pointer,
           :render_background, :pointer,
           :render_frame, :pointer,
           :render_frame_gap, :pointer,
           :render_extension, :pointer,
           :render_check, :pointer,
           :render_option, :pointer,
           :render_arrow, :pointer,
           :render_expander, :pointer,
           :render_focus, :pointer,
           :render_layout, :pointer,
           :render_slider, :pointer,
           :render_handle, :pointer,
           :render_activity, :pointer,
           :render_icon_pixbuf, :pointer,
           :render_icon, :pointer,
           :padding, [:pointer, 15]
  end
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_theming_engine_get_type, :gtk_theming_engine_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_register_property(name_space, parse_func, pspec)
  # @param [String] name_space 
  # @param [Proc(_callback_gtk_style_property_parser_)] parse_func 
  # @param [FFI::Pointer(*GParamSpec)] pspec 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_register_property, :gtk_theming_engine_register_property, [:string, :gtk_style_property_parser, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_property(engine, property, state, value)
  # @param [GtkThemingEngine] engine 
  # @param [String] property 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_property, :gtk_theming_engine_get_property, [GtkThemingEngine, :string, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_valist(engine, state, args)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [String] args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_valist, :gtk_theming_engine_get_valist, [GtkThemingEngine, :gtk_state_flags, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get(engine, state)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get, :gtk_theming_engine_get, [GtkThemingEngine, :gtk_state_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_style_property(engine, property_name, value)
  # @param [GtkThemingEngine] engine 
  # @param [String] property_name 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_style_property, :gtk_theming_engine_get_style_property, [GtkThemingEngine, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_style_valist(engine, args)
  # @param [GtkThemingEngine] engine 
  # @param [String] args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_style_valist, :gtk_theming_engine_get_style_valist, [GtkThemingEngine, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_style(engine)
  # @param [GtkThemingEngine] engine 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_style, :gtk_theming_engine_get_style, [GtkThemingEngine], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_lookup_color(engine, color_name, color)
  # @param [GtkThemingEngine] engine 
  # @param [String] color_name 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_theming_engine_lookup_color, :gtk_theming_engine_lookup_color, [GtkThemingEngine, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_path(engine)
  # @param [GtkThemingEngine] engine 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_theming_engine_get_path, :gtk_theming_engine_get_path, [GtkThemingEngine], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_has_class(engine, style_class)
  # @param [GtkThemingEngine] engine 
  # @param [String] style_class 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_theming_engine_has_class, :gtk_theming_engine_has_class, [GtkThemingEngine, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_has_region(engine, style_region, flags)
  # @param [GtkThemingEngine] engine 
  # @param [String] style_region 
  # @param [FFI::Pointer(*GtkRegionFlags)] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_theming_engine_has_region, :gtk_theming_engine_has_region, [GtkThemingEngine, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_state(engine)
  # @param [GtkThemingEngine] engine 
  # @return [Symbol from _enum_gtk_state_flags_] 
  # @scope class
  attach_function :gtk_theming_engine_get_state, :gtk_theming_engine_get_state, [GtkThemingEngine], :gtk_state_flags
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_state_is_running(engine, state, progress)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_type_] state 
  # @param [FFI::Pointer(*Gdouble)] progress 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_theming_engine_state_is_running, :gtk_theming_engine_state_is_running, [GtkThemingEngine, :gtk_state_type, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_direction(engine)
  # @param [GtkThemingEngine] engine 
  # @return [Symbol from _enum_gtk_text_direction_] 
  # @scope class
  attach_function :gtk_theming_engine_get_direction, :gtk_theming_engine_get_direction, [GtkThemingEngine], :gtk_text_direction
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_junction_sides(engine)
  # @param [GtkThemingEngine] engine 
  # @return [Symbol from _enum_gtk_junction_sides_] 
  # @scope class
  attach_function :gtk_theming_engine_get_junction_sides, :gtk_theming_engine_get_junction_sides, [GtkThemingEngine], :gtk_junction_sides
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_color(engine, state, color)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_color, :gtk_theming_engine_get_color, [GtkThemingEngine, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_background_color(engine, state, color)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_background_color, :gtk_theming_engine_get_background_color, [GtkThemingEngine, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_border_color(engine, state, color)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [FFI::Pointer(*GdkRGBA)] color 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_border_color, :gtk_theming_engine_get_border_color, [GtkThemingEngine, :gtk_state_flags, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_border(engine, state, border)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [GtkBorder] border 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_border, :gtk_theming_engine_get_border, [GtkThemingEngine, :gtk_state_flags, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_padding(engine, state, padding)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [GtkBorder] padding 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_padding, :gtk_theming_engine_get_padding, [GtkThemingEngine, :gtk_state_flags, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_margin(engine, state, margin)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @param [GtkBorder] margin 
  # @return [nil] 
  # @scope class
  attach_function :gtk_theming_engine_get_margin, :gtk_theming_engine_get_margin, [GtkThemingEngine, :gtk_state_flags, GtkBorder], :void
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_font(engine, state)
  # @param [GtkThemingEngine] engine 
  # @param [Symbol from _enum_gtk_state_flags_] state 
  # @return [FFI::Pointer(*PangoFontDescription)] 
  # @scope class
  attach_function :gtk_theming_engine_get_font, :gtk_theming_engine_get_font, [GtkThemingEngine, :gtk_state_flags], :pointer
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_load(name)
  # @param [String] name 
  # @return [GtkThemingEngine] 
  # @scope class
  attach_function :gtk_theming_engine_load, :gtk_theming_engine_load, [:string], GtkThemingEngine
  
  # (Not documented)
  # 
  # @method gtk_theming_engine_get_screen(engine)
  # @param [GtkThemingEngine] engine 
  # @return [FFI::Pointer(*GdkScreen)] 
  # @scope class
  attach_function :gtk_theming_engine_get_screen, :gtk_theming_engine_get_screen, [GtkThemingEngine], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_toolbar_space_style).</em>
  # 
  # === Options:
  # :empty ::
  #   
  # :line ::
  #   
  # 
  # @method _enum_gtk_toolbar_space_style_
  # @return [Symbol]
  # @scope class
  enum :gtk_toolbar_space_style, [
    :empty, 0,
    :line, 1
  ]
  
  # (Not documented)
  class GtkToolbarPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :container ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkToolbarPrivate) 
  module GtkToolbarWrappers
    # @param [GtkToolItem] item 
    # @param [Integer] pos 
    # @return [nil] 
    def insert(item, pos)
      Gtk.gtk_toolbar_insert(self, item, pos)
    end
    
    # @param [GtkToolItem] item 
    # @return [Integer] 
    def get_item_index(item)
      Gtk.gtk_toolbar_get_item_index(self, item)
    end
    
    # @return [Integer] 
    def get_n_items()
      Gtk.gtk_toolbar_get_n_items(self)
    end
    
    # @param [Integer] n 
    # @return [GtkToolItem] 
    def get_nth_item(n)
      GtkToolItem.new Gtk.gtk_toolbar_get_nth_item(self, n)
    end
    
    # @return [Integer] 
    def get_show_arrow()
      Gtk.gtk_toolbar_get_show_arrow(self)
    end
    
    # @param [Integer] show_arrow 
    # @return [nil] 
    def set_show_arrow(show_arrow)
      Gtk.gtk_toolbar_set_show_arrow(self, show_arrow)
    end
    
    # @return [Symbol from _enum_gtk_toolbar_style_] 
    def get_style()
      Gtk.gtk_toolbar_get_style(self)
    end
    
    # @param [Symbol from _enum_gtk_toolbar_style_] style 
    # @return [nil] 
    def set_style(style)
      Gtk.gtk_toolbar_set_style(self, style)
    end
    
    # @return [nil] 
    def unset_style()
      Gtk.gtk_toolbar_unset_style(self)
    end
    
    # @return [Symbol from _enum_gtk_icon_size_] 
    def get_icon_size()
      Gtk.gtk_toolbar_get_icon_size(self)
    end
    
    # @param [Symbol from _enum_gtk_icon_size_] icon_size 
    # @return [nil] 
    def set_icon_size(icon_size)
      Gtk.gtk_toolbar_set_icon_size(self, icon_size)
    end
    
    # @return [nil] 
    def unset_icon_size()
      Gtk.gtk_toolbar_unset_icon_size(self)
    end
    
    # @return [Symbol from _enum_gtk_relief_style_] 
    def get_relief_style()
      Gtk.gtk_toolbar_get_relief_style(self)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [Integer] 
    def get_drop_index(x, y)
      Gtk.gtk_toolbar_get_drop_index(self, x, y)
    end
    
    # @param [GtkToolItem] tool_item 
    # @param [Integer] index 
    # @return [nil] 
    def set_drop_highlight_item(tool_item, index)
      Gtk.gtk_toolbar_set_drop_highlight_item(self, tool_item, index)
    end
  end
  
  class GtkToolbar < FFI::Struct
    include GtkToolbarWrappers
    layout :container, GtkContainer.by_value,
           :priv, GtkToolbarPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :orientation_changed ::
  #   (FFI::Pointer(*)) signals
  # :style_changed ::
  #   (FFI::Pointer(*)) 
  # :popup_context_menu ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToolbarClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :orientation_changed, :pointer,
           :style_changed, :pointer,
           :popup_context_menu, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_get_type, :gtk_toolbar_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_toolbar_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_toolbar_new, :gtk_toolbar_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_toolbar_insert(toolbar, item, pos)
  # @param [GtkToolbar] toolbar 
  # @param [GtkToolItem] item 
  # @param [Integer] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_insert, :gtk_toolbar_insert, [GtkToolbar, GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_item_index(toolbar, item)
  # @param [GtkToolbar] toolbar 
  # @param [GtkToolItem] item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_get_item_index, :gtk_toolbar_get_item_index, [GtkToolbar, GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_n_items(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_get_n_items, :gtk_toolbar_get_n_items, [GtkToolbar], :int
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_nth_item(toolbar, n)
  # @param [GtkToolbar] toolbar 
  # @param [Integer] n 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_toolbar_get_nth_item, :gtk_toolbar_get_nth_item, [GtkToolbar, :int], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_show_arrow(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_get_show_arrow, :gtk_toolbar_get_show_arrow, [GtkToolbar], :int
  
  # (Not documented)
  # 
  # @method gtk_toolbar_set_show_arrow(toolbar, show_arrow)
  # @param [GtkToolbar] toolbar 
  # @param [Integer] show_arrow 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_set_show_arrow, :gtk_toolbar_set_show_arrow, [GtkToolbar, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_style(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [Symbol from _enum_gtk_toolbar_style_] 
  # @scope class
  attach_function :gtk_toolbar_get_style, :gtk_toolbar_get_style, [GtkToolbar], :gtk_toolbar_style
  
  # (Not documented)
  # 
  # @method gtk_toolbar_set_style(toolbar, style)
  # @param [GtkToolbar] toolbar 
  # @param [Symbol from _enum_gtk_toolbar_style_] style 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_set_style, :gtk_toolbar_set_style, [GtkToolbar, :gtk_toolbar_style], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_unset_style(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_unset_style, :gtk_toolbar_unset_style, [GtkToolbar], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_icon_size(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_toolbar_get_icon_size, :gtk_toolbar_get_icon_size, [GtkToolbar], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_toolbar_set_icon_size(toolbar, icon_size)
  # @param [GtkToolbar] toolbar 
  # @param [Symbol from _enum_gtk_icon_size_] icon_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_set_icon_size, :gtk_toolbar_set_icon_size, [GtkToolbar, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_unset_icon_size(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_unset_icon_size, :gtk_toolbar_unset_icon_size, [GtkToolbar], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_relief_style(toolbar)
  # @param [GtkToolbar] toolbar 
  # @return [Symbol from _enum_gtk_relief_style_] 
  # @scope class
  attach_function :gtk_toolbar_get_relief_style, :gtk_toolbar_get_relief_style, [GtkToolbar], :gtk_relief_style
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_drop_index(toolbar, x, y)
  # @param [GtkToolbar] toolbar 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_get_drop_index, :gtk_toolbar_get_drop_index, [GtkToolbar, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_toolbar_set_drop_highlight_item(toolbar, tool_item, index)
  # @param [GtkToolbar] toolbar 
  # @param [GtkToolItem] tool_item 
  # @param [Integer] index 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_set_drop_highlight_item, :gtk_toolbar_set_drop_highlight_item, [GtkToolbar, GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_elide_underscores(original)
  # @param [String] original 
  # @return [String] 
  # @scope class
  attach_function :gtk_toolbar_elide_underscores, :_gtk_toolbar_elide_underscores, [:string], :string
  
  # (Not documented)
  # 
  # @method gtk_toolbar_paint_space_line(widget, toolbar, cr)
  # @param [GtkWidget] widget 
  # @param [GtkToolbar] toolbar 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @return [nil] 
  # @scope class
  attach_function :gtk_toolbar_paint_space_line, :_gtk_toolbar_paint_space_line, [GtkWidget, GtkToolbar, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_toolbar_get_default_space_size()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_get_default_space_size, :_gtk_toolbar_get_default_space_size, [], :int
  
  # (Not documented)
  class GtkToolItemGroupPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkToolItemGroupPrivate) 
  module GtkToolItemGroupWrappers
    # @param [String] label 
    # @return [nil] 
    def set_label(label)
      Gtk.gtk_tool_item_group_set_label(self, label)
    end
    
    # @param [GtkWidget] label_widget 
    # @return [nil] 
    def set_label_widget(label_widget)
      Gtk.gtk_tool_item_group_set_label_widget(self, label_widget)
    end
    
    # @param [Integer] collapsed 
    # @return [nil] 
    def set_collapsed(collapsed)
      Gtk.gtk_tool_item_group_set_collapsed(self, collapsed)
    end
    
    # @param [unknown] ellipsize 
    # @return [nil] 
    def set_ellipsize(ellipsize)
      Gtk.gtk_tool_item_group_set_ellipsize(self, ellipsize)
    end
    
    # @param [Symbol from _enum_gtk_relief_style_] style 
    # @return [nil] 
    def set_header_relief(style)
      Gtk.gtk_tool_item_group_set_header_relief(self, style)
    end
    
    # @return [String] 
    def get_label()
      Gtk.gtk_tool_item_group_get_label(self)
    end
    
    # @return [GtkWidget] 
    def get_label_widget()
      GtkWidget.new Gtk.gtk_tool_item_group_get_label_widget(self)
    end
    
    # @return [Integer] 
    def get_collapsed()
      Gtk.gtk_tool_item_group_get_collapsed(self)
    end
    
    # @return [unknown] 
    def get_ellipsize()
      Gtk.gtk_tool_item_group_get_ellipsize(self)
    end
    
    # @return [Symbol from _enum_gtk_relief_style_] 
    def get_header_relief()
      Gtk.gtk_tool_item_group_get_header_relief(self)
    end
    
    # @param [GtkToolItem] item 
    # @param [Integer] position 
    # @return [nil] 
    def insert(item, position)
      Gtk.gtk_tool_item_group_insert(self, item, position)
    end
    
    # @param [GtkToolItem] item 
    # @param [Integer] position 
    # @return [nil] 
    def set_item_position(item, position)
      Gtk.gtk_tool_item_group_set_item_position(self, item, position)
    end
    
    # @param [GtkToolItem] item 
    # @return [Integer] 
    def get_item_position(item)
      Gtk.gtk_tool_item_group_get_item_position(self, item)
    end
    
    # @return [Integer] 
    def get_n_items()
      Gtk.gtk_tool_item_group_get_n_items(self)
    end
    
    # @param [Integer] index 
    # @return [GtkToolItem] 
    def get_nth_item(index)
      GtkToolItem.new Gtk.gtk_tool_item_group_get_nth_item(self, index)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [GtkToolItem] 
    def get_drop_item(x, y)
      GtkToolItem.new Gtk.gtk_tool_item_group_get_drop_item(self, x, y)
    end
  end
  
  class GtkToolItemGroup < FFI::Struct
    include GtkToolItemGroupWrappers
    layout :parent_instance, GtkContainer.by_value,
           :priv, GtkToolItemGroupPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToolItemGroupClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_group_get_type, :gtk_tool_item_group_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_new(label)
  # @param [String] label 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_item_group_new, :gtk_tool_item_group_new, [:string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_set_label(group, label)
  # @param [GtkToolItemGroup] group 
  # @param [String] label 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_set_label, :gtk_tool_item_group_set_label, [GtkToolItemGroup, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_set_label_widget(group, label_widget)
  # @param [GtkToolItemGroup] group 
  # @param [GtkWidget] label_widget 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_set_label_widget, :gtk_tool_item_group_set_label_widget, [GtkToolItemGroup, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_set_collapsed(group, collapsed)
  # @param [GtkToolItemGroup] group 
  # @param [Integer] collapsed 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_set_collapsed, :gtk_tool_item_group_set_collapsed, [GtkToolItemGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_set_ellipsize(group, ellipsize)
  # @param [GtkToolItemGroup] group 
  # @param [unknown] ellipsize 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_set_ellipsize, :gtk_tool_item_group_set_ellipsize, [GtkToolItemGroup, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_set_header_relief(group, style)
  # @param [GtkToolItemGroup] group 
  # @param [Symbol from _enum_gtk_relief_style_] style 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_set_header_relief, :gtk_tool_item_group_set_header_relief, [GtkToolItemGroup, :gtk_relief_style], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_label(group)
  # @param [GtkToolItemGroup] group 
  # @return [String] 
  # @scope class
  attach_function :gtk_tool_item_group_get_label, :gtk_tool_item_group_get_label, [GtkToolItemGroup], :string
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_label_widget(group)
  # @param [GtkToolItemGroup] group 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_item_group_get_label_widget, :gtk_tool_item_group_get_label_widget, [GtkToolItemGroup], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_collapsed(group)
  # @param [GtkToolItemGroup] group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_group_get_collapsed, :gtk_tool_item_group_get_collapsed, [GtkToolItemGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_ellipsize(group)
  # @param [GtkToolItemGroup] group 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_tool_item_group_get_ellipsize, :gtk_tool_item_group_get_ellipsize, [GtkToolItemGroup], :char
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_header_relief(group)
  # @param [GtkToolItemGroup] group 
  # @return [Symbol from _enum_gtk_relief_style_] 
  # @scope class
  attach_function :gtk_tool_item_group_get_header_relief, :gtk_tool_item_group_get_header_relief, [GtkToolItemGroup], :gtk_relief_style
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_insert(group, item, position)
  # @param [GtkToolItemGroup] group 
  # @param [GtkToolItem] item 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_insert, :gtk_tool_item_group_insert, [GtkToolItemGroup, GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_set_item_position(group, item, position)
  # @param [GtkToolItemGroup] group 
  # @param [GtkToolItem] item 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_item_group_set_item_position, :gtk_tool_item_group_set_item_position, [GtkToolItemGroup, GtkToolItem, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_item_position(group, item)
  # @param [GtkToolItemGroup] group 
  # @param [GtkToolItem] item 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_group_get_item_position, :gtk_tool_item_group_get_item_position, [GtkToolItemGroup, GtkToolItem], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_n_items(group)
  # @param [GtkToolItemGroup] group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_item_group_get_n_items, :gtk_tool_item_group_get_n_items, [GtkToolItemGroup], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_nth_item(group, index)
  # @param [GtkToolItemGroup] group 
  # @param [Integer] index 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_tool_item_group_get_nth_item, :gtk_tool_item_group_get_nth_item, [GtkToolItemGroup, :uint], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_tool_item_group_get_drop_item(group, x, y)
  # @param [GtkToolItemGroup] group 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_tool_item_group_get_drop_item, :gtk_tool_item_group_get_drop_item, [GtkToolItemGroup, :int, :int], GtkToolItem
  
  # (Not documented)
  class GtkToolPalettePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_tool_palette_drag_targets).</em>
  # 
  # === Options:
  # :items ::
  #   < flags >
  # :groups ::
  #   
  # 
  # @method _enum_gtk_tool_palette_drag_targets_
  # @return [Symbol]
  # @scope class
  enum :gtk_tool_palette_drag_targets, [
    :items, 1,
    :groups, 2
  ]
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (GtkContainer) 
  # :priv ::
  #   (GtkToolPalettePrivate) 
  module GtkToolPaletteWrappers
    # @param [GtkToolItemGroup] group 
    # @param [Integer] position 
    # @return [nil] 
    def set_group_position(group, position)
      Gtk.gtk_tool_palette_set_group_position(self, group, position)
    end
    
    # @param [GtkToolItemGroup] group 
    # @param [Integer] exclusive 
    # @return [nil] 
    def set_exclusive(group, exclusive)
      Gtk.gtk_tool_palette_set_exclusive(self, group, exclusive)
    end
    
    # @param [GtkToolItemGroup] group 
    # @param [Integer] expand 
    # @return [nil] 
    def set_expand(group, expand)
      Gtk.gtk_tool_palette_set_expand(self, group, expand)
    end
    
    # @param [GtkToolItemGroup] group 
    # @return [Integer] 
    def get_group_position(group)
      Gtk.gtk_tool_palette_get_group_position(self, group)
    end
    
    # @param [GtkToolItemGroup] group 
    # @return [Integer] 
    def get_exclusive(group)
      Gtk.gtk_tool_palette_get_exclusive(self, group)
    end
    
    # @param [GtkToolItemGroup] group 
    # @return [Integer] 
    def get_expand(group)
      Gtk.gtk_tool_palette_get_expand(self, group)
    end
    
    # @param [Symbol from _enum_gtk_icon_size_] icon_size 
    # @return [nil] 
    def set_icon_size(icon_size)
      Gtk.gtk_tool_palette_set_icon_size(self, icon_size)
    end
    
    # @return [nil] 
    def unset_icon_size()
      Gtk.gtk_tool_palette_unset_icon_size(self)
    end
    
    # @param [Symbol from _enum_gtk_toolbar_style_] style 
    # @return [nil] 
    def set_style(style)
      Gtk.gtk_tool_palette_set_style(self, style)
    end
    
    # @return [nil] 
    def unset_style()
      Gtk.gtk_tool_palette_unset_style(self)
    end
    
    # @return [Symbol from _enum_gtk_icon_size_] 
    def get_icon_size()
      Gtk.gtk_tool_palette_get_icon_size(self)
    end
    
    # @return [Symbol from _enum_gtk_toolbar_style_] 
    def get_style()
      Gtk.gtk_tool_palette_get_style(self)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [GtkToolItem] 
    def get_drop_item(x, y)
      GtkToolItem.new Gtk.gtk_tool_palette_get_drop_item(self, x, y)
    end
    
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [GtkToolItemGroup] 
    def get_drop_group(x, y)
      GtkToolItemGroup.new Gtk.gtk_tool_palette_get_drop_group(self, x, y)
    end
    
    # @param [GtkSelectionData] selection 
    # @return [GtkWidget] 
    def get_drag_item(selection)
      GtkWidget.new Gtk.gtk_tool_palette_get_drag_item(self, selection)
    end
    
    # @param [Symbol from _enum_gtk_tool_palette_drag_targets_] targets 
    # @return [nil] 
    def set_drag_source(targets)
      Gtk.gtk_tool_palette_set_drag_source(self, targets)
    end
    
    # @param [GtkWidget] widget 
    # @param [Symbol from _enum_gtk_dest_defaults_] flags 
    # @param [Symbol from _enum_gtk_tool_palette_drag_targets_] targets 
    # @param [unknown] actions 
    # @return [nil] 
    def add_drag_dest(widget, flags, targets, actions)
      Gtk.gtk_tool_palette_add_drag_dest(self, widget, flags, targets, actions)
    end
    
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_tool_palette_get_hadjustment(self)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_tool_palette_get_vadjustment(self)
    end
  end
  
  class GtkToolPalette < FFI::Struct
    include GtkToolPaletteWrappers
    layout :parent_instance, GtkContainer.by_value,
           :priv, GtkToolPalettePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkContainerClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkToolPaletteClass < FFI::Struct
    layout :parent_class, GtkContainerClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_palette_get_type, :gtk_tool_palette_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_palette_new, :gtk_tool_palette_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_set_group_position(palette, group, position)
  # @param [GtkToolPalette] palette 
  # @param [GtkToolItemGroup] group 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_set_group_position, :gtk_tool_palette_set_group_position, [GtkToolPalette, GtkToolItemGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_set_exclusive(palette, group, exclusive)
  # @param [GtkToolPalette] palette 
  # @param [GtkToolItemGroup] group 
  # @param [Integer] exclusive 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_set_exclusive, :gtk_tool_palette_set_exclusive, [GtkToolPalette, GtkToolItemGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_set_expand(palette, group, expand)
  # @param [GtkToolPalette] palette 
  # @param [GtkToolItemGroup] group 
  # @param [Integer] expand 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_set_expand, :gtk_tool_palette_set_expand, [GtkToolPalette, GtkToolItemGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_group_position(palette, group)
  # @param [GtkToolPalette] palette 
  # @param [GtkToolItemGroup] group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_palette_get_group_position, :gtk_tool_palette_get_group_position, [GtkToolPalette, GtkToolItemGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_exclusive(palette, group)
  # @param [GtkToolPalette] palette 
  # @param [GtkToolItemGroup] group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_palette_get_exclusive, :gtk_tool_palette_get_exclusive, [GtkToolPalette, GtkToolItemGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_expand(palette, group)
  # @param [GtkToolPalette] palette 
  # @param [GtkToolItemGroup] group 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_palette_get_expand, :gtk_tool_palette_get_expand, [GtkToolPalette, GtkToolItemGroup], :int
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_set_icon_size(palette, icon_size)
  # @param [GtkToolPalette] palette 
  # @param [Symbol from _enum_gtk_icon_size_] icon_size 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_set_icon_size, :gtk_tool_palette_set_icon_size, [GtkToolPalette, :gtk_icon_size], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_unset_icon_size(palette)
  # @param [GtkToolPalette] palette 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_unset_icon_size, :gtk_tool_palette_unset_icon_size, [GtkToolPalette], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_set_style(palette, style)
  # @param [GtkToolPalette] palette 
  # @param [Symbol from _enum_gtk_toolbar_style_] style 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_set_style, :gtk_tool_palette_set_style, [GtkToolPalette, :gtk_toolbar_style], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_unset_style(palette)
  # @param [GtkToolPalette] palette 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_unset_style, :gtk_tool_palette_unset_style, [GtkToolPalette], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_icon_size(palette)
  # @param [GtkToolPalette] palette 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_tool_palette_get_icon_size, :gtk_tool_palette_get_icon_size, [GtkToolPalette], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_style(palette)
  # @param [GtkToolPalette] palette 
  # @return [Symbol from _enum_gtk_toolbar_style_] 
  # @scope class
  attach_function :gtk_tool_palette_get_style, :gtk_tool_palette_get_style, [GtkToolPalette], :gtk_toolbar_style
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_drop_item(palette, x, y)
  # @param [GtkToolPalette] palette 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [GtkToolItem] 
  # @scope class
  attach_function :gtk_tool_palette_get_drop_item, :gtk_tool_palette_get_drop_item, [GtkToolPalette, :int, :int], GtkToolItem
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_drop_group(palette, x, y)
  # @param [GtkToolPalette] palette 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [GtkToolItemGroup] 
  # @scope class
  attach_function :gtk_tool_palette_get_drop_group, :gtk_tool_palette_get_drop_group, [GtkToolPalette, :int, :int], GtkToolItemGroup
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_drag_item(palette, selection)
  # @param [GtkToolPalette] palette 
  # @param [GtkSelectionData] selection 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_tool_palette_get_drag_item, :gtk_tool_palette_get_drag_item, [GtkToolPalette, GtkSelectionData], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_set_drag_source(palette, targets)
  # @param [GtkToolPalette] palette 
  # @param [Symbol from _enum_gtk_tool_palette_drag_targets_] targets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_set_drag_source, :gtk_tool_palette_set_drag_source, [GtkToolPalette, :gtk_tool_palette_drag_targets], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_add_drag_dest(palette, widget, flags, targets, actions)
  # @param [GtkToolPalette] palette 
  # @param [GtkWidget] widget 
  # @param [Symbol from _enum_gtk_dest_defaults_] flags 
  # @param [Symbol from _enum_gtk_tool_palette_drag_targets_] targets 
  # @param [unknown] actions 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_palette_add_drag_dest, :gtk_tool_palette_add_drag_dest, [GtkToolPalette, GtkWidget, :gtk_dest_defaults, :gtk_tool_palette_drag_targets, :char], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_hadjustment(palette)
  # @param [GtkToolPalette] palette 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_tool_palette_get_hadjustment, :gtk_tool_palette_get_hadjustment, [GtkToolPalette], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_vadjustment(palette)
  # @param [GtkToolPalette] palette 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_tool_palette_get_vadjustment, :gtk_tool_palette_get_vadjustment, [GtkToolPalette], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_drag_target_item()
  # @return [GtkTargetEntry] 
  # @scope class
  attach_function :gtk_tool_palette_get_drag_target_item, :gtk_tool_palette_get_drag_target_item, [], GtkTargetEntry
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_get_drag_target_group()
  # @return [GtkTargetEntry] 
  # @scope class
  attach_function :gtk_tool_palette_get_drag_target_group, :gtk_tool_palette_get_drag_target_group, [], GtkTargetEntry
  
  # (Not documented)
  module GtkToolShellWrappers
    # @return [Symbol from _enum_gtk_icon_size_] 
    def get_icon_size()
      Gtk.gtk_tool_shell_get_icon_size(self)
    end
    
    # @return [Symbol from _enum_gtk_orientation_] 
    def get_orientation()
      Gtk.gtk_tool_shell_get_orientation(self)
    end
    
    # @return [Symbol from _enum_gtk_toolbar_style_] 
    def get_style()
      Gtk.gtk_tool_shell_get_style(self)
    end
    
    # @return [Symbol from _enum_gtk_relief_style_] 
    def get_relief_style()
      Gtk.gtk_tool_shell_get_relief_style(self)
    end
    
    # @return [nil] 
    def rebuild_menu()
      Gtk.gtk_tool_shell_rebuild_menu(self)
    end
    
    # @return [Symbol from _enum_gtk_orientation_] 
    def get_text_orientation()
      Gtk.gtk_tool_shell_get_text_orientation(self)
    end
    
    # @return [Float] 
    def get_text_alignment()
      Gtk.gtk_tool_shell_get_text_alignment(self)
    end
    
    # @return [unknown] 
    def get_ellipsize_mode()
      Gtk.gtk_tool_shell_get_ellipsize_mode(self)
    end
    
    # @return [GtkSizeGroup] 
    def get_text_size_group()
      GtkSizeGroup.new Gtk.gtk_tool_shell_get_text_size_group(self)
    end
  end
  
  class GtkToolShell < FFI::Struct
    include GtkToolShellWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) < private >
  # :get_icon_size ::
  #   (FFI::Pointer(*)) < public >
  # :get_orientation ::
  #   (FFI::Pointer(*)) 
  # :get_style ::
  #   (FFI::Pointer(*)) 
  # :get_relief_style ::
  #   (FFI::Pointer(*)) 
  # :rebuild_menu ::
  #   (FFI::Pointer(*)) 
  # :get_text_orientation ::
  #   (FFI::Pointer(*)) 
  # :get_text_alignment ::
  #   (FFI::Pointer(*)) 
  # :get_ellipsize_mode ::
  #   (FFI::Pointer(*)) 
  # :get_text_size_group ::
  #   (FFI::Pointer(*)) 
  class GtkToolShellIface < FFI::Struct
    layout :g_iface, :char,
           :get_icon_size, :pointer,
           :get_orientation, :pointer,
           :get_style, :pointer,
           :get_relief_style, :pointer,
           :rebuild_menu, :pointer,
           :get_text_orientation, :pointer,
           :get_text_alignment, :pointer,
           :get_ellipsize_mode, :pointer,
           :get_text_size_group, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_shell_get_type, :gtk_tool_shell_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_icon_size(shell)
  # @param [GtkToolShell] shell 
  # @return [Symbol from _enum_gtk_icon_size_] 
  # @scope class
  attach_function :gtk_tool_shell_get_icon_size, :gtk_tool_shell_get_icon_size, [GtkToolShell], :gtk_icon_size
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_orientation(shell)
  # @param [GtkToolShell] shell 
  # @return [Symbol from _enum_gtk_orientation_] 
  # @scope class
  attach_function :gtk_tool_shell_get_orientation, :gtk_tool_shell_get_orientation, [GtkToolShell], :gtk_orientation
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_style(shell)
  # @param [GtkToolShell] shell 
  # @return [Symbol from _enum_gtk_toolbar_style_] 
  # @scope class
  attach_function :gtk_tool_shell_get_style, :gtk_tool_shell_get_style, [GtkToolShell], :gtk_toolbar_style
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_relief_style(shell)
  # @param [GtkToolShell] shell 
  # @return [Symbol from _enum_gtk_relief_style_] 
  # @scope class
  attach_function :gtk_tool_shell_get_relief_style, :gtk_tool_shell_get_relief_style, [GtkToolShell], :gtk_relief_style
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_rebuild_menu(shell)
  # @param [GtkToolShell] shell 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tool_shell_rebuild_menu, :gtk_tool_shell_rebuild_menu, [GtkToolShell], :void
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_text_orientation(shell)
  # @param [GtkToolShell] shell 
  # @return [Symbol from _enum_gtk_orientation_] 
  # @scope class
  attach_function :gtk_tool_shell_get_text_orientation, :gtk_tool_shell_get_text_orientation, [GtkToolShell], :gtk_orientation
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_text_alignment(shell)
  # @param [GtkToolShell] shell 
  # @return [Float] 
  # @scope class
  attach_function :gtk_tool_shell_get_text_alignment, :gtk_tool_shell_get_text_alignment, [GtkToolShell], :float
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_ellipsize_mode(shell)
  # @param [GtkToolShell] shell 
  # @return [unknown] 
  # @scope class
  attach_function :gtk_tool_shell_get_ellipsize_mode, :gtk_tool_shell_get_ellipsize_mode, [GtkToolShell], :char
  
  # (Not documented)
  # 
  # @method gtk_tool_shell_get_text_size_group(shell)
  # @param [GtkToolShell] shell 
  # @return [GtkSizeGroup] 
  # @scope class
  attach_function :gtk_tool_shell_get_text_size_group, :gtk_tool_shell_get_text_size_group, [GtkToolShell], GtkSizeGroup
  
  # (Not documented)
  # 
  # @method gtk_test_init(argcp, argvp)
  # @param [FFI::Pointer(*Int)] argcp 
  # @param [FFI::Pointer(***CharS)] argvp 
  # @return [nil] 
  # @scope class
  attach_function :gtk_test_init, :gtk_test_init, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_test_register_all_types()
  # @return [nil] 
  # @scope class
  attach_function :gtk_test_register_all_types, :gtk_test_register_all_types, [], :void
  
  # (Not documented)
  # 
  # @method gtk_test_list_all_types(n_types)
  # @param [FFI::Pointer(*Guint)] n_types 
  # @return [FFI::Pointer(*GType)] 
  # @scope class
  attach_function :gtk_test_list_all_types, :gtk_test_list_all_types, [:pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_test_find_widget(widget, label_pattern, widget_type)
  # @param [GtkWidget] widget 
  # @param [String] label_pattern 
  # @param [Integer] widget_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_test_find_widget, :gtk_test_find_widget, [GtkWidget, :string, :uint], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_test_create_widget(widget_type, first_property_name)
  # @param [Integer] widget_type 
  # @param [String] first_property_name 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_test_create_widget, :gtk_test_create_widget, [:uint, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_test_create_simple_window(window_title, dialog_text)
  # @param [String] window_title 
  # @param [String] dialog_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_test_create_simple_window, :gtk_test_create_simple_window, [:string, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_test_display_button_window(window_title, dialog_text)
  # @param [String] window_title 
  # @param [String] dialog_text 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_test_display_button_window, :gtk_test_display_button_window, [:string, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_test_slider_set_perc(widget, percentage)
  # @param [GtkWidget] widget 
  # @param [Float] percentage 
  # @return [nil] 
  # @scope class
  attach_function :gtk_test_slider_set_perc, :gtk_test_slider_set_perc, [GtkWidget, :double], :void
  
  # (Not documented)
  # 
  # @method gtk_test_slider_get_value(widget)
  # @param [GtkWidget] widget 
  # @return [Float] 
  # @scope class
  attach_function :gtk_test_slider_get_value, :gtk_test_slider_get_value, [GtkWidget], :double
  
  # (Not documented)
  # 
  # @method gtk_test_spin_button_click(spinner, button, upwards)
  # @param [GtkSpinButton] spinner 
  # @param [Integer] button 
  # @param [Integer] upwards 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_test_spin_button_click, :gtk_test_spin_button_click, [GtkSpinButton, :uint, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_test_widget_click(widget, button, modifiers)
  # @param [GtkWidget] widget 
  # @param [Integer] button 
  # @param [unknown] modifiers 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_test_widget_click, :gtk_test_widget_click, [GtkWidget, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_test_widget_send_key(widget, keyval, modifiers)
  # @param [GtkWidget] widget 
  # @param [Integer] keyval 
  # @param [unknown] modifiers 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_test_widget_send_key, :gtk_test_widget_send_key, [GtkWidget, :uint, :char], :int
  
  # (Not documented)
  # 
  # @method gtk_test_text_set(widget, string)
  # @param [GtkWidget] widget 
  # @param [String] string 
  # @return [nil] 
  # @scope class
  attach_function :gtk_test_text_set, :gtk_test_text_set, [GtkWidget, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_test_text_get(widget)
  # @param [GtkWidget] widget 
  # @return [String] 
  # @scope class
  attach_function :gtk_test_text_get, :gtk_test_text_get, [GtkWidget], :string
  
  # (Not documented)
  # 
  # @method gtk_test_find_sibling(base_widget, widget_type)
  # @param [GtkWidget] base_widget 
  # @param [Integer] widget_type 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_test_find_sibling, :gtk_test_find_sibling, [GtkWidget, :uint], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_test_find_label(widget, label_pattern)
  # @param [GtkWidget] widget 
  # @param [String] label_pattern 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_test_find_label, :gtk_test_find_label, [GtkWidget, :string], GtkWidget
  
  # (Not documented)
  module GtkTreeDragSourceWrappers
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def row_draggable(path)
      Gtk.gtk_tree_drag_source_row_draggable(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def drag_data_delete(path)
      Gtk.gtk_tree_drag_source_drag_data_delete(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @param [GtkSelectionData] selection_data 
    # @return [Integer] 
    def drag_data_get(path, selection_data)
      Gtk.gtk_tree_drag_source_drag_data_get(self, path, selection_data)
    end
  end
  
  class GtkTreeDragSource < FFI::Struct
    include GtkTreeDragSourceWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :row_draggable ::
  #   (FFI::Pointer(*)) VTable - not signals
  # :drag_data_get ::
  #   (FFI::Pointer(*)) 
  # :drag_data_delete ::
  #   (FFI::Pointer(*)) 
  class GtkTreeDragSourceIface < FFI::Struct
    layout :g_iface, :char,
           :row_draggable, :pointer,
           :drag_data_get, :pointer,
           :drag_data_delete, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_source_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_source_get_type, :gtk_tree_drag_source_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_source_row_draggable(drag_source, path)
  # @param [GtkTreeDragSource] drag_source 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_source_row_draggable, :gtk_tree_drag_source_row_draggable, [GtkTreeDragSource, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_source_drag_data_delete(drag_source, path)
  # @param [GtkTreeDragSource] drag_source 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_source_drag_data_delete, :gtk_tree_drag_source_drag_data_delete, [GtkTreeDragSource, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_source_drag_data_get(drag_source, path, selection_data)
  # @param [GtkTreeDragSource] drag_source 
  # @param [GtkTreePath] path 
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_source_drag_data_get, :gtk_tree_drag_source_drag_data_get, [GtkTreeDragSource, GtkTreePath, GtkSelectionData], :int
  
  # (Not documented)
  module GtkTreeDragDestWrappers
    # @param [GtkTreePath] dest 
    # @param [GtkSelectionData] selection_data 
    # @return [Integer] 
    def drag_data_received(dest, selection_data)
      Gtk.gtk_tree_drag_dest_drag_data_received(self, dest, selection_data)
    end
    
    # @param [GtkTreePath] dest_path 
    # @param [GtkSelectionData] selection_data 
    # @return [Integer] 
    def row_drop_possible(dest_path, selection_data)
      Gtk.gtk_tree_drag_dest_row_drop_possible(self, dest_path, selection_data)
    end
  end
  
  class GtkTreeDragDest < FFI::Struct
    include GtkTreeDragDestWrappers
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :g_iface ::
  #   (unknown) 
  # :drag_data_received ::
  #   (FFI::Pointer(*)) VTable - not signals
  # :row_drop_possible ::
  #   (FFI::Pointer(*)) 
  class GtkTreeDragDestIface < FFI::Struct
    layout :g_iface, :char,
           :drag_data_received, :pointer,
           :row_drop_possible, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_dest_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_dest_get_type, :gtk_tree_drag_dest_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_dest_drag_data_received(drag_dest, dest, selection_data)
  # @param [GtkTreeDragDest] drag_dest 
  # @param [GtkTreePath] dest 
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_dest_drag_data_received, :gtk_tree_drag_dest_drag_data_received, [GtkTreeDragDest, GtkTreePath, GtkSelectionData], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_drag_dest_row_drop_possible(drag_dest, dest_path, selection_data)
  # @param [GtkTreeDragDest] drag_dest 
  # @param [GtkTreePath] dest_path 
  # @param [GtkSelectionData] selection_data 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_drag_dest_row_drop_possible, :gtk_tree_drag_dest_row_drop_possible, [GtkTreeDragDest, GtkTreePath, GtkSelectionData], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_set_row_drag_data(selection_data, tree_model, path)
  # @param [GtkSelectionData] selection_data 
  # @param [GtkTreeModel] tree_model 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_set_row_drag_data, :gtk_tree_set_row_drag_data, [GtkSelectionData, GtkTreeModel, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_get_row_drag_data(selection_data, tree_model, path)
  # @param [GtkSelectionData] selection_data 
  # @param [FFI::Pointer(**GtkTreeModel)] tree_model 
  # @param [FFI::Pointer(**GtkTreePath)] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_get_row_drag_data, :gtk_tree_get_row_drag_data, [GtkSelectionData, :pointer, :pointer], :int
  
  # (Not documented)
  class GtkTreeModelSortPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkTreeModelSortPrivate) < private >
  module GtkTreeModelSortWrappers
    # @return [GtkTreeModel] 
    def get_model()
      GtkTreeModel.new Gtk.gtk_tree_model_sort_get_model(self)
    end
    
    # @param [GtkTreePath] child_path 
    # @return [GtkTreePath] 
    def convert_child_path_to_path(child_path)
      GtkTreePath.new Gtk.gtk_tree_model_sort_convert_child_path_to_path(self, child_path)
    end
    
    # @param [GtkTreeIter] sort_iter 
    # @param [GtkTreeIter] child_iter 
    # @return [Integer] 
    def convert_child_iter_to_iter(sort_iter, child_iter)
      Gtk.gtk_tree_model_sort_convert_child_iter_to_iter(self, sort_iter, child_iter)
    end
    
    # @param [GtkTreePath] sorted_path 
    # @return [GtkTreePath] 
    def convert_path_to_child_path(sorted_path)
      GtkTreePath.new Gtk.gtk_tree_model_sort_convert_path_to_child_path(self, sorted_path)
    end
    
    # @param [GtkTreeIter] child_iter 
    # @param [GtkTreeIter] sorted_iter 
    # @return [nil] 
    def convert_iter_to_child_iter(child_iter, sorted_iter)
      Gtk.gtk_tree_model_sort_convert_iter_to_child_iter(self, child_iter, sorted_iter)
    end
    
    # @return [nil] 
    def reset_default_sort_func()
      Gtk.gtk_tree_model_sort_reset_default_sort_func(self)
    end
    
    # @return [nil] 
    def clear_cache()
      Gtk.gtk_tree_model_sort_clear_cache(self)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def iter_is_valid(iter)
      Gtk.gtk_tree_model_sort_iter_is_valid(self, iter)
    end
  end
  
  class GtkTreeModelSort < FFI::Struct
    include GtkTreeModelSortWrappers
    layout :parent, :char,
           :priv, GtkTreeModelSortPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTreeModelSortClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_sort_get_type, :gtk_tree_model_sort_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_new_with_model(child_model)
  # @param [GtkTreeModel] child_model 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_tree_model_sort_new_with_model, :gtk_tree_model_sort_new_with_model, [GtkTreeModel], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_get_model(tree_model)
  # @param [GtkTreeModelSort] tree_model 
  # @return [GtkTreeModel] 
  # @scope class
  attach_function :gtk_tree_model_sort_get_model, :gtk_tree_model_sort_get_model, [GtkTreeModelSort], GtkTreeModel
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort, child_path)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @param [GtkTreePath] child_path 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_model_sort_convert_child_path_to_path, :gtk_tree_model_sort_convert_child_path_to_path, [GtkTreeModelSort, GtkTreePath], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort, sort_iter, child_iter)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @param [GtkTreeIter] sort_iter 
  # @param [GtkTreeIter] child_iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_sort_convert_child_iter_to_iter, :gtk_tree_model_sort_convert_child_iter_to_iter, [GtkTreeModelSort, GtkTreeIter, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort, sorted_path)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @param [GtkTreePath] sorted_path 
  # @return [GtkTreePath] 
  # @scope class
  attach_function :gtk_tree_model_sort_convert_path_to_child_path, :gtk_tree_model_sort_convert_path_to_child_path, [GtkTreeModelSort, GtkTreePath], GtkTreePath
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort, child_iter, sorted_iter)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @param [GtkTreeIter] child_iter 
  # @param [GtkTreeIter] sorted_iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_sort_convert_iter_to_child_iter, :gtk_tree_model_sort_convert_iter_to_child_iter, [GtkTreeModelSort, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_reset_default_sort_func(tree_model_sort)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_sort_reset_default_sort_func, :gtk_tree_model_sort_reset_default_sort_func, [GtkTreeModelSort], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_clear_cache(tree_model_sort)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_model_sort_clear_cache, :gtk_tree_model_sort_clear_cache, [GtkTreeModelSort], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_model_sort_iter_is_valid(tree_model_sort, iter)
  # @param [GtkTreeModelSort] tree_model_sort 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_sort_iter_is_valid, :gtk_tree_model_sort_iter_is_valid, [GtkTreeModelSort, GtkTreeIter], :int
  
  # (Not documented)
  class GtkTreeSelectionPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_selection_func_(selection, model, path, path_currently_selected, data)
  # @param [FFI::Pointer(*GtkTreeSelection)] selection 
  # @param [GtkTreeModel] model 
  # @param [GtkTreePath] path 
  # @param [Integer] path_currently_selected 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [Integer] 
  # @scope class
  callback :gtk_tree_selection_func, [:pointer, GtkTreeModel, GtkTreePath, :int, :pointer], :int
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_gtk_tree_selection_foreach_func_(path, iter, data)
  # @param [GtkTreePath] path 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [GtkTreeModel] 
  # @scope class
  callback :gtk_tree_selection_foreach_func, [GtkTreePath, GtkTreeIter, :pointer], GtkTreeModel
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) < private >
  # :priv ::
  #   (GtkTreeSelectionPrivate) 
  module GtkTreeSelectionWrappers
    # @param [Symbol from _enum_gtk_selection_mode_] type 
    # @return [nil] 
    def set_mode(type)
      Gtk.gtk_tree_selection_set_mode(self, type)
    end
    
    # @return [Symbol from _enum_gtk_selection_mode_] 
    def get_mode()
      Gtk.gtk_tree_selection_get_mode(self)
    end
    
    # @param [Proc(_callback_gtk_tree_selection_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @param [FFI::Pointer(GDestroyNotify)] destroy 
    # @return [nil] 
    def set_select_function(func, data, destroy)
      Gtk.gtk_tree_selection_set_select_function(self, func, data, destroy)
    end
    
    # @return [FFI::Pointer(Gpointer)] 
    def get_user_data()
      Gtk.gtk_tree_selection_get_user_data(self)
    end
    
    # @return [GtkTreeView] 
    def get_tree_view()
      GtkTreeView.new Gtk.gtk_tree_selection_get_tree_view(self)
    end
    
    # @return [Proc(_callback_gtk_tree_selection_func_)] 
    def get_select_function()
      Gtk.gtk_tree_selection_get_select_function(self)
    end
    
    # @param [FFI::Pointer(**GtkTreeModel)] model 
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def get_selected(model, iter)
      Gtk.gtk_tree_selection_get_selected(self, model, iter)
    end
    
    # @param [FFI::Pointer(**GtkTreeModel)] model 
    # @return [FFI::Pointer(*GList)] 
    def get_selected_rows(model)
      Gtk.gtk_tree_selection_get_selected_rows(self, model)
    end
    
    # @return [Integer] 
    def count_selected_rows()
      Gtk.gtk_tree_selection_count_selected_rows(self)
    end
    
    # @param [Proc(_callback_gtk_tree_selection_foreach_func_)] func 
    # @param [FFI::Pointer(Gpointer)] data 
    # @return [nil] 
    def selected_foreach(func, data)
      Gtk.gtk_tree_selection_selected_foreach(self, func, data)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def select_path(path)
      Gtk.gtk_tree_selection_select_path(self, path)
    end
    
    # @param [GtkTreePath] path 
    # @return [nil] 
    def unselect_path(path)
      Gtk.gtk_tree_selection_unselect_path(self, path)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def select_iter(iter)
      Gtk.gtk_tree_selection_select_iter(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def unselect_iter(iter)
      Gtk.gtk_tree_selection_unselect_iter(self, iter)
    end
    
    # @param [GtkTreePath] path 
    # @return [Integer] 
    def path_is_selected(path)
      Gtk.gtk_tree_selection_path_is_selected(self, path)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def iter_is_selected(iter)
      Gtk.gtk_tree_selection_iter_is_selected(self, iter)
    end
    
    # @return [nil] 
    def select_all()
      Gtk.gtk_tree_selection_select_all(self)
    end
    
    # @return [nil] 
    def unselect_all()
      Gtk.gtk_tree_selection_unselect_all(self)
    end
    
    # @param [GtkTreePath] start_path 
    # @param [GtkTreePath] end_path 
    # @return [nil] 
    def select_range(start_path, end_path)
      Gtk.gtk_tree_selection_select_range(self, start_path, end_path)
    end
    
    # @param [GtkTreePath] start_path 
    # @param [GtkTreePath] end_path 
    # @return [nil] 
    def unselect_range(start_path, end_path)
      Gtk.gtk_tree_selection_unselect_range(self, start_path, end_path)
    end
  end
  
  class GtkTreeSelection < FFI::Struct
    include GtkTreeSelectionWrappers
    layout :parent, :char,
           :priv, GtkTreeSelectionPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :changed ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTreeSelectionClass < FFI::Struct
    layout :parent_class, :char,
           :changed, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_selection_get_type, :gtk_tree_selection_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_set_mode(selection, type)
  # @param [GtkTreeSelection] selection 
  # @param [Symbol from _enum_gtk_selection_mode_] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_set_mode, :gtk_tree_selection_set_mode, [GtkTreeSelection, :gtk_selection_mode], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_mode(selection)
  # @param [GtkTreeSelection] selection 
  # @return [Symbol from _enum_gtk_selection_mode_] 
  # @scope class
  attach_function :gtk_tree_selection_get_mode, :gtk_tree_selection_get_mode, [GtkTreeSelection], :gtk_selection_mode
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_set_select_function(selection, func, data, destroy)
  # @param [GtkTreeSelection] selection 
  # @param [Proc(_callback_gtk_tree_selection_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @param [FFI::Pointer(GDestroyNotify)] destroy 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_set_select_function, :gtk_tree_selection_set_select_function, [GtkTreeSelection, :gtk_tree_selection_func, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_user_data(selection)
  # @param [GtkTreeSelection] selection 
  # @return [FFI::Pointer(Gpointer)] 
  # @scope class
  attach_function :gtk_tree_selection_get_user_data, :gtk_tree_selection_get_user_data, [GtkTreeSelection], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_tree_view(selection)
  # @param [GtkTreeSelection] selection 
  # @return [GtkTreeView] 
  # @scope class
  attach_function :gtk_tree_selection_get_tree_view, :gtk_tree_selection_get_tree_view, [GtkTreeSelection], GtkTreeView
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_select_function(selection)
  # @param [GtkTreeSelection] selection 
  # @return [Proc(_callback_gtk_tree_selection_func_)] 
  # @scope class
  attach_function :gtk_tree_selection_get_select_function, :gtk_tree_selection_get_select_function, [GtkTreeSelection], :gtk_tree_selection_func
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_selected(selection, model, iter)
  # @param [GtkTreeSelection] selection 
  # @param [FFI::Pointer(**GtkTreeModel)] model 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_selection_get_selected, :gtk_tree_selection_get_selected, [GtkTreeSelection, :pointer, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_get_selected_rows(selection, model)
  # @param [GtkTreeSelection] selection 
  # @param [FFI::Pointer(**GtkTreeModel)] model 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_tree_selection_get_selected_rows, :gtk_tree_selection_get_selected_rows, [GtkTreeSelection, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_count_selected_rows(selection)
  # @param [GtkTreeSelection] selection 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_selection_count_selected_rows, :gtk_tree_selection_count_selected_rows, [GtkTreeSelection], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_selected_foreach(selection, func, data)
  # @param [GtkTreeSelection] selection 
  # @param [Proc(_callback_gtk_tree_selection_foreach_func_)] func 
  # @param [FFI::Pointer(Gpointer)] data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_selected_foreach, :gtk_tree_selection_selected_foreach, [GtkTreeSelection, :gtk_tree_selection_foreach_func, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_select_path(selection, path)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_select_path, :gtk_tree_selection_select_path, [GtkTreeSelection, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_unselect_path(selection, path)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreePath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_unselect_path, :gtk_tree_selection_unselect_path, [GtkTreeSelection, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_select_iter(selection, iter)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_select_iter, :gtk_tree_selection_select_iter, [GtkTreeSelection, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_unselect_iter(selection, iter)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_unselect_iter, :gtk_tree_selection_unselect_iter, [GtkTreeSelection, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_path_is_selected(selection, path)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreePath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_selection_path_is_selected, :gtk_tree_selection_path_is_selected, [GtkTreeSelection, GtkTreePath], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_iter_is_selected(selection, iter)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_selection_iter_is_selected, :gtk_tree_selection_iter_is_selected, [GtkTreeSelection, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_select_all(selection)
  # @param [GtkTreeSelection] selection 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_select_all, :gtk_tree_selection_select_all, [GtkTreeSelection], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_unselect_all(selection)
  # @param [GtkTreeSelection] selection 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_unselect_all, :gtk_tree_selection_unselect_all, [GtkTreeSelection], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_select_range(selection, start_path, end_path)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreePath] start_path 
  # @param [GtkTreePath] end_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_select_range, :gtk_tree_selection_select_range, [GtkTreeSelection, GtkTreePath, GtkTreePath], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_selection_unselect_range(selection, start_path, end_path)
  # @param [GtkTreeSelection] selection 
  # @param [GtkTreePath] start_path 
  # @param [GtkTreePath] end_path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_selection_unselect_range, :gtk_tree_selection_unselect_range, [GtkTreeSelection, GtkTreePath, GtkTreePath], :void
  
  # (Not documented)
  class GtkTreeStorePrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :priv ::
  #   (GtkTreeStorePrivate) 
  module GtkTreeStoreWrappers
    # @param [Integer] n_columns 
    # @param [FFI::Pointer(*GType)] types 
    # @return [nil] 
    def set_column_types(n_columns, types)
      Gtk.gtk_tree_store_set_column_types(self, n_columns, types)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [Integer] column 
    # @param [FFI::Pointer(*GValue)] value 
    # @return [nil] 
    def set_value(iter, column, value)
      Gtk.gtk_tree_store_set_value(self, iter, column, value)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [nil] 
    def set(iter)
      Gtk.gtk_tree_store_set(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [FFI::Pointer(*Gint)] columns 
    # @param [FFI::Pointer(*GValue)] values 
    # @param [Integer] n_values 
    # @return [nil] 
    def set_valuesv(iter, columns, values, n_values)
      Gtk.gtk_tree_store_set_valuesv(self, iter, columns, values, n_values)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [String] var_args 
    # @return [nil] 
    def set_valist(iter, var_args)
      Gtk.gtk_tree_store_set_valist(self, iter, var_args)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def remove(iter)
      Gtk.gtk_tree_store_remove(self, iter)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @param [Integer] position 
    # @return [nil] 
    def insert(iter, parent, position)
      Gtk.gtk_tree_store_insert(self, iter, parent, position)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @param [GtkTreeIter] sibling 
    # @return [nil] 
    def insert_before(iter, parent, sibling)
      Gtk.gtk_tree_store_insert_before(self, iter, parent, sibling)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @param [GtkTreeIter] sibling 
    # @return [nil] 
    def insert_after(iter, parent, sibling)
      Gtk.gtk_tree_store_insert_after(self, iter, parent, sibling)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @param [Integer] position 
    # @return [nil] 
    def insert_with_values(iter, parent, position)
      Gtk.gtk_tree_store_insert_with_values(self, iter, parent, position)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @param [Integer] position 
    # @param [FFI::Pointer(*Gint)] columns 
    # @param [FFI::Pointer(*GValue)] values 
    # @param [Integer] n_values 
    # @return [nil] 
    def insert_with_valuesv(iter, parent, position, columns, values, n_values)
      Gtk.gtk_tree_store_insert_with_valuesv(self, iter, parent, position, columns, values, n_values)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @return [nil] 
    def prepend(iter, parent)
      Gtk.gtk_tree_store_prepend(self, iter, parent)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] parent 
    # @return [nil] 
    def append(iter, parent)
      Gtk.gtk_tree_store_append(self, iter, parent)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] descendant 
    # @return [Integer] 
    def is_ancestor(iter, descendant)
      Gtk.gtk_tree_store_is_ancestor(self, iter, descendant)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def iter_depth(iter)
      Gtk.gtk_tree_store_iter_depth(self, iter)
    end
    
    # @return [nil] 
    def clear()
      Gtk.gtk_tree_store_clear(self)
    end
    
    # @param [GtkTreeIter] iter 
    # @return [Integer] 
    def iter_is_valid(iter)
      Gtk.gtk_tree_store_iter_is_valid(self, iter)
    end
    
    # @param [GtkTreeIter] parent 
    # @param [FFI::Pointer(*Gint)] new_order 
    # @return [nil] 
    def reorder(parent, new_order)
      Gtk.gtk_tree_store_reorder(self, parent, new_order)
    end
    
    # @param [GtkTreeIter] a 
    # @param [GtkTreeIter] b 
    # @return [nil] 
    def swap(a, b)
      Gtk.gtk_tree_store_swap(self, a, b)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] position 
    # @return [nil] 
    def move_before(iter, position)
      Gtk.gtk_tree_store_move_before(self, iter, position)
    end
    
    # @param [GtkTreeIter] iter 
    # @param [GtkTreeIter] position 
    # @return [nil] 
    def move_after(iter, position)
      Gtk.gtk_tree_store_move_after(self, iter, position)
    end
  end
  
  class GtkTreeStore < FFI::Struct
    include GtkTreeStoreWrappers
    layout :parent, :char,
           :priv, GtkTreeStorePrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkTreeStoreClass < FFI::Struct
    layout :parent_class, :char,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_tree_store_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_store_get_type, :gtk_tree_store_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_store_new(n_columns)
  # @param [Integer] n_columns 
  # @return [GtkTreeStore] 
  # @scope class
  attach_function :gtk_tree_store_new, :gtk_tree_store_new, [:int], GtkTreeStore
  
  # (Not documented)
  # 
  # @method gtk_tree_store_newv(n_columns, types)
  # @param [Integer] n_columns 
  # @param [FFI::Pointer(*GType)] types 
  # @return [GtkTreeStore] 
  # @scope class
  attach_function :gtk_tree_store_newv, :gtk_tree_store_newv, [:int, :pointer], GtkTreeStore
  
  # (Not documented)
  # 
  # @method gtk_tree_store_set_column_types(tree_store, n_columns, types)
  # @param [GtkTreeStore] tree_store 
  # @param [Integer] n_columns 
  # @param [FFI::Pointer(*GType)] types 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_set_column_types, :gtk_tree_store_set_column_types, [GtkTreeStore, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_set_value(tree_store, iter, column, value)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [Integer] column 
  # @param [FFI::Pointer(*GValue)] value 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_set_value, :gtk_tree_store_set_value, [GtkTreeStore, GtkTreeIter, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_set(tree_store, iter)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_set, :gtk_tree_store_set, [GtkTreeStore, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_set_valuesv(tree_store, iter, columns, values, n_values)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [FFI::Pointer(*Gint)] columns 
  # @param [FFI::Pointer(*GValue)] values 
  # @param [Integer] n_values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_set_valuesv, :gtk_tree_store_set_valuesv, [GtkTreeStore, GtkTreeIter, :pointer, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_set_valist(tree_store, iter, var_args)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [String] var_args 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_set_valist, :gtk_tree_store_set_valist, [GtkTreeStore, GtkTreeIter, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_remove(tree_store, iter)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_store_remove, :gtk_tree_store_remove, [GtkTreeStore, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_store_insert(tree_store, iter, parent, position)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_insert, :gtk_tree_store_insert, [GtkTreeStore, GtkTreeIter, GtkTreeIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_insert_before(tree_store, iter, parent, sibling)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @param [GtkTreeIter] sibling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_insert_before, :gtk_tree_store_insert_before, [GtkTreeStore, GtkTreeIter, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_insert_after(tree_store, iter, parent, sibling)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @param [GtkTreeIter] sibling 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_insert_after, :gtk_tree_store_insert_after, [GtkTreeStore, GtkTreeIter, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_insert_with_values(tree_store, iter, parent, position)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @param [Integer] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_insert_with_values, :gtk_tree_store_insert_with_values, [GtkTreeStore, GtkTreeIter, GtkTreeIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_insert_with_valuesv(tree_store, iter, parent, position, columns, values, n_values)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @param [Integer] position 
  # @param [FFI::Pointer(*Gint)] columns 
  # @param [FFI::Pointer(*GValue)] values 
  # @param [Integer] n_values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_insert_with_valuesv, :gtk_tree_store_insert_with_valuesv, [GtkTreeStore, GtkTreeIter, GtkTreeIter, :int, :pointer, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_prepend(tree_store, iter, parent)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_prepend, :gtk_tree_store_prepend, [GtkTreeStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_append(tree_store, iter, parent)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] parent 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_append, :gtk_tree_store_append, [GtkTreeStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_is_ancestor(tree_store, iter, descendant)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] descendant 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_store_is_ancestor, :gtk_tree_store_is_ancestor, [GtkTreeStore, GtkTreeIter, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_store_iter_depth(tree_store, iter)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_store_iter_depth, :gtk_tree_store_iter_depth, [GtkTreeStore, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_store_clear(tree_store)
  # @param [GtkTreeStore] tree_store 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_clear, :gtk_tree_store_clear, [GtkTreeStore], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_iter_is_valid(tree_store, iter)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_store_iter_is_valid, :gtk_tree_store_iter_is_valid, [GtkTreeStore, GtkTreeIter], :int
  
  # (Not documented)
  # 
  # @method gtk_tree_store_reorder(tree_store, parent, new_order)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] parent 
  # @param [FFI::Pointer(*Gint)] new_order 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_reorder, :gtk_tree_store_reorder, [GtkTreeStore, GtkTreeIter, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_swap(tree_store, a, b)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] a 
  # @param [GtkTreeIter] b 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_swap, :gtk_tree_store_swap, [GtkTreeStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_move_before(tree_store, iter, position)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_move_before, :gtk_tree_store_move_before, [GtkTreeStore, GtkTreeIter, GtkTreeIter], :void
  
  # (Not documented)
  # 
  # @method gtk_tree_store_move_after(tree_store, iter, position)
  # @param [GtkTreeStore] tree_store 
  # @param [GtkTreeIter] iter 
  # @param [GtkTreeIter] position 
  # @return [nil] 
  # @scope class
  attach_function :gtk_tree_store_move_after, :gtk_tree_store_move_after, [GtkTreeStore, GtkTreeIter, GtkTreeIter], :void
  
  # enumerations from "gtkaboutdialog.h"
  # 
  # @method gtk_license_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_license_get_type, :gtk_license_get_type, [], :uint
  
  # enumerations from "gtkaccelgroup.h"
  # 
  # @method gtk_accel_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_accel_flags_get_type, :gtk_accel_flags_get_type, [], :uint
  
  # enumerations from "gtkapplication.h"
  # 
  # @method gtk_application_inhibit_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_application_inhibit_flags_get_type, :gtk_application_inhibit_flags_get_type, [], :uint
  
  # enumerations from "gtkassistant.h"
  # 
  # @method gtk_assistant_page_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_assistant_page_type_get_type, :gtk_assistant_page_type_get_type, [], :uint
  
  # enumerations from "gtkbuilder.h"
  # 
  # @method gtk_builder_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_builder_error_get_type, :gtk_builder_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_calendar_display_options_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_calendar_display_options_get_type, :gtk_calendar_display_options_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_state_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_state_get_type, :gtk_cell_renderer_state_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_mode_get_type, :gtk_cell_renderer_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_cell_renderer_accel_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_cell_renderer_accel_mode_get_type, :gtk_cell_renderer_accel_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_provider_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_provider_error_get_type, :gtk_css_provider_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_css_section_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_css_section_type_get_type, :gtk_css_section_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_debug_flag_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_debug_flag_get_type, :gtk_debug_flag_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_dialog_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_dialog_flags_get_type, :gtk_dialog_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_response_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_response_type_get_type, :gtk_response_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_dest_defaults_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_dest_defaults_get_type, :gtk_dest_defaults_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_target_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_target_flags_get_type, :gtk_target_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_entry_icon_position_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_entry_icon_position_get_type, :gtk_entry_icon_position_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_align_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_align_get_type, :gtk_align_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_arrow_placement_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_arrow_placement_get_type, :gtk_arrow_placement_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_arrow_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_arrow_type_get_type, :gtk_arrow_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_attach_options_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_attach_options_get_type, :gtk_attach_options_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_button_box_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_button_box_style_get_type, :gtk_button_box_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_delete_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_delete_type_get_type, :gtk_delete_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_direction_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_direction_type_get_type, :gtk_direction_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_expander_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_expander_style_get_type, :gtk_expander_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_size_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_size_get_type, :gtk_icon_size_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_sensitivity_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_sensitivity_type_get_type, :gtk_sensitivity_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_direction_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_direction_get_type, :gtk_text_direction_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_justification_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_justification_get_type, :gtk_justification_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_menu_direction_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_menu_direction_type_get_type, :gtk_menu_direction_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_message_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_message_type_get_type, :gtk_message_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_movement_step_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_movement_step_get_type, :gtk_movement_step_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scroll_step_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scroll_step_get_type, :gtk_scroll_step_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_orientation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_orientation_get_type, :gtk_orientation_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_corner_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_corner_type_get_type, :gtk_corner_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_pack_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_pack_type_get_type, :gtk_pack_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_path_priority_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_path_priority_type_get_type, :gtk_path_priority_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_path_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_path_type_get_type, :gtk_path_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_policy_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_policy_type_get_type, :gtk_policy_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_position_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_position_type_get_type, :gtk_position_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_relief_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_relief_style_get_type, :gtk_relief_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_resize_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_resize_mode_get_type, :gtk_resize_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scroll_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scroll_type_get_type, :gtk_scroll_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_selection_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_selection_mode_get_type, :gtk_selection_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_shadow_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_shadow_type_get_type, :gtk_shadow_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_state_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_state_type_get_type, :gtk_state_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_toolbar_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_style_get_type, :gtk_toolbar_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_window_position_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_position_get_type, :gtk_window_position_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_window_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_window_type_get_type, :gtk_window_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_wrap_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_wrap_mode_get_type, :gtk_wrap_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_sort_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_sort_type_get_type, :gtk_sort_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_im_preedit_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_preedit_style_get_type, :gtk_im_preedit_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_im_status_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_im_status_style_get_type, :gtk_im_status_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_pack_direction_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_pack_direction_get_type, :gtk_pack_direction_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_pages_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_pages_get_type, :gtk_print_pages_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_page_set_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_page_set_get_type, :gtk_page_set_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_number_up_layout_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_number_up_layout_get_type, :gtk_number_up_layout_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_page_orientation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_page_orientation_get_type, :gtk_page_orientation_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_quality_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_quality_get_type, :gtk_print_quality_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_duplex_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_duplex_get_type, :gtk_print_duplex_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_unit_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_unit_get_type, :gtk_unit_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_view_grid_lines_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_grid_lines_get_type, :gtk_tree_view_grid_lines_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_drag_result_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_drag_result_get_type, :gtk_drag_result_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_size_request_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_size_request_mode_get_type, :gtk_size_request_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_scrollable_policy_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_scrollable_policy_get_type, :gtk_scrollable_policy_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_state_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_state_flags_get_type, :gtk_state_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_region_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_region_flags_get_type, :gtk_region_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_junction_sides_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_junction_sides_get_type, :gtk_junction_sides_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_border_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_border_style_get_type, :gtk_border_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_level_bar_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_level_bar_mode_get_type, :gtk_level_bar_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_input_purpose_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_input_purpose_get_type, :gtk_input_purpose_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_input_hints_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_input_hints_get_type, :gtk_input_hints_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_action_get_type, :gtk_file_chooser_action_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_confirmation_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_confirmation_get_type, :gtk_file_chooser_confirmation_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_chooser_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_chooser_error_get_type, :gtk_file_chooser_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_file_filter_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_file_filter_flags_get_type, :gtk_file_filter_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_lookup_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_lookup_flags_get_type, :gtk_icon_lookup_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_theme_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_theme_error_get_type, :gtk_icon_theme_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_icon_view_drop_position_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_icon_view_drop_position_get_type, :gtk_icon_view_drop_position_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_image_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_image_type_get_type, :gtk_image_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_buttons_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_buttons_type_get_type, :gtk_buttons_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_notebook_tab_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_notebook_tab_get_type, :gtk_notebook_tab_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_status_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_status_get_type, :gtk_print_status_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_operation_result_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_result_get_type, :gtk_print_operation_result_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_operation_action_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_operation_action_get_type, :gtk_print_operation_action_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_print_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_print_error_get_type, :gtk_print_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_sort_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_sort_type_get_type, :gtk_recent_sort_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_chooser_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_chooser_error_get_type, :gtk_recent_chooser_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_filter_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_filter_flags_get_type, :gtk_recent_filter_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_recent_manager_error_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_recent_manager_error_get_type, :gtk_recent_manager_error_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_size_group_mode_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_size_group_mode_get_type, :gtk_size_group_mode_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_spin_button_update_policy_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_button_update_policy_get_type, :gtk_spin_button_update_policy_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_spin_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_spin_type_get_type, :gtk_spin_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_buffer_target_info_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_buffer_target_info_get_type, :gtk_text_buffer_target_info_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_search_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_search_flags_get_type, :gtk_text_search_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_window_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_window_type_get_type, :gtk_text_window_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_toolbar_space_style_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_toolbar_space_style_get_type, :gtk_toolbar_space_style_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tool_palette_drag_targets_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tool_palette_drag_targets_get_type, :gtk_tool_palette_drag_targets_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_model_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_model_flags_get_type, :gtk_tree_model_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_view_drop_position_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_drop_position_get_type, :gtk_tree_view_drop_position_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_tree_view_column_sizing_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_tree_view_column_sizing_get_type, :gtk_tree_view_column_sizing_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_item_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_item_type_get_type, :gtk_ui_manager_item_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_widget_help_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_help_type_get_type, :gtk_widget_help_type_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_rc_flags_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_flags_get_type, :gtk_rc_flags_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_rc_token_type_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_rc_token_type_get_type, :gtk_rc_token_type_get_type, [], :uint
  
  # (Not documented)
  class GtkUIManagerPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (unknown) 
  # :private_data ::
  #   (GtkUIManagerPrivate) < private >
  module GtkUIManagerWrappers
    # @param [Integer] add_tearoffs 
    # @return [nil] 
    def set_add_tearoffs(add_tearoffs)
      Gtk.gtk_ui_manager_set_add_tearoffs(self, add_tearoffs)
    end
    
    # @return [Integer] 
    def get_add_tearoffs()
      Gtk.gtk_ui_manager_get_add_tearoffs(self)
    end
    
    # @param [GtkActionGroup] action_group 
    # @param [Integer] pos 
    # @return [nil] 
    def insert_action_group(action_group, pos)
      Gtk.gtk_ui_manager_insert_action_group(self, action_group, pos)
    end
    
    # @param [GtkActionGroup] action_group 
    # @return [nil] 
    def remove_action_group(action_group)
      Gtk.gtk_ui_manager_remove_action_group(self, action_group)
    end
    
    # @return [FFI::Pointer(*GList)] 
    def get_action_groups()
      Gtk.gtk_ui_manager_get_action_groups(self)
    end
    
    # @return [GtkAccelGroup] 
    def get_accel_group()
      GtkAccelGroup.new Gtk.gtk_ui_manager_get_accel_group(self)
    end
    
    # @param [String] path 
    # @return [GtkWidget] 
    def get_widget(path)
      GtkWidget.new Gtk.gtk_ui_manager_get_widget(self, path)
    end
    
    # @param [Symbol from _enum_gtk_ui_manager_item_type_] types 
    # @return [FFI::Pointer(*GSList)] 
    def get_toplevels(types)
      Gtk.gtk_ui_manager_get_toplevels(self, types)
    end
    
    # @param [String] path 
    # @return [GtkAction] 
    def get_action(path)
      GtkAction.new Gtk.gtk_ui_manager_get_action(self, path)
    end
    
    # @param [String] buffer 
    # @param [Integer] length 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_ui_from_string(buffer, length, error)
      Gtk.gtk_ui_manager_add_ui_from_string(self, buffer, length, error)
    end
    
    # @param [String] filename 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_ui_from_file(filename, error)
      Gtk.gtk_ui_manager_add_ui_from_file(self, filename, error)
    end
    
    # @param [String] resource_path 
    # @param [FFI::Pointer(**GError)] error 
    # @return [Integer] 
    def add_ui_from_resource(resource_path, error)
      Gtk.gtk_ui_manager_add_ui_from_resource(self, resource_path, error)
    end
    
    # @param [Integer] merge_id 
    # @param [String] path 
    # @param [String] name 
    # @param [String] action 
    # @param [Symbol from _enum_gtk_ui_manager_item_type_] type 
    # @param [Integer] top 
    # @return [nil] 
    def add_ui(merge_id, path, name, action, type, top)
      Gtk.gtk_ui_manager_add_ui(self, merge_id, path, name, action, type, top)
    end
    
    # @param [Integer] merge_id 
    # @return [nil] 
    def remove_ui(merge_id)
      Gtk.gtk_ui_manager_remove_ui(self, merge_id)
    end
    
    # @return [String] 
    def get_ui()
      Gtk.gtk_ui_manager_get_ui(self)
    end
    
    # @return [nil] 
    def ensure_update()
      Gtk.gtk_ui_manager_ensure_update(self)
    end
    
    # @return [Integer] 
    def new_merge_id()
      Gtk.gtk_ui_manager_new_merge_id(self)
    end
  end
  
  class GtkUIManager < FFI::Struct
    include GtkUIManagerWrappers
    layout :parent, :char,
           :private_data, GtkUIManagerPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :add_widget ::
  #   (FFI::Pointer(*)) Signals
  # :actions_changed ::
  #   (FFI::Pointer(*)) 
  # :connect_proxy ::
  #   (FFI::Pointer(*)) 
  # :disconnect_proxy ::
  #   (FFI::Pointer(*)) 
  # :pre_activate ::
  #   (FFI::Pointer(*)) 
  # :post_activate ::
  #   (FFI::Pointer(*)) 
  # :get_widget ::
  #   (FFI::Pointer(*)) Virtual functions
  # :get_action ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkUIManagerClass < FFI::Struct
    layout :parent_class, :char,
           :add_widget, :pointer,
           :actions_changed, :pointer,
           :connect_proxy, :pointer,
           :disconnect_proxy, :pointer,
           :pre_activate, :pointer,
           :post_activate, :pointer,
           :get_widget, :pointer,
           :get_action, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:gtk_ui_manager_item_type).</em>
  # 
  # === Options:
  # :auto ::
  #   
  # :menubar ::
  #   
  # :menu ::
  #   
  # :toolbar ::
  #   
  # :placeholder ::
  #   
  # :popup ::
  #   
  # :menuitem ::
  #   
  # :toolitem ::
  #   
  # :separator ::
  #   
  # :accelerator ::
  #   
  # :popup_with_accels ::
  #   
  # 
  # @method _enum_gtk_ui_manager_item_type_
  # @return [Symbol]
  # @scope class
  enum :gtk_ui_manager_item_type, [
    :auto, 0,
    :menubar, 1,
    :menu, 2,
    :toolbar, 4,
    :placeholder, 8,
    :popup, 16,
    :menuitem, 32,
    :toolitem, 64,
    :separator, 128,
    :accelerator, 256,
    :popup_with_accels, 512
  ]
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_get_type, :gtk_ui_manager_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_new()
  # @return [GtkUIManager] 
  # @scope class
  attach_function :gtk_ui_manager_new, :gtk_ui_manager_new, [], GtkUIManager
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_set_add_tearoffs(manager, add_tearoffs)
  # @param [GtkUIManager] manager 
  # @param [Integer] add_tearoffs 
  # @return [nil] 
  # @scope class
  attach_function :gtk_ui_manager_set_add_tearoffs, :gtk_ui_manager_set_add_tearoffs, [GtkUIManager, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_add_tearoffs(manager)
  # @param [GtkUIManager] manager 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_get_add_tearoffs, :gtk_ui_manager_get_add_tearoffs, [GtkUIManager], :int
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_insert_action_group(manager, action_group, pos)
  # @param [GtkUIManager] manager 
  # @param [GtkActionGroup] action_group 
  # @param [Integer] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_ui_manager_insert_action_group, :gtk_ui_manager_insert_action_group, [GtkUIManager, GtkActionGroup, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_remove_action_group(manager, action_group)
  # @param [GtkUIManager] manager 
  # @param [GtkActionGroup] action_group 
  # @return [nil] 
  # @scope class
  attach_function :gtk_ui_manager_remove_action_group, :gtk_ui_manager_remove_action_group, [GtkUIManager, GtkActionGroup], :void
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_action_groups(manager)
  # @param [GtkUIManager] manager 
  # @return [FFI::Pointer(*GList)] 
  # @scope class
  attach_function :gtk_ui_manager_get_action_groups, :gtk_ui_manager_get_action_groups, [GtkUIManager], :pointer
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_accel_group(manager)
  # @param [GtkUIManager] manager 
  # @return [GtkAccelGroup] 
  # @scope class
  attach_function :gtk_ui_manager_get_accel_group, :gtk_ui_manager_get_accel_group, [GtkUIManager], GtkAccelGroup
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_widget(manager, path)
  # @param [GtkUIManager] manager 
  # @param [String] path 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_ui_manager_get_widget, :gtk_ui_manager_get_widget, [GtkUIManager, :string], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_toplevels(manager, types)
  # @param [GtkUIManager] manager 
  # @param [Symbol from _enum_gtk_ui_manager_item_type_] types 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_ui_manager_get_toplevels, :gtk_ui_manager_get_toplevels, [GtkUIManager, :gtk_ui_manager_item_type], :pointer
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_action(manager, path)
  # @param [GtkUIManager] manager 
  # @param [String] path 
  # @return [GtkAction] 
  # @scope class
  attach_function :gtk_ui_manager_get_action, :gtk_ui_manager_get_action, [GtkUIManager, :string], GtkAction
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_add_ui_from_string(manager, buffer, length, error)
  # @param [GtkUIManager] manager 
  # @param [String] buffer 
  # @param [Integer] length 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_add_ui_from_string, :gtk_ui_manager_add_ui_from_string, [GtkUIManager, :string, :int, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_add_ui_from_file(manager, filename, error)
  # @param [GtkUIManager] manager 
  # @param [String] filename 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_add_ui_from_file, :gtk_ui_manager_add_ui_from_file, [GtkUIManager, :string, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_add_ui_from_resource(manager, resource_path, error)
  # @param [GtkUIManager] manager 
  # @param [String] resource_path 
  # @param [FFI::Pointer(**GError)] error 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_add_ui_from_resource, :gtk_ui_manager_add_ui_from_resource, [GtkUIManager, :string, :pointer], :uint
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_add_ui(manager, merge_id, path, name, action, type, top)
  # @param [GtkUIManager] manager 
  # @param [Integer] merge_id 
  # @param [String] path 
  # @param [String] name 
  # @param [String] action 
  # @param [Symbol from _enum_gtk_ui_manager_item_type_] type 
  # @param [Integer] top 
  # @return [nil] 
  # @scope class
  attach_function :gtk_ui_manager_add_ui, :gtk_ui_manager_add_ui, [GtkUIManager, :uint, :string, :string, :string, :gtk_ui_manager_item_type, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_remove_ui(manager, merge_id)
  # @param [GtkUIManager] manager 
  # @param [Integer] merge_id 
  # @return [nil] 
  # @scope class
  attach_function :gtk_ui_manager_remove_ui, :gtk_ui_manager_remove_ui, [GtkUIManager, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_get_ui(manager)
  # @param [GtkUIManager] manager 
  # @return [String] 
  # @scope class
  attach_function :gtk_ui_manager_get_ui, :gtk_ui_manager_get_ui, [GtkUIManager], :string
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_ensure_update(manager)
  # @param [GtkUIManager] manager 
  # @return [nil] 
  # @scope class
  attach_function :gtk_ui_manager_ensure_update, :gtk_ui_manager_ensure_update, [GtkUIManager], :void
  
  # (Not documented)
  # 
  # @method gtk_ui_manager_new_merge_id(manager)
  # @param [GtkUIManager] manager 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_ui_manager_new_merge_id, :gtk_ui_manager_new_merge_id, [GtkUIManager], :uint
  
  # (Not documented)
  class GtkViewportPrivate < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :bin ::
  #   (GtkBin) 
  # :priv ::
  #   (GtkViewportPrivate) < private >
  module GtkViewportWrappers
    # @return [GtkAdjustment] 
    def get_hadjustment()
      GtkAdjustment.new Gtk.gtk_viewport_get_hadjustment(self)
    end
    
    # @return [GtkAdjustment] 
    def get_vadjustment()
      GtkAdjustment.new Gtk.gtk_viewport_get_vadjustment(self)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_hadjustment(adjustment)
      Gtk.gtk_viewport_set_hadjustment(self, adjustment)
    end
    
    # @param [GtkAdjustment] adjustment 
    # @return [nil] 
    def set_vadjustment(adjustment)
      Gtk.gtk_viewport_set_vadjustment(self, adjustment)
    end
    
    # @param [Symbol from _enum_gtk_shadow_type_] type 
    # @return [nil] 
    def set_shadow_type(type)
      Gtk.gtk_viewport_set_shadow_type(self, type)
    end
    
    # @return [Symbol from _enum_gtk_shadow_type_] 
    def get_shadow_type()
      Gtk.gtk_viewport_get_shadow_type(self)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_bin_window()
      Gtk.gtk_viewport_get_bin_window(self)
    end
    
    # @return [FFI::Pointer(*GdkWindow)] 
    def get_view_window()
      Gtk.gtk_viewport_get_view_window(self)
    end
  end
  
  class GtkViewport < FFI::Struct
    include GtkViewportWrappers
    layout :bin, GtkBin.by_value,
           :priv, GtkViewportPrivate
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkBinClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkViewportClass < FFI::Struct
    layout :parent_class, GtkBinClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_viewport_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_viewport_get_type, :gtk_viewport_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_viewport_new(hadjustment, vadjustment)
  # @param [GtkAdjustment] hadjustment 
  # @param [GtkAdjustment] vadjustment 
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_viewport_new, :gtk_viewport_new, [GtkAdjustment, GtkAdjustment], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_viewport_get_hadjustment(viewport)
  # @param [GtkViewport] viewport 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_viewport_get_hadjustment, :gtk_viewport_get_hadjustment, [GtkViewport], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_viewport_get_vadjustment(viewport)
  # @param [GtkViewport] viewport 
  # @return [GtkAdjustment] 
  # @scope class
  attach_function :gtk_viewport_get_vadjustment, :gtk_viewport_get_vadjustment, [GtkViewport], GtkAdjustment
  
  # (Not documented)
  # 
  # @method gtk_viewport_set_hadjustment(viewport, adjustment)
  # @param [GtkViewport] viewport 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_viewport_set_hadjustment, :gtk_viewport_set_hadjustment, [GtkViewport, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_viewport_set_vadjustment(viewport, adjustment)
  # @param [GtkViewport] viewport 
  # @param [GtkAdjustment] adjustment 
  # @return [nil] 
  # @scope class
  attach_function :gtk_viewport_set_vadjustment, :gtk_viewport_set_vadjustment, [GtkViewport, GtkAdjustment], :void
  
  # (Not documented)
  # 
  # @method gtk_viewport_set_shadow_type(viewport, type)
  # @param [GtkViewport] viewport 
  # @param [Symbol from _enum_gtk_shadow_type_] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_viewport_set_shadow_type, :gtk_viewport_set_shadow_type, [GtkViewport, :gtk_shadow_type], :void
  
  # (Not documented)
  # 
  # @method gtk_viewport_get_shadow_type(viewport)
  # @param [GtkViewport] viewport 
  # @return [Symbol from _enum_gtk_shadow_type_] 
  # @scope class
  attach_function :gtk_viewport_get_shadow_type, :gtk_viewport_get_shadow_type, [GtkViewport], :gtk_shadow_type
  
  # (Not documented)
  # 
  # @method gtk_viewport_get_bin_window(viewport)
  # @param [GtkViewport] viewport 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_viewport_get_bin_window, :gtk_viewport_get_bin_window, [GtkViewport], :pointer
  
  # (Not documented)
  # 
  # @method gtk_viewport_get_view_window(viewport)
  # @param [GtkViewport] viewport 
  # @return [FFI::Pointer(*GdkWindow)] 
  # @scope class
  attach_function :gtk_viewport_get_view_window, :gtk_viewport_get_view_window, [GtkViewport], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :parent ::
  #   (GtkScaleButton) 
  class GtkVolumeButton < FFI::Struct
    layout :parent, GtkScaleButton.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (GtkScaleButtonClass) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved4 ::
  #   (FFI::Pointer(*)) 
  class GtkVolumeButtonClass < FFI::Struct
    layout :parent_class, GtkScaleButtonClass.by_value,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer,
           :gtk_reserved4, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_volume_button_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_volume_button_get_type, :gtk_volume_button_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_volume_button_new()
  # @return [GtkWidget] 
  # @scope class
  attach_function :gtk_volume_button_new, :gtk_volume_button_new, [], GtkWidget
  
  # (Not documented)
  # 
  # @method gtk_widget_path_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_get_type, :gtk_widget_path_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_widget_path_new()
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_widget_path_new, :gtk_widget_path_new, [], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_widget_path_copy(path)
  # @param [GtkWidgetPath] path 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_widget_path_copy, :gtk_widget_path_copy, [GtkWidgetPath], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_widget_path_ref(path)
  # @param [GtkWidgetPath] path 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_widget_path_ref, :gtk_widget_path_ref, [GtkWidgetPath], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_widget_path_unref(path)
  # @param [GtkWidgetPath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_unref, :gtk_widget_path_unref, [GtkWidgetPath], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_free(path)
  # @param [GtkWidgetPath] path 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_free, :gtk_widget_path_free, [GtkWidgetPath], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_to_string(path)
  # @param [GtkWidgetPath] path 
  # @return [String] 
  # @scope class
  attach_function :gtk_widget_path_to_string, :gtk_widget_path_to_string, [GtkWidgetPath], :string
  
  # (Not documented)
  # 
  # @method gtk_widget_path_length(path)
  # @param [GtkWidgetPath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_length, :gtk_widget_path_length, [GtkWidgetPath], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_append_type(path, type)
  # @param [GtkWidgetPath] path 
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_append_type, :gtk_widget_path_append_type, [GtkWidgetPath, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_prepend_type(path, type)
  # @param [GtkWidgetPath] path 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_prepend_type, :gtk_widget_path_prepend_type, [GtkWidgetPath, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_append_with_siblings(path, siblings, sibling_index)
  # @param [GtkWidgetPath] path 
  # @param [GtkWidgetPath] siblings 
  # @param [Integer] sibling_index 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_append_with_siblings, :gtk_widget_path_append_with_siblings, [GtkWidgetPath, GtkWidgetPath, :uint], :int
  
  # gtk_widget_path_append_for_widget() is declared in gtkwidget.c
  # 
  # @method gtk_widget_path_append_for_widget(path, widget)
  # @param [GtkWidgetPath] path 
  # @param [GtkWidget] widget 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_append_for_widget, :gtk_widget_path_append_for_widget, [GtkWidgetPath, GtkWidget], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_get_object_type(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_get_object_type, :gtk_widget_path_iter_get_object_type, [GtkWidgetPath, :int], :uint
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_set_object_type(path, pos, type)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_set_object_type, :gtk_widget_path_iter_set_object_type, [GtkWidgetPath, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_get_siblings(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [GtkWidgetPath] 
  # @scope class
  attach_function :gtk_widget_path_iter_get_siblings, :gtk_widget_path_iter_get_siblings, [GtkWidgetPath, :int], GtkWidgetPath
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_get_sibling_index(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_get_sibling_index, :gtk_widget_path_iter_get_sibling_index, [GtkWidgetPath, :int], :uint
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_get_name(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [String] 
  # @scope class
  attach_function :gtk_widget_path_iter_get_name, :gtk_widget_path_iter_get_name, [GtkWidgetPath, :int], :string
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_set_name(path, pos, name)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_set_name, :gtk_widget_path_iter_set_name, [GtkWidgetPath, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_has_name(path, pos, name)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_has_name, :gtk_widget_path_iter_has_name, [GtkWidgetPath, :int, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_has_qname(path, pos, qname)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [Integer] qname 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_has_qname, :gtk_widget_path_iter_has_qname, [GtkWidgetPath, :int, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_add_class(path, pos, name)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_add_class, :gtk_widget_path_iter_add_class, [GtkWidgetPath, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_remove_class(path, pos, name)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_remove_class, :gtk_widget_path_iter_remove_class, [GtkWidgetPath, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_clear_classes(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_clear_classes, :gtk_widget_path_iter_clear_classes, [GtkWidgetPath, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_list_classes(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_widget_path_iter_list_classes, :gtk_widget_path_iter_list_classes, [GtkWidgetPath, :int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_has_class(path, pos, name)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_has_class, :gtk_widget_path_iter_has_class, [GtkWidgetPath, :int, :string], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_has_qclass(path, pos, qname)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [Integer] qname 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_has_qclass, :gtk_widget_path_iter_has_qclass, [GtkWidgetPath, :int, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_add_region(path, pos, name, flags)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @param [Symbol from _enum_gtk_region_flags_] flags 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_add_region, :gtk_widget_path_iter_add_region, [GtkWidgetPath, :int, :string, :gtk_region_flags], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_remove_region(path, pos, name)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_remove_region, :gtk_widget_path_iter_remove_region, [GtkWidgetPath, :int, :string], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_clear_regions(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_widget_path_iter_clear_regions, :gtk_widget_path_iter_clear_regions, [GtkWidgetPath, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_list_regions(path, pos)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_widget_path_iter_list_regions, :gtk_widget_path_iter_list_regions, [GtkWidgetPath, :int], :pointer
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_has_region(path, pos, name, flags)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [String] name 
  # @param [FFI::Pointer(*GtkRegionFlags)] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_has_region, :gtk_widget_path_iter_has_region, [GtkWidgetPath, :int, :string, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_iter_has_qregion(path, pos, qname, flags)
  # @param [GtkWidgetPath] path 
  # @param [Integer] pos 
  # @param [Integer] qname 
  # @param [FFI::Pointer(*GtkRegionFlags)] flags 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_iter_has_qregion, :gtk_widget_path_iter_has_qregion, [GtkWidgetPath, :int, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_get_object_type(path)
  # @param [GtkWidgetPath] path 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_get_object_type, :gtk_widget_path_get_object_type, [GtkWidgetPath], :uint
  
  # (Not documented)
  # 
  # @method gtk_widget_path_is_type(path, type)
  # @param [GtkWidgetPath] path 
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_is_type, :gtk_widget_path_is_type, [GtkWidgetPath, :uint], :int
  
  # (Not documented)
  # 
  # @method gtk_widget_path_has_parent(path, type)
  # @param [GtkWidgetPath] path 
  # @param [Integer] type 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_widget_path_has_parent, :gtk_widget_path_has_parent, [GtkWidgetPath, :uint], :int
  
  # (Not documented)
  class GtkTextLine < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class GtkTextLineData < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_instance ::
  #   (unknown) 
  # :screen_width ::
  #   (Integer) width of the display area on-screen,
  #   i.e. pixels we should wrap to fit inside.
  # :width ::
  #   (Integer) width/height of the total logical area being layed out
  # :height ::
  #   (Integer) 
  # :buffer ::
  #   (GtkTextBuffer) gint top_edge;
  # :default_style ::
  #   (GtkTextAttributes) Default style used if no tags override it
  # :ltr_context ::
  #   (FFI::Pointer(*PangoContext)) Pango contexts used for creating layouts
  # :rtl_context ::
  #   (FFI::Pointer(*PangoContext)) 
  # :one_style_cache ::
  #   (GtkTextAttributes) A cache of one style; this is used to ensure
  #   we don't constantly regenerate the style
  #   over long runs with the same style.
  # :one_display_cache ::
  #   (FFI::Pointer(*GtkTextLineDisplay)) A cache of one line display. Getting the same line
  #   many times in a row is the most common case.
  # :wrap_loop_count ::
  #   (Integer) Whether we are allowed to wrap right now
  # :cursor_visible ::
  #   (Integer) Whether to show the insertion cursor
  # :cursor_direction ::
  #   (Integer) For what GtkTextDirection to draw cursor GTK_TEXT_DIR_NONE -
  #   means draw both cursors.
  # :keyboard_direction ::
  #   (Integer) The keyboard direction is used to default the alignment when
  #        there are no strong characters.
  # :preedit_string ::
  #   (String) The preedit string and attributes, if any
  # :preedit_attrs ::
  #   (FFI::Pointer(*PangoAttrList)) 
  # :preedit_len ::
  #   (Integer) 
  # :preedit_cursor ::
  #   (Integer) 
  # :overwrite_mode ::
  #   (Integer) 
  module GtkTextLayoutWrappers
    # @param [GtkTextBuffer] buffer 
    # @return [nil] 
    def set_buffer(buffer)
      Gtk.gtk_text_layout_set_buffer(self, buffer)
    end
    
    # @return [GtkTextBuffer] 
    def get_buffer()
      GtkTextBuffer.new Gtk.gtk_text_layout_get_buffer(self)
    end
    
    # @param [GtkTextAttributes] values 
    # @return [nil] 
    def set_default_style(values)
      Gtk.gtk_text_layout_set_default_style(self, values)
    end
    
    # @param [FFI::Pointer(*PangoContext)] ltr_context 
    # @param [FFI::Pointer(*PangoContext)] rtl_context 
    # @return [nil] 
    def set_contexts(ltr_context, rtl_context)
      Gtk.gtk_text_layout_set_contexts(self, ltr_context, rtl_context)
    end
    
    # @param [Symbol from _enum_gtk_text_direction_] direction 
    # @return [nil] 
    def set_cursor_direction(direction)
      Gtk.gtk_text_layout_set_cursor_direction(self, direction)
    end
    
    # @param [Integer] overwrite 
    # @return [nil] 
    def set_overwrite_mode(overwrite)
      Gtk.gtk_text_layout_set_overwrite_mode(self, overwrite)
    end
    
    # @param [Symbol from _enum_gtk_text_direction_] keyboard_dir 
    # @return [nil] 
    def set_keyboard_direction(keyboard_dir)
      Gtk.gtk_text_layout_set_keyboard_direction(self, keyboard_dir)
    end
    
    # @return [nil] 
    def default_style_changed()
      Gtk.gtk_text_layout_default_style_changed(self)
    end
    
    # @param [Integer] width 
    # @return [nil] 
    def set_screen_width(width)
      Gtk.gtk_text_layout_set_screen_width(self, width)
    end
    
    # @param [String] preedit_string 
    # @param [FFI::Pointer(*PangoAttrList)] preedit_attrs 
    # @param [Integer] cursor_pos 
    # @return [nil] 
    def set_preedit_string(preedit_string, preedit_attrs, cursor_pos)
      Gtk.gtk_text_layout_set_preedit_string(self, preedit_string, preedit_attrs, cursor_pos)
    end
    
    # @param [Integer] cursor_visible 
    # @return [nil] 
    def set_cursor_visible(cursor_visible)
      Gtk.gtk_text_layout_set_cursor_visible(self, cursor_visible)
    end
    
    # @return [Integer] 
    def get_cursor_visible()
      Gtk.gtk_text_layout_get_cursor_visible(self)
    end
    
    # @param [FFI::Pointer(*Gint)] width 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_size(width, height)
      Gtk.gtk_text_layout_get_size(self, width, height)
    end
    
    # @param [Integer] top_y 
    # @param [Integer] bottom_y 
    # @param [FFI::Pointer(*Gint)] first_line_y 
    # @return [FFI::Pointer(*GSList)] 
    def get_lines(top_y, bottom_y, first_line_y)
      Gtk.gtk_text_layout_get_lines(self, top_y, bottom_y, first_line_y)
    end
    
    # @return [nil] 
    def wrap_loop_start()
      Gtk.gtk_text_layout_wrap_loop_start(self)
    end
    
    # @return [nil] 
    def wrap_loop_end()
      Gtk.gtk_text_layout_wrap_loop_end(self)
    end
    
    # @param [GtkTextLine] line 
    # @param [Integer] size_only 
    # @return [GtkTextLineDisplay] 
    def get_line_display(line, size_only)
      GtkTextLineDisplay.new Gtk.gtk_text_layout_get_line_display(self, line, size_only)
    end
    
    # @param [FFI::Pointer(*GtkTextLineDisplay)] display 
    # @return [nil] 
    def free_line_display(display)
      Gtk.gtk_text_layout_free_line_display(self, display)
    end
    
    # @param [GtkTextIter] target_iter 
    # @param [Integer] y 
    # @param [FFI::Pointer(*Gint)] line_top 
    # @return [nil] 
    def get_line_at_y(target_iter, y, line_top)
      Gtk.gtk_text_layout_get_line_at_y(self, target_iter, y, line_top)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def get_iter_at_pixel(iter, x, y)
      Gtk.gtk_text_layout_get_iter_at_pixel(self, iter, x, y)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*Gint)] trailing 
    # @param [Integer] x 
    # @param [Integer] y 
    # @return [nil] 
    def get_iter_at_position(iter, trailing, x, y)
      Gtk.gtk_text_layout_get_iter_at_position(self, iter, trailing, x, y)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def invalidate(start, end_)
      Gtk.gtk_text_layout_invalidate(self, start, end_)
    end
    
    # @param [GtkTextIter] start 
    # @param [GtkTextIter] end_ 
    # @return [nil] 
    def invalidate_cursors(start, end_)
      Gtk.gtk_text_layout_invalidate_cursors(self, start, end_)
    end
    
    # @param [GtkTextLine] line 
    # @param [GtkTextLineData] line_data 
    # @return [nil] 
    def free_line_data(line, line_data)
      Gtk.gtk_text_layout_free_line_data(self, line, line_data)
    end
    
    # @return [Integer] 
    def is_valid()
      Gtk.gtk_text_layout_is_valid(self)
    end
    
    # @param [GtkTextIter] anchor_line 
    # @param [Integer] y0 
    # @param [Integer] y1 
    # @return [nil] 
    def validate_yrange(anchor_line, y0, y1)
      Gtk.gtk_text_layout_validate_yrange(self, anchor_line, y0, y1)
    end
    
    # @param [Integer] max_pixels 
    # @return [nil] 
    def validate(max_pixels)
      Gtk.gtk_text_layout_validate(self, max_pixels)
    end
    
    # @param [GtkTextLine] line 
    # @param [GtkTextLineData] line_data 
    # @return [GtkTextLineData] 
    def wrap(line, line_data)
      GtkTextLineData.new Gtk.gtk_text_layout_wrap(self, line, line_data)
    end
    
    # @param [Integer] y 
    # @param [Integer] old_height 
    # @param [Integer] new_height 
    # @return [nil] 
    def changed(y, old_height, new_height)
      Gtk.gtk_text_layout_changed(self, y, old_height, new_height)
    end
    
    # @param [Integer] y 
    # @param [Integer] old_height 
    # @param [Integer] new_height 
    # @return [nil] 
    def cursors_changed(y, old_height, new_height)
      Gtk.gtk_text_layout_cursors_changed(self, y, old_height, new_height)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*GdkRectangle)] rect 
    # @return [nil] 
    def get_iter_location(iter, rect)
      Gtk.gtk_text_layout_get_iter_location(self, iter, rect)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*Gint)] y 
    # @param [FFI::Pointer(*Gint)] height 
    # @return [nil] 
    def get_line_yrange(iter, y, height)
      Gtk.gtk_text_layout_get_line_yrange(self, iter, y, height)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*Gint)] x 
    # @param [FFI::Pointer(*Gint)] width 
    # @return [nil] 
    def get_line_xrange(iter, x, width)
      Gtk.gtk_text_layout_get_line_xrange(self, iter, x, width)
    end
    
    # @param [GtkTextIter] iter 
    # @param [FFI::Pointer(*GdkRectangle)] strong_pos 
    # @param [FFI::Pointer(*GdkRectangle)] weak_pos 
    # @return [nil] 
    def get_cursor_locations(iter, strong_pos, weak_pos)
      Gtk.gtk_text_layout_get_cursor_locations(self, iter, strong_pos, weak_pos)
    end
    
    # @param [FFI::Pointer(*GdkRectangle)] pos 
    # @return [Integer] 
    def get_block_cursor(pos)
      Gtk.gtk_text_layout_get_block_cursor(self, pos)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] top 
    # @param [Integer] bottom 
    # @return [Integer] 
    def clamp_iter_to_vrange(iter, top, bottom)
      Gtk.gtk_text_layout_clamp_iter_to_vrange(self, iter, top, bottom)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] direction 
    # @return [Integer] 
    def move_iter_to_line_end(iter, direction)
      Gtk.gtk_text_layout_move_iter_to_line_end(self, iter, direction)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def move_iter_to_previous_line(iter)
      Gtk.gtk_text_layout_move_iter_to_previous_line(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def move_iter_to_next_line(iter)
      Gtk.gtk_text_layout_move_iter_to_next_line(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] x 
    # @return [nil] 
    def move_iter_to_x(iter, x)
      Gtk.gtk_text_layout_move_iter_to_x(self, iter, x)
    end
    
    # @param [GtkTextIter] iter 
    # @param [Integer] count 
    # @return [Integer] 
    def move_iter_visually(iter, count)
      Gtk.gtk_text_layout_move_iter_visually(self, iter, count)
    end
    
    # @param [GtkTextIter] iter 
    # @return [Integer] 
    def iter_starts_line(iter)
      Gtk.gtk_text_layout_iter_starts_line(self, iter)
    end
    
    # @param [GtkTextIter] iter 
    # @param [GtkTextLine] line 
    # @param [Integer] byte_offset 
    # @return [nil] 
    def get_iter_at_line(iter, line, byte_offset)
      Gtk.gtk_text_layout_get_iter_at_line(self, iter, line, byte_offset)
    end
    
    # @return [nil] 
    def spew()
      Gtk.gtk_text_layout_spew(self)
    end
    
    # @param [GtkWidget] widget 
    # @param [FFI::Pointer(*CairoT)] cr 
    # @param [FFI::Pointer(**GList)] widgets 
    # @return [nil] 
    def draw(widget, cr, widgets)
      Gtk.gtk_text_layout_draw(self, widget, cr, widgets)
    end
  end
  
  class GtkTextLayout < FFI::Struct
    include GtkTextLayoutWrappers
    layout :parent_instance, :char,
           :screen_width, :int,
           :width, :int,
           :height, :int,
           :buffer, GtkTextBuffer,
           :default_style, GtkTextAttributes,
           :ltr_context, :pointer,
           :rtl_context, :pointer,
           :one_style_cache, GtkTextAttributes,
           :one_display_cache, :pointer,
           :wrap_loop_count, :int,
           :cursor_visible, :uint,
           :cursor_direction, :uint,
           :keyboard_direction, :uint,
           :preedit_string, :string,
           :preedit_attrs, :pointer,
           :preedit_len, :int,
           :preedit_cursor, :int,
           :overwrite_mode, :uint
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :parent_class ::
  #   (unknown) 
  # :invalidated ::
  #   (FFI::Pointer(*)) Some portion of the layout was invalidated
  # :changed ::
  #   (FFI::Pointer(*)) A range of the layout changed appearance and possibly height
  # :wrap ::
  #   (FFI::Pointer(*)) may be NULL
  # :get_log_attrs ::
  #   (FFI::Pointer(*)) 
  # :invalidate ::
  #   (FFI::Pointer(*)) 
  # :free_line_data ::
  #   (FFI::Pointer(*)) 
  # :allocate_child ::
  #   (FFI::Pointer(*)) 
  # :invalidate_cursors ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved1 ::
  #   (FFI::Pointer(*)) Padding for future expansion
  # :gtk_reserved2 ::
  #   (FFI::Pointer(*)) 
  # :gtk_reserved3 ::
  #   (FFI::Pointer(*)) 
  class GtkTextLayoutClass < FFI::Struct
    layout :parent_class, :char,
           :invalidated, :pointer,
           :changed, :pointer,
           :wrap, :pointer,
           :get_log_attrs, :pointer,
           :invalidate, :pointer,
           :free_line_data, :pointer,
           :allocate_child, :pointer,
           :invalidate_cursors, :pointer,
           :gtk_reserved1, :pointer,
           :gtk_reserved2, :pointer,
           :gtk_reserved3, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :attr ::
  #   (unknown) 
  # :appearance ::
  #   (GtkTextAppearance) 
  class GtkTextAttrAppearance < FFI::Struct
    layout :attr, :char,
           :appearance, GtkTextAppearance.by_value
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :layout ::
  #   (FFI::Pointer(*PangoLayout)) 
  # :cursors ::
  #   (FFI::Pointer(*GArray)) indexes of cursors in the PangoLayout
  # :direction ::
  #   (Symbol from _enum_gtk_text_direction_) 
  # :width ::
  #   (Integer) Width of layout
  # :total_width ::
  #   (Integer) width - margins, if no width set on layout, if width set on layout, -1
  # :height ::
  #   (Integer) 
  # :x_offset ::
  #   (Integer) Amount layout is shifted from left edge - this is the left margin
  #   plus any other factors, such as alignment or indentation.
  # :left_margin ::
  #   (Integer) 
  # :right_margin ::
  #   (Integer) 
  # :top_margin ::
  #   (Integer) 
  # :bottom_margin ::
  #   (Integer) 
  # :insert_index ::
  #   (Integer) Byte index of insert cursor within para or -1
  # :line ::
  #   (GtkTextLine) 
  # :pg_bg_color ::
  #   (FFI::Pointer(*GdkColor)) 
  # :block_cursor ::
  #   (unknown) 
  # :cursors_invalid ::
  #   (Integer) 
  # :has_block_cursor ::
  #   (Integer) 
  # :cursor_at_line_end ::
  #   (Integer) 
  # :size_only ::
  #   (Integer) 
  # :pg_bg_rgba ::
  #   (FFI::Pointer(*GdkRGBA)) 
  class GtkTextLineDisplay < FFI::Struct
    layout :layout, :pointer,
           :cursors, :pointer,
           :direction, :gtk_text_direction,
           :width, :int,
           :total_width, :int,
           :height, :int,
           :x_offset, :int,
           :left_margin, :int,
           :right_margin, :int,
           :top_margin, :int,
           :bottom_margin, :int,
           :insert_index, :int,
           :line, GtkTextLine,
           :pg_bg_color, :pointer,
           :block_cursor, :char,
           :cursors_invalid, :uint,
           :has_block_cursor, :uint,
           :cursor_at_line_end, :uint,
           :size_only, :uint,
           :pg_bg_rgba, :pointer
  end
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_type()
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_get_type, :gtk_text_layout_get_type, [], :uint
  
  # (Not documented)
  # 
  # @method gtk_text_layout_new()
  # @return [GtkTextLayout] 
  # @scope class
  attach_function :gtk_text_layout_new, :gtk_text_layout_new, [], GtkTextLayout
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_buffer(layout, buffer)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextBuffer] buffer 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_buffer, :gtk_text_layout_set_buffer, [GtkTextLayout, GtkTextBuffer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_buffer(layout)
  # @param [GtkTextLayout] layout 
  # @return [GtkTextBuffer] 
  # @scope class
  attach_function :gtk_text_layout_get_buffer, :gtk_text_layout_get_buffer, [GtkTextLayout], GtkTextBuffer
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_default_style(layout, values)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextAttributes] values 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_default_style, :gtk_text_layout_set_default_style, [GtkTextLayout, GtkTextAttributes], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_contexts(layout, ltr_context, rtl_context)
  # @param [GtkTextLayout] layout 
  # @param [FFI::Pointer(*PangoContext)] ltr_context 
  # @param [FFI::Pointer(*PangoContext)] rtl_context 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_contexts, :gtk_text_layout_set_contexts, [GtkTextLayout, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_cursor_direction(layout, direction)
  # @param [GtkTextLayout] layout 
  # @param [Symbol from _enum_gtk_text_direction_] direction 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_cursor_direction, :gtk_text_layout_set_cursor_direction, [GtkTextLayout, :gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_overwrite_mode(layout, overwrite)
  # @param [GtkTextLayout] layout 
  # @param [Integer] overwrite 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_overwrite_mode, :gtk_text_layout_set_overwrite_mode, [GtkTextLayout, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_keyboard_direction(layout, keyboard_dir)
  # @param [GtkTextLayout] layout 
  # @param [Symbol from _enum_gtk_text_direction_] keyboard_dir 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_keyboard_direction, :gtk_text_layout_set_keyboard_direction, [GtkTextLayout, :gtk_text_direction], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_default_style_changed(layout)
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_default_style_changed, :gtk_text_layout_default_style_changed, [GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_screen_width(layout, width)
  # @param [GtkTextLayout] layout 
  # @param [Integer] width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_screen_width, :gtk_text_layout_set_screen_width, [GtkTextLayout, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_preedit_string(layout, preedit_string, preedit_attrs, cursor_pos)
  # @param [GtkTextLayout] layout 
  # @param [String] preedit_string 
  # @param [FFI::Pointer(*PangoAttrList)] preedit_attrs 
  # @param [Integer] cursor_pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_preedit_string, :gtk_text_layout_set_preedit_string, [GtkTextLayout, :string, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_set_cursor_visible(layout, cursor_visible)
  # @param [GtkTextLayout] layout 
  # @param [Integer] cursor_visible 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_set_cursor_visible, :gtk_text_layout_set_cursor_visible, [GtkTextLayout, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_cursor_visible(layout)
  # @param [GtkTextLayout] layout 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_get_cursor_visible, :gtk_text_layout_get_cursor_visible, [GtkTextLayout], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_size(layout, width, height)
  # @param [GtkTextLayout] layout 
  # @param [FFI::Pointer(*Gint)] width 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_size, :gtk_text_layout_get_size, [GtkTextLayout, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_lines(layout, top_y, bottom_y, first_line_y)
  # @param [GtkTextLayout] layout 
  # @param [Integer] top_y 
  # @param [Integer] bottom_y 
  # @param [FFI::Pointer(*Gint)] first_line_y 
  # @return [FFI::Pointer(*GSList)] 
  # @scope class
  attach_function :gtk_text_layout_get_lines, :gtk_text_layout_get_lines, [GtkTextLayout, :int, :int, :pointer], :pointer
  
  # (Not documented)
  # 
  # @method gtk_text_layout_wrap_loop_start(layout)
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_wrap_loop_start, :gtk_text_layout_wrap_loop_start, [GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_wrap_loop_end(layout)
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_wrap_loop_end, :gtk_text_layout_wrap_loop_end, [GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_line_display(layout, line, size_only)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextLine] line 
  # @param [Integer] size_only 
  # @return [GtkTextLineDisplay] 
  # @scope class
  attach_function :gtk_text_layout_get_line_display, :gtk_text_layout_get_line_display, [GtkTextLayout, GtkTextLine, :int], GtkTextLineDisplay
  
  # (Not documented)
  # 
  # @method gtk_text_layout_free_line_display(layout, display)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextLineDisplay] display 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_free_line_display, :gtk_text_layout_free_line_display, [GtkTextLayout, GtkTextLineDisplay], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_line_at_y(layout, target_iter, y, line_top)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] target_iter 
  # @param [Integer] y 
  # @param [FFI::Pointer(*Gint)] line_top 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_line_at_y, :gtk_text_layout_get_line_at_y, [GtkTextLayout, GtkTextIter, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_iter_at_pixel(layout, iter, x, y)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_iter_at_pixel, :gtk_text_layout_get_iter_at_pixel, [GtkTextLayout, GtkTextIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_iter_at_position(layout, iter, trailing, x, y)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Gint)] trailing 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_iter_at_position, :gtk_text_layout_get_iter_at_position, [GtkTextLayout, GtkTextIter, :pointer, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_invalidate(layout, start, end_)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_invalidate, :gtk_text_layout_invalidate, [GtkTextLayout, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_invalidate_cursors(layout, start, end_)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] start 
  # @param [GtkTextIter] end_ 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_invalidate_cursors, :gtk_text_layout_invalidate_cursors, [GtkTextLayout, GtkTextIter, GtkTextIter], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_free_line_data(layout, line, line_data)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextLine] line 
  # @param [GtkTextLineData] line_data 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_free_line_data, :gtk_text_layout_free_line_data, [GtkTextLayout, GtkTextLine, GtkTextLineData], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_is_valid(layout)
  # @param [GtkTextLayout] layout 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_is_valid, :gtk_text_layout_is_valid, [GtkTextLayout], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_validate_yrange(layout, anchor_line, y0, y1)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] anchor_line 
  # @param [Integer] y0 
  # @param [Integer] y1 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_validate_yrange, :gtk_text_layout_validate_yrange, [GtkTextLayout, GtkTextIter, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_validate(layout, max_pixels)
  # @param [GtkTextLayout] layout 
  # @param [Integer] max_pixels 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_validate, :gtk_text_layout_validate, [GtkTextLayout, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_wrap(layout, line, line_data)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextLine] line 
  # @param [GtkTextLineData] line_data 
  # @return [GtkTextLineData] 
  # @scope class
  attach_function :gtk_text_layout_wrap, :gtk_text_layout_wrap, [GtkTextLayout, GtkTextLine, GtkTextLineData], GtkTextLineData
  
  # (Not documented)
  # 
  # @method gtk_text_layout_changed(layout, y, old_height, new_height)
  # @param [GtkTextLayout] layout 
  # @param [Integer] y 
  # @param [Integer] old_height 
  # @param [Integer] new_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_changed, :gtk_text_layout_changed, [GtkTextLayout, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_cursors_changed(layout, y, old_height, new_height)
  # @param [GtkTextLayout] layout 
  # @param [Integer] y 
  # @param [Integer] old_height 
  # @param [Integer] new_height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_cursors_changed, :gtk_text_layout_cursors_changed, [GtkTextLayout, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_iter_location(layout, iter, rect)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*GdkRectangle)] rect 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_iter_location, :gtk_text_layout_get_iter_location, [GtkTextLayout, GtkTextIter, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_line_yrange(layout, iter, y, height)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Gint)] y 
  # @param [FFI::Pointer(*Gint)] height 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_line_yrange, :gtk_text_layout_get_line_yrange, [GtkTextLayout, GtkTextIter, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_line_xrange(layout, iter, x, width)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*Gint)] x 
  # @param [FFI::Pointer(*Gint)] width 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_line_xrange, :_gtk_text_layout_get_line_xrange, [GtkTextLayout, GtkTextIter, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_cursor_locations(layout, iter, strong_pos, weak_pos)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [FFI::Pointer(*GdkRectangle)] strong_pos 
  # @param [FFI::Pointer(*GdkRectangle)] weak_pos 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_cursor_locations, :gtk_text_layout_get_cursor_locations, [GtkTextLayout, GtkTextIter, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_block_cursor(layout, pos)
  # @param [GtkTextLayout] layout 
  # @param [FFI::Pointer(*GdkRectangle)] pos 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_get_block_cursor, :_gtk_text_layout_get_block_cursor, [GtkTextLayout, :pointer], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_clamp_iter_to_vrange(layout, iter, top, bottom)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [Integer] top 
  # @param [Integer] bottom 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_clamp_iter_to_vrange, :gtk_text_layout_clamp_iter_to_vrange, [GtkTextLayout, GtkTextIter, :int, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_move_iter_to_line_end(layout, iter, direction)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [Integer] direction 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_move_iter_to_line_end, :gtk_text_layout_move_iter_to_line_end, [GtkTextLayout, GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_move_iter_to_previous_line(layout, iter)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_move_iter_to_previous_line, :gtk_text_layout_move_iter_to_previous_line, [GtkTextLayout, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_move_iter_to_next_line(layout, iter)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_move_iter_to_next_line, :gtk_text_layout_move_iter_to_next_line, [GtkTextLayout, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_move_iter_to_x(layout, iter, x)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [Integer] x 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_move_iter_to_x, :gtk_text_layout_move_iter_to_x, [GtkTextLayout, GtkTextIter, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_move_iter_visually(layout, iter, count)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [Integer] count 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_move_iter_visually, :gtk_text_layout_move_iter_visually, [GtkTextLayout, GtkTextIter, :int], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_iter_starts_line(layout, iter)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @return [Integer] 
  # @scope class
  attach_function :gtk_text_layout_iter_starts_line, :gtk_text_layout_iter_starts_line, [GtkTextLayout, GtkTextIter], :int
  
  # (Not documented)
  # 
  # @method gtk_text_layout_get_iter_at_line(layout, iter, line, byte_offset)
  # @param [GtkTextLayout] layout 
  # @param [GtkTextIter] iter 
  # @param [GtkTextLine] line 
  # @param [Integer] byte_offset 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_get_iter_at_line, :gtk_text_layout_get_iter_at_line, [GtkTextLayout, GtkTextIter, GtkTextLine, :int], :void
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_register_child(anchor, child, layout)
  # @param [GtkTextChildAnchor] anchor 
  # @param [GtkWidget] child 
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_child_anchor_register_child, :gtk_text_child_anchor_register_child, [GtkTextChildAnchor, GtkWidget, GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_unregister_child(anchor, child)
  # @param [GtkTextChildAnchor] anchor 
  # @param [GtkWidget] child 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_child_anchor_unregister_child, :gtk_text_child_anchor_unregister_child, [GtkTextChildAnchor, GtkWidget], :void
  
  # (Not documented)
  # 
  # @method gtk_text_child_anchor_queue_resize(anchor, layout)
  # @param [GtkTextChildAnchor] anchor 
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_child_anchor_queue_resize, :gtk_text_child_anchor_queue_resize, [GtkTextChildAnchor, GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_anchored_child_set_layout(child, layout)
  # @param [GtkWidget] child 
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_anchored_child_set_layout, :gtk_text_anchored_child_set_layout, [GtkWidget, GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_spew(layout)
  # @param [GtkTextLayout] layout 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_spew, :gtk_text_layout_spew, [GtkTextLayout], :void
  
  # (Not documented)
  # 
  # @method gtk_text_layout_draw(layout, widget, cr, widgets)
  # @param [GtkTextLayout] layout 
  # @param [GtkWidget] widget 
  # @param [FFI::Pointer(*CairoT)] cr 
  # @param [FFI::Pointer(**GList)] widgets 
  # @return [nil] 
  # @scope class
  attach_function :gtk_text_layout_draw, :gtk_text_layout_draw, [GtkTextLayout, GtkWidget, :pointer, :pointer], :void
  
end
